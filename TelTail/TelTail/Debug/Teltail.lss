
Teltail.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000157b8  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000014c  20000000  000177b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cfc  20000150  00017910  00020150  2**4
                  ALLOC
  3 .stack        00002004  20000e4c  0001860c  00020150  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  6 .debug_info   00050eee  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004fb7  00000000  00000000  000710bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006137  00000000  00000000  00076072  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001090  00000000  00000000  0007c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f30  00000000  00000000  0007d239  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009c14  00000000  00000000  0007e169  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014a3f  00000000  00000000  00087d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090d11  00000000  00000000  0009c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000416c  00000000  00000000  0012d4d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	50 2e 00 20 39 89 00 00 31 8a 00 00 31 8a 00 00     P.. 9...1...1...
	...
    202c:	31 8a 00 00 00 00 00 00 00 00 00 00 31 8a 00 00     1...........1...
    203c:	31 8a 00 00 31 8a 00 00 31 8a 00 00 31 8a 00 00     1...1...1...1...
    204c:	31 8a 00 00 31 8a 00 00 31 8a 00 00 0d 29 00 00     1...1...1....)..
    205c:	31 8a 00 00 31 8a 00 00 59 70 00 00 71 70 00 00     1...1...Yp..qp..
    206c:	89 70 00 00 a1 70 00 00 b9 70 00 00 d1 70 00 00     .p...p...p...p..
    207c:	5d 30 00 00 71 30 00 00 85 30 00 00 15 31 00 00     ]0..q0...0...1..
    208c:	29 31 00 00 3d 31 00 00 00 00 00 00 00 00 00 00     )1..=1..........
    209c:	31 8a 00 00 31 8a 00 00 31 8a 00 00 31 8a 00 00     1...1...1...1...
    20ac:	31 8a 00 00 00 00 00 00                             1.......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000150 	.word	0x20000150
    20d4:	00000000 	.word	0x00000000
    20d8:	000177b8 	.word	0x000177b8

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000154 	.word	0x20000154
    2108:	000177b8 	.word	0x000177b8
    210c:	000177b8 	.word	0x000177b8
    2110:	00000000 	.word	0x00000000

00002114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2114:	b580      	push	{r7, lr}
    2116:	b082      	sub	sp, #8
    2118:	af00      	add	r7, sp, #0
    211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2200      	movs	r2, #0
    2120:	701a      	strb	r2, [r3, #0]
}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	46bd      	mov	sp, r7
    2126:	b002      	add	sp, #8
    2128:	bd80      	pop	{r7, pc}
	...

0000212c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    212c:	b580      	push	{r7, lr}
    212e:	b082      	sub	sp, #8
    2130:	af00      	add	r7, sp, #0
    2132:	0002      	movs	r2, r0
    2134:	6039      	str	r1, [r7, #0]
    2136:	1dfb      	adds	r3, r7, #7
    2138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    213a:	1dfb      	adds	r3, r7, #7
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	2b01      	cmp	r3, #1
    2140:	d00a      	beq.n	2158 <system_apb_clock_set_mask+0x2c>
    2142:	2b02      	cmp	r3, #2
    2144:	d00f      	beq.n	2166 <system_apb_clock_set_mask+0x3a>
    2146:	2b00      	cmp	r3, #0
    2148:	d114      	bne.n	2174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    214a:	4b0e      	ldr	r3, [pc, #56]	; (2184 <system_apb_clock_set_mask+0x58>)
    214c:	4a0d      	ldr	r2, [pc, #52]	; (2184 <system_apb_clock_set_mask+0x58>)
    214e:	6991      	ldr	r1, [r2, #24]
    2150:	683a      	ldr	r2, [r7, #0]
    2152:	430a      	orrs	r2, r1
    2154:	619a      	str	r2, [r3, #24]
			break;
    2156:	e00f      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2158:	4b0a      	ldr	r3, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215a:	4a0a      	ldr	r2, [pc, #40]	; (2184 <system_apb_clock_set_mask+0x58>)
    215c:	69d1      	ldr	r1, [r2, #28]
    215e:	683a      	ldr	r2, [r7, #0]
    2160:	430a      	orrs	r2, r1
    2162:	61da      	str	r2, [r3, #28]
			break;
    2164:	e008      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2166:	4b07      	ldr	r3, [pc, #28]	; (2184 <system_apb_clock_set_mask+0x58>)
    2168:	4a06      	ldr	r2, [pc, #24]	; (2184 <system_apb_clock_set_mask+0x58>)
    216a:	6a11      	ldr	r1, [r2, #32]
    216c:	683a      	ldr	r2, [r7, #0]
    216e:	430a      	orrs	r2, r1
    2170:	621a      	str	r2, [r3, #32]
			break;
    2172:	e001      	b.n	2178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2174:	2317      	movs	r3, #23
    2176:	e000      	b.n	217a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2178:	2300      	movs	r3, #0
}
    217a:	0018      	movs	r0, r3
    217c:	46bd      	mov	sp, r7
    217e:	b002      	add	sp, #8
    2180:	bd80      	pop	{r7, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	40000400 	.word	0x40000400

00002188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	2200      	movs	r2, #0
    219a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	2201      	movs	r2, #1
    21a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	2200      	movs	r2, #0
    21a6:	70da      	strb	r2, [r3, #3]
}
    21a8:	46c0      	nop			; (mov r8, r8)
    21aa:	46bd      	mov	sp, r7
    21ac:	b002      	add	sp, #8
    21ae:	bd80      	pop	{r7, pc}

000021b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b082      	sub	sp, #8
    21b4:	af00      	add	r7, sp, #0
    21b6:	0002      	movs	r2, r0
    21b8:	1dfb      	adds	r3, r7, #7
    21ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    21bc:	1dfb      	adds	r3, r7, #7
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d002      	beq.n	21ca <system_voltage_reference_enable+0x1a>
    21c4:	2b01      	cmp	r3, #1
    21c6:	d007      	beq.n	21d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    21c8:	e00d      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    21ca:	4b08      	ldr	r3, [pc, #32]	; (21ec <system_voltage_reference_enable+0x3c>)
    21cc:	4a07      	ldr	r2, [pc, #28]	; (21ec <system_voltage_reference_enable+0x3c>)
    21ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21d0:	2102      	movs	r1, #2
    21d2:	430a      	orrs	r2, r1
    21d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21d6:	e006      	b.n	21e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    21d8:	4b04      	ldr	r3, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21da:	4a04      	ldr	r2, [pc, #16]	; (21ec <system_voltage_reference_enable+0x3c>)
    21dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
    21de:	2104      	movs	r1, #4
    21e0:	430a      	orrs	r2, r1
    21e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    21e4:	46c0      	nop			; (mov r8, r8)
	}
}
    21e6:	46bd      	mov	sp, r7
    21e8:	b002      	add	sp, #8
    21ea:	bd80      	pop	{r7, pc}
    21ec:	40000800 	.word	0x40000800

000021f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	b084      	sub	sp, #16
    21f4:	af00      	add	r7, sp, #0
    21f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	681b      	ldr	r3, [r3, #0]
    21fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    21fe:	68fb      	ldr	r3, [r7, #12]
    2200:	7e5b      	ldrb	r3, [r3, #25]
    2202:	b2db      	uxtb	r3, r3
    2204:	b25b      	sxtb	r3, r3
    2206:	2b00      	cmp	r3, #0
    2208:	da01      	bge.n	220e <adc_is_syncing+0x1e>
		return true;
    220a:	2301      	movs	r3, #1
    220c:	e000      	b.n	2210 <adc_is_syncing+0x20>
	}

	return false;
    220e:	2300      	movs	r3, #0
}
    2210:	0018      	movs	r0, r3
    2212:	46bd      	mov	sp, r7
    2214:	b004      	add	sp, #16
    2216:	bd80      	pop	{r7, pc}

00002218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2218:	b580      	push	{r7, lr}
    221a:	b082      	sub	sp, #8
    221c:	af00      	add	r7, sp, #0
    221e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	2200      	movs	r2, #0
    2224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	2200      	movs	r2, #0
    222a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	2200      	movs	r2, #0
    2230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2200      	movs	r2, #0
    2236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	2200      	movs	r2, #0
    223c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	2200      	movs	r2, #0
    2242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	2200      	movs	r2, #0
    2248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	2200      	movs	r2, #0
    224e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	2200      	movs	r2, #0
    2254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	22c0      	movs	r2, #192	; 0xc0
    225a:	0152      	lsls	r2, r2, #5
    225c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	2200      	movs	r2, #0
    2262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	2200      	movs	r2, #0
    2268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    226a:	687b      	ldr	r3, [r7, #4]
    226c:	2200      	movs	r2, #0
    226e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	2200      	movs	r2, #0
    2274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	2200      	movs	r2, #0
    227a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	222a      	movs	r2, #42	; 0x2a
    2280:	2100      	movs	r1, #0
    2282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	2200      	movs	r2, #0
    2288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	2200      	movs	r2, #0
    228e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	2224      	movs	r2, #36	; 0x24
    2294:	2100      	movs	r1, #0
    2296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	2200      	movs	r2, #0
    229c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	2200      	movs	r2, #0
    22a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	2200      	movs	r2, #0
    22a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	222b      	movs	r2, #43	; 0x2b
    22ae:	2100      	movs	r1, #0
    22b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	222c      	movs	r2, #44	; 0x2c
    22b6:	2100      	movs	r1, #0
    22b8:	5499      	strb	r1, [r3, r2]
}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	46bd      	mov	sp, r7
    22be:	b002      	add	sp, #8
    22c0:	bd80      	pop	{r7, pc}
	...

000022c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b098      	sub	sp, #96	; 0x60
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    22cc:	230c      	movs	r3, #12
    22ce:	18fa      	adds	r2, r7, r3
    22d0:	4b15      	ldr	r3, [pc, #84]	; (2328 <_adc_configure_ain_pin+0x64>)
    22d2:	0010      	movs	r0, r2
    22d4:	0019      	movs	r1, r3
    22d6:	2350      	movs	r3, #80	; 0x50
    22d8:	001a      	movs	r2, r3
    22da:	4b14      	ldr	r3, [pc, #80]	; (232c <_adc_configure_ain_pin+0x68>)
    22dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    22de:	4b14      	ldr	r3, [pc, #80]	; (2330 <_adc_configure_ain_pin+0x6c>)
    22e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	2b13      	cmp	r3, #19
    22e6:	d81a      	bhi.n	231e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    22e8:	230c      	movs	r3, #12
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	687a      	ldr	r2, [r7, #4]
    22ee:	0092      	lsls	r2, r2, #2
    22f0:	58d3      	ldr	r3, [r2, r3]
    22f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    22f4:	2308      	movs	r3, #8
    22f6:	18fb      	adds	r3, r7, r3
    22f8:	0018      	movs	r0, r3
    22fa:	4b0e      	ldr	r3, [pc, #56]	; (2334 <_adc_configure_ain_pin+0x70>)
    22fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    22fe:	2308      	movs	r3, #8
    2300:	18fb      	adds	r3, r7, r3
    2302:	2200      	movs	r2, #0
    2304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    2306:	2308      	movs	r3, #8
    2308:	18fb      	adds	r3, r7, r3
    230a:	2201      	movs	r2, #1
    230c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2310:	b2db      	uxtb	r3, r3
    2312:	2208      	movs	r2, #8
    2314:	18ba      	adds	r2, r7, r2
    2316:	0011      	movs	r1, r2
    2318:	0018      	movs	r0, r3
    231a:	4b07      	ldr	r3, [pc, #28]	; (2338 <_adc_configure_ain_pin+0x74>)
    231c:	4798      	blx	r3
	}
}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	46bd      	mov	sp, r7
    2322:	b018      	add	sp, #96	; 0x60
    2324:	bd80      	pop	{r7, pc}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	00016cf0 	.word	0x00016cf0
    232c:	00016ccd 	.word	0x00016ccd
    2330:	0000ffff 	.word	0x0000ffff
    2334:	00002189 	.word	0x00002189
    2338:	00007e1d 	.word	0x00007e1d

0000233c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    233c:	b5f0      	push	{r4, r5, r6, r7, lr}
    233e:	b089      	sub	sp, #36	; 0x24
    2340:	af00      	add	r7, sp, #0
    2342:	6078      	str	r0, [r7, #4]
    2344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    2346:	231f      	movs	r3, #31
    2348:	18fb      	adds	r3, r7, r3
    234a:	2200      	movs	r2, #0
    234c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    234e:	2310      	movs	r3, #16
    2350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2352:	2317      	movs	r3, #23
    2354:	18fb      	adds	r3, r7, r3
    2356:	2200      	movs	r2, #0
    2358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    235a:	687b      	ldr	r3, [r7, #4]
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2360:	230c      	movs	r3, #12
    2362:	18fb      	adds	r3, r7, r3
    2364:	0018      	movs	r0, r3
    2366:	4bce      	ldr	r3, [pc, #824]	; (26a0 <_adc_set_config+0x364>)
    2368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    236a:	683b      	ldr	r3, [r7, #0]
    236c:	781a      	ldrb	r2, [r3, #0]
    236e:	230c      	movs	r3, #12
    2370:	18fb      	adds	r3, r7, r3
    2372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2374:	230c      	movs	r3, #12
    2376:	18fb      	adds	r3, r7, r3
    2378:	0019      	movs	r1, r3
    237a:	201e      	movs	r0, #30
    237c:	4bc9      	ldr	r3, [pc, #804]	; (26a4 <_adc_set_config+0x368>)
    237e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2380:	201e      	movs	r0, #30
    2382:	4bc9      	ldr	r3, [pc, #804]	; (26a8 <_adc_set_config+0x36c>)
    2384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    2386:	683b      	ldr	r3, [r7, #0]
    2388:	222c      	movs	r2, #44	; 0x2c
    238a:	5c9b      	ldrb	r3, [r3, r2]
    238c:	2b00      	cmp	r3, #0
    238e:	d040      	beq.n	2412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2390:	2316      	movs	r3, #22
    2392:	18fb      	adds	r3, r7, r3
    2394:	683a      	ldr	r2, [r7, #0]
    2396:	212b      	movs	r1, #43	; 0x2b
    2398:	5c52      	ldrb	r2, [r2, r1]
    239a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    23a0:	2315      	movs	r3, #21
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	2216      	movs	r2, #22
    23a6:	18ba      	adds	r2, r7, r2
    23a8:	7812      	ldrb	r2, [r2, #0]
    23aa:	188a      	adds	r2, r1, r2
    23ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    23ae:	683b      	ldr	r3, [r7, #0]
    23b0:	222c      	movs	r2, #44	; 0x2c
    23b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    23b4:	230f      	movs	r3, #15
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	2215      	movs	r2, #21
    23ba:	18ba      	adds	r2, r7, r2
    23bc:	7812      	ldrb	r2, [r2, #0]
    23be:	188a      	adds	r2, r1, r2
    23c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    23c2:	e018      	b.n	23f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    23c4:	2316      	movs	r3, #22
    23c6:	18fb      	adds	r3, r7, r3
    23c8:	781b      	ldrb	r3, [r3, #0]
    23ca:	220f      	movs	r2, #15
    23cc:	4013      	ands	r3, r2
    23ce:	683a      	ldr	r2, [r7, #0]
    23d0:	7b12      	ldrb	r2, [r2, #12]
    23d2:	189b      	adds	r3, r3, r2
    23d4:	0018      	movs	r0, r3
    23d6:	4bb5      	ldr	r3, [pc, #724]	; (26ac <_adc_set_config+0x370>)
    23d8:	4798      	blx	r3
			start_pin++;
    23da:	2315      	movs	r3, #21
    23dc:	18fb      	adds	r3, r7, r3
    23de:	781a      	ldrb	r2, [r3, #0]
    23e0:	2315      	movs	r3, #21
    23e2:	18fb      	adds	r3, r7, r3
    23e4:	3201      	adds	r2, #1
    23e6:	701a      	strb	r2, [r3, #0]
			offset++;
    23e8:	2316      	movs	r3, #22
    23ea:	18fb      	adds	r3, r7, r3
    23ec:	781a      	ldrb	r2, [r3, #0]
    23ee:	2316      	movs	r3, #22
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	3201      	adds	r2, #1
    23f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    23f6:	2315      	movs	r3, #21
    23f8:	18fa      	adds	r2, r7, r3
    23fa:	230f      	movs	r3, #15
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	7812      	ldrb	r2, [r2, #0]
    2400:	781b      	ldrb	r3, [r3, #0]
    2402:	429a      	cmp	r2, r3
    2404:	d3de      	bcc.n	23c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    2406:	683b      	ldr	r3, [r7, #0]
    2408:	89db      	ldrh	r3, [r3, #14]
    240a:	0018      	movs	r0, r3
    240c:	4ba7      	ldr	r3, [pc, #668]	; (26ac <_adc_set_config+0x370>)
    240e:	4798      	blx	r3
    2410:	e009      	b.n	2426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    2412:	683b      	ldr	r3, [r7, #0]
    2414:	7b1b      	ldrb	r3, [r3, #12]
    2416:	0018      	movs	r0, r3
    2418:	4ba4      	ldr	r3, [pc, #656]	; (26ac <_adc_set_config+0x370>)
    241a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    241c:	683b      	ldr	r3, [r7, #0]
    241e:	89db      	ldrh	r3, [r3, #14]
    2420:	0018      	movs	r0, r3
    2422:	4ba2      	ldr	r3, [pc, #648]	; (26ac <_adc_set_config+0x370>)
    2424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2426:	683b      	ldr	r3, [r7, #0]
    2428:	7d5b      	ldrb	r3, [r3, #21]
    242a:	009b      	lsls	r3, r3, #2
    242c:	b2da      	uxtb	r2, r3
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2432:	683b      	ldr	r3, [r7, #0]
    2434:	7d9b      	ldrb	r3, [r3, #22]
    2436:	01db      	lsls	r3, r3, #7
    2438:	b25a      	sxtb	r2, r3
			(config->reference);
    243a:	683b      	ldr	r3, [r7, #0]
    243c:	785b      	ldrb	r3, [r3, #1]
    243e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2440:	4313      	orrs	r3, r2
    2442:	b25b      	sxtb	r3, r3
    2444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    244a:	683b      	ldr	r3, [r7, #0]
    244c:	791b      	ldrb	r3, [r3, #4]
    244e:	2b34      	cmp	r3, #52	; 0x34
    2450:	d846      	bhi.n	24e0 <_adc_set_config+0x1a4>
    2452:	009a      	lsls	r2, r3, #2
    2454:	4b96      	ldr	r3, [pc, #600]	; (26b0 <_adc_set_config+0x374>)
    2456:	18d3      	adds	r3, r2, r3
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    245c:	231f      	movs	r3, #31
    245e:	18fb      	adds	r3, r7, r3
    2460:	683a      	ldr	r2, [r7, #0]
    2462:	7c52      	ldrb	r2, [r2, #17]
    2464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    2466:	2317      	movs	r3, #23
    2468:	18fb      	adds	r3, r7, r3
    246a:	683a      	ldr	r2, [r7, #0]
    246c:	7c12      	ldrb	r2, [r2, #16]
    246e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2470:	2310      	movs	r3, #16
    2472:	61bb      	str	r3, [r7, #24]
		break;
    2474:	e036      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2476:	231f      	movs	r3, #31
    2478:	18fb      	adds	r3, r7, r3
    247a:	2201      	movs	r2, #1
    247c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    247e:	2317      	movs	r3, #23
    2480:	18fb      	adds	r3, r7, r3
    2482:	2202      	movs	r2, #2
    2484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2486:	2310      	movs	r3, #16
    2488:	61bb      	str	r3, [r7, #24]
		break;
    248a:	e02b      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    248c:	231f      	movs	r3, #31
    248e:	18fb      	adds	r3, r7, r3
    2490:	2202      	movs	r2, #2
    2492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2494:	2317      	movs	r3, #23
    2496:	18fb      	adds	r3, r7, r3
    2498:	2204      	movs	r2, #4
    249a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    249c:	2310      	movs	r3, #16
    249e:	61bb      	str	r3, [r7, #24]
		break;
    24a0:	e020      	b.n	24e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    24a2:	231f      	movs	r3, #31
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	2201      	movs	r2, #1
    24a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    24aa:	2317      	movs	r3, #23
    24ac:	18fb      	adds	r3, r7, r3
    24ae:	2206      	movs	r2, #6
    24b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24b2:	2310      	movs	r3, #16
    24b4:	61bb      	str	r3, [r7, #24]
		break;
    24b6:	e015      	b.n	24e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    24b8:	231f      	movs	r3, #31
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	2200      	movs	r2, #0
    24be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    24c0:	2317      	movs	r3, #23
    24c2:	18fb      	adds	r3, r7, r3
    24c4:	2208      	movs	r2, #8
    24c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    24c8:	2310      	movs	r3, #16
    24ca:	61bb      	str	r3, [r7, #24]
		break;
    24cc:	e00a      	b.n	24e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    24ce:	2330      	movs	r3, #48	; 0x30
    24d0:	61bb      	str	r3, [r7, #24]
		break;
    24d2:	e007      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    24d4:	2320      	movs	r3, #32
    24d6:	61bb      	str	r3, [r7, #24]
		break;
    24d8:	e004      	b.n	24e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    24da:	2300      	movs	r3, #0
    24dc:	61bb      	str	r3, [r7, #24]
		break;
    24de:	e001      	b.n	24e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    24e0:	2317      	movs	r3, #23
    24e2:	e1ae      	b.n	2842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    24e4:	231f      	movs	r3, #31
    24e6:	18fb      	adds	r3, r7, r3
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	011b      	lsls	r3, r3, #4
    24ec:	b2db      	uxtb	r3, r3
    24ee:	2270      	movs	r2, #112	; 0x70
    24f0:	4013      	ands	r3, r2
    24f2:	b2da      	uxtb	r2, r3
    24f4:	2317      	movs	r3, #23
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	4313      	orrs	r3, r2
    24fc:	b2da      	uxtb	r2, r3
    24fe:	693b      	ldr	r3, [r7, #16]
    2500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2502:	683b      	ldr	r3, [r7, #0]
    2504:	7ddb      	ldrb	r3, [r3, #23]
    2506:	2b3f      	cmp	r3, #63	; 0x3f
    2508:	d901      	bls.n	250e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    250a:	2317      	movs	r3, #23
    250c:	e199      	b.n	2842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    250e:	683b      	ldr	r3, [r7, #0]
    2510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    2512:	693b      	ldr	r3, [r7, #16]
    2514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	0018      	movs	r0, r3
    251c:	4b65      	ldr	r3, [pc, #404]	; (26b4 <_adc_set_config+0x378>)
    251e:	4798      	blx	r3
    2520:	1e03      	subs	r3, r0, #0
    2522:	d1f9      	bne.n	2518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    2524:	683b      	ldr	r3, [r7, #0]
    2526:	885a      	ldrh	r2, [r3, #2]
    2528:	69bb      	ldr	r3, [r7, #24]
    252a:	b29b      	uxth	r3, r3
    252c:	4313      	orrs	r3, r2
    252e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2530:	683b      	ldr	r3, [r7, #0]
    2532:	2124      	movs	r1, #36	; 0x24
    2534:	5c5b      	ldrb	r3, [r3, r1]
    2536:	b29b      	uxth	r3, r3
    2538:	00db      	lsls	r3, r3, #3
    253a:	b29b      	uxth	r3, r3
			resolution |
    253c:	4313      	orrs	r3, r2
    253e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2540:	683b      	ldr	r3, [r7, #0]
    2542:	7d1b      	ldrb	r3, [r3, #20]
    2544:	b29b      	uxth	r3, r3
    2546:	009b      	lsls	r3, r3, #2
    2548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    254a:	4313      	orrs	r3, r2
    254c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    254e:	683b      	ldr	r3, [r7, #0]
    2550:	7c9b      	ldrb	r3, [r3, #18]
    2552:	b29b      	uxth	r3, r3
    2554:	18db      	adds	r3, r3, r3
    2556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2558:	4313      	orrs	r3, r2
    255a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    255c:	683b      	ldr	r3, [r7, #0]
    255e:	7cdb      	ldrb	r3, [r3, #19]
    2560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2562:	4313      	orrs	r3, r2
    2564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    2566:	693b      	ldr	r3, [r7, #16]
    2568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    256a:	683b      	ldr	r3, [r7, #0]
    256c:	7e1b      	ldrb	r3, [r3, #24]
    256e:	2b00      	cmp	r3, #0
    2570:	d100      	bne.n	2574 <_adc_set_config+0x238>
    2572:	e0c4      	b.n	26fe <_adc_set_config+0x3c2>
		switch (resolution) {
    2574:	69bb      	ldr	r3, [r7, #24]
    2576:	2b10      	cmp	r3, #16
    2578:	d100      	bne.n	257c <_adc_set_config+0x240>
    257a:	e076      	b.n	266a <_adc_set_config+0x32e>
    257c:	d802      	bhi.n	2584 <_adc_set_config+0x248>
    257e:	2b00      	cmp	r3, #0
    2580:	d04d      	beq.n	261e <_adc_set_config+0x2e2>
    2582:	e0bc      	b.n	26fe <_adc_set_config+0x3c2>
    2584:	2b20      	cmp	r3, #32
    2586:	d023      	beq.n	25d0 <_adc_set_config+0x294>
    2588:	2b30      	cmp	r3, #48	; 0x30
    258a:	d000      	beq.n	258e <_adc_set_config+0x252>
    258c:	e0b7      	b.n	26fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    258e:	683b      	ldr	r3, [r7, #0]
    2590:	7cdb      	ldrb	r3, [r3, #19]
    2592:	2b00      	cmp	r3, #0
    2594:	d011      	beq.n	25ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    2596:	683b      	ldr	r3, [r7, #0]
    2598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    259a:	2b7f      	cmp	r3, #127	; 0x7f
    259c:	dc0b      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    259e:	683b      	ldr	r3, [r7, #0]
    25a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    25a2:	3380      	adds	r3, #128	; 0x80
    25a4:	db07      	blt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    25a6:	683b      	ldr	r3, [r7, #0]
    25a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    25aa:	2b7f      	cmp	r3, #127	; 0x7f
    25ac:	dc03      	bgt.n	25b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    25ae:	683b      	ldr	r3, [r7, #0]
    25b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    25b2:	3380      	adds	r3, #128	; 0x80
    25b4:	da01      	bge.n	25ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25b6:	2317      	movs	r3, #23
    25b8:	e143      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    25ba:	683b      	ldr	r3, [r7, #0]
    25bc:	69db      	ldr	r3, [r3, #28]
    25be:	2bff      	cmp	r3, #255	; 0xff
    25c0:	dc04      	bgt.n	25cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    25c2:	683b      	ldr	r3, [r7, #0]
    25c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    25c6:	2bff      	cmp	r3, #255	; 0xff
    25c8:	dc00      	bgt.n	25cc <_adc_set_config+0x290>
    25ca:	e091      	b.n	26f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    25cc:	2317      	movs	r3, #23
    25ce:	e138      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    25d0:	683b      	ldr	r3, [r7, #0]
    25d2:	7cdb      	ldrb	r3, [r3, #19]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d015      	beq.n	2604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    25d8:	683b      	ldr	r3, [r7, #0]
    25da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    25dc:	4a36      	ldr	r2, [pc, #216]	; (26b8 <_adc_set_config+0x37c>)
    25de:	4293      	cmp	r3, r2
    25e0:	dc0e      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    25e2:	683b      	ldr	r3, [r7, #0]
    25e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    25e6:	4a35      	ldr	r2, [pc, #212]	; (26bc <_adc_set_config+0x380>)
    25e8:	4293      	cmp	r3, r2
    25ea:	db09      	blt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    25ec:	683b      	ldr	r3, [r7, #0]
    25ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    25f0:	4a31      	ldr	r2, [pc, #196]	; (26b8 <_adc_set_config+0x37c>)
    25f2:	4293      	cmp	r3, r2
    25f4:	dc04      	bgt.n	2600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    25f6:	683b      	ldr	r3, [r7, #0]
    25f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    25fa:	4a30      	ldr	r2, [pc, #192]	; (26bc <_adc_set_config+0x380>)
    25fc:	4293      	cmp	r3, r2
    25fe:	da01      	bge.n	2604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2600:	2317      	movs	r3, #23
    2602:	e11e      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    2604:	683b      	ldr	r3, [r7, #0]
    2606:	69db      	ldr	r3, [r3, #28]
    2608:	4a2d      	ldr	r2, [pc, #180]	; (26c0 <_adc_set_config+0x384>)
    260a:	4293      	cmp	r3, r2
    260c:	dc05      	bgt.n	261a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    260e:	683b      	ldr	r3, [r7, #0]
    2610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    2612:	4a2b      	ldr	r2, [pc, #172]	; (26c0 <_adc_set_config+0x384>)
    2614:	4293      	cmp	r3, r2
    2616:	dc00      	bgt.n	261a <_adc_set_config+0x2de>
    2618:	e06c      	b.n	26f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    261a:	2317      	movs	r3, #23
    261c:	e111      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    261e:	683b      	ldr	r3, [r7, #0]
    2620:	7cdb      	ldrb	r3, [r3, #19]
    2622:	2b00      	cmp	r3, #0
    2624:	d015      	beq.n	2652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    2626:	683b      	ldr	r3, [r7, #0]
    2628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    262a:	4a26      	ldr	r2, [pc, #152]	; (26c4 <_adc_set_config+0x388>)
    262c:	4293      	cmp	r3, r2
    262e:	dc0e      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    2630:	683b      	ldr	r3, [r7, #0]
    2632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    2634:	4a24      	ldr	r2, [pc, #144]	; (26c8 <_adc_set_config+0x38c>)
    2636:	4293      	cmp	r3, r2
    2638:	db09      	blt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    263a:	683b      	ldr	r3, [r7, #0]
    263c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    263e:	4a21      	ldr	r2, [pc, #132]	; (26c4 <_adc_set_config+0x388>)
    2640:	4293      	cmp	r3, r2
    2642:	dc04      	bgt.n	264e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    2644:	683b      	ldr	r3, [r7, #0]
    2646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    2648:	4a1f      	ldr	r2, [pc, #124]	; (26c8 <_adc_set_config+0x38c>)
    264a:	4293      	cmp	r3, r2
    264c:	da01      	bge.n	2652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    264e:	2317      	movs	r3, #23
    2650:	e0f7      	b.n	2842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    2652:	683b      	ldr	r3, [r7, #0]
    2654:	69db      	ldr	r3, [r3, #28]
    2656:	4a1d      	ldr	r2, [pc, #116]	; (26cc <_adc_set_config+0x390>)
    2658:	4293      	cmp	r3, r2
    265a:	dc04      	bgt.n	2666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    265c:	683b      	ldr	r3, [r7, #0]
    265e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    2660:	4a1a      	ldr	r2, [pc, #104]	; (26cc <_adc_set_config+0x390>)
    2662:	4293      	cmp	r3, r2
    2664:	dd48      	ble.n	26f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2666:	2317      	movs	r3, #23
    2668:	e0eb      	b.n	2842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    266a:	683b      	ldr	r3, [r7, #0]
    266c:	7cdb      	ldrb	r3, [r3, #19]
    266e:	2b00      	cmp	r3, #0
    2670:	d032      	beq.n	26d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    2672:	683b      	ldr	r3, [r7, #0]
    2674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2676:	4a16      	ldr	r2, [pc, #88]	; (26d0 <_adc_set_config+0x394>)
    2678:	4293      	cmp	r3, r2
    267a:	dc0e      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    267c:	683b      	ldr	r3, [r7, #0]
    267e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    2680:	4a14      	ldr	r2, [pc, #80]	; (26d4 <_adc_set_config+0x398>)
    2682:	4293      	cmp	r3, r2
    2684:	db09      	blt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    2686:	683b      	ldr	r3, [r7, #0]
    2688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    268a:	4a11      	ldr	r2, [pc, #68]	; (26d0 <_adc_set_config+0x394>)
    268c:	4293      	cmp	r3, r2
    268e:	dc04      	bgt.n	269a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    2690:	683b      	ldr	r3, [r7, #0]
    2692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    2694:	4a0f      	ldr	r2, [pc, #60]	; (26d4 <_adc_set_config+0x398>)
    2696:	4293      	cmp	r3, r2
    2698:	da1e      	bge.n	26d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    269a:	2317      	movs	r3, #23
    269c:	e0d1      	b.n	2842 <_adc_set_config+0x506>
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	00002115 	.word	0x00002115
    26a4:	00007b31 	.word	0x00007b31
    26a8:	00007b75 	.word	0x00007b75
    26ac:	000022c5 	.word	0x000022c5
    26b0:	00016d40 	.word	0x00016d40
    26b4:	000021f1 	.word	0x000021f1
    26b8:	000001ff 	.word	0x000001ff
    26bc:	fffffe00 	.word	0xfffffe00
    26c0:	000003ff 	.word	0x000003ff
    26c4:	000007ff 	.word	0x000007ff
    26c8:	fffff800 	.word	0xfffff800
    26cc:	00000fff 	.word	0x00000fff
    26d0:	00007fff 	.word	0x00007fff
    26d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    26d8:	683b      	ldr	r3, [r7, #0]
    26da:	69db      	ldr	r3, [r3, #28]
    26dc:	4a5b      	ldr	r2, [pc, #364]	; (284c <_adc_set_config+0x510>)
    26de:	4293      	cmp	r3, r2
    26e0:	dc04      	bgt.n	26ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    26e2:	683b      	ldr	r3, [r7, #0]
    26e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    26e6:	4a59      	ldr	r2, [pc, #356]	; (284c <_adc_set_config+0x510>)
    26e8:	4293      	cmp	r3, r2
    26ea:	dd07      	ble.n	26fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    26ec:	2317      	movs	r3, #23
    26ee:	e0a8      	b.n	2842 <_adc_set_config+0x506>
			break;
    26f0:	46c0      	nop			; (mov r8, r8)
    26f2:	e004      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f4:	46c0      	nop			; (mov r8, r8)
    26f6:	e002      	b.n	26fe <_adc_set_config+0x3c2>
			break;
    26f8:	46c0      	nop			; (mov r8, r8)
    26fa:	e000      	b.n	26fe <_adc_set_config+0x3c2>
			}
			break;
    26fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	0018      	movs	r0, r3
    2704:	4b52      	ldr	r3, [pc, #328]	; (2850 <_adc_set_config+0x514>)
    2706:	4798      	blx	r3
    2708:	1e03      	subs	r3, r0, #0
    270a:	d1f9      	bne.n	2700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    270c:	683b      	ldr	r3, [r7, #0]
    270e:	7e1a      	ldrb	r2, [r3, #24]
    2710:	693b      	ldr	r3, [r7, #16]
    2712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    2714:	46c0      	nop			; (mov r8, r8)
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	0018      	movs	r0, r3
    271a:	4b4d      	ldr	r3, [pc, #308]	; (2850 <_adc_set_config+0x514>)
    271c:	4798      	blx	r3
    271e:	1e03      	subs	r3, r0, #0
    2720:	d1f9      	bne.n	2716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    2722:	683b      	ldr	r3, [r7, #0]
    2724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    2726:	b29a      	uxth	r2, r3
    2728:	693b      	ldr	r3, [r7, #16]
    272a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	0018      	movs	r0, r3
    2732:	4b47      	ldr	r3, [pc, #284]	; (2850 <_adc_set_config+0x514>)
    2734:	4798      	blx	r3
    2736:	1e03      	subs	r3, r0, #0
    2738:	d1f9      	bne.n	272e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	6a1b      	ldr	r3, [r3, #32]
    273e:	b29a      	uxth	r2, r3
    2740:	693b      	ldr	r3, [r7, #16]
    2742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2744:	2314      	movs	r3, #20
    2746:	18fb      	adds	r3, r7, r3
    2748:	683a      	ldr	r2, [r7, #0]
    274a:	212c      	movs	r1, #44	; 0x2c
    274c:	5c52      	ldrb	r2, [r2, r1]
    274e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    2750:	2314      	movs	r3, #20
    2752:	18fb      	adds	r3, r7, r3
    2754:	781b      	ldrb	r3, [r3, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d006      	beq.n	2768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    275a:	2314      	movs	r3, #20
    275c:	18fb      	adds	r3, r7, r3
    275e:	781a      	ldrb	r2, [r3, #0]
    2760:	2314      	movs	r3, #20
    2762:	18fb      	adds	r3, r7, r3
    2764:	3a01      	subs	r2, #1
    2766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2768:	2314      	movs	r3, #20
    276a:	18fb      	adds	r3, r7, r3
    276c:	781b      	ldrb	r3, [r3, #0]
    276e:	2b0f      	cmp	r3, #15
    2770:	d804      	bhi.n	277c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2772:	683b      	ldr	r3, [r7, #0]
    2774:	222b      	movs	r2, #43	; 0x2b
    2776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2778:	2b0f      	cmp	r3, #15
    277a:	d901      	bls.n	2780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    277c:	2317      	movs	r3, #23
    277e:	e060      	b.n	2842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    2780:	46c0      	nop			; (mov r8, r8)
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	0018      	movs	r0, r3
    2786:	4b32      	ldr	r3, [pc, #200]	; (2850 <_adc_set_config+0x514>)
    2788:	4798      	blx	r3
    278a:	1e03      	subs	r3, r0, #0
    278c:	d1f9      	bne.n	2782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    278e:	683b      	ldr	r3, [r7, #0]
    2790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    2792:	683a      	ldr	r2, [r7, #0]
    2794:	212b      	movs	r1, #43	; 0x2b
    2796:	5c52      	ldrb	r2, [r2, r1]
    2798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    279a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    279c:	2214      	movs	r2, #20
    279e:	18ba      	adds	r2, r7, r2
    27a0:	7812      	ldrb	r2, [r2, #0]
    27a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    27a4:	4313      	orrs	r3, r2
			config->negative_input |
    27a6:	683a      	ldr	r2, [r7, #0]
    27a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    27aa:	4313      	orrs	r3, r2
			config->positive_input;
    27ac:	683a      	ldr	r2, [r7, #0]
    27ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    27b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    27b2:	693b      	ldr	r3, [r7, #16]
    27b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    27b6:	683b      	ldr	r3, [r7, #0]
    27b8:	222a      	movs	r2, #42	; 0x2a
    27ba:	5c9a      	ldrb	r2, [r3, r2]
    27bc:	693b      	ldr	r3, [r7, #16]
    27be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    27c0:	693b      	ldr	r3, [r7, #16]
    27c2:	220f      	movs	r2, #15
    27c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    27c6:	683b      	ldr	r3, [r7, #0]
    27c8:	2224      	movs	r2, #36	; 0x24
    27ca:	5c9b      	ldrb	r3, [r3, r2]
    27cc:	2b00      	cmp	r3, #0
    27ce:	d01e      	beq.n	280e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    27d0:	683b      	ldr	r3, [r7, #0]
    27d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    27d4:	4a1f      	ldr	r2, [pc, #124]	; (2854 <_adc_set_config+0x518>)
    27d6:	4293      	cmp	r3, r2
    27d8:	d901      	bls.n	27de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    27da:	2317      	movs	r3, #23
    27dc:	e031      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    27de:	683b      	ldr	r3, [r7, #0]
    27e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    27e2:	693b      	ldr	r3, [r7, #16]
    27e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    27e6:	683b      	ldr	r3, [r7, #0]
    27e8:	2228      	movs	r2, #40	; 0x28
    27ea:	5e9b      	ldrsh	r3, [r3, r2]
    27ec:	4a1a      	ldr	r2, [pc, #104]	; (2858 <_adc_set_config+0x51c>)
    27ee:	4293      	cmp	r3, r2
    27f0:	dc05      	bgt.n	27fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    27f2:	683b      	ldr	r3, [r7, #0]
    27f4:	2228      	movs	r2, #40	; 0x28
    27f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    27f8:	4a18      	ldr	r2, [pc, #96]	; (285c <_adc_set_config+0x520>)
    27fa:	4293      	cmp	r3, r2
    27fc:	da01      	bge.n	2802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    27fe:	2317      	movs	r3, #23
    2800:	e01f      	b.n	2842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2802:	683b      	ldr	r3, [r7, #0]
    2804:	2228      	movs	r2, #40	; 0x28
    2806:	5e9b      	ldrsh	r3, [r3, r2]
    2808:	b29a      	uxth	r2, r3
    280a:	693b      	ldr	r3, [r7, #16]
    280c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    280e:	4b14      	ldr	r3, [pc, #80]	; (2860 <_adc_set_config+0x524>)
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	08db      	lsrs	r3, r3, #3
    2814:	b29b      	uxth	r3, r3
    2816:	021b      	lsls	r3, r3, #8
    2818:	b29a      	uxth	r2, r3
    281a:	23e0      	movs	r3, #224	; 0xe0
    281c:	00db      	lsls	r3, r3, #3
    281e:	4013      	ands	r3, r2
    2820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    2822:	4b10      	ldr	r3, [pc, #64]	; (2864 <_adc_set_config+0x528>)
    2824:	685c      	ldr	r4, [r3, #4]
    2826:	681b      	ldr	r3, [r3, #0]
    2828:	0161      	lsls	r1, r4, #5
    282a:	0edd      	lsrs	r5, r3, #27
    282c:	430d      	orrs	r5, r1
    282e:	0ee6      	lsrs	r6, r4, #27
    2830:	b2ab      	uxth	r3, r5
    2832:	21ff      	movs	r1, #255	; 0xff
    2834:	400b      	ands	r3, r1
    2836:	b29b      	uxth	r3, r3
			) |
    2838:	4313      	orrs	r3, r2
    283a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    2840:	2300      	movs	r3, #0
}
    2842:	0018      	movs	r0, r3
    2844:	46bd      	mov	sp, r7
    2846:	b009      	add	sp, #36	; 0x24
    2848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	0000ffff 	.word	0x0000ffff
    2850:	000021f1 	.word	0x000021f1
    2854:	00000fff 	.word	0x00000fff
    2858:	000007ff 	.word	0x000007ff
    285c:	fffff800 	.word	0xfffff800
    2860:	00806024 	.word	0x00806024
    2864:	00806020 	.word	0x00806020

00002868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2868:	b580      	push	{r7, lr}
    286a:	b084      	sub	sp, #16
    286c:	af00      	add	r7, sp, #0
    286e:	60f8      	str	r0, [r7, #12]
    2870:	60b9      	str	r1, [r7, #8]
    2872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	68ba      	ldr	r2, [r7, #8]
    2878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    287a:	2380      	movs	r3, #128	; 0x80
    287c:	025b      	lsls	r3, r3, #9
    287e:	0019      	movs	r1, r3
    2880:	2002      	movs	r0, #2
    2882:	4b15      	ldr	r3, [pc, #84]	; (28d8 <adc_init+0x70>)
    2884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2886:	68bb      	ldr	r3, [r7, #8]
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	b2db      	uxtb	r3, r3
    288c:	001a      	movs	r2, r3
    288e:	2301      	movs	r3, #1
    2890:	4013      	ands	r3, r2
    2892:	d001      	beq.n	2898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2894:	2305      	movs	r3, #5
    2896:	e01a      	b.n	28ce <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2898:	68bb      	ldr	r3, [r7, #8]
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	b2db      	uxtb	r3, r3
    289e:	001a      	movs	r2, r3
    28a0:	2302      	movs	r3, #2
    28a2:	4013      	ands	r3, r2
    28a4:	d001      	beq.n	28aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    28a6:	231c      	movs	r3, #28
    28a8:	e011      	b.n	28ce <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	785a      	ldrb	r2, [r3, #1]
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    28b2:	68fb      	ldr	r3, [r7, #12]
    28b4:	791b      	ldrb	r3, [r3, #4]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d102      	bne.n	28c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    28ba:	2001      	movs	r0, #1
    28bc:	4b07      	ldr	r3, [pc, #28]	; (28dc <adc_init+0x74>)
    28be:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    28c0:	687a      	ldr	r2, [r7, #4]
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	0011      	movs	r1, r2
    28c6:	0018      	movs	r0, r3
    28c8:	4b05      	ldr	r3, [pc, #20]	; (28e0 <adc_init+0x78>)
    28ca:	4798      	blx	r3
    28cc:	0003      	movs	r3, r0
}
    28ce:	0018      	movs	r0, r3
    28d0:	46bd      	mov	sp, r7
    28d2:	b004      	add	sp, #16
    28d4:	bd80      	pop	{r7, pc}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	0000212d 	.word	0x0000212d
    28dc:	000021b1 	.word	0x000021b1
    28e0:	0000233d 	.word	0x0000233d

000028e4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    28e4:	b580      	push	{r7, lr}
    28e6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    28e8:	4b02      	ldr	r3, [pc, #8]	; (28f4 <system_interrupt_enter_critical_section+0x10>)
    28ea:	4798      	blx	r3
}
    28ec:	46c0      	nop			; (mov r8, r8)
    28ee:	46bd      	mov	sp, r7
    28f0:	bd80      	pop	{r7, pc}
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	0000717d 	.word	0x0000717d

000028f8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    28fc:	4b02      	ldr	r3, [pc, #8]	; (2908 <system_interrupt_leave_critical_section+0x10>)
    28fe:	4798      	blx	r3
}
    2900:	46c0      	nop			; (mov r8, r8)
    2902:	46bd      	mov	sp, r7
    2904:	bd80      	pop	{r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	000071d1 	.word	0x000071d1

0000290c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    290c:	b580      	push	{r7, lr}
    290e:	b086      	sub	sp, #24
    2910:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    2912:	4b49      	ldr	r3, [pc, #292]	; (2a38 <DMAC_Handler+0x12c>)
    2914:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    2916:	4b49      	ldr	r3, [pc, #292]	; (2a3c <DMAC_Handler+0x130>)
    2918:	8c1b      	ldrh	r3, [r3, #32]
    291a:	b29b      	uxth	r3, r3
    291c:	b2da      	uxtb	r2, r3
    291e:	2317      	movs	r3, #23
    2920:	18fb      	adds	r3, r7, r3
    2922:	210f      	movs	r1, #15
    2924:	400a      	ands	r2, r1
    2926:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    2928:	2317      	movs	r3, #23
    292a:	18fb      	adds	r3, r7, r3
    292c:	781a      	ldrb	r2, [r3, #0]
    292e:	4b44      	ldr	r3, [pc, #272]	; (2a40 <DMAC_Handler+0x134>)
    2930:	0092      	lsls	r2, r2, #2
    2932:	58d3      	ldr	r3, [r2, r3]
    2934:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2936:	4a41      	ldr	r2, [pc, #260]	; (2a3c <DMAC_Handler+0x130>)
    2938:	693b      	ldr	r3, [r7, #16]
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	210f      	movs	r1, #15
    293e:	400b      	ands	r3, r1
    2940:	b2d9      	uxtb	r1, r3
    2942:	233f      	movs	r3, #63	; 0x3f
    2944:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    2946:	493d      	ldr	r1, [pc, #244]	; (2a3c <DMAC_Handler+0x130>)
    2948:	230f      	movs	r3, #15
    294a:	18fb      	adds	r3, r7, r3
    294c:	224e      	movs	r2, #78	; 0x4e
    294e:	5c8a      	ldrb	r2, [r1, r2]
    2950:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2952:	693b      	ldr	r3, [r7, #16]
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	4a3b      	ldr	r2, [pc, #236]	; (2a44 <DMAC_Handler+0x138>)
    2958:	011b      	lsls	r3, r3, #4
    295a:	18d3      	adds	r3, r2, r3
    295c:	3302      	adds	r3, #2
    295e:	881b      	ldrh	r3, [r3, #0]
    2960:	b29b      	uxth	r3, r3
    2962:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    2964:	693b      	ldr	r3, [r7, #16]
    2966:	781b      	ldrb	r3, [r3, #0]
    2968:	4a37      	ldr	r2, [pc, #220]	; (2a48 <DMAC_Handler+0x13c>)
    296a:	011b      	lsls	r3, r3, #4
    296c:	18d3      	adds	r3, r2, r3
    296e:	3302      	adds	r3, #2
    2970:	881b      	ldrh	r3, [r3, #0]
    2972:	b29b      	uxth	r3, r3
    2974:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    2976:	68ba      	ldr	r2, [r7, #8]
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	1ad2      	subs	r2, r2, r3
    297c:	693b      	ldr	r3, [r7, #16]
    297e:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    2980:	230f      	movs	r3, #15
    2982:	18fb      	adds	r3, r7, r3
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	2201      	movs	r2, #1
    2988:	4013      	ands	r3, r2
    298a:	d016      	beq.n	29ba <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    298c:	4a2b      	ldr	r2, [pc, #172]	; (2a3c <DMAC_Handler+0x130>)
    298e:	234e      	movs	r3, #78	; 0x4e
    2990:	2101      	movs	r1, #1
    2992:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    2994:	693b      	ldr	r3, [r7, #16]
    2996:	2210      	movs	r2, #16
    2998:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    299a:	693b      	ldr	r3, [r7, #16]
    299c:	7c1b      	ldrb	r3, [r3, #16]
    299e:	001a      	movs	r2, r3
    29a0:	2301      	movs	r3, #1
    29a2:	4013      	ands	r3, r2
    29a4:	d042      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    29a6:	693b      	ldr	r3, [r7, #16]
    29a8:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    29aa:	2b00      	cmp	r3, #0
    29ac:	d03e      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    29ae:	693b      	ldr	r3, [r7, #16]
    29b0:	685b      	ldr	r3, [r3, #4]
    29b2:	693a      	ldr	r2, [r7, #16]
    29b4:	0010      	movs	r0, r2
    29b6:	4798      	blx	r3
    29b8:	e038      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    29ba:	230f      	movs	r3, #15
    29bc:	18fb      	adds	r3, r7, r3
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	2202      	movs	r2, #2
    29c2:	4013      	ands	r3, r2
    29c4:	d016      	beq.n	29f4 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    29c6:	4a1d      	ldr	r2, [pc, #116]	; (2a3c <DMAC_Handler+0x130>)
    29c8:	234e      	movs	r3, #78	; 0x4e
    29ca:	2102      	movs	r1, #2
    29cc:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    29ce:	693b      	ldr	r3, [r7, #16]
    29d0:	2200      	movs	r2, #0
    29d2:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29d4:	693b      	ldr	r3, [r7, #16]
    29d6:	7c1b      	ldrb	r3, [r3, #16]
    29d8:	001a      	movs	r2, r3
    29da:	2302      	movs	r3, #2
    29dc:	4013      	ands	r3, r2
    29de:	d025      	beq.n	2a2c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    29e0:	693b      	ldr	r3, [r7, #16]
    29e2:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    29e4:	2b00      	cmp	r3, #0
    29e6:	d021      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    29e8:	693b      	ldr	r3, [r7, #16]
    29ea:	689b      	ldr	r3, [r3, #8]
    29ec:	693a      	ldr	r2, [r7, #16]
    29ee:	0010      	movs	r0, r2
    29f0:	4798      	blx	r3
    29f2:	e01b      	b.n	2a2c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    29f4:	230f      	movs	r3, #15
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	2204      	movs	r2, #4
    29fc:	4013      	ands	r3, r2
    29fe:	d015      	beq.n	2a2c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    2a00:	4a0e      	ldr	r2, [pc, #56]	; (2a3c <DMAC_Handler+0x130>)
    2a02:	234e      	movs	r3, #78	; 0x4e
    2a04:	2104      	movs	r1, #4
    2a06:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    2a08:	693b      	ldr	r3, [r7, #16]
    2a0a:	2206      	movs	r2, #6
    2a0c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a0e:	693b      	ldr	r3, [r7, #16]
    2a10:	7c1b      	ldrb	r3, [r3, #16]
    2a12:	001a      	movs	r2, r3
    2a14:	2304      	movs	r3, #4
    2a16:	4013      	ands	r3, r2
    2a18:	d008      	beq.n	2a2c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    2a1a:	693b      	ldr	r3, [r7, #16]
    2a1c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d004      	beq.n	2a2c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    2a22:	693b      	ldr	r3, [r7, #16]
    2a24:	68db      	ldr	r3, [r3, #12]
    2a26:	693a      	ldr	r2, [r7, #16]
    2a28:	0010      	movs	r0, r2
    2a2a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    2a2c:	4b07      	ldr	r3, [pc, #28]	; (2a4c <DMAC_Handler+0x140>)
    2a2e:	4798      	blx	r3
}
    2a30:	46c0      	nop			; (mov r8, r8)
    2a32:	46bd      	mov	sp, r7
    2a34:	b006      	add	sp, #24
    2a36:	bd80      	pop	{r7, pc}
    2a38:	000028e5 	.word	0x000028e5
    2a3c:	41004800 	.word	0x41004800
    2a40:	200001c0 	.word	0x200001c0
    2a44:	20000400 	.word	0x20000400
    2a48:	20000170 	.word	0x20000170
    2a4c:	000028f9 	.word	0x000028f9

00002a50 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    2a50:	b580      	push	{r7, lr}
    2a52:	b082      	sub	sp, #8
    2a54:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2a56:	4b07      	ldr	r3, [pc, #28]	; (2a74 <nvm_is_ready+0x24>)
    2a58:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	7d1b      	ldrb	r3, [r3, #20]
    2a5e:	b2db      	uxtb	r3, r3
    2a60:	001a      	movs	r2, r3
    2a62:	2301      	movs	r3, #1
    2a64:	4013      	ands	r3, r2
    2a66:	1e5a      	subs	r2, r3, #1
    2a68:	4193      	sbcs	r3, r2
    2a6a:	b2db      	uxtb	r3, r3
}
    2a6c:	0018      	movs	r0, r3
    2a6e:	46bd      	mov	sp, r7
    2a70:	b002      	add	sp, #8
    2a72:	bd80      	pop	{r7, pc}
    2a74:	41004000 	.word	0x41004000

00002a78 <system_apb_clock_set_mask>:
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	0002      	movs	r2, r0
    2a80:	6039      	str	r1, [r7, #0]
    2a82:	1dfb      	adds	r3, r7, #7
    2a84:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2a86:	1dfb      	adds	r3, r7, #7
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b01      	cmp	r3, #1
    2a8c:	d00a      	beq.n	2aa4 <system_apb_clock_set_mask+0x2c>
    2a8e:	2b02      	cmp	r3, #2
    2a90:	d00f      	beq.n	2ab2 <system_apb_clock_set_mask+0x3a>
    2a92:	2b00      	cmp	r3, #0
    2a94:	d114      	bne.n	2ac0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2a96:	4b0e      	ldr	r3, [pc, #56]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a98:	4a0d      	ldr	r2, [pc, #52]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2a9a:	6991      	ldr	r1, [r2, #24]
    2a9c:	683a      	ldr	r2, [r7, #0]
    2a9e:	430a      	orrs	r2, r1
    2aa0:	619a      	str	r2, [r3, #24]
			break;
    2aa2:	e00f      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2aa4:	4b0a      	ldr	r3, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa6:	4a0a      	ldr	r2, [pc, #40]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2aa8:	69d1      	ldr	r1, [r2, #28]
    2aaa:	683a      	ldr	r2, [r7, #0]
    2aac:	430a      	orrs	r2, r1
    2aae:	61da      	str	r2, [r3, #28]
			break;
    2ab0:	e008      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2ab2:	4b07      	ldr	r3, [pc, #28]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab4:	4a06      	ldr	r2, [pc, #24]	; (2ad0 <system_apb_clock_set_mask+0x58>)
    2ab6:	6a11      	ldr	r1, [r2, #32]
    2ab8:	683a      	ldr	r2, [r7, #0]
    2aba:	430a      	orrs	r2, r1
    2abc:	621a      	str	r2, [r3, #32]
			break;
    2abe:	e001      	b.n	2ac4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2ac0:	2317      	movs	r3, #23
    2ac2:	e000      	b.n	2ac6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2ac4:	2300      	movs	r3, #0
}
    2ac6:	0018      	movs	r0, r3
    2ac8:	46bd      	mov	sp, r7
    2aca:	b002      	add	sp, #8
    2acc:	bd80      	pop	{r7, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	40000400 	.word	0x40000400

00002ad4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    2ad4:	b580      	push	{r7, lr}
    2ad6:	b084      	sub	sp, #16
    2ad8:	af00      	add	r7, sp, #0
    2ada:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2adc:	4b2f      	ldr	r3, [pc, #188]	; (2b9c <nvm_set_config+0xc8>)
    2ade:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    2ae0:	2104      	movs	r1, #4
    2ae2:	2001      	movs	r0, #1
    2ae4:	4b2e      	ldr	r3, [pc, #184]	; (2ba0 <nvm_set_config+0xcc>)
    2ae6:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	2220      	movs	r2, #32
    2aec:	32ff      	adds	r2, #255	; 0xff
    2aee:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2af0:	4b2c      	ldr	r3, [pc, #176]	; (2ba4 <nvm_set_config+0xd0>)
    2af2:	4798      	blx	r3
    2af4:	0003      	movs	r3, r0
    2af6:	001a      	movs	r2, r3
    2af8:	2301      	movs	r3, #1
    2afa:	4053      	eors	r3, r2
    2afc:	b2db      	uxtb	r3, r3
    2afe:	2b00      	cmp	r3, #0
    2b00:	d001      	beq.n	2b06 <nvm_set_config+0x32>
		return STATUS_BUSY;
    2b02:	2305      	movs	r3, #5
    2b04:	e045      	b.n	2b92 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	021b      	lsls	r3, r3, #8
    2b0c:	001a      	movs	r2, r3
    2b0e:	23c0      	movs	r3, #192	; 0xc0
    2b10:	009b      	lsls	r3, r3, #2
    2b12:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	785b      	ldrb	r3, [r3, #1]
    2b18:	01db      	lsls	r3, r3, #7
    2b1a:	0019      	movs	r1, r3
    2b1c:	23ff      	movs	r3, #255	; 0xff
    2b1e:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    2b20:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b22:	687b      	ldr	r3, [r7, #4]
    2b24:	789b      	ldrb	r3, [r3, #2]
    2b26:	005b      	lsls	r3, r3, #1
    2b28:	0019      	movs	r1, r3
    2b2a:	231e      	movs	r3, #30
    2b2c:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    2b2e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	78db      	ldrb	r3, [r3, #3]
    2b34:	049b      	lsls	r3, r3, #18
    2b36:	0019      	movs	r1, r3
    2b38:	2380      	movs	r3, #128	; 0x80
    2b3a:	02db      	lsls	r3, r3, #11
    2b3c:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    2b3e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	791b      	ldrb	r3, [r3, #4]
    2b44:	041b      	lsls	r3, r3, #16
    2b46:	0019      	movs	r1, r3
    2b48:	23c0      	movs	r3, #192	; 0xc0
    2b4a:	029b      	lsls	r3, r3, #10
    2b4c:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    2b4e:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	689b      	ldr	r3, [r3, #8]
    2b58:	035b      	lsls	r3, r3, #13
    2b5a:	0f5b      	lsrs	r3, r3, #29
    2b5c:	b2db      	uxtb	r3, r3
    2b5e:	001a      	movs	r2, r3
    2b60:	2308      	movs	r3, #8
    2b62:	4093      	lsls	r3, r2
    2b64:	b29a      	uxth	r2, r3
    2b66:	4b10      	ldr	r3, [pc, #64]	; (2ba8 <nvm_set_config+0xd4>)
    2b68:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    2b6a:	68fb      	ldr	r3, [r7, #12]
    2b6c:	689b      	ldr	r3, [r3, #8]
    2b6e:	b29a      	uxth	r2, r3
    2b70:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <nvm_set_config+0xd4>)
    2b72:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	785a      	ldrb	r2, [r3, #1]
    2b78:	4b0b      	ldr	r3, [pc, #44]	; (2ba8 <nvm_set_config+0xd4>)
    2b7a:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2b7c:	68fb      	ldr	r3, [r7, #12]
    2b7e:	8b1b      	ldrh	r3, [r3, #24]
    2b80:	b29b      	uxth	r3, r3
    2b82:	001a      	movs	r2, r3
    2b84:	2380      	movs	r3, #128	; 0x80
    2b86:	005b      	lsls	r3, r3, #1
    2b88:	4013      	ands	r3, r2
    2b8a:	d001      	beq.n	2b90 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    2b8c:	2310      	movs	r3, #16
    2b8e:	e000      	b.n	2b92 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    2b90:	2300      	movs	r3, #0
}
    2b92:	0018      	movs	r0, r3
    2b94:	46bd      	mov	sp, r7
    2b96:	b004      	add	sp, #16
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	41004000 	.word	0x41004000
    2ba0:	00002a79 	.word	0x00002a79
    2ba4:	00002a51 	.word	0x00002a51
    2ba8:	200001d4 	.word	0x200001d4

00002bac <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b086      	sub	sp, #24
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	60b9      	str	r1, [r7, #8]
    2bb4:	607a      	str	r2, [r7, #4]
    2bb6:	230f      	movs	r3, #15
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	1c02      	adds	r2, r0, #0
    2bbc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    2bbe:	4b3a      	ldr	r3, [pc, #232]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc0:	881b      	ldrh	r3, [r3, #0]
    2bc2:	001a      	movs	r2, r3
    2bc4:	4b38      	ldr	r3, [pc, #224]	; (2ca8 <nvm_execute_command+0xfc>)
    2bc6:	885b      	ldrh	r3, [r3, #2]
    2bc8:	435a      	muls	r2, r3
    2bca:	68bb      	ldr	r3, [r7, #8]
    2bcc:	429a      	cmp	r2, r3
    2bce:	d209      	bcs.n	2be4 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    2bd0:	68bb      	ldr	r3, [r7, #8]
    2bd2:	4a36      	ldr	r2, [pc, #216]	; (2cac <nvm_execute_command+0x100>)
    2bd4:	4293      	cmp	r3, r2
    2bd6:	d903      	bls.n	2be0 <nvm_execute_command+0x34>
    2bd8:	68bb      	ldr	r3, [r7, #8]
    2bda:	4a35      	ldr	r2, [pc, #212]	; (2cb0 <nvm_execute_command+0x104>)
    2bdc:	4293      	cmp	r3, r2
    2bde:	d901      	bls.n	2be4 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2be0:	2318      	movs	r3, #24
    2be2:	e05c      	b.n	2c9e <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2be4:	4b33      	ldr	r3, [pc, #204]	; (2cb4 <nvm_execute_command+0x108>)
    2be6:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    2be8:	697b      	ldr	r3, [r7, #20]
    2bea:	685b      	ldr	r3, [r3, #4]
    2bec:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    2bee:	693b      	ldr	r3, [r7, #16]
    2bf0:	2280      	movs	r2, #128	; 0x80
    2bf2:	02d2      	lsls	r2, r2, #11
    2bf4:	431a      	orrs	r2, r3
    2bf6:	697b      	ldr	r3, [r7, #20]
    2bf8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2bfa:	697b      	ldr	r3, [r7, #20]
    2bfc:	2220      	movs	r2, #32
    2bfe:	32ff      	adds	r2, #255	; 0xff
    2c00:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2c02:	4b2d      	ldr	r3, [pc, #180]	; (2cb8 <nvm_execute_command+0x10c>)
    2c04:	4798      	blx	r3
    2c06:	0003      	movs	r3, r0
    2c08:	001a      	movs	r2, r3
    2c0a:	2301      	movs	r3, #1
    2c0c:	4053      	eors	r3, r2
    2c0e:	b2db      	uxtb	r3, r3
    2c10:	2b00      	cmp	r3, #0
    2c12:	d004      	beq.n	2c1e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    2c14:	697b      	ldr	r3, [r7, #20]
    2c16:	693a      	ldr	r2, [r7, #16]
    2c18:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    2c1a:	2305      	movs	r3, #5
    2c1c:	e03f      	b.n	2c9e <nvm_execute_command+0xf2>
	}

	switch (command) {
    2c1e:	230f      	movs	r3, #15
    2c20:	18fb      	adds	r3, r7, r3
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	2b45      	cmp	r3, #69	; 0x45
    2c26:	d81d      	bhi.n	2c64 <nvm_execute_command+0xb8>
    2c28:	009a      	lsls	r2, r3, #2
    2c2a:	4b24      	ldr	r3, [pc, #144]	; (2cbc <nvm_execute_command+0x110>)
    2c2c:	18d3      	adds	r3, r2, r3
    2c2e:	681b      	ldr	r3, [r3, #0]
    2c30:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    2c32:	697b      	ldr	r3, [r7, #20]
    2c34:	8b1b      	ldrh	r3, [r3, #24]
    2c36:	b29b      	uxth	r3, r3
    2c38:	001a      	movs	r2, r3
    2c3a:	2380      	movs	r3, #128	; 0x80
    2c3c:	005b      	lsls	r3, r3, #1
    2c3e:	4013      	ands	r3, r2
    2c40:	d004      	beq.n	2c4c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    2c42:	697b      	ldr	r3, [r7, #20]
    2c44:	693a      	ldr	r2, [r7, #16]
    2c46:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    2c48:	2310      	movs	r3, #16
    2c4a:	e028      	b.n	2c9e <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c4c:	68bb      	ldr	r3, [r7, #8]
    2c4e:	089b      	lsrs	r3, r3, #2
    2c50:	005a      	lsls	r2, r3, #1
    2c52:	697b      	ldr	r3, [r7, #20]
    2c54:	61da      	str	r2, [r3, #28]
			break;
    2c56:	e00b      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    2c58:	68bb      	ldr	r3, [r7, #8]
    2c5a:	089b      	lsrs	r3, r3, #2
    2c5c:	005a      	lsls	r2, r3, #1
    2c5e:	697b      	ldr	r3, [r7, #20]
    2c60:	61da      	str	r2, [r3, #28]
			break;
    2c62:	e005      	b.n	2c70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	693a      	ldr	r2, [r7, #16]
    2c68:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    2c6a:	2317      	movs	r3, #23
    2c6c:	e017      	b.n	2c9e <nvm_execute_command+0xf2>
			break;
    2c6e:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    2c70:	230f      	movs	r3, #15
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	b29b      	uxth	r3, r3
    2c78:	4a11      	ldr	r2, [pc, #68]	; (2cc0 <nvm_execute_command+0x114>)
    2c7a:	4313      	orrs	r3, r2
    2c7c:	b29a      	uxth	r2, r3
    2c7e:	697b      	ldr	r3, [r7, #20]
    2c80:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	4b0c      	ldr	r3, [pc, #48]	; (2cb8 <nvm_execute_command+0x10c>)
    2c86:	4798      	blx	r3
    2c88:	0003      	movs	r3, r0
    2c8a:	001a      	movs	r2, r3
    2c8c:	2301      	movs	r3, #1
    2c8e:	4053      	eors	r3, r2
    2c90:	b2db      	uxtb	r3, r3
    2c92:	2b00      	cmp	r3, #0
    2c94:	d1f6      	bne.n	2c84 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    2c96:	697b      	ldr	r3, [r7, #20]
    2c98:	693a      	ldr	r2, [r7, #16]
    2c9a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2c9c:	2300      	movs	r3, #0
}
    2c9e:	0018      	movs	r0, r3
    2ca0:	46bd      	mov	sp, r7
    2ca2:	b006      	add	sp, #24
    2ca4:	bd80      	pop	{r7, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	200001d4 	.word	0x200001d4
    2cac:	00803fff 	.word	0x00803fff
    2cb0:	00806000 	.word	0x00806000
    2cb4:	41004000 	.word	0x41004000
    2cb8:	00002a51 	.word	0x00002a51
    2cbc:	00016e14 	.word	0x00016e14
    2cc0:	ffffa500 	.word	0xffffa500

00002cc4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b088      	sub	sp, #32
    2cc8:	af00      	add	r7, sp, #0
    2cca:	60f8      	str	r0, [r7, #12]
    2ccc:	60b9      	str	r1, [r7, #8]
    2cce:	1dbb      	adds	r3, r7, #6
    2cd0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2cd2:	4b4a      	ldr	r3, [pc, #296]	; (2dfc <nvm_write_buffer+0x138>)
    2cd4:	881b      	ldrh	r3, [r3, #0]
    2cd6:	001a      	movs	r2, r3
    2cd8:	4b48      	ldr	r3, [pc, #288]	; (2dfc <nvm_write_buffer+0x138>)
    2cda:	885b      	ldrh	r3, [r3, #2]
    2cdc:	435a      	muls	r2, r3
	if (destination_address >
    2cde:	68fb      	ldr	r3, [r7, #12]
    2ce0:	429a      	cmp	r2, r3
    2ce2:	d201      	bcs.n	2ce8 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2ce4:	2318      	movs	r3, #24
    2ce6:	e084      	b.n	2df2 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    2ce8:	4b44      	ldr	r3, [pc, #272]	; (2dfc <nvm_write_buffer+0x138>)
    2cea:	881b      	ldrh	r3, [r3, #0]
    2cec:	3b01      	subs	r3, #1
    2cee:	001a      	movs	r2, r3
    2cf0:	68fb      	ldr	r3, [r7, #12]
    2cf2:	4013      	ands	r3, r2
    2cf4:	d001      	beq.n	2cfa <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2cf6:	2318      	movs	r3, #24
    2cf8:	e07b      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2cfa:	4b40      	ldr	r3, [pc, #256]	; (2dfc <nvm_write_buffer+0x138>)
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	1dba      	adds	r2, r7, #6
    2d00:	8812      	ldrh	r2, [r2, #0]
    2d02:	429a      	cmp	r2, r3
    2d04:	d901      	bls.n	2d0a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2d06:	2317      	movs	r3, #23
    2d08:	e073      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2d0a:	4b3d      	ldr	r3, [pc, #244]	; (2e00 <nvm_write_buffer+0x13c>)
    2d0c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2d0e:	4b3d      	ldr	r3, [pc, #244]	; (2e04 <nvm_write_buffer+0x140>)
    2d10:	4798      	blx	r3
    2d12:	0003      	movs	r3, r0
    2d14:	001a      	movs	r2, r3
    2d16:	2301      	movs	r3, #1
    2d18:	4053      	eors	r3, r2
    2d1a:	b2db      	uxtb	r3, r3
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d001      	beq.n	2d24 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    2d20:	2305      	movs	r3, #5
    2d22:	e066      	b.n	2df2 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    2d24:	697b      	ldr	r3, [r7, #20]
    2d26:	4a38      	ldr	r2, [pc, #224]	; (2e08 <nvm_write_buffer+0x144>)
    2d28:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	4b35      	ldr	r3, [pc, #212]	; (2e04 <nvm_write_buffer+0x140>)
    2d2e:	4798      	blx	r3
    2d30:	0003      	movs	r3, r0
    2d32:	001a      	movs	r2, r3
    2d34:	2301      	movs	r3, #1
    2d36:	4053      	eors	r3, r2
    2d38:	b2db      	uxtb	r3, r3
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d1f6      	bne.n	2d2c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2d3e:	697b      	ldr	r3, [r7, #20]
    2d40:	2220      	movs	r2, #32
    2d42:	32ff      	adds	r2, #255	; 0xff
    2d44:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	085b      	lsrs	r3, r3, #1
    2d4a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2d4c:	231a      	movs	r3, #26
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	2200      	movs	r2, #0
    2d52:	801a      	strh	r2, [r3, #0]
    2d54:	e032      	b.n	2dbc <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    2d56:	231a      	movs	r3, #26
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	881b      	ldrh	r3, [r3, #0]
    2d5c:	68ba      	ldr	r2, [r7, #8]
    2d5e:	18d3      	adds	r3, r2, r3
    2d60:	781a      	ldrb	r2, [r3, #0]
    2d62:	2318      	movs	r3, #24
    2d64:	18fb      	adds	r3, r7, r3
    2d66:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2d68:	231a      	movs	r3, #26
    2d6a:	18fb      	adds	r3, r7, r3
    2d6c:	881a      	ldrh	r2, [r3, #0]
    2d6e:	1dbb      	adds	r3, r7, #6
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	3b01      	subs	r3, #1
    2d74:	429a      	cmp	r2, r3
    2d76:	da11      	bge.n	2d9c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    2d78:	231a      	movs	r3, #26
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	881b      	ldrh	r3, [r3, #0]
    2d7e:	3301      	adds	r3, #1
    2d80:	68ba      	ldr	r2, [r7, #8]
    2d82:	18d3      	adds	r3, r2, r3
    2d84:	781b      	ldrb	r3, [r3, #0]
    2d86:	021b      	lsls	r3, r3, #8
    2d88:	b21a      	sxth	r2, r3
    2d8a:	2318      	movs	r3, #24
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	2100      	movs	r1, #0
    2d90:	5e5b      	ldrsh	r3, [r3, r1]
    2d92:	4313      	orrs	r3, r2
    2d94:	b21a      	sxth	r2, r3
    2d96:	2318      	movs	r3, #24
    2d98:	18fb      	adds	r3, r7, r3
    2d9a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    2d9c:	69fb      	ldr	r3, [r7, #28]
    2d9e:	1c5a      	adds	r2, r3, #1
    2da0:	61fa      	str	r2, [r7, #28]
    2da2:	005b      	lsls	r3, r3, #1
    2da4:	001a      	movs	r2, r3
    2da6:	2318      	movs	r3, #24
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2dae:	231a      	movs	r3, #26
    2db0:	18fb      	adds	r3, r7, r3
    2db2:	221a      	movs	r2, #26
    2db4:	18ba      	adds	r2, r7, r2
    2db6:	8812      	ldrh	r2, [r2, #0]
    2db8:	3202      	adds	r2, #2
    2dba:	801a      	strh	r2, [r3, #0]
    2dbc:	231a      	movs	r3, #26
    2dbe:	18fa      	adds	r2, r7, r3
    2dc0:	1dbb      	adds	r3, r7, #6
    2dc2:	8812      	ldrh	r2, [r2, #0]
    2dc4:	881b      	ldrh	r3, [r3, #0]
    2dc6:	429a      	cmp	r2, r3
    2dc8:	d3c5      	bcc.n	2d56 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    2dca:	4b0c      	ldr	r3, [pc, #48]	; (2dfc <nvm_write_buffer+0x138>)
    2dcc:	791b      	ldrb	r3, [r3, #4]
    2dce:	2201      	movs	r2, #1
    2dd0:	4053      	eors	r3, r2
    2dd2:	b2db      	uxtb	r3, r3
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d00b      	beq.n	2df0 <nvm_write_buffer+0x12c>
    2dd8:	1dbb      	adds	r3, r7, #6
    2dda:	881b      	ldrh	r3, [r3, #0]
    2ddc:	2b3f      	cmp	r3, #63	; 0x3f
    2dde:	d807      	bhi.n	2df0 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    2de0:	68fb      	ldr	r3, [r7, #12]
    2de2:	2200      	movs	r2, #0
    2de4:	0019      	movs	r1, r3
    2de6:	2004      	movs	r0, #4
    2de8:	4b08      	ldr	r3, [pc, #32]	; (2e0c <nvm_write_buffer+0x148>)
    2dea:	4798      	blx	r3
    2dec:	0003      	movs	r3, r0
    2dee:	e000      	b.n	2df2 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    2df0:	2300      	movs	r3, #0
}
    2df2:	0018      	movs	r0, r3
    2df4:	46bd      	mov	sp, r7
    2df6:	b008      	add	sp, #32
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	200001d4 	.word	0x200001d4
    2e00:	41004000 	.word	0x41004000
    2e04:	00002a51 	.word	0x00002a51
    2e08:	ffffa544 	.word	0xffffa544
    2e0c:	00002bad 	.word	0x00002bad

00002e10 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b088      	sub	sp, #32
    2e14:	af00      	add	r7, sp, #0
    2e16:	60f8      	str	r0, [r7, #12]
    2e18:	60b9      	str	r1, [r7, #8]
    2e1a:	1dbb      	adds	r3, r7, #6
    2e1c:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2e1e:	4b38      	ldr	r3, [pc, #224]	; (2f00 <nvm_read_buffer+0xf0>)
    2e20:	881b      	ldrh	r3, [r3, #0]
    2e22:	001a      	movs	r2, r3
    2e24:	4b36      	ldr	r3, [pc, #216]	; (2f00 <nvm_read_buffer+0xf0>)
    2e26:	885b      	ldrh	r3, [r3, #2]
    2e28:	435a      	muls	r2, r3
	if (source_address >
    2e2a:	68fb      	ldr	r3, [r7, #12]
    2e2c:	429a      	cmp	r2, r3
    2e2e:	d201      	bcs.n	2e34 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    2e30:	2318      	movs	r3, #24
    2e32:	e060      	b.n	2ef6 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    2e34:	4b32      	ldr	r3, [pc, #200]	; (2f00 <nvm_read_buffer+0xf0>)
    2e36:	881b      	ldrh	r3, [r3, #0]
    2e38:	3b01      	subs	r3, #1
    2e3a:	001a      	movs	r2, r3
    2e3c:	68fb      	ldr	r3, [r7, #12]
    2e3e:	4013      	ands	r3, r2
    2e40:	d001      	beq.n	2e46 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    2e42:	2318      	movs	r3, #24
    2e44:	e057      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    2e46:	4b2e      	ldr	r3, [pc, #184]	; (2f00 <nvm_read_buffer+0xf0>)
    2e48:	881b      	ldrh	r3, [r3, #0]
    2e4a:	1dba      	adds	r2, r7, #6
    2e4c:	8812      	ldrh	r2, [r2, #0]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d901      	bls.n	2e56 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    2e52:	2317      	movs	r3, #23
    2e54:	e04f      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2e56:	4b2b      	ldr	r3, [pc, #172]	; (2f04 <nvm_read_buffer+0xf4>)
    2e58:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2e5a:	4b2b      	ldr	r3, [pc, #172]	; (2f08 <nvm_read_buffer+0xf8>)
    2e5c:	4798      	blx	r3
    2e5e:	0003      	movs	r3, r0
    2e60:	001a      	movs	r2, r3
    2e62:	2301      	movs	r3, #1
    2e64:	4053      	eors	r3, r2
    2e66:	b2db      	uxtb	r3, r3
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d001      	beq.n	2e70 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
    2e6c:	2305      	movs	r3, #5
    2e6e:	e042      	b.n	2ef6 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2e70:	697b      	ldr	r3, [r7, #20]
    2e72:	2220      	movs	r2, #32
    2e74:	32ff      	adds	r2, #255	; 0xff
    2e76:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	085b      	lsrs	r3, r3, #1
    2e7c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    2e7e:	231a      	movs	r3, #26
    2e80:	18fb      	adds	r3, r7, r3
    2e82:	2200      	movs	r2, #0
    2e84:	801a      	strh	r2, [r3, #0]
    2e86:	e02e      	b.n	2ee6 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    2e88:	69fb      	ldr	r3, [r7, #28]
    2e8a:	1c5a      	adds	r2, r3, #1
    2e8c:	61fa      	str	r2, [r7, #28]
    2e8e:	005b      	lsls	r3, r3, #1
    2e90:	001a      	movs	r2, r3
    2e92:	2312      	movs	r3, #18
    2e94:	18fb      	adds	r3, r7, r3
    2e96:	8812      	ldrh	r2, [r2, #0]
    2e98:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    2e9a:	231a      	movs	r3, #26
    2e9c:	18fb      	adds	r3, r7, r3
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	68ba      	ldr	r2, [r7, #8]
    2ea2:	18d3      	adds	r3, r2, r3
    2ea4:	2212      	movs	r2, #18
    2ea6:	18ba      	adds	r2, r7, r2
    2ea8:	8812      	ldrh	r2, [r2, #0]
    2eaa:	b2d2      	uxtb	r2, r2
    2eac:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    2eae:	231a      	movs	r3, #26
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	881a      	ldrh	r2, [r3, #0]
    2eb4:	1dbb      	adds	r3, r7, #6
    2eb6:	881b      	ldrh	r3, [r3, #0]
    2eb8:	3b01      	subs	r3, #1
    2eba:	429a      	cmp	r2, r3
    2ebc:	da0c      	bge.n	2ed8 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
    2ebe:	231a      	movs	r3, #26
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	881b      	ldrh	r3, [r3, #0]
    2ec4:	3301      	adds	r3, #1
    2ec6:	68ba      	ldr	r2, [r7, #8]
    2ec8:	18d3      	adds	r3, r2, r3
    2eca:	2212      	movs	r2, #18
    2ecc:	18ba      	adds	r2, r7, r2
    2ece:	8812      	ldrh	r2, [r2, #0]
    2ed0:	0a12      	lsrs	r2, r2, #8
    2ed2:	b292      	uxth	r2, r2
    2ed4:	b2d2      	uxtb	r2, r2
    2ed6:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    2ed8:	231a      	movs	r3, #26
    2eda:	18fb      	adds	r3, r7, r3
    2edc:	221a      	movs	r2, #26
    2ede:	18ba      	adds	r2, r7, r2
    2ee0:	8812      	ldrh	r2, [r2, #0]
    2ee2:	3202      	adds	r2, #2
    2ee4:	801a      	strh	r2, [r3, #0]
    2ee6:	231a      	movs	r3, #26
    2ee8:	18fa      	adds	r2, r7, r3
    2eea:	1dbb      	adds	r3, r7, #6
    2eec:	8812      	ldrh	r2, [r2, #0]
    2eee:	881b      	ldrh	r3, [r3, #0]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	d3c9      	bcc.n	2e88 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
    2ef4:	2300      	movs	r3, #0
}
    2ef6:	0018      	movs	r0, r3
    2ef8:	46bd      	mov	sp, r7
    2efa:	b008      	add	sp, #32
    2efc:	bd80      	pop	{r7, pc}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	200001d4 	.word	0x200001d4
    2f04:	41004000 	.word	0x41004000
    2f08:	00002a51 	.word	0x00002a51

00002f0c <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    2f0c:	b580      	push	{r7, lr}
    2f0e:	b084      	sub	sp, #16
    2f10:	af00      	add	r7, sp, #0
    2f12:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    2f14:	4b1e      	ldr	r3, [pc, #120]	; (2f90 <nvm_erase_row+0x84>)
    2f16:	881b      	ldrh	r3, [r3, #0]
    2f18:	001a      	movs	r2, r3
    2f1a:	4b1d      	ldr	r3, [pc, #116]	; (2f90 <nvm_erase_row+0x84>)
    2f1c:	885b      	ldrh	r3, [r3, #2]
    2f1e:	435a      	muls	r2, r3
	if (row_address >
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	429a      	cmp	r2, r3
    2f24:	d201      	bcs.n	2f2a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    2f26:	2318      	movs	r3, #24
    2f28:	e02d      	b.n	2f86 <nvm_erase_row+0x7a>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    2f2a:	4b19      	ldr	r3, [pc, #100]	; (2f90 <nvm_erase_row+0x84>)
    2f2c:	881b      	ldrh	r3, [r3, #0]
    2f2e:	009b      	lsls	r3, r3, #2
    2f30:	3b01      	subs	r3, #1
    2f32:	001a      	movs	r2, r3
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	4013      	ands	r3, r2
    2f38:	d001      	beq.n	2f3e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    2f3a:	2318      	movs	r3, #24
    2f3c:	e023      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2f3e:	4b15      	ldr	r3, [pc, #84]	; (2f94 <nvm_erase_row+0x88>)
    2f40:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    2f42:	4b15      	ldr	r3, [pc, #84]	; (2f98 <nvm_erase_row+0x8c>)
    2f44:	4798      	blx	r3
    2f46:	0003      	movs	r3, r0
    2f48:	001a      	movs	r2, r3
    2f4a:	2301      	movs	r3, #1
    2f4c:	4053      	eors	r3, r2
    2f4e:	b2db      	uxtb	r3, r3
    2f50:	2b00      	cmp	r3, #0
    2f52:	d001      	beq.n	2f58 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    2f54:	2305      	movs	r3, #5
    2f56:	e016      	b.n	2f86 <nvm_erase_row+0x7a>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2f58:	68fb      	ldr	r3, [r7, #12]
    2f5a:	2220      	movs	r2, #32
    2f5c:	32ff      	adds	r2, #255	; 0xff
    2f5e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    2f60:	687b      	ldr	r3, [r7, #4]
    2f62:	089b      	lsrs	r3, r3, #2
    2f64:	005a      	lsls	r2, r3, #1
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    2f6a:	68fb      	ldr	r3, [r7, #12]
    2f6c:	4a0b      	ldr	r2, [pc, #44]	; (2f9c <nvm_erase_row+0x90>)
    2f6e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    2f70:	46c0      	nop			; (mov r8, r8)
    2f72:	4b09      	ldr	r3, [pc, #36]	; (2f98 <nvm_erase_row+0x8c>)
    2f74:	4798      	blx	r3
    2f76:	0003      	movs	r3, r0
    2f78:	001a      	movs	r2, r3
    2f7a:	2301      	movs	r3, #1
    2f7c:	4053      	eors	r3, r2
    2f7e:	b2db      	uxtb	r3, r3
    2f80:	2b00      	cmp	r3, #0
    2f82:	d1f6      	bne.n	2f72 <nvm_erase_row+0x66>
	}

	return STATUS_OK;
    2f84:	2300      	movs	r3, #0
}
    2f86:	0018      	movs	r0, r3
    2f88:	46bd      	mov	sp, r7
    2f8a:	b004      	add	sp, #16
    2f8c:	bd80      	pop	{r7, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	200001d4 	.word	0x200001d4
    2f94:	41004000 	.word	0x41004000
    2f98:	00002a51 	.word	0x00002a51
    2f9c:	ffffa502 	.word	0xffffa502

00002fa0 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b086      	sub	sp, #24
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2fa8:	4b2a      	ldr	r3, [pc, #168]	; (3054 <nvm_get_parameters+0xb4>)
    2faa:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2fac:	697b      	ldr	r3, [r7, #20]
    2fae:	2220      	movs	r2, #32
    2fb0:	32ff      	adds	r2, #255	; 0xff
    2fb2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    2fb4:	697b      	ldr	r3, [r7, #20]
    2fb6:	689b      	ldr	r3, [r3, #8]
    2fb8:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    2fba:	693b      	ldr	r3, [r7, #16]
    2fbc:	0c1b      	lsrs	r3, r3, #16
    2fbe:	2207      	movs	r2, #7
    2fc0:	4013      	ands	r3, r2
    2fc2:	2208      	movs	r2, #8
    2fc4:	409a      	lsls	r2, r3
    2fc6:	0013      	movs	r3, r2
	parameters->page_size =
    2fc8:	b2da      	uxtb	r2, r3
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    2fce:	693b      	ldr	r3, [r7, #16]
    2fd0:	b29a      	uxth	r2, r3
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    2fd6:	4b20      	ldr	r3, [pc, #128]	; (3058 <nvm_get_parameters+0xb8>)
    2fd8:	881b      	ldrh	r3, [r3, #0]
    2fda:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    2fdc:	091b      	lsrs	r3, r3, #4
    2fde:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
    2fe0:	230e      	movs	r3, #14
    2fe2:	18fb      	adds	r3, r7, r3
    2fe4:	2107      	movs	r1, #7
    2fe6:	400a      	ands	r2, r1
    2fe8:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    2fea:	230e      	movs	r3, #14
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	881b      	ldrh	r3, [r3, #0]
    2ff0:	2b07      	cmp	r3, #7
    2ff2:	d103      	bne.n	2ffc <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
    2ff4:	687b      	ldr	r3, [r7, #4]
    2ff6:	2200      	movs	r2, #0
    2ff8:	605a      	str	r2, [r3, #4]
    2ffa:	e00a      	b.n	3012 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    2ffc:	230e      	movs	r3, #14
    2ffe:	18fb      	adds	r3, r7, r3
    3000:	881b      	ldrh	r3, [r3, #0]
    3002:	2206      	movs	r2, #6
    3004:	1ad3      	subs	r3, r2, r3
    3006:	2204      	movs	r2, #4
    3008:	409a      	lsls	r2, r3
    300a:	0013      	movs	r3, r2
    300c:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    3012:	4b11      	ldr	r3, [pc, #68]	; (3058 <nvm_get_parameters+0xb8>)
    3014:	881b      	ldrh	r3, [r3, #0]
    3016:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
    3018:	230c      	movs	r3, #12
    301a:	18fb      	adds	r3, r7, r3
    301c:	2107      	movs	r1, #7
    301e:	400a      	ands	r2, r1
    3020:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    3022:	230c      	movs	r3, #12
    3024:	18fb      	adds	r3, r7, r3
    3026:	881b      	ldrh	r3, [r3, #0]
    3028:	2b07      	cmp	r3, #7
    302a:	d103      	bne.n	3034 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	2200      	movs	r2, #0
    3030:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    3032:	e00a      	b.n	304a <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    3034:	230c      	movs	r3, #12
    3036:	18fb      	adds	r3, r7, r3
    3038:	881b      	ldrh	r3, [r3, #0]
    303a:	2207      	movs	r2, #7
    303c:	1ad3      	subs	r3, r2, r3
    303e:	2204      	movs	r2, #4
    3040:	409a      	lsls	r2, r3
    3042:	0013      	movs	r3, r2
    3044:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	609a      	str	r2, [r3, #8]
}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	46bd      	mov	sp, r7
    304e:	b006      	add	sp, #24
    3050:	bd80      	pop	{r7, pc}
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	41004000 	.word	0x41004000
    3058:	00804000 	.word	0x00804000

0000305c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    305c:	b580      	push	{r7, lr}
    305e:	af00      	add	r7, sp, #0
    3060:	2000      	movs	r0, #0
    3062:	4b02      	ldr	r3, [pc, #8]	; (306c <TCC0_Handler+0x10>)
    3064:	4798      	blx	r3
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	46bd      	mov	sp, r7
    306a:	bd80      	pop	{r7, pc}
    306c:	00003099 	.word	0x00003099

00003070 <TCC1_Handler>:
    3070:	b580      	push	{r7, lr}
    3072:	af00      	add	r7, sp, #0
    3074:	2001      	movs	r0, #1
    3076:	4b02      	ldr	r3, [pc, #8]	; (3080 <TCC1_Handler+0x10>)
    3078:	4798      	blx	r3
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	46bd      	mov	sp, r7
    307e:	bd80      	pop	{r7, pc}
    3080:	00003099 	.word	0x00003099

00003084 <TCC2_Handler>:
    3084:	b580      	push	{r7, lr}
    3086:	af00      	add	r7, sp, #0
    3088:	2002      	movs	r0, #2
    308a:	4b02      	ldr	r3, [pc, #8]	; (3094 <TCC2_Handler+0x10>)
    308c:	4798      	blx	r3
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	46bd      	mov	sp, r7
    3092:	bd80      	pop	{r7, pc}
    3094:	00003099 	.word	0x00003099

00003098 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    3098:	b580      	push	{r7, lr}
    309a:	b086      	sub	sp, #24
    309c:	af00      	add	r7, sp, #0
    309e:	0002      	movs	r2, r0
    30a0:	1dfb      	adds	r3, r7, #7
    30a2:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    30a4:	1dfb      	adds	r3, r7, #7
    30a6:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    30a8:	4b18      	ldr	r3, [pc, #96]	; (310c <_tcc_interrupt_handler+0x74>)
    30aa:	0092      	lsls	r2, r2, #2
    30ac:	58d3      	ldr	r3, [r2, r3]
    30ae:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30b0:	693b      	ldr	r3, [r7, #16]
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    30b6:	693b      	ldr	r3, [r7, #16]
    30b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30ba:	401a      	ands	r2, r3
			module->enable_callback_mask);
    30bc:	693b      	ldr	r3, [r7, #16]
    30be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30c0:	4013      	ands	r3, r2
    30c2:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30c4:	2300      	movs	r3, #0
    30c6:	617b      	str	r3, [r7, #20]
    30c8:	e019      	b.n	30fe <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    30ca:	4b11      	ldr	r3, [pc, #68]	; (3110 <_tcc_interrupt_handler+0x78>)
    30cc:	697a      	ldr	r2, [r7, #20]
    30ce:	0092      	lsls	r2, r2, #2
    30d0:	58d3      	ldr	r3, [r2, r3]
    30d2:	68fa      	ldr	r2, [r7, #12]
    30d4:	4013      	ands	r3, r2
    30d6:	d00f      	beq.n	30f8 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    30d8:	693a      	ldr	r2, [r7, #16]
    30da:	697b      	ldr	r3, [r7, #20]
    30dc:	009b      	lsls	r3, r3, #2
    30de:	18d3      	adds	r3, r2, r3
    30e0:	3304      	adds	r3, #4
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	693a      	ldr	r2, [r7, #16]
    30e6:	0010      	movs	r0, r2
    30e8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    30ea:	693b      	ldr	r3, [r7, #16]
    30ec:	681b      	ldr	r3, [r3, #0]
    30ee:	4a08      	ldr	r2, [pc, #32]	; (3110 <_tcc_interrupt_handler+0x78>)
    30f0:	6979      	ldr	r1, [r7, #20]
    30f2:	0089      	lsls	r1, r1, #2
    30f4:	588a      	ldr	r2, [r1, r2]
    30f6:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    30f8:	697b      	ldr	r3, [r7, #20]
    30fa:	3301      	adds	r3, #1
    30fc:	617b      	str	r3, [r7, #20]
    30fe:	697b      	ldr	r3, [r7, #20]
    3100:	2b0b      	cmp	r3, #11
    3102:	dde2      	ble.n	30ca <_tcc_interrupt_handler+0x32>
		}
	}
}
    3104:	46c0      	nop			; (mov r8, r8)
    3106:	46bd      	mov	sp, r7
    3108:	b006      	add	sp, #24
    310a:	bd80      	pop	{r7, pc}
    310c:	20000450 	.word	0x20000450
    3110:	00016f2c 	.word	0x00016f2c

00003114 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3114:	b580      	push	{r7, lr}
    3116:	af00      	add	r7, sp, #0
    3118:	2000      	movs	r0, #0
    311a:	4b02      	ldr	r3, [pc, #8]	; (3124 <TC3_Handler+0x10>)
    311c:	4798      	blx	r3
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	46bd      	mov	sp, r7
    3122:	bd80      	pop	{r7, pc}
    3124:	00003151 	.word	0x00003151

00003128 <TC4_Handler>:
    3128:	b580      	push	{r7, lr}
    312a:	af00      	add	r7, sp, #0
    312c:	2001      	movs	r0, #1
    312e:	4b02      	ldr	r3, [pc, #8]	; (3138 <TC4_Handler+0x10>)
    3130:	4798      	blx	r3
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	46bd      	mov	sp, r7
    3136:	bd80      	pop	{r7, pc}
    3138:	00003151 	.word	0x00003151

0000313c <TC5_Handler>:
    313c:	b580      	push	{r7, lr}
    313e:	af00      	add	r7, sp, #0
    3140:	2002      	movs	r0, #2
    3142:	4b02      	ldr	r3, [pc, #8]	; (314c <TC5_Handler+0x10>)
    3144:	4798      	blx	r3
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	46bd      	mov	sp, r7
    314a:	bd80      	pop	{r7, pc}
    314c:	00003151 	.word	0x00003151

00003150 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3150:	b580      	push	{r7, lr}
    3152:	b084      	sub	sp, #16
    3154:	af00      	add	r7, sp, #0
    3156:	0002      	movs	r2, r0
    3158:	1dfb      	adds	r3, r7, #7
    315a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    315c:	1dfb      	adds	r3, r7, #7
    315e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    3160:	4b28      	ldr	r3, [pc, #160]	; (3204 <_tc_interrupt_handler+0xb4>)
    3162:	0092      	lsls	r2, r2, #2
    3164:	58d3      	ldr	r3, [r2, r3]
    3166:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3168:	68fb      	ldr	r3, [r7, #12]
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	7b9b      	ldrb	r3, [r3, #14]
    316e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    3170:	68fa      	ldr	r2, [r7, #12]
    3172:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3174:	4013      	ands	r3, r2
    3176:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    317c:	230b      	movs	r3, #11
    317e:	18fb      	adds	r3, r7, r3
    3180:	400a      	ands	r2, r1
    3182:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3184:	230b      	movs	r3, #11
    3186:	18fb      	adds	r3, r7, r3
    3188:	781b      	ldrb	r3, [r3, #0]
    318a:	2201      	movs	r2, #1
    318c:	4013      	ands	r3, r2
    318e:	d008      	beq.n	31a2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3190:	68fb      	ldr	r3, [r7, #12]
    3192:	689b      	ldr	r3, [r3, #8]
    3194:	68fa      	ldr	r2, [r7, #12]
    3196:	0010      	movs	r0, r2
    3198:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	681b      	ldr	r3, [r3, #0]
    319e:	2201      	movs	r2, #1
    31a0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    31a2:	230b      	movs	r3, #11
    31a4:	18fb      	adds	r3, r7, r3
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	2202      	movs	r2, #2
    31aa:	4013      	ands	r3, r2
    31ac:	d008      	beq.n	31c0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	68db      	ldr	r3, [r3, #12]
    31b2:	68fa      	ldr	r2, [r7, #12]
    31b4:	0010      	movs	r0, r2
    31b6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    31b8:	68fb      	ldr	r3, [r7, #12]
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	2202      	movs	r2, #2
    31be:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    31c0:	230b      	movs	r3, #11
    31c2:	18fb      	adds	r3, r7, r3
    31c4:	781b      	ldrb	r3, [r3, #0]
    31c6:	2210      	movs	r2, #16
    31c8:	4013      	ands	r3, r2
    31ca:	d008      	beq.n	31de <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    31cc:	68fb      	ldr	r3, [r7, #12]
    31ce:	691b      	ldr	r3, [r3, #16]
    31d0:	68fa      	ldr	r2, [r7, #12]
    31d2:	0010      	movs	r0, r2
    31d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    31d6:	68fb      	ldr	r3, [r7, #12]
    31d8:	681b      	ldr	r3, [r3, #0]
    31da:	2210      	movs	r2, #16
    31dc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    31de:	230b      	movs	r3, #11
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	2220      	movs	r2, #32
    31e6:	4013      	ands	r3, r2
    31e8:	d008      	beq.n	31fc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	695b      	ldr	r3, [r3, #20]
    31ee:	68fa      	ldr	r2, [r7, #12]
    31f0:	0010      	movs	r0, r2
    31f2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    31f4:	68fb      	ldr	r3, [r7, #12]
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	2220      	movs	r2, #32
    31fa:	739a      	strb	r2, [r3, #14]
	}
}
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	46bd      	mov	sp, r7
    3200:	b004      	add	sp, #16
    3202:	bd80      	pop	{r7, pc}
    3204:	2000045c 	.word	0x2000045c

00003208 <system_gclk_chan_get_config_defaults>:
{
    3208:	b580      	push	{r7, lr}
    320a:	b082      	sub	sp, #8
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	2200      	movs	r2, #0
    3214:	701a      	strb	r2, [r3, #0]
}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	46bd      	mov	sp, r7
    321a:	b002      	add	sp, #8
    321c:	bd80      	pop	{r7, pc}
	...

00003220 <system_apb_clock_set_mask>:
{
    3220:	b580      	push	{r7, lr}
    3222:	b082      	sub	sp, #8
    3224:	af00      	add	r7, sp, #0
    3226:	0002      	movs	r2, r0
    3228:	6039      	str	r1, [r7, #0]
    322a:	1dfb      	adds	r3, r7, #7
    322c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    322e:	1dfb      	adds	r3, r7, #7
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b01      	cmp	r3, #1
    3234:	d00a      	beq.n	324c <system_apb_clock_set_mask+0x2c>
    3236:	2b02      	cmp	r3, #2
    3238:	d00f      	beq.n	325a <system_apb_clock_set_mask+0x3a>
    323a:	2b00      	cmp	r3, #0
    323c:	d114      	bne.n	3268 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    323e:	4b0e      	ldr	r3, [pc, #56]	; (3278 <system_apb_clock_set_mask+0x58>)
    3240:	4a0d      	ldr	r2, [pc, #52]	; (3278 <system_apb_clock_set_mask+0x58>)
    3242:	6991      	ldr	r1, [r2, #24]
    3244:	683a      	ldr	r2, [r7, #0]
    3246:	430a      	orrs	r2, r1
    3248:	619a      	str	r2, [r3, #24]
			break;
    324a:	e00f      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    324c:	4b0a      	ldr	r3, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    324e:	4a0a      	ldr	r2, [pc, #40]	; (3278 <system_apb_clock_set_mask+0x58>)
    3250:	69d1      	ldr	r1, [r2, #28]
    3252:	683a      	ldr	r2, [r7, #0]
    3254:	430a      	orrs	r2, r1
    3256:	61da      	str	r2, [r3, #28]
			break;
    3258:	e008      	b.n	326c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    325a:	4b07      	ldr	r3, [pc, #28]	; (3278 <system_apb_clock_set_mask+0x58>)
    325c:	4a06      	ldr	r2, [pc, #24]	; (3278 <system_apb_clock_set_mask+0x58>)
    325e:	6a11      	ldr	r1, [r2, #32]
    3260:	683a      	ldr	r2, [r7, #0]
    3262:	430a      	orrs	r2, r1
    3264:	621a      	str	r2, [r3, #32]
			break;
    3266:	e001      	b.n	326c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3268:	2317      	movs	r3, #23
    326a:	e000      	b.n	326e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    326c:	2300      	movs	r3, #0
}
    326e:	0018      	movs	r0, r3
    3270:	46bd      	mov	sp, r7
    3272:	b002      	add	sp, #8
    3274:	bd80      	pop	{r7, pc}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	40000400 	.word	0x40000400

0000327c <system_pinmux_get_config_defaults>:
{
    327c:	b580      	push	{r7, lr}
    327e:	b082      	sub	sp, #8
    3280:	af00      	add	r7, sp, #0
    3282:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	2280      	movs	r2, #128	; 0x80
    3288:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	2200      	movs	r2, #0
    328e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	2201      	movs	r2, #1
    3294:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3296:	687b      	ldr	r3, [r7, #4]
    3298:	2200      	movs	r2, #0
    329a:	70da      	strb	r2, [r3, #3]
}
    329c:	46c0      	nop			; (mov r8, r8)
    329e:	46bd      	mov	sp, r7
    32a0:	b002      	add	sp, #8
    32a2:	bd80      	pop	{r7, pc}

000032a4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    32a4:	b580      	push	{r7, lr}
    32a6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    32a8:	4b05      	ldr	r3, [pc, #20]	; (32c0 <system_is_debugger_present+0x1c>)
    32aa:	789b      	ldrb	r3, [r3, #2]
    32ac:	b2db      	uxtb	r3, r3
    32ae:	001a      	movs	r2, r3
    32b0:	2302      	movs	r3, #2
    32b2:	4013      	ands	r3, r2
    32b4:	1e5a      	subs	r2, r3, #1
    32b6:	4193      	sbcs	r3, r2
    32b8:	b2db      	uxtb	r3, r3
}
    32ba:	0018      	movs	r0, r3
    32bc:	46bd      	mov	sp, r7
    32be:	bd80      	pop	{r7, pc}
    32c0:	41002000 	.word	0x41002000

000032c4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b084      	sub	sp, #16
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	681b      	ldr	r3, [r3, #0]
    32d0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	69db      	ldr	r3, [r3, #28]
    32d6:	2207      	movs	r2, #7
    32d8:	4013      	ands	r3, r2
    32da:	1e5a      	subs	r2, r3, #1
    32dc:	4193      	sbcs	r3, r2
    32de:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    32e0:	0018      	movs	r0, r3
    32e2:	46bd      	mov	sp, r7
    32e4:	b004      	add	sp, #16
    32e6:	bd80      	pop	{r7, pc}

000032e8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	b082      	sub	sp, #8
    32ec:	af00      	add	r7, sp, #0
    32ee:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    32f0:	46c0      	nop			; (mov r8, r8)
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	0018      	movs	r0, r3
    32f6:	4b04      	ldr	r3, [pc, #16]	; (3308 <_i2c_master_wait_for_sync+0x20>)
    32f8:	4798      	blx	r3
    32fa:	1e03      	subs	r3, r0, #0
    32fc:	d1f9      	bne.n	32f2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	46bd      	mov	sp, r7
    3302:	b002      	add	sp, #8
    3304:	bd80      	pop	{r7, pc}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	000032c5 	.word	0x000032c5

0000330c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    330c:	b5f0      	push	{r4, r5, r6, r7, lr}
    330e:	b095      	sub	sp, #84	; 0x54
    3310:	af00      	add	r7, sp, #0
    3312:	60f8      	str	r0, [r7, #12]
    3314:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    3316:	2300      	movs	r3, #0
    3318:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    331a:	2300      	movs	r3, #0
    331c:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    331e:	2300      	movs	r3, #0
    3320:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    3322:	233b      	movs	r3, #59	; 0x3b
    3324:	2208      	movs	r2, #8
    3326:	4694      	mov	ip, r2
    3328:	44bc      	add	ip, r7
    332a:	4463      	add	r3, ip
    332c:	2200      	movs	r2, #0
    332e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3330:	68fb      	ldr	r3, [r7, #12]
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    3336:	68fb      	ldr	r3, [r7, #12]
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    333c:	2323      	movs	r3, #35	; 0x23
    333e:	2208      	movs	r2, #8
    3340:	18ba      	adds	r2, r7, r2
    3342:	18d4      	adds	r4, r2, r3
    3344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3346:	0018      	movs	r0, r3
    3348:	4bdb      	ldr	r3, [pc, #876]	; (36b8 <_i2c_master_set_config+0x3ac>)
    334a:	4798      	blx	r3
    334c:	0003      	movs	r3, r0
    334e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3350:	230c      	movs	r3, #12
    3352:	2208      	movs	r2, #8
    3354:	4694      	mov	ip, r2
    3356:	44bc      	add	ip, r7
    3358:	4463      	add	r3, ip
    335a:	0018      	movs	r0, r3
    335c:	4bd7      	ldr	r3, [pc, #860]	; (36bc <_i2c_master_set_config+0x3b0>)
    335e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    3360:	68bb      	ldr	r3, [r7, #8]
    3362:	69db      	ldr	r3, [r3, #28]
    3364:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    3366:	68bb      	ldr	r3, [r7, #8]
    3368:	6a1b      	ldr	r3, [r3, #32]
    336a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    336e:	2b00      	cmp	r3, #0
    3370:	d106      	bne.n	3380 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3374:	2100      	movs	r1, #0
    3376:	0018      	movs	r0, r3
    3378:	4bd1      	ldr	r3, [pc, #836]	; (36c0 <_i2c_master_set_config+0x3b4>)
    337a:	4798      	blx	r3
    337c:	0003      	movs	r3, r0
    337e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3382:	b2da      	uxtb	r2, r3
    3384:	230c      	movs	r3, #12
    3386:	2108      	movs	r1, #8
    3388:	468c      	mov	ip, r1
    338a:	44bc      	add	ip, r7
    338c:	4463      	add	r3, ip
    338e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3390:	230c      	movs	r3, #12
    3392:	2208      	movs	r2, #8
    3394:	4694      	mov	ip, r2
    3396:	44bc      	add	ip, r7
    3398:	4463      	add	r3, ip
    339a:	2202      	movs	r2, #2
    339c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    33a0:	0c1b      	lsrs	r3, r3, #16
    33a2:	b2db      	uxtb	r3, r3
    33a4:	220c      	movs	r2, #12
    33a6:	2108      	movs	r1, #8
    33a8:	468c      	mov	ip, r1
    33aa:	44bc      	add	ip, r7
    33ac:	4462      	add	r2, ip
    33ae:	0011      	movs	r1, r2
    33b0:	0018      	movs	r0, r3
    33b2:	4bc4      	ldr	r3, [pc, #784]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33b4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    33b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33b8:	2b00      	cmp	r3, #0
    33ba:	d106      	bne.n	33ca <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    33bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33be:	2101      	movs	r1, #1
    33c0:	0018      	movs	r0, r3
    33c2:	4bbf      	ldr	r3, [pc, #764]	; (36c0 <_i2c_master_set_config+0x3b4>)
    33c4:	4798      	blx	r3
    33c6:	0003      	movs	r3, r0
    33c8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    33ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33cc:	b2da      	uxtb	r2, r3
    33ce:	230c      	movs	r3, #12
    33d0:	2108      	movs	r1, #8
    33d2:	468c      	mov	ip, r1
    33d4:	44bc      	add	ip, r7
    33d6:	4463      	add	r3, ip
    33d8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    33da:	230c      	movs	r3, #12
    33dc:	2208      	movs	r2, #8
    33de:	4694      	mov	ip, r2
    33e0:	44bc      	add	ip, r7
    33e2:	4463      	add	r3, ip
    33e4:	2202      	movs	r2, #2
    33e6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    33e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    33ea:	0c1b      	lsrs	r3, r3, #16
    33ec:	b2db      	uxtb	r3, r3
    33ee:	220c      	movs	r2, #12
    33f0:	2108      	movs	r1, #8
    33f2:	468c      	mov	ip, r1
    33f4:	44bc      	add	ip, r7
    33f6:	4462      	add	r2, ip
    33f8:	0011      	movs	r1, r2
    33fa:	0018      	movs	r0, r3
    33fc:	4bb1      	ldr	r3, [pc, #708]	; (36c4 <_i2c_master_set_config+0x3b8>)
    33fe:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3400:	68bb      	ldr	r3, [r7, #8]
    3402:	8a9a      	ldrh	r2, [r3, #20]
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    3408:	68bb      	ldr	r3, [r7, #8]
    340a:	8ada      	ldrh	r2, [r3, #22]
    340c:	68fb      	ldr	r3, [r7, #12]
    340e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3410:	68bb      	ldr	r3, [r7, #8]
    3412:	7e1b      	ldrb	r3, [r3, #24]
    3414:	2b00      	cmp	r3, #0
    3416:	d103      	bne.n	3420 <_i2c_master_set_config+0x114>
    3418:	4bab      	ldr	r3, [pc, #684]	; (36c8 <_i2c_master_set_config+0x3bc>)
    341a:	4798      	blx	r3
    341c:	1e03      	subs	r3, r0, #0
    341e:	d002      	beq.n	3426 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3420:	2380      	movs	r3, #128	; 0x80
    3422:	64fb      	str	r3, [r7, #76]	; 0x4c
    3424:	e001      	b.n	342a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    3426:	2300      	movs	r3, #0
    3428:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    342a:	68bb      	ldr	r3, [r7, #8]
    342c:	691b      	ldr	r3, [r3, #16]
    342e:	2b00      	cmp	r3, #0
    3430:	d004      	beq.n	343c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    3432:	68bb      	ldr	r3, [r7, #8]
    3434:	691b      	ldr	r3, [r3, #16]
    3436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3438:	4313      	orrs	r3, r2
    343a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    343c:	68bb      	ldr	r3, [r7, #8]
    343e:	689b      	ldr	r3, [r3, #8]
    3440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3442:	4313      	orrs	r3, r2
    3444:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    3446:	68bb      	ldr	r3, [r7, #8]
    3448:	2224      	movs	r2, #36	; 0x24
    344a:	5c9b      	ldrb	r3, [r3, r2]
    344c:	2b00      	cmp	r3, #0
    344e:	d004      	beq.n	345a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3452:	2280      	movs	r2, #128	; 0x80
    3454:	05d2      	lsls	r2, r2, #23
    3456:	4313      	orrs	r3, r2
    3458:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    345a:	68bb      	ldr	r3, [r7, #8]
    345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    345e:	2b00      	cmp	r3, #0
    3460:	d004      	beq.n	346c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    3462:	68bb      	ldr	r3, [r7, #8]
    3464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3468:	4313      	orrs	r3, r2
    346a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    346c:	68bb      	ldr	r3, [r7, #8]
    346e:	222c      	movs	r2, #44	; 0x2c
    3470:	5c9b      	ldrb	r3, [r3, r2]
    3472:	2b00      	cmp	r3, #0
    3474:	d105      	bne.n	3482 <_i2c_master_set_config+0x176>
    3476:	68bb      	ldr	r3, [r7, #8]
    3478:	689a      	ldr	r2, [r3, #8]
    347a:	2380      	movs	r3, #128	; 0x80
    347c:	049b      	lsls	r3, r3, #18
    347e:	429a      	cmp	r2, r3
    3480:	d104      	bne.n	348c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	0512      	lsls	r2, r2, #20
    3488:	4313      	orrs	r3, r2
    348a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    348c:	68bb      	ldr	r3, [r7, #8]
    348e:	222d      	movs	r2, #45	; 0x2d
    3490:	5c9b      	ldrb	r3, [r3, r2]
    3492:	2b00      	cmp	r3, #0
    3494:	d004      	beq.n	34a0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3498:	2280      	movs	r2, #128	; 0x80
    349a:	0412      	lsls	r2, r2, #16
    349c:	4313      	orrs	r3, r2
    349e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    34a0:	68bb      	ldr	r3, [r7, #8]
    34a2:	222e      	movs	r2, #46	; 0x2e
    34a4:	5c9b      	ldrb	r3, [r3, r2]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d004      	beq.n	34b4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    34aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ac:	2280      	movs	r2, #128	; 0x80
    34ae:	03d2      	lsls	r2, r2, #15
    34b0:	4313      	orrs	r3, r2
    34b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    34b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34b6:	681a      	ldr	r2, [r3, #0]
    34b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ba:	431a      	orrs	r2, r3
    34bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34be:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    34c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    34c2:	2280      	movs	r2, #128	; 0x80
    34c4:	0052      	lsls	r2, r2, #1
    34c6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    34c8:	2323      	movs	r3, #35	; 0x23
    34ca:	2208      	movs	r2, #8
    34cc:	4694      	mov	ip, r2
    34ce:	44bc      	add	ip, r7
    34d0:	4463      	add	r3, ip
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	3314      	adds	r3, #20
    34d6:	b2db      	uxtb	r3, r3
    34d8:	0018      	movs	r0, r3
    34da:	4b7c      	ldr	r3, [pc, #496]	; (36cc <_i2c_master_set_config+0x3c0>)
    34dc:	4798      	blx	r3
    34de:	0003      	movs	r3, r0
    34e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    34e2:	68bb      	ldr	r3, [r7, #8]
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	22fa      	movs	r2, #250	; 0xfa
    34e8:	0092      	lsls	r2, r2, #2
    34ea:	4353      	muls	r3, r2
    34ec:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    34ee:	68bb      	ldr	r3, [r7, #8]
    34f0:	685b      	ldr	r3, [r3, #4]
    34f2:	22fa      	movs	r2, #250	; 0xfa
    34f4:	0092      	lsls	r2, r2, #2
    34f6:	4353      	muls	r3, r2
    34f8:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    34fa:	68bb      	ldr	r3, [r7, #8]
    34fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    34fe:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    3500:	4b73      	ldr	r3, [pc, #460]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3502:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3504:	4798      	blx	r3
    3506:	0005      	movs	r5, r0
    3508:	000e      	movs	r6, r1
    350a:	4b71      	ldr	r3, [pc, #452]	; (36d0 <_i2c_master_set_config+0x3c4>)
    350c:	6a38      	ldr	r0, [r7, #32]
    350e:	4798      	blx	r3
    3510:	6038      	str	r0, [r7, #0]
    3512:	6079      	str	r1, [r7, #4]
    3514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3516:	69ba      	ldr	r2, [r7, #24]
    3518:	435a      	muls	r2, r3
    351a:	4b6d      	ldr	r3, [pc, #436]	; (36d0 <_i2c_master_set_config+0x3c4>)
    351c:	0010      	movs	r0, r2
    351e:	4798      	blx	r3
    3520:	4c6c      	ldr	r4, [pc, #432]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3522:	4a6d      	ldr	r2, [pc, #436]	; (36d8 <_i2c_master_set_config+0x3cc>)
    3524:	4b6d      	ldr	r3, [pc, #436]	; (36dc <_i2c_master_set_config+0x3d0>)
    3526:	47a0      	blx	r4
    3528:	0003      	movs	r3, r0
    352a:	000c      	movs	r4, r1
    352c:	0018      	movs	r0, r3
    352e:	0021      	movs	r1, r4
    3530:	4c6b      	ldr	r4, [pc, #428]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3532:	2200      	movs	r2, #0
    3534:	4b6b      	ldr	r3, [pc, #428]	; (36e4 <_i2c_master_set_config+0x3d8>)
    3536:	47a0      	blx	r4
    3538:	0003      	movs	r3, r0
    353a:	000c      	movs	r4, r1
    353c:	001a      	movs	r2, r3
    353e:	0023      	movs	r3, r4
    3540:	4c64      	ldr	r4, [pc, #400]	; (36d4 <_i2c_master_set_config+0x3c8>)
    3542:	6838      	ldr	r0, [r7, #0]
    3544:	6879      	ldr	r1, [r7, #4]
    3546:	47a0      	blx	r4
    3548:	0003      	movs	r3, r0
    354a:	000c      	movs	r4, r1
    354c:	001a      	movs	r2, r3
    354e:	0023      	movs	r3, r4
    3550:	4c65      	ldr	r4, [pc, #404]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3552:	0028      	movs	r0, r5
    3554:	0031      	movs	r1, r6
    3556:	47a0      	blx	r4
    3558:	0003      	movs	r3, r0
    355a:	000c      	movs	r4, r1
    355c:	001d      	movs	r5, r3
    355e:	0026      	movs	r6, r4
    3560:	6a3b      	ldr	r3, [r7, #32]
    3562:	005a      	lsls	r2, r3, #1
    3564:	4b5a      	ldr	r3, [pc, #360]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3566:	0010      	movs	r0, r2
    3568:	4798      	blx	r3
    356a:	0002      	movs	r2, r0
    356c:	000b      	movs	r3, r1
    356e:	4c5c      	ldr	r4, [pc, #368]	; (36e0 <_i2c_master_set_config+0x3d4>)
    3570:	0028      	movs	r0, r5
    3572:	0031      	movs	r1, r6
    3574:	47a0      	blx	r4
    3576:	0003      	movs	r3, r0
    3578:	000c      	movs	r4, r1
    357a:	0018      	movs	r0, r3
    357c:	0021      	movs	r1, r4
    357e:	4c5a      	ldr	r4, [pc, #360]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3580:	2200      	movs	r2, #0
    3582:	4b5a      	ldr	r3, [pc, #360]	; (36ec <_i2c_master_set_config+0x3e0>)
    3584:	47a0      	blx	r4
    3586:	0003      	movs	r3, r0
    3588:	000c      	movs	r4, r1
    358a:	001d      	movs	r5, r3
    358c:	0026      	movs	r6, r4
    358e:	6a3b      	ldr	r3, [r7, #32]
    3590:	005a      	lsls	r2, r3, #1
    3592:	4b4f      	ldr	r3, [pc, #316]	; (36d0 <_i2c_master_set_config+0x3c4>)
    3594:	0010      	movs	r0, r2
    3596:	4798      	blx	r3
    3598:	0002      	movs	r2, r0
    359a:	000b      	movs	r3, r1
    359c:	4c54      	ldr	r4, [pc, #336]	; (36f0 <_i2c_master_set_config+0x3e4>)
    359e:	0028      	movs	r0, r5
    35a0:	0031      	movs	r1, r6
    35a2:	47a0      	blx	r4
    35a4:	0003      	movs	r3, r0
    35a6:	000c      	movs	r4, r1
    35a8:	0019      	movs	r1, r3
    35aa:	0022      	movs	r2, r4
    35ac:	4b51      	ldr	r3, [pc, #324]	; (36f4 <_i2c_master_set_config+0x3e8>)
    35ae:	0008      	movs	r0, r1
    35b0:	0011      	movs	r1, r2
    35b2:	4798      	blx	r3
    35b4:	0003      	movs	r3, r0
    35b6:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    35b8:	68bb      	ldr	r3, [r7, #8]
    35ba:	689a      	ldr	r2, [r3, #8]
    35bc:	2380      	movs	r3, #128	; 0x80
    35be:	049b      	lsls	r3, r3, #18
    35c0:	429a      	cmp	r2, r3
    35c2:	d145      	bne.n	3650 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    35c4:	4b42      	ldr	r3, [pc, #264]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    35c8:	4798      	blx	r3
    35ca:	4c45      	ldr	r4, [pc, #276]	; (36e0 <_i2c_master_set_config+0x3d4>)
    35cc:	0002      	movs	r2, r0
    35ce:	000b      	movs	r3, r1
    35d0:	47a0      	blx	r4
    35d2:	0003      	movs	r3, r0
    35d4:	000c      	movs	r4, r1
    35d6:	001d      	movs	r5, r3
    35d8:	0026      	movs	r6, r4
    35da:	4b3d      	ldr	r3, [pc, #244]	; (36d0 <_i2c_master_set_config+0x3c4>)
    35dc:	69f8      	ldr	r0, [r7, #28]
    35de:	4798      	blx	r3
    35e0:	4c3c      	ldr	r4, [pc, #240]	; (36d4 <_i2c_master_set_config+0x3c8>)
    35e2:	2200      	movs	r2, #0
    35e4:	4b44      	ldr	r3, [pc, #272]	; (36f8 <_i2c_master_set_config+0x3ec>)
    35e6:	47a0      	blx	r4
    35e8:	0003      	movs	r3, r0
    35ea:	000c      	movs	r4, r1
    35ec:	001a      	movs	r2, r3
    35ee:	0023      	movs	r3, r4
    35f0:	4c3f      	ldr	r4, [pc, #252]	; (36f0 <_i2c_master_set_config+0x3e4>)
    35f2:	0028      	movs	r0, r5
    35f4:	0031      	movs	r1, r6
    35f6:	47a0      	blx	r4
    35f8:	0003      	movs	r3, r0
    35fa:	000c      	movs	r4, r1
    35fc:	0018      	movs	r0, r3
    35fe:	0021      	movs	r1, r4
    3600:	4c39      	ldr	r4, [pc, #228]	; (36e8 <_i2c_master_set_config+0x3dc>)
    3602:	2200      	movs	r2, #0
    3604:	4b39      	ldr	r3, [pc, #228]	; (36ec <_i2c_master_set_config+0x3e0>)
    3606:	47a0      	blx	r4
    3608:	0003      	movs	r3, r0
    360a:	000c      	movs	r4, r1
    360c:	0019      	movs	r1, r3
    360e:	0022      	movs	r2, r4
    3610:	4b38      	ldr	r3, [pc, #224]	; (36f4 <_i2c_master_set_config+0x3e8>)
    3612:	0008      	movs	r0, r1
    3614:	0011      	movs	r1, r2
    3616:	4798      	blx	r3
    3618:	0003      	movs	r3, r0
    361a:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    361e:	2b00      	cmp	r3, #0
    3620:	d009      	beq.n	3636 <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3622:	4b36      	ldr	r3, [pc, #216]	; (36fc <_i2c_master_set_config+0x3f0>)
    3624:	69f9      	ldr	r1, [r7, #28]
    3626:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3628:	4798      	blx	r3
    362a:	0003      	movs	r3, r0
    362c:	1e9a      	subs	r2, r3, #2
    362e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3630:	1ad3      	subs	r3, r2, r3
    3632:	64bb      	str	r3, [r7, #72]	; 0x48
    3634:	e00c      	b.n	3650 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3636:	69fb      	ldr	r3, [r7, #28]
    3638:	005a      	lsls	r2, r3, #1
    363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    363c:	18d3      	adds	r3, r2, r3
    363e:	1e5a      	subs	r2, r3, #1
    3640:	69fb      	ldr	r3, [r7, #28]
    3642:	0059      	lsls	r1, r3, #1
    3644:	4b2d      	ldr	r3, [pc, #180]	; (36fc <_i2c_master_set_config+0x3f0>)
    3646:	0010      	movs	r0, r2
    3648:	4798      	blx	r3
    364a:	0003      	movs	r3, r0
    364c:	3b01      	subs	r3, #1
    364e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3652:	2bff      	cmp	r3, #255	; 0xff
    3654:	dc08      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3658:	2b00      	cmp	r3, #0
    365a:	db05      	blt.n	3668 <_i2c_master_set_config+0x35c>
    365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    365e:	2bff      	cmp	r3, #255	; 0xff
    3660:	dc02      	bgt.n	3668 <_i2c_master_set_config+0x35c>
    3662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3664:	2b00      	cmp	r3, #0
    3666:	da06      	bge.n	3676 <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3668:	233b      	movs	r3, #59	; 0x3b
    366a:	2208      	movs	r2, #8
    366c:	4694      	mov	ip, r2
    366e:	44bc      	add	ip, r7
    3670:	4463      	add	r3, ip
    3672:	2240      	movs	r2, #64	; 0x40
    3674:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    3676:	233b      	movs	r3, #59	; 0x3b
    3678:	2208      	movs	r2, #8
    367a:	4694      	mov	ip, r2
    367c:	44bc      	add	ip, r7
    367e:	4463      	add	r3, ip
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	2b40      	cmp	r3, #64	; 0x40
    3684:	d00e      	beq.n	36a4 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3688:	22ff      	movs	r2, #255	; 0xff
    368a:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    368e:	041b      	lsls	r3, r3, #16
    3690:	0019      	movs	r1, r3
    3692:	23ff      	movs	r3, #255	; 0xff
    3694:	041b      	lsls	r3, r3, #16
    3696:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3698:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    369a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    369c:	0612      	lsls	r2, r2, #24
    369e:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    36a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36a2:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    36a4:	233b      	movs	r3, #59	; 0x3b
    36a6:	2208      	movs	r2, #8
    36a8:	4694      	mov	ip, r2
    36aa:	44bc      	add	ip, r7
    36ac:	4463      	add	r3, ip
    36ae:	781b      	ldrb	r3, [r3, #0]
}
    36b0:	0018      	movs	r0, r3
    36b2:	46bd      	mov	sp, r7
    36b4:	b015      	add	sp, #84	; 0x54
    36b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b8:	00006f45 	.word	0x00006f45
    36bc:	0000327d 	.word	0x0000327d
    36c0:	00006d89 	.word	0x00006d89
    36c4:	00007e1d 	.word	0x00007e1d
    36c8:	000032a5 	.word	0x000032a5
    36cc:	00007c55 	.word	0x00007c55
    36d0:	00016a15 	.word	0x00016a15
    36d4:	00015dfd 	.word	0x00015dfd
    36d8:	e826d695 	.word	0xe826d695
    36dc:	3e112e0b 	.word	0x3e112e0b
    36e0:	00014f75 	.word	0x00014f75
    36e4:	40240000 	.word	0x40240000
    36e8:	000162fd 	.word	0x000162fd
    36ec:	3ff00000 	.word	0x3ff00000
    36f0:	00015595 	.word	0x00015595
    36f4:	00016929 	.word	0x00016929
    36f8:	40080000 	.word	0x40080000
    36fc:	00013cf1 	.word	0x00013cf1

00003700 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3700:	b590      	push	{r4, r7, lr}
    3702:	b08b      	sub	sp, #44	; 0x2c
    3704:	af00      	add	r7, sp, #0
    3706:	60f8      	str	r0, [r7, #12]
    3708:	60b9      	str	r1, [r7, #8]
    370a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    370c:	68fb      	ldr	r3, [r7, #12]
    370e:	68ba      	ldr	r2, [r7, #8]
    3710:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3712:	68fb      	ldr	r3, [r7, #12]
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3718:	68fb      	ldr	r3, [r7, #12]
    371a:	681b      	ldr	r3, [r3, #0]
    371c:	0018      	movs	r0, r3
    371e:	4b3b      	ldr	r3, [pc, #236]	; (380c <i2c_master_init+0x10c>)
    3720:	4798      	blx	r3
    3722:	0003      	movs	r3, r0
    3724:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3726:	6a3b      	ldr	r3, [r7, #32]
    3728:	3302      	adds	r3, #2
    372a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    372c:	6a3b      	ldr	r3, [r7, #32]
    372e:	3314      	adds	r3, #20
    3730:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3732:	2201      	movs	r2, #1
    3734:	69fb      	ldr	r3, [r7, #28]
    3736:	409a      	lsls	r2, r3
    3738:	0013      	movs	r3, r2
    373a:	0019      	movs	r1, r3
    373c:	2002      	movs	r0, #2
    373e:	4b34      	ldr	r3, [pc, #208]	; (3810 <i2c_master_init+0x110>)
    3740:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3742:	2314      	movs	r3, #20
    3744:	18fb      	adds	r3, r7, r3
    3746:	0018      	movs	r0, r3
    3748:	4b32      	ldr	r3, [pc, #200]	; (3814 <i2c_master_init+0x114>)
    374a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	7b1a      	ldrb	r2, [r3, #12]
    3750:	2314      	movs	r3, #20
    3752:	18fb      	adds	r3, r7, r3
    3754:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3756:	69bb      	ldr	r3, [r7, #24]
    3758:	b2db      	uxtb	r3, r3
    375a:	2214      	movs	r2, #20
    375c:	18ba      	adds	r2, r7, r2
    375e:	0011      	movs	r1, r2
    3760:	0018      	movs	r0, r3
    3762:	4b2d      	ldr	r3, [pc, #180]	; (3818 <i2c_master_init+0x118>)
    3764:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3766:	69bb      	ldr	r3, [r7, #24]
    3768:	b2db      	uxtb	r3, r3
    376a:	0018      	movs	r0, r3
    376c:	4b2b      	ldr	r3, [pc, #172]	; (381c <i2c_master_init+0x11c>)
    376e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3770:	687b      	ldr	r3, [r7, #4]
    3772:	7b1b      	ldrb	r3, [r3, #12]
    3774:	2100      	movs	r1, #0
    3776:	0018      	movs	r0, r3
    3778:	4b29      	ldr	r3, [pc, #164]	; (3820 <i2c_master_init+0x120>)
    377a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	2202      	movs	r2, #2
    3782:	4013      	ands	r3, r2
    3784:	d001      	beq.n	378a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    3786:	231c      	movs	r3, #28
    3788:	e03b      	b.n	3802 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    378c:	681b      	ldr	r3, [r3, #0]
    378e:	2201      	movs	r2, #1
    3790:	4013      	ands	r3, r2
    3792:	d001      	beq.n	3798 <i2c_master_init+0x98>
		return STATUS_BUSY;
    3794:	2305      	movs	r3, #5
    3796:	e034      	b.n	3802 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3798:	68fb      	ldr	r3, [r7, #12]
    379a:	681b      	ldr	r3, [r3, #0]
    379c:	2217      	movs	r2, #23
    379e:	18bc      	adds	r4, r7, r2
    37a0:	0018      	movs	r0, r3
    37a2:	4b1a      	ldr	r3, [pc, #104]	; (380c <i2c_master_init+0x10c>)
    37a4:	4798      	blx	r3
    37a6:	0003      	movs	r3, r0
    37a8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    37aa:	4a1e      	ldr	r2, [pc, #120]	; (3824 <i2c_master_init+0x124>)
    37ac:	2317      	movs	r3, #23
    37ae:	18fb      	adds	r3, r7, r3
    37b0:	781b      	ldrb	r3, [r3, #0]
    37b2:	0011      	movs	r1, r2
    37b4:	0018      	movs	r0, r3
    37b6:	4b1c      	ldr	r3, [pc, #112]	; (3828 <i2c_master_init+0x128>)
    37b8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    37ba:	2317      	movs	r3, #23
    37bc:	18fb      	adds	r3, r7, r3
    37be:	781a      	ldrb	r2, [r3, #0]
    37c0:	4b1a      	ldr	r3, [pc, #104]	; (382c <i2c_master_init+0x12c>)
    37c2:	0092      	lsls	r2, r2, #2
    37c4:	68f9      	ldr	r1, [r7, #12]
    37c6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    37c8:	68fb      	ldr	r3, [r7, #12]
    37ca:	2200      	movs	r2, #0
    37cc:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	2200      	movs	r2, #0
    37d2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    37d4:	68fb      	ldr	r3, [r7, #12]
    37d6:	2200      	movs	r2, #0
    37d8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    37da:	68fb      	ldr	r3, [r7, #12]
    37dc:	2200      	movs	r2, #0
    37de:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    37e0:	68fb      	ldr	r3, [r7, #12]
    37e2:	2225      	movs	r2, #37	; 0x25
    37e4:	2100      	movs	r1, #0
    37e6:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    37e8:	68fb      	ldr	r3, [r7, #12]
    37ea:	2200      	movs	r2, #0
    37ec:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    37ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37f0:	2214      	movs	r2, #20
    37f2:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    37f4:	687a      	ldr	r2, [r7, #4]
    37f6:	68fb      	ldr	r3, [r7, #12]
    37f8:	0011      	movs	r1, r2
    37fa:	0018      	movs	r0, r3
    37fc:	4b0c      	ldr	r3, [pc, #48]	; (3830 <i2c_master_init+0x130>)
    37fe:	4798      	blx	r3
    3800:	0003      	movs	r3, r0
}
    3802:	0018      	movs	r0, r3
    3804:	46bd      	mov	sp, r7
    3806:	b00b      	add	sp, #44	; 0x2c
    3808:	bd90      	pop	{r4, r7, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	00006f45 	.word	0x00006f45
    3810:	00003221 	.word	0x00003221
    3814:	00003209 	.word	0x00003209
    3818:	00007b31 	.word	0x00007b31
    381c:	00007b75 	.word	0x00007b75
    3820:	00006cfd 	.word	0x00006cfd
    3824:	00004021 	.word	0x00004021
    3828:	00006fa9 	.word	0x00006fa9
    382c:	20000468 	.word	0x20000468
    3830:	0000330d 	.word	0x0000330d

00003834 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	7e1b      	ldrb	r3, [r3, #24]
    3846:	b2db      	uxtb	r3, r3
    3848:	001a      	movs	r2, r3
    384a:	2302      	movs	r3, #2
    384c:	4013      	ands	r3, r2
    384e:	d00b      	beq.n	3868 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3850:	68fb      	ldr	r3, [r7, #12]
    3852:	2202      	movs	r2, #2
    3854:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	8b5b      	ldrh	r3, [r3, #26]
    385a:	b29b      	uxth	r3, r3
    385c:	001a      	movs	r2, r3
    385e:	2302      	movs	r3, #2
    3860:	4013      	ands	r3, r2
    3862:	d011      	beq.n	3888 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3864:	2341      	movs	r3, #65	; 0x41
    3866:	e010      	b.n	388a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3868:	68fb      	ldr	r3, [r7, #12]
    386a:	8b5b      	ldrh	r3, [r3, #26]
    386c:	b29b      	uxth	r3, r3
    386e:	001a      	movs	r2, r3
    3870:	2304      	movs	r3, #4
    3872:	4013      	ands	r3, r2
    3874:	d008      	beq.n	3888 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3876:	68fb      	ldr	r3, [r7, #12]
    3878:	685b      	ldr	r3, [r3, #4]
    387a:	22c0      	movs	r2, #192	; 0xc0
    387c:	0292      	lsls	r2, r2, #10
    387e:	431a      	orrs	r2, r3
    3880:	68fb      	ldr	r3, [r7, #12]
    3882:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    3884:	2318      	movs	r3, #24
    3886:	e000      	b.n	388a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    3888:	2300      	movs	r3, #0
}
    388a:	0018      	movs	r0, r3
    388c:	46bd      	mov	sp, r7
    388e:	b004      	add	sp, #16
    3890:	bd80      	pop	{r7, pc}

00003892 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3892:	b580      	push	{r7, lr}
    3894:	b084      	sub	sp, #16
    3896:	af00      	add	r7, sp, #0
    3898:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    38a0:	230e      	movs	r3, #14
    38a2:	18fb      	adds	r3, r7, r3
    38a4:	2200      	movs	r2, #0
    38a6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38a8:	e00f      	b.n	38ca <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    38aa:	230e      	movs	r3, #14
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	220e      	movs	r2, #14
    38b0:	18ba      	adds	r2, r7, r2
    38b2:	8812      	ldrh	r2, [r2, #0]
    38b4:	3201      	adds	r2, #1
    38b6:	801a      	strh	r2, [r3, #0]
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	891b      	ldrh	r3, [r3, #8]
    38bc:	220e      	movs	r2, #14
    38be:	18ba      	adds	r2, r7, r2
    38c0:	8812      	ldrh	r2, [r2, #0]
    38c2:	429a      	cmp	r2, r3
    38c4:	d301      	bcc.n	38ca <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    38c6:	2312      	movs	r3, #18
    38c8:	e00e      	b.n	38e8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38ca:	68bb      	ldr	r3, [r7, #8]
    38cc:	7e1b      	ldrb	r3, [r3, #24]
    38ce:	b2db      	uxtb	r3, r3
    38d0:	001a      	movs	r2, r3
    38d2:	2301      	movs	r3, #1
    38d4:	4013      	ands	r3, r2
    38d6:	d106      	bne.n	38e6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    38d8:	68bb      	ldr	r3, [r7, #8]
    38da:	7e1b      	ldrb	r3, [r3, #24]
    38dc:	b2db      	uxtb	r3, r3
    38de:	001a      	movs	r2, r3
    38e0:	2302      	movs	r3, #2
    38e2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38e4:	d0e1      	beq.n	38aa <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    38e6:	2300      	movs	r3, #0
}
    38e8:	0018      	movs	r0, r3
    38ea:	46bd      	mov	sp, r7
    38ec:	b004      	add	sp, #16
    38ee:	bd80      	pop	{r7, pc}

000038f0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    38f0:	b590      	push	{r4, r7, lr}
    38f2:	b085      	sub	sp, #20
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
    38f8:	000a      	movs	r2, r1
    38fa:	1cfb      	adds	r3, r7, #3
    38fc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	681b      	ldr	r3, [r3, #0]
    3902:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3904:	68fb      	ldr	r3, [r7, #12]
    3906:	685b      	ldr	r3, [r3, #4]
    3908:	2280      	movs	r2, #128	; 0x80
    390a:	02d2      	lsls	r2, r2, #11
    390c:	431a      	orrs	r2, r3
    390e:	68fb      	ldr	r3, [r7, #12]
    3910:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    3912:	1cfb      	adds	r3, r7, #3
    3914:	781a      	ldrb	r2, [r3, #0]
    3916:	68fb      	ldr	r3, [r7, #12]
    3918:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    391a:	230b      	movs	r3, #11
    391c:	18fc      	adds	r4, r7, r3
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	0018      	movs	r0, r3
    3922:	4b07      	ldr	r3, [pc, #28]	; (3940 <_i2c_master_send_hs_master_code+0x50>)
    3924:	4798      	blx	r3
    3926:	0003      	movs	r3, r0
    3928:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    392a:	68fb      	ldr	r3, [r7, #12]
    392c:	2201      	movs	r2, #1
    392e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    3930:	230b      	movs	r3, #11
    3932:	18fb      	adds	r3, r7, r3
    3934:	781b      	ldrb	r3, [r3, #0]
}
    3936:	0018      	movs	r0, r3
    3938:	46bd      	mov	sp, r7
    393a:	b005      	add	sp, #20
    393c:	bd90      	pop	{r4, r7, pc}
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	00003893 	.word	0x00003893

00003944 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3944:	b590      	push	{r4, r7, lr}
    3946:	b087      	sub	sp, #28
    3948:	af00      	add	r7, sp, #0
    394a:	6078      	str	r0, [r7, #4]
    394c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	681b      	ldr	r3, [r3, #0]
    3952:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3954:	2314      	movs	r3, #20
    3956:	18fb      	adds	r3, r7, r3
    3958:	683a      	ldr	r2, [r7, #0]
    395a:	8852      	ldrh	r2, [r2, #2]
    395c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    395e:	2312      	movs	r3, #18
    3960:	18fb      	adds	r3, r7, r3
    3962:	2200      	movs	r2, #0
    3964:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3966:	68fb      	ldr	r3, [r7, #12]
    3968:	681b      	ldr	r3, [r3, #0]
    396a:	011b      	lsls	r3, r3, #4
    396c:	0fdb      	lsrs	r3, r3, #31
    396e:	b2db      	uxtb	r3, r3
    3970:	001a      	movs	r2, r3
    3972:	230b      	movs	r3, #11
    3974:	18fb      	adds	r3, r7, r3
    3976:	1e51      	subs	r1, r2, #1
    3978:	418a      	sbcs	r2, r1
    397a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    397c:	683b      	ldr	r3, [r7, #0]
    397e:	7a5b      	ldrb	r3, [r3, #9]
    3980:	2b00      	cmp	r3, #0
    3982:	d006      	beq.n	3992 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	7a9a      	ldrb	r2, [r3, #10]
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	0011      	movs	r1, r2
    398c:	0018      	movs	r0, r3
    398e:	4b85      	ldr	r3, [pc, #532]	; (3ba4 <_i2c_master_read_packet+0x260>)
    3990:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3992:	68fb      	ldr	r3, [r7, #12]
    3994:	685b      	ldr	r3, [r3, #4]
    3996:	4a84      	ldr	r2, [pc, #528]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3998:	401a      	ands	r2, r3
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    399e:	683b      	ldr	r3, [r7, #0]
    39a0:	7a1b      	ldrb	r3, [r3, #8]
    39a2:	2b00      	cmp	r3, #0
    39a4:	d042      	beq.n	3a2c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    39a6:	683b      	ldr	r3, [r7, #0]
    39a8:	881b      	ldrh	r3, [r3, #0]
    39aa:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39ac:	683b      	ldr	r3, [r7, #0]
    39ae:	7a5b      	ldrb	r3, [r3, #9]
    39b0:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    39b2:	4313      	orrs	r3, r2
    39b4:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    39b6:	2380      	movs	r3, #128	; 0x80
    39b8:	021b      	lsls	r3, r3, #8
    39ba:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    39c0:	2317      	movs	r3, #23
    39c2:	18fc      	adds	r4, r7, r3
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	0018      	movs	r0, r3
    39c8:	4b78      	ldr	r3, [pc, #480]	; (3bac <_i2c_master_read_packet+0x268>)
    39ca:	4798      	blx	r3
    39cc:	0003      	movs	r3, r0
    39ce:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    39d0:	68fb      	ldr	r3, [r7, #12]
    39d2:	685b      	ldr	r3, [r3, #4]
    39d4:	4a74      	ldr	r2, [pc, #464]	; (3ba8 <_i2c_master_read_packet+0x264>)
    39d6:	401a      	ands	r2, r3
    39d8:	68fb      	ldr	r3, [r7, #12]
    39da:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    39dc:	2317      	movs	r3, #23
    39de:	18fb      	adds	r3, r7, r3
    39e0:	781b      	ldrb	r3, [r3, #0]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d107      	bne.n	39f6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    39e6:	2317      	movs	r3, #23
    39e8:	18fc      	adds	r4, r7, r3
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	0018      	movs	r0, r3
    39ee:	4b70      	ldr	r3, [pc, #448]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    39f0:	4798      	blx	r3
    39f2:	0003      	movs	r3, r0
    39f4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    39f6:	2317      	movs	r3, #23
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	781b      	ldrb	r3, [r3, #0]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d111      	bne.n	3a24 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a00:	683b      	ldr	r3, [r7, #0]
    3a02:	881b      	ldrh	r3, [r3, #0]
    3a04:	0a1b      	lsrs	r3, r3, #8
    3a06:	b29b      	uxth	r3, r3
    3a08:	2278      	movs	r2, #120	; 0x78
    3a0a:	4313      	orrs	r3, r2
    3a0c:	b29b      	uxth	r3, r3
    3a0e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a10:	683b      	ldr	r3, [r7, #0]
    3a12:	7a5b      	ldrb	r3, [r3, #9]
    3a14:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a16:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a18:	2201      	movs	r2, #1
    3a1a:	4313      	orrs	r3, r2
    3a1c:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a1e:	68fb      	ldr	r3, [r7, #12]
    3a20:	625a      	str	r2, [r3, #36]	; 0x24
    3a22:	e00f      	b.n	3a44 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    3a24:	2317      	movs	r3, #23
    3a26:	18fb      	adds	r3, r7, r3
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	e0b6      	b.n	3b9a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a2c:	683b      	ldr	r3, [r7, #0]
    3a2e:	881b      	ldrh	r3, [r3, #0]
    3a30:	005b      	lsls	r3, r3, #1
    3a32:	2201      	movs	r2, #1
    3a34:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3a36:	683b      	ldr	r3, [r7, #0]
    3a38:	7a5b      	ldrb	r3, [r3, #9]
    3a3a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a3c:	4313      	orrs	r3, r2
    3a3e:	001a      	movs	r2, r3
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3a44:	2317      	movs	r3, #23
    3a46:	18fc      	adds	r4, r7, r3
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	0018      	movs	r0, r3
    3a4c:	4b57      	ldr	r3, [pc, #348]	; (3bac <_i2c_master_read_packet+0x268>)
    3a4e:	4798      	blx	r3
    3a50:	0003      	movs	r3, r0
    3a52:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    3a54:	230b      	movs	r3, #11
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d00b      	beq.n	3a76 <_i2c_master_read_packet+0x132>
    3a5e:	683b      	ldr	r3, [r7, #0]
    3a60:	885b      	ldrh	r3, [r3, #2]
    3a62:	2b01      	cmp	r3, #1
    3a64:	d107      	bne.n	3a76 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3a66:	68fb      	ldr	r3, [r7, #12]
    3a68:	685b      	ldr	r3, [r3, #4]
    3a6a:	2280      	movs	r2, #128	; 0x80
    3a6c:	02d2      	lsls	r2, r2, #11
    3a6e:	431a      	orrs	r2, r3
    3a70:	68fb      	ldr	r3, [r7, #12]
    3a72:	605a      	str	r2, [r3, #4]
    3a74:	e005      	b.n	3a82 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    3a76:	68fb      	ldr	r3, [r7, #12]
    3a78:	685b      	ldr	r3, [r3, #4]
    3a7a:	4a4b      	ldr	r2, [pc, #300]	; (3ba8 <_i2c_master_read_packet+0x264>)
    3a7c:	401a      	ands	r2, r3
    3a7e:	68fb      	ldr	r3, [r7, #12]
    3a80:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3a82:	2317      	movs	r3, #23
    3a84:	18fb      	adds	r3, r7, r3
    3a86:	781b      	ldrb	r3, [r3, #0]
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d107      	bne.n	3a9c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    3a8c:	2317      	movs	r3, #23
    3a8e:	18fc      	adds	r4, r7, r3
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	0018      	movs	r0, r3
    3a94:	4b46      	ldr	r3, [pc, #280]	; (3bb0 <_i2c_master_read_packet+0x26c>)
    3a96:	4798      	blx	r3
    3a98:	0003      	movs	r3, r0
    3a9a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3a9c:	2317      	movs	r3, #23
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d000      	beq.n	3aa8 <_i2c_master_read_packet+0x164>
    3aa6:	e075      	b.n	3b94 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    3aa8:	e04b      	b.n	3b42 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	8b5b      	ldrh	r3, [r3, #26]
    3aae:	b29b      	uxth	r3, r3
    3ab0:	001a      	movs	r2, r3
    3ab2:	2320      	movs	r3, #32
    3ab4:	4013      	ands	r3, r2
    3ab6:	d101      	bne.n	3abc <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    3ab8:	2341      	movs	r3, #65	; 0x41
    3aba:	e06e      	b.n	3b9a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3abc:	687b      	ldr	r3, [r7, #4]
    3abe:	7adb      	ldrb	r3, [r3, #11]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d01e      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
    3ac4:	230b      	movs	r3, #11
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	2201      	movs	r2, #1
    3acc:	4053      	eors	r3, r2
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d004      	beq.n	3ade <_i2c_master_read_packet+0x19a>
    3ad4:	2314      	movs	r3, #20
    3ad6:	18fb      	adds	r3, r7, r3
    3ad8:	881b      	ldrh	r3, [r3, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d009      	beq.n	3af2 <_i2c_master_read_packet+0x1ae>
    3ade:	230b      	movs	r3, #11
    3ae0:	18fb      	adds	r3, r7, r3
    3ae2:	781b      	ldrb	r3, [r3, #0]
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d00c      	beq.n	3b02 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3ae8:	2314      	movs	r3, #20
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	881b      	ldrh	r3, [r3, #0]
    3aee:	2b01      	cmp	r3, #1
    3af0:	d107      	bne.n	3b02 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3af2:	68fb      	ldr	r3, [r7, #12]
    3af4:	685b      	ldr	r3, [r3, #4]
    3af6:	2280      	movs	r2, #128	; 0x80
    3af8:	02d2      	lsls	r2, r2, #11
    3afa:	431a      	orrs	r2, r3
    3afc:	68fb      	ldr	r3, [r7, #12]
    3afe:	605a      	str	r2, [r3, #4]
    3b00:	e01a      	b.n	3b38 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	0018      	movs	r0, r3
    3b06:	4b2b      	ldr	r3, [pc, #172]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b08:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3b0a:	683b      	ldr	r3, [r7, #0]
    3b0c:	685a      	ldr	r2, [r3, #4]
    3b0e:	2312      	movs	r3, #18
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	881b      	ldrh	r3, [r3, #0]
    3b14:	2112      	movs	r1, #18
    3b16:	1879      	adds	r1, r7, r1
    3b18:	1c58      	adds	r0, r3, #1
    3b1a:	8008      	strh	r0, [r1, #0]
    3b1c:	18d3      	adds	r3, r2, r3
    3b1e:	68fa      	ldr	r2, [r7, #12]
    3b20:	2128      	movs	r1, #40	; 0x28
    3b22:	5c52      	ldrb	r2, [r2, r1]
    3b24:	b2d2      	uxtb	r2, r2
    3b26:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    3b28:	2317      	movs	r3, #23
    3b2a:	18fc      	adds	r4, r7, r3
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	0018      	movs	r0, r3
    3b30:	4b1e      	ldr	r3, [pc, #120]	; (3bac <_i2c_master_read_packet+0x268>)
    3b32:	4798      	blx	r3
    3b34:	0003      	movs	r3, r0
    3b36:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3b38:	2317      	movs	r3, #23
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d109      	bne.n	3b56 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    3b42:	2314      	movs	r3, #20
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	881b      	ldrh	r3, [r3, #0]
    3b48:	2214      	movs	r2, #20
    3b4a:	18ba      	adds	r2, r7, r2
    3b4c:	1e59      	subs	r1, r3, #1
    3b4e:	8011      	strh	r1, [r2, #0]
    3b50:	2b00      	cmp	r3, #0
    3b52:	d1aa      	bne.n	3aaa <_i2c_master_read_packet+0x166>
    3b54:	e000      	b.n	3b58 <_i2c_master_read_packet+0x214>
				break;
    3b56:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3b58:	687b      	ldr	r3, [r7, #4]
    3b5a:	7a9b      	ldrb	r3, [r3, #10]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d00a      	beq.n	3b76 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	0018      	movs	r0, r3
    3b64:	4b13      	ldr	r3, [pc, #76]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b66:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3b68:	68fb      	ldr	r3, [r7, #12]
    3b6a:	685b      	ldr	r3, [r3, #4]
    3b6c:	22c0      	movs	r2, #192	; 0xc0
    3b6e:	0292      	lsls	r2, r2, #10
    3b70:	431a      	orrs	r2, r3
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    3b76:	687b      	ldr	r3, [r7, #4]
    3b78:	0018      	movs	r0, r3
    3b7a:	4b0e      	ldr	r3, [pc, #56]	; (3bb4 <_i2c_master_read_packet+0x270>)
    3b7c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3b7e:	683b      	ldr	r3, [r7, #0]
    3b80:	685a      	ldr	r2, [r3, #4]
    3b82:	2312      	movs	r3, #18
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	881b      	ldrh	r3, [r3, #0]
    3b88:	18d3      	adds	r3, r2, r3
    3b8a:	68fa      	ldr	r2, [r7, #12]
    3b8c:	2128      	movs	r1, #40	; 0x28
    3b8e:	5c52      	ldrb	r2, [r2, r1]
    3b90:	b2d2      	uxtb	r2, r2
    3b92:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    3b94:	2317      	movs	r3, #23
    3b96:	18fb      	adds	r3, r7, r3
    3b98:	781b      	ldrb	r3, [r3, #0]
}
    3b9a:	0018      	movs	r0, r3
    3b9c:	46bd      	mov	sp, r7
    3b9e:	b007      	add	sp, #28
    3ba0:	bd90      	pop	{r4, r7, pc}
    3ba2:	46c0      	nop			; (mov r8, r8)
    3ba4:	000038f1 	.word	0x000038f1
    3ba8:	fffbffff 	.word	0xfffbffff
    3bac:	00003893 	.word	0x00003893
    3bb0:	00003835 	.word	0x00003835
    3bb4:	000032e9 	.word	0x000032e9

00003bb8 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
    3bc0:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	8b9b      	ldrh	r3, [r3, #28]
    3bc6:	b29b      	uxth	r3, r3
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d001      	beq.n	3bd0 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    3bcc:	2305      	movs	r3, #5
    3bce:	e00c      	b.n	3bea <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	2201      	movs	r2, #1
    3bd4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	2201      	movs	r2, #1
    3bda:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    3bdc:	683a      	ldr	r2, [r7, #0]
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	0011      	movs	r1, r2
    3be2:	0018      	movs	r0, r3
    3be4:	4b03      	ldr	r3, [pc, #12]	; (3bf4 <i2c_master_read_packet_wait+0x3c>)
    3be6:	4798      	blx	r3
    3be8:	0003      	movs	r3, r0
}
    3bea:	0018      	movs	r0, r3
    3bec:	46bd      	mov	sp, r7
    3bee:	b002      	add	sp, #8
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	00003945 	.word	0x00003945

00003bf8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3bf8:	b590      	push	{r4, r7, lr}
    3bfa:	b087      	sub	sp, #28
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3c08:	2314      	movs	r3, #20
    3c0a:	18fb      	adds	r3, r7, r3
    3c0c:	683a      	ldr	r2, [r7, #0]
    3c0e:	8852      	ldrh	r2, [r2, #2]
    3c10:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	0018      	movs	r0, r3
    3c16:	4b51      	ldr	r3, [pc, #324]	; (3d5c <_i2c_master_write_packet+0x164>)
    3c18:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3c1a:	683b      	ldr	r3, [r7, #0]
    3c1c:	7a5b      	ldrb	r3, [r3, #9]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d006      	beq.n	3c30 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3c22:	683b      	ldr	r3, [r7, #0]
    3c24:	7a9a      	ldrb	r2, [r3, #10]
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	0011      	movs	r1, r2
    3c2a:	0018      	movs	r0, r3
    3c2c:	4b4c      	ldr	r3, [pc, #304]	; (3d60 <_i2c_master_write_packet+0x168>)
    3c2e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	685b      	ldr	r3, [r3, #4]
    3c34:	4a4b      	ldr	r2, [pc, #300]	; (3d64 <_i2c_master_write_packet+0x16c>)
    3c36:	401a      	ands	r2, r3
    3c38:	68fb      	ldr	r3, [r7, #12]
    3c3a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3c3c:	683b      	ldr	r3, [r7, #0]
    3c3e:	7a1b      	ldrb	r3, [r3, #8]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d00d      	beq.n	3c60 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c44:	683b      	ldr	r3, [r7, #0]
    3c46:	881b      	ldrh	r3, [r3, #0]
    3c48:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c4a:	683b      	ldr	r3, [r7, #0]
    3c4c:	7a5b      	ldrb	r3, [r3, #9]
    3c4e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c50:	4313      	orrs	r3, r2
    3c52:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3c54:	2380      	movs	r3, #128	; 0x80
    3c56:	021b      	lsls	r3, r3, #8
    3c58:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c5a:	68fb      	ldr	r3, [r7, #12]
    3c5c:	625a      	str	r2, [r3, #36]	; 0x24
    3c5e:	e009      	b.n	3c74 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c60:	683b      	ldr	r3, [r7, #0]
    3c62:	881b      	ldrh	r3, [r3, #0]
    3c64:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3c66:	683b      	ldr	r3, [r7, #0]
    3c68:	7a5b      	ldrb	r3, [r3, #9]
    3c6a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3c6c:	4313      	orrs	r3, r2
    3c6e:	001a      	movs	r2, r3
    3c70:	68fb      	ldr	r3, [r7, #12]
    3c72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3c74:	2317      	movs	r3, #23
    3c76:	18fc      	adds	r4, r7, r3
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	0018      	movs	r0, r3
    3c7c:	4b3a      	ldr	r3, [pc, #232]	; (3d68 <_i2c_master_write_packet+0x170>)
    3c7e:	4798      	blx	r3
    3c80:	0003      	movs	r3, r0
    3c82:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3c84:	2317      	movs	r3, #23
    3c86:	18fb      	adds	r3, r7, r3
    3c88:	781b      	ldrb	r3, [r3, #0]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d107      	bne.n	3c9e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    3c8e:	2317      	movs	r3, #23
    3c90:	18fc      	adds	r4, r7, r3
    3c92:	687b      	ldr	r3, [r7, #4]
    3c94:	0018      	movs	r0, r3
    3c96:	4b35      	ldr	r3, [pc, #212]	; (3d6c <_i2c_master_write_packet+0x174>)
    3c98:	4798      	blx	r3
    3c9a:	0003      	movs	r3, r0
    3c9c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3c9e:	2317      	movs	r3, #23
    3ca0:	18fb      	adds	r3, r7, r3
    3ca2:	781b      	ldrb	r3, [r3, #0]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d152      	bne.n	3d4e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    3ca8:	2312      	movs	r3, #18
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	2200      	movs	r2, #0
    3cae:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    3cb0:	e033      	b.n	3d1a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3cb2:	68fb      	ldr	r3, [r7, #12]
    3cb4:	8b5b      	ldrh	r3, [r3, #26]
    3cb6:	b29b      	uxth	r3, r3
    3cb8:	001a      	movs	r2, r3
    3cba:	2320      	movs	r3, #32
    3cbc:	4013      	ands	r3, r2
    3cbe:	d101      	bne.n	3cc4 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    3cc0:	2341      	movs	r3, #65	; 0x41
    3cc2:	e047      	b.n	3d54 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	0018      	movs	r0, r3
    3cc8:	4b24      	ldr	r3, [pc, #144]	; (3d5c <_i2c_master_write_packet+0x164>)
    3cca:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3ccc:	683b      	ldr	r3, [r7, #0]
    3cce:	685a      	ldr	r2, [r3, #4]
    3cd0:	2312      	movs	r3, #18
    3cd2:	18fb      	adds	r3, r7, r3
    3cd4:	881b      	ldrh	r3, [r3, #0]
    3cd6:	2112      	movs	r1, #18
    3cd8:	1879      	adds	r1, r7, r1
    3cda:	1c58      	adds	r0, r3, #1
    3cdc:	8008      	strh	r0, [r1, #0]
    3cde:	18d3      	adds	r3, r2, r3
    3ce0:	7819      	ldrb	r1, [r3, #0]
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	2228      	movs	r2, #40	; 0x28
    3ce6:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3ce8:	2317      	movs	r3, #23
    3cea:	18fc      	adds	r4, r7, r3
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	0018      	movs	r0, r3
    3cf0:	4b1d      	ldr	r3, [pc, #116]	; (3d68 <_i2c_master_write_packet+0x170>)
    3cf2:	4798      	blx	r3
    3cf4:	0003      	movs	r3, r0
    3cf6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3cf8:	2317      	movs	r3, #23
    3cfa:	18fb      	adds	r3, r7, r3
    3cfc:	781b      	ldrb	r3, [r3, #0]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d115      	bne.n	3d2e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	8b5b      	ldrh	r3, [r3, #26]
    3d06:	b29b      	uxth	r3, r3
    3d08:	001a      	movs	r2, r3
    3d0a:	2304      	movs	r3, #4
    3d0c:	4013      	ands	r3, r2
    3d0e:	d004      	beq.n	3d1a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    3d10:	2317      	movs	r3, #23
    3d12:	18fb      	adds	r3, r7, r3
    3d14:	221e      	movs	r2, #30
    3d16:	701a      	strb	r2, [r3, #0]
				break;
    3d18:	e00a      	b.n	3d30 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    3d1a:	2314      	movs	r3, #20
    3d1c:	18fb      	adds	r3, r7, r3
    3d1e:	881b      	ldrh	r3, [r3, #0]
    3d20:	2214      	movs	r2, #20
    3d22:	18ba      	adds	r2, r7, r2
    3d24:	1e59      	subs	r1, r3, #1
    3d26:	8011      	strh	r1, [r2, #0]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d1c2      	bne.n	3cb2 <_i2c_master_write_packet+0xba>
    3d2c:	e000      	b.n	3d30 <_i2c_master_write_packet+0x138>
				break;
    3d2e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	7a9b      	ldrb	r3, [r3, #10]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d00a      	beq.n	3d4e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    3d38:	687b      	ldr	r3, [r7, #4]
    3d3a:	0018      	movs	r0, r3
    3d3c:	4b07      	ldr	r3, [pc, #28]	; (3d5c <_i2c_master_write_packet+0x164>)
    3d3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3d40:	68fb      	ldr	r3, [r7, #12]
    3d42:	685b      	ldr	r3, [r3, #4]
    3d44:	22c0      	movs	r2, #192	; 0xc0
    3d46:	0292      	lsls	r2, r2, #10
    3d48:	431a      	orrs	r2, r3
    3d4a:	68fb      	ldr	r3, [r7, #12]
    3d4c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    3d4e:	2317      	movs	r3, #23
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	781b      	ldrb	r3, [r3, #0]
}
    3d54:	0018      	movs	r0, r3
    3d56:	46bd      	mov	sp, r7
    3d58:	b007      	add	sp, #28
    3d5a:	bd90      	pop	{r4, r7, pc}
    3d5c:	000032e9 	.word	0x000032e9
    3d60:	000038f1 	.word	0x000038f1
    3d64:	fffbffff 	.word	0xfffbffff
    3d68:	00003893 	.word	0x00003893
    3d6c:	00003835 	.word	0x00003835

00003d70 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b082      	sub	sp, #8
    3d74:	af00      	add	r7, sp, #0
    3d76:	6078      	str	r0, [r7, #4]
    3d78:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3d7a:	687b      	ldr	r3, [r7, #4]
    3d7c:	8b9b      	ldrh	r3, [r3, #28]
    3d7e:	b29b      	uxth	r3, r3
    3d80:	2b00      	cmp	r3, #0
    3d82:	d001      	beq.n	3d88 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    3d84:	2305      	movs	r3, #5
    3d86:	e00c      	b.n	3da2 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	2201      	movs	r2, #1
    3d8c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	2201      	movs	r2, #1
    3d92:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    3d94:	683a      	ldr	r2, [r7, #0]
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	0011      	movs	r1, r2
    3d9a:	0018      	movs	r0, r3
    3d9c:	4b03      	ldr	r3, [pc, #12]	; (3dac <i2c_master_write_packet_wait+0x3c>)
    3d9e:	4798      	blx	r3
    3da0:	0003      	movs	r3, r0
}
    3da2:	0018      	movs	r0, r3
    3da4:	46bd      	mov	sp, r7
    3da6:	b002      	add	sp, #8
    3da8:	bd80      	pop	{r7, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	00003bf9 	.word	0x00003bf9

00003db0 <i2c_master_is_syncing>:
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b084      	sub	sp, #16
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3dbe:	68fb      	ldr	r3, [r7, #12]
    3dc0:	69db      	ldr	r3, [r3, #28]
    3dc2:	2207      	movs	r2, #7
    3dc4:	4013      	ands	r3, r2
    3dc6:	1e5a      	subs	r2, r3, #1
    3dc8:	4193      	sbcs	r3, r2
    3dca:	b2db      	uxtb	r3, r3
}
    3dcc:	0018      	movs	r0, r3
    3dce:	46bd      	mov	sp, r7
    3dd0:	b004      	add	sp, #16
    3dd2:	bd80      	pop	{r7, pc}

00003dd4 <_i2c_master_wait_for_sync>:
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	b082      	sub	sp, #8
    3dd8:	af00      	add	r7, sp, #0
    3dda:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3ddc:	46c0      	nop			; (mov r8, r8)
    3dde:	687b      	ldr	r3, [r7, #4]
    3de0:	0018      	movs	r0, r3
    3de2:	4b04      	ldr	r3, [pc, #16]	; (3df4 <_i2c_master_wait_for_sync+0x20>)
    3de4:	4798      	blx	r3
    3de6:	1e03      	subs	r3, r0, #0
    3de8:	d1f9      	bne.n	3dde <_i2c_master_wait_for_sync+0xa>
}
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	46bd      	mov	sp, r7
    3dee:	b002      	add	sp, #8
    3df0:	bd80      	pop	{r7, pc}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	00003db1 	.word	0x00003db1

00003df8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b084      	sub	sp, #16
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3e06:	68fb      	ldr	r3, [r7, #12]
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	011b      	lsls	r3, r3, #4
    3e0c:	0fdb      	lsrs	r3, r3, #31
    3e0e:	b2db      	uxtb	r3, r3
    3e10:	001a      	movs	r2, r3
    3e12:	230b      	movs	r3, #11
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	1e51      	subs	r1, r2, #1
    3e18:	418a      	sbcs	r2, r1
    3e1a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3e1c:	2308      	movs	r3, #8
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	687a      	ldr	r2, [r7, #4]
    3e22:	8b52      	ldrh	r2, [r2, #26]
    3e24:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	8b9b      	ldrh	r3, [r3, #28]
    3e2a:	b29a      	uxth	r2, r3
    3e2c:	2308      	movs	r3, #8
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	2108      	movs	r1, #8
    3e32:	1879      	adds	r1, r7, r1
    3e34:	8809      	ldrh	r1, [r1, #0]
    3e36:	1a8a      	subs	r2, r1, r2
    3e38:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	8b9b      	ldrh	r3, [r3, #28]
    3e3e:	b29b      	uxth	r3, r3
    3e40:	3b01      	subs	r3, #1
    3e42:	b29a      	uxth	r2, r3
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    3e48:	230b      	movs	r3, #11
    3e4a:	18fb      	adds	r3, r7, r3
    3e4c:	781b      	ldrb	r3, [r3, #0]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d010      	beq.n	3e74 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	7adb      	ldrb	r3, [r3, #11]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d01c      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	8b9b      	ldrh	r3, [r3, #28]
    3e5e:	b29b      	uxth	r3, r3
    3e60:	2b01      	cmp	r3, #1
    3e62:	d117      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e64:	68fb      	ldr	r3, [r7, #12]
    3e66:	685b      	ldr	r3, [r3, #4]
    3e68:	2280      	movs	r2, #128	; 0x80
    3e6a:	02d2      	lsls	r2, r2, #11
    3e6c:	431a      	orrs	r2, r3
    3e6e:	68fb      	ldr	r3, [r7, #12]
    3e70:	605a      	str	r2, [r3, #4]
    3e72:	e00f      	b.n	3e94 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	7adb      	ldrb	r3, [r3, #11]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d00b      	beq.n	3e94 <_i2c_master_read+0x9c>
    3e7c:	687b      	ldr	r3, [r7, #4]
    3e7e:	8b9b      	ldrh	r3, [r3, #28]
    3e80:	b29b      	uxth	r3, r3
    3e82:	2b00      	cmp	r3, #0
    3e84:	d106      	bne.n	3e94 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e86:	68fb      	ldr	r3, [r7, #12]
    3e88:	685b      	ldr	r3, [r3, #4]
    3e8a:	2280      	movs	r2, #128	; 0x80
    3e8c:	02d2      	lsls	r2, r2, #11
    3e8e:	431a      	orrs	r2, r3
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	8b9b      	ldrh	r3, [r3, #28]
    3e98:	b29b      	uxth	r3, r3
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d10e      	bne.n	3ebc <_i2c_master_read+0xc4>
		if (module->send_stop) {
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	7a9b      	ldrb	r3, [r3, #10]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d00a      	beq.n	3ebc <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	0018      	movs	r0, r3
    3eaa:	4b0e      	ldr	r3, [pc, #56]	; (3ee4 <_i2c_master_read+0xec>)
    3eac:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	22c0      	movs	r2, #192	; 0xc0
    3eb4:	0292      	lsls	r2, r2, #10
    3eb6:	431a      	orrs	r2, r3
    3eb8:	68fb      	ldr	r3, [r7, #12]
    3eba:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <_i2c_master_read+0xec>)
    3ec2:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	6a1a      	ldr	r2, [r3, #32]
    3ec8:	2308      	movs	r3, #8
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	881b      	ldrh	r3, [r3, #0]
    3ece:	18d3      	adds	r3, r2, r3
    3ed0:	68fa      	ldr	r2, [r7, #12]
    3ed2:	2128      	movs	r1, #40	; 0x28
    3ed4:	5c52      	ldrb	r2, [r2, r1]
    3ed6:	b2d2      	uxtb	r2, r2
    3ed8:	701a      	strb	r2, [r3, #0]
}
    3eda:	46c0      	nop			; (mov r8, r8)
    3edc:	46bd      	mov	sp, r7
    3ede:	b004      	add	sp, #16
    3ee0:	bd80      	pop	{r7, pc}
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	00003dd5 	.word	0x00003dd5

00003ee8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	681b      	ldr	r3, [r3, #0]
    3ef4:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	8b5b      	ldrh	r3, [r3, #26]
    3efa:	b29b      	uxth	r3, r3
    3efc:	001a      	movs	r2, r3
    3efe:	2304      	movs	r3, #4
    3f00:	4013      	ands	r3, r2
    3f02:	d004      	beq.n	3f0e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3f04:	687b      	ldr	r3, [r7, #4]
    3f06:	2225      	movs	r2, #37	; 0x25
    3f08:	211e      	movs	r1, #30
    3f0a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    3f0c:	e024      	b.n	3f58 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    3f0e:	230a      	movs	r3, #10
    3f10:	18fb      	adds	r3, r7, r3
    3f12:	687a      	ldr	r2, [r7, #4]
    3f14:	8b52      	ldrh	r2, [r2, #26]
    3f16:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	8b9b      	ldrh	r3, [r3, #28]
    3f1c:	b29a      	uxth	r2, r3
    3f1e:	230a      	movs	r3, #10
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	210a      	movs	r1, #10
    3f24:	1879      	adds	r1, r7, r1
    3f26:	8809      	ldrh	r1, [r1, #0]
    3f28:	1a8a      	subs	r2, r1, r2
    3f2a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	8b9b      	ldrh	r3, [r3, #28]
    3f30:	b29b      	uxth	r3, r3
    3f32:	3b01      	subs	r3, #1
    3f34:	b29a      	uxth	r2, r3
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	0018      	movs	r0, r3
    3f3e:	4b08      	ldr	r3, [pc, #32]	; (3f60 <_i2c_master_write+0x78>)
    3f40:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	6a1a      	ldr	r2, [r3, #32]
    3f46:	230a      	movs	r3, #10
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	881b      	ldrh	r3, [r3, #0]
    3f4c:	18d3      	adds	r3, r2, r3
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	b2d9      	uxtb	r1, r3
    3f52:	68fb      	ldr	r3, [r7, #12]
    3f54:	2228      	movs	r2, #40	; 0x28
    3f56:	5499      	strb	r1, [r3, r2]
}
    3f58:	46bd      	mov	sp, r7
    3f5a:	b004      	add	sp, #16
    3f5c:	bd80      	pop	{r7, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	00003dd5 	.word	0x00003dd5

00003f64 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b084      	sub	sp, #16
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3f72:	68fb      	ldr	r3, [r7, #12]
    3f74:	7e1b      	ldrb	r3, [r3, #24]
    3f76:	b2db      	uxtb	r3, r3
    3f78:	001a      	movs	r2, r3
    3f7a:	2301      	movs	r3, #1
    3f7c:	4013      	ands	r3, r2
    3f7e:	d02b      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3f80:	68fb      	ldr	r3, [r7, #12]
    3f82:	2201      	movs	r2, #1
    3f84:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3f86:	68fb      	ldr	r3, [r7, #12]
    3f88:	8b5b      	ldrh	r3, [r3, #26]
    3f8a:	b29b      	uxth	r3, r3
    3f8c:	001a      	movs	r2, r3
    3f8e:	2302      	movs	r3, #2
    3f90:	4013      	ands	r3, r2
    3f92:	d004      	beq.n	3f9e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	2225      	movs	r2, #37	; 0x25
    3f98:	2141      	movs	r1, #65	; 0x41
    3f9a:	5499      	strb	r1, [r3, r2]
    3f9c:	e01c      	b.n	3fd8 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	8b5b      	ldrh	r3, [r3, #26]
    3fa2:	b29b      	uxth	r3, r3
    3fa4:	001a      	movs	r2, r3
    3fa6:	2304      	movs	r3, #4
    3fa8:	4013      	ands	r3, r2
    3faa:	d015      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	2225      	movs	r2, #37	; 0x25
    3fb0:	2118      	movs	r1, #24
    3fb2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2200      	movs	r2, #0
    3fb8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	7a9b      	ldrb	r3, [r3, #10]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d00a      	beq.n	3fd8 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	0018      	movs	r0, r3
    3fc6:	4b13      	ldr	r3, [pc, #76]	; (4014 <_i2c_master_async_address_response+0xb0>)
    3fc8:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3fca:	68fb      	ldr	r3, [r7, #12]
    3fcc:	685b      	ldr	r3, [r3, #4]
    3fce:	22c0      	movs	r2, #192	; 0xc0
    3fd0:	0292      	lsls	r2, r2, #10
    3fd2:	431a      	orrs	r2, r3
    3fd4:	68fb      	ldr	r3, [r7, #12]
    3fd6:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	8b9b      	ldrh	r3, [r3, #28]
    3fdc:	b29a      	uxth	r2, r3
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	2225      	movs	r2, #37	; 0x25
    3fe6:	5c9b      	ldrb	r3, [r3, r2]
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	2b05      	cmp	r3, #5
    3fec:	d10e      	bne.n	400c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3fee:	687b      	ldr	r3, [r7, #4]
    3ff0:	2224      	movs	r2, #36	; 0x24
    3ff2:	5c9b      	ldrb	r3, [r3, r2]
    3ff4:	b2db      	uxtb	r3, r3
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d104      	bne.n	4004 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	0018      	movs	r0, r3
    3ffe:	4b06      	ldr	r3, [pc, #24]	; (4018 <_i2c_master_async_address_response+0xb4>)
    4000:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    4002:	e003      	b.n	400c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	0018      	movs	r0, r3
    4008:	4b04      	ldr	r3, [pc, #16]	; (401c <_i2c_master_async_address_response+0xb8>)
    400a:	4798      	blx	r3
}
    400c:	46c0      	nop			; (mov r8, r8)
    400e:	46bd      	mov	sp, r7
    4010:	b004      	add	sp, #16
    4012:	bd80      	pop	{r7, pc}
    4014:	00003dd5 	.word	0x00003dd5
    4018:	00003ee9 	.word	0x00003ee9
    401c:	00003df9 	.word	0x00003df9

00004020 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    4020:	b580      	push	{r7, lr}
    4022:	b086      	sub	sp, #24
    4024:	af00      	add	r7, sp, #0
    4026:	0002      	movs	r2, r0
    4028:	1dfb      	adds	r3, r7, #7
    402a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    402c:	1dfb      	adds	r3, r7, #7
    402e:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    4030:	4b93      	ldr	r3, [pc, #588]	; (4280 <_i2c_master_interrupt_handler+0x260>)
    4032:	0092      	lsls	r2, r2, #2
    4034:	58d3      	ldr	r3, [r2, r3]
    4036:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4038:	697b      	ldr	r3, [r7, #20]
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    403e:	693b      	ldr	r3, [r7, #16]
    4040:	681b      	ldr	r3, [r3, #0]
    4042:	011b      	lsls	r3, r3, #4
    4044:	0fdb      	lsrs	r3, r3, #31
    4046:	b2db      	uxtb	r3, r3
    4048:	001a      	movs	r2, r3
    404a:	230f      	movs	r3, #15
    404c:	18fb      	adds	r3, r7, r3
    404e:	1e51      	subs	r1, r2, #1
    4050:	418a      	sbcs	r2, r1
    4052:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    4054:	230e      	movs	r3, #14
    4056:	18fb      	adds	r3, r7, r3
    4058:	697a      	ldr	r2, [r7, #20]
    405a:	7e52      	ldrb	r2, [r2, #25]
    405c:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    405e:	697b      	ldr	r3, [r7, #20]
    4060:	7e1b      	ldrb	r3, [r3, #24]
    4062:	b2da      	uxtb	r2, r3
    4064:	230e      	movs	r3, #14
    4066:	18fb      	adds	r3, r7, r3
    4068:	210e      	movs	r1, #14
    406a:	1879      	adds	r1, r7, r1
    406c:	7809      	ldrb	r1, [r1, #0]
    406e:	400a      	ands	r2, r1
    4070:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    4072:	697b      	ldr	r3, [r7, #20]
    4074:	8b5b      	ldrh	r3, [r3, #26]
    4076:	b29b      	uxth	r3, r3
    4078:	2b00      	cmp	r3, #0
    407a:	d109      	bne.n	4090 <_i2c_master_interrupt_handler+0x70>
    407c:	697b      	ldr	r3, [r7, #20]
    407e:	8b9b      	ldrh	r3, [r3, #28]
    4080:	b29b      	uxth	r3, r3
    4082:	2b00      	cmp	r3, #0
    4084:	d004      	beq.n	4090 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    4086:	697b      	ldr	r3, [r7, #20]
    4088:	0018      	movs	r0, r3
    408a:	4b7e      	ldr	r3, [pc, #504]	; (4284 <_i2c_master_interrupt_handler+0x264>)
    408c:	4798      	blx	r3
    408e:	e070      	b.n	4172 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4090:	697b      	ldr	r3, [r7, #20]
    4092:	8b5b      	ldrh	r3, [r3, #26]
    4094:	b29b      	uxth	r3, r3
    4096:	2b00      	cmp	r3, #0
    4098:	d039      	beq.n	410e <_i2c_master_interrupt_handler+0xee>
    409a:	697b      	ldr	r3, [r7, #20]
    409c:	8b9b      	ldrh	r3, [r3, #28]
    409e:	b29b      	uxth	r3, r3
    40a0:	2b00      	cmp	r3, #0
    40a2:	d134      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    40a4:	697b      	ldr	r3, [r7, #20]
    40a6:	2225      	movs	r2, #37	; 0x25
    40a8:	5c9b      	ldrb	r3, [r3, r2]
    40aa:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    40ac:	2b05      	cmp	r3, #5
    40ae:	d12e      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    40b0:	697b      	ldr	r3, [r7, #20]
    40b2:	2224      	movs	r2, #36	; 0x24
    40b4:	5c9b      	ldrb	r3, [r3, r2]
    40b6:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    40b8:	2b00      	cmp	r3, #0
    40ba:	d128      	bne.n	410e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    40bc:	693b      	ldr	r3, [r7, #16]
    40be:	2203      	movs	r2, #3
    40c0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    40c2:	697b      	ldr	r3, [r7, #20]
    40c4:	2200      	movs	r2, #0
    40c6:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    40c8:	697b      	ldr	r3, [r7, #20]
    40ca:	2225      	movs	r2, #37	; 0x25
    40cc:	2100      	movs	r1, #0
    40ce:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    40d0:	697b      	ldr	r3, [r7, #20]
    40d2:	7a9b      	ldrb	r3, [r3, #10]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d00b      	beq.n	40f0 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    40d8:	697b      	ldr	r3, [r7, #20]
    40da:	0018      	movs	r0, r3
    40dc:	4b6a      	ldr	r3, [pc, #424]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    40de:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    40e0:	693b      	ldr	r3, [r7, #16]
    40e2:	685b      	ldr	r3, [r3, #4]
    40e4:	22c0      	movs	r2, #192	; 0xc0
    40e6:	0292      	lsls	r2, r2, #10
    40e8:	431a      	orrs	r2, r3
    40ea:	693b      	ldr	r3, [r7, #16]
    40ec:	605a      	str	r2, [r3, #4]
    40ee:	e002      	b.n	40f6 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    40f0:	693b      	ldr	r3, [r7, #16]
    40f2:	2201      	movs	r2, #1
    40f4:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    40f6:	230e      	movs	r3, #14
    40f8:	18fb      	adds	r3, r7, r3
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2201      	movs	r2, #1
    40fe:	4013      	ands	r3, r2
    4100:	d037      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4102:	697b      	ldr	r3, [r7, #20]
    4104:	68db      	ldr	r3, [r3, #12]
    4106:	697a      	ldr	r2, [r7, #20]
    4108:	0010      	movs	r0, r2
    410a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    410c:	e031      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    410e:	697b      	ldr	r3, [r7, #20]
    4110:	8b5b      	ldrh	r3, [r3, #26]
    4112:	b29b      	uxth	r3, r3
    4114:	2b00      	cmp	r3, #0
    4116:	d02c      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
    4118:	697b      	ldr	r3, [r7, #20]
    411a:	8b9b      	ldrh	r3, [r3, #28]
    411c:	b29b      	uxth	r3, r3
    411e:	2b00      	cmp	r3, #0
    4120:	d027      	beq.n	4172 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    4122:	693b      	ldr	r3, [r7, #16]
    4124:	8b5b      	ldrh	r3, [r3, #26]
    4126:	b29b      	uxth	r3, r3
    4128:	001a      	movs	r2, r3
    412a:	2320      	movs	r3, #32
    412c:	4013      	ands	r3, r2
    412e:	d111      	bne.n	4154 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4130:	230f      	movs	r3, #15
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	2201      	movs	r2, #1
    4138:	4053      	eors	r3, r2
    413a:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    413c:	2b00      	cmp	r3, #0
    413e:	d104      	bne.n	414a <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4140:	697b      	ldr	r3, [r7, #20]
    4142:	8b9b      	ldrh	r3, [r3, #28]
    4144:	b29b      	uxth	r3, r3
    4146:	2b01      	cmp	r3, #1
    4148:	d004      	beq.n	4154 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    414a:	697b      	ldr	r3, [r7, #20]
    414c:	2225      	movs	r2, #37	; 0x25
    414e:	2141      	movs	r1, #65	; 0x41
    4150:	5499      	strb	r1, [r3, r2]
    4152:	e00e      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4154:	697b      	ldr	r3, [r7, #20]
    4156:	2224      	movs	r2, #36	; 0x24
    4158:	5c9b      	ldrb	r3, [r3, r2]
    415a:	b2db      	uxtb	r3, r3
    415c:	2b00      	cmp	r3, #0
    415e:	d104      	bne.n	416a <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    4160:	697b      	ldr	r3, [r7, #20]
    4162:	0018      	movs	r0, r3
    4164:	4b49      	ldr	r3, [pc, #292]	; (428c <_i2c_master_interrupt_handler+0x26c>)
    4166:	4798      	blx	r3
    4168:	e003      	b.n	4172 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    416a:	697b      	ldr	r3, [r7, #20]
    416c:	0018      	movs	r0, r3
    416e:	4b48      	ldr	r3, [pc, #288]	; (4290 <_i2c_master_interrupt_handler+0x270>)
    4170:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4172:	697b      	ldr	r3, [r7, #20]
    4174:	8b5b      	ldrh	r3, [r3, #26]
    4176:	b29b      	uxth	r3, r3
    4178:	2b00      	cmp	r3, #0
    417a:	d047      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
    417c:	697b      	ldr	r3, [r7, #20]
    417e:	8b9b      	ldrh	r3, [r3, #28]
    4180:	b29b      	uxth	r3, r3
    4182:	2b00      	cmp	r3, #0
    4184:	d142      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    4186:	697b      	ldr	r3, [r7, #20]
    4188:	2225      	movs	r2, #37	; 0x25
    418a:	5c9b      	ldrb	r3, [r3, r2]
    418c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    418e:	2b05      	cmp	r3, #5
    4190:	d13c      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4192:	697b      	ldr	r3, [r7, #20]
    4194:	2224      	movs	r2, #36	; 0x24
    4196:	5c9b      	ldrb	r3, [r3, r2]
    4198:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    419a:	2b01      	cmp	r3, #1
    419c:	d136      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    419e:	693b      	ldr	r3, [r7, #16]
    41a0:	7e1b      	ldrb	r3, [r3, #24]
    41a2:	b2db      	uxtb	r3, r3
    41a4:	001a      	movs	r2, r3
    41a6:	2302      	movs	r3, #2
    41a8:	4013      	ands	r3, r2
    41aa:	d002      	beq.n	41b2 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    41ac:	693b      	ldr	r3, [r7, #16]
    41ae:	2202      	movs	r2, #2
    41b0:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    41b2:	693b      	ldr	r3, [r7, #16]
    41b4:	2203      	movs	r2, #3
    41b6:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    41b8:	697b      	ldr	r3, [r7, #20]
    41ba:	2200      	movs	r2, #0
    41bc:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    41be:	697b      	ldr	r3, [r7, #20]
    41c0:	2225      	movs	r2, #37	; 0x25
    41c2:	2100      	movs	r1, #0
    41c4:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    41c6:	230e      	movs	r3, #14
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	2202      	movs	r2, #2
    41ce:	4013      	ands	r3, r2
    41d0:	d00b      	beq.n	41ea <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    41d2:	697b      	ldr	r3, [r7, #20]
    41d4:	2224      	movs	r2, #36	; 0x24
    41d6:	5c9b      	ldrb	r3, [r3, r2]
    41d8:	b2db      	uxtb	r3, r3
    41da:	2b01      	cmp	r3, #1
    41dc:	d105      	bne.n	41ea <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    41de:	697b      	ldr	r3, [r7, #20]
    41e0:	691b      	ldr	r3, [r3, #16]
    41e2:	697a      	ldr	r2, [r7, #20]
    41e4:	0010      	movs	r0, r2
    41e6:	4798      	blx	r3
    41e8:	e010      	b.n	420c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    41ea:	230e      	movs	r3, #14
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2201      	movs	r2, #1
    41f2:	4013      	ands	r3, r2
    41f4:	d00a      	beq.n	420c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    41f6:	697b      	ldr	r3, [r7, #20]
    41f8:	2224      	movs	r2, #36	; 0x24
    41fa:	5c9b      	ldrb	r3, [r3, r2]
    41fc:	b2db      	uxtb	r3, r3
    41fe:	2b00      	cmp	r3, #0
    4200:	d104      	bne.n	420c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4202:	697b      	ldr	r3, [r7, #20]
    4204:	68db      	ldr	r3, [r3, #12]
    4206:	697a      	ldr	r2, [r7, #20]
    4208:	0010      	movs	r0, r2
    420a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    420c:	697b      	ldr	r3, [r7, #20]
    420e:	2225      	movs	r2, #37	; 0x25
    4210:	5c9b      	ldrb	r3, [r3, r2]
    4212:	b2db      	uxtb	r3, r3
    4214:	2b05      	cmp	r3, #5
    4216:	d02e      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
    4218:	697b      	ldr	r3, [r7, #20]
    421a:	2225      	movs	r2, #37	; 0x25
    421c:	5c9b      	ldrb	r3, [r3, r2]
    421e:	b2db      	uxtb	r3, r3
    4220:	2b00      	cmp	r3, #0
    4222:	d028      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    4224:	693b      	ldr	r3, [r7, #16]
    4226:	2203      	movs	r2, #3
    4228:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    422a:	697b      	ldr	r3, [r7, #20]
    422c:	2200      	movs	r2, #0
    422e:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    4230:	697b      	ldr	r3, [r7, #20]
    4232:	2200      	movs	r2, #0
    4234:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4236:	697b      	ldr	r3, [r7, #20]
    4238:	2225      	movs	r2, #37	; 0x25
    423a:	5c9b      	ldrb	r3, [r3, r2]
    423c:	b2db      	uxtb	r3, r3
    423e:	2b41      	cmp	r3, #65	; 0x41
    4240:	d00e      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    4242:	697b      	ldr	r3, [r7, #20]
    4244:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    4246:	2b00      	cmp	r3, #0
    4248:	d00a      	beq.n	4260 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    424a:	697b      	ldr	r3, [r7, #20]
    424c:	0018      	movs	r0, r3
    424e:	4b0e      	ldr	r3, [pc, #56]	; (4288 <_i2c_master_interrupt_handler+0x268>)
    4250:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    4252:	693b      	ldr	r3, [r7, #16]
    4254:	685b      	ldr	r3, [r3, #4]
    4256:	22e0      	movs	r2, #224	; 0xe0
    4258:	02d2      	lsls	r2, r2, #11
    425a:	431a      	orrs	r2, r3
    425c:	693b      	ldr	r3, [r7, #16]
    425e:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    4260:	230e      	movs	r3, #14
    4262:	18fb      	adds	r3, r7, r3
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	2204      	movs	r2, #4
    4268:	4013      	ands	r3, r2
    426a:	d004      	beq.n	4276 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    426c:	697b      	ldr	r3, [r7, #20]
    426e:	695b      	ldr	r3, [r3, #20]
    4270:	697a      	ldr	r2, [r7, #20]
    4272:	0010      	movs	r0, r2
    4274:	4798      	blx	r3
		}
	}
}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	46bd      	mov	sp, r7
    427a:	b006      	add	sp, #24
    427c:	bd80      	pop	{r7, pc}
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	20000468 	.word	0x20000468
    4284:	00003f65 	.word	0x00003f65
    4288:	00003dd5 	.word	0x00003dd5
    428c:	00003ee9 	.word	0x00003ee9
    4290:	00003df9 	.word	0x00003df9

00004294 <system_gclk_chan_get_config_defaults>:
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
    429a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	2200      	movs	r2, #0
    42a0:	701a      	strb	r2, [r3, #0]
}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	46bd      	mov	sp, r7
    42a6:	b002      	add	sp, #8
    42a8:	bd80      	pop	{r7, pc}
	...

000042ac <system_apb_clock_set_mask>:
{
    42ac:	b580      	push	{r7, lr}
    42ae:	b082      	sub	sp, #8
    42b0:	af00      	add	r7, sp, #0
    42b2:	0002      	movs	r2, r0
    42b4:	6039      	str	r1, [r7, #0]
    42b6:	1dfb      	adds	r3, r7, #7
    42b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    42ba:	1dfb      	adds	r3, r7, #7
    42bc:	781b      	ldrb	r3, [r3, #0]
    42be:	2b01      	cmp	r3, #1
    42c0:	d00a      	beq.n	42d8 <system_apb_clock_set_mask+0x2c>
    42c2:	2b02      	cmp	r3, #2
    42c4:	d00f      	beq.n	42e6 <system_apb_clock_set_mask+0x3a>
    42c6:	2b00      	cmp	r3, #0
    42c8:	d114      	bne.n	42f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    42ca:	4b0e      	ldr	r3, [pc, #56]	; (4304 <system_apb_clock_set_mask+0x58>)
    42cc:	4a0d      	ldr	r2, [pc, #52]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ce:	6991      	ldr	r1, [r2, #24]
    42d0:	683a      	ldr	r2, [r7, #0]
    42d2:	430a      	orrs	r2, r1
    42d4:	619a      	str	r2, [r3, #24]
			break;
    42d6:	e00f      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    42d8:	4b0a      	ldr	r3, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42da:	4a0a      	ldr	r2, [pc, #40]	; (4304 <system_apb_clock_set_mask+0x58>)
    42dc:	69d1      	ldr	r1, [r2, #28]
    42de:	683a      	ldr	r2, [r7, #0]
    42e0:	430a      	orrs	r2, r1
    42e2:	61da      	str	r2, [r3, #28]
			break;
    42e4:	e008      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    42e6:	4b07      	ldr	r3, [pc, #28]	; (4304 <system_apb_clock_set_mask+0x58>)
    42e8:	4a06      	ldr	r2, [pc, #24]	; (4304 <system_apb_clock_set_mask+0x58>)
    42ea:	6a11      	ldr	r1, [r2, #32]
    42ec:	683a      	ldr	r2, [r7, #0]
    42ee:	430a      	orrs	r2, r1
    42f0:	621a      	str	r2, [r3, #32]
			break;
    42f2:	e001      	b.n	42f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    42f4:	2317      	movs	r3, #23
    42f6:	e000      	b.n	42fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    42f8:	2300      	movs	r3, #0
}
    42fa:	0018      	movs	r0, r3
    42fc:	46bd      	mov	sp, r7
    42fe:	b002      	add	sp, #8
    4300:	bd80      	pop	{r7, pc}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	40000400 	.word	0x40000400

00004308 <system_pinmux_get_config_defaults>:
{
    4308:	b580      	push	{r7, lr}
    430a:	b082      	sub	sp, #8
    430c:	af00      	add	r7, sp, #0
    430e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	2280      	movs	r2, #128	; 0x80
    4314:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4316:	687b      	ldr	r3, [r7, #4]
    4318:	2200      	movs	r2, #0
    431a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	2201      	movs	r2, #1
    4320:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4322:	687b      	ldr	r3, [r7, #4]
    4324:	2200      	movs	r2, #0
    4326:	70da      	strb	r2, [r3, #3]
}
    4328:	46c0      	nop			; (mov r8, r8)
    432a:	46bd      	mov	sp, r7
    432c:	b002      	add	sp, #8
    432e:	bd80      	pop	{r7, pc}

00004330 <system_is_debugger_present>:
{
    4330:	b580      	push	{r7, lr}
    4332:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4334:	4b05      	ldr	r3, [pc, #20]	; (434c <system_is_debugger_present+0x1c>)
    4336:	789b      	ldrb	r3, [r3, #2]
    4338:	b2db      	uxtb	r3, r3
    433a:	001a      	movs	r2, r3
    433c:	2302      	movs	r3, #2
    433e:	4013      	ands	r3, r2
    4340:	1e5a      	subs	r2, r3, #1
    4342:	4193      	sbcs	r3, r2
    4344:	b2db      	uxtb	r3, r3
}
    4346:	0018      	movs	r0, r3
    4348:	46bd      	mov	sp, r7
    434a:	bd80      	pop	{r7, pc}
    434c:	41002000 	.word	0x41002000

00004350 <_i2c_slave_set_config>:
 *                                         previously set
 */
static enum status_code _i2c_slave_set_config(
		struct i2c_slave_module *const module,
		const struct i2c_slave_config *const config)
{
    4350:	b580      	push	{r7, lr}
    4352:	b088      	sub	sp, #32
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	613b      	str	r3, [r7, #16]
	Sercom *const sercom_hw = module->hw;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	60fb      	str	r3, [r7, #12]

	module->buffer_timeout = config->buffer_timeout;
    4366:	683b      	ldr	r3, [r7, #0]
    4368:	891a      	ldrh	r2, [r3, #8]
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	80da      	strh	r2, [r3, #6]
	module->ten_bit_address = config->ten_bit_address;
    436e:	683b      	ldr	r3, [r7, #0]
    4370:	7c1a      	ldrb	r2, [r3, #16]
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	721a      	strb	r2, [r3, #8]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4376:	2308      	movs	r3, #8
    4378:	18fb      	adds	r3, r7, r3
    437a:	0018      	movs	r0, r3
    437c:	4b49      	ldr	r3, [pc, #292]	; (44a4 <_i2c_slave_set_config+0x154>)
    437e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    4380:	683b      	ldr	r3, [r7, #0]
    4382:	69db      	ldr	r3, [r3, #28]
    4384:	61bb      	str	r3, [r7, #24]
	uint32_t pad1 = config->pinmux_pad1;
    4386:	683b      	ldr	r3, [r7, #0]
    4388:	6a1b      	ldr	r3, [r3, #32]
    438a:	617b      	str	r3, [r7, #20]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    438c:	69bb      	ldr	r3, [r7, #24]
    438e:	2b00      	cmp	r3, #0
    4390:	d106      	bne.n	43a0 <_i2c_slave_set_config+0x50>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	2100      	movs	r1, #0
    4396:	0018      	movs	r0, r3
    4398:	4b43      	ldr	r3, [pc, #268]	; (44a8 <_i2c_slave_set_config+0x158>)
    439a:	4798      	blx	r3
    439c:	0003      	movs	r3, r0
    439e:	61bb      	str	r3, [r7, #24]
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    43a0:	69bb      	ldr	r3, [r7, #24]
    43a2:	b2da      	uxtb	r2, r3
    43a4:	2308      	movs	r3, #8
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43aa:	2308      	movs	r3, #8
    43ac:	18fb      	adds	r3, r7, r3
    43ae:	2202      	movs	r2, #2
    43b0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    43b2:	69bb      	ldr	r3, [r7, #24]
    43b4:	0c1b      	lsrs	r3, r3, #16
    43b6:	b2db      	uxtb	r3, r3
    43b8:	2208      	movs	r2, #8
    43ba:	18ba      	adds	r2, r7, r2
    43bc:	0011      	movs	r1, r2
    43be:	0018      	movs	r0, r3
    43c0:	4b3a      	ldr	r3, [pc, #232]	; (44ac <_i2c_slave_set_config+0x15c>)
    43c2:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    43c4:	697b      	ldr	r3, [r7, #20]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d106      	bne.n	43d8 <_i2c_slave_set_config+0x88>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	2101      	movs	r1, #1
    43ce:	0018      	movs	r0, r3
    43d0:	4b35      	ldr	r3, [pc, #212]	; (44a8 <_i2c_slave_set_config+0x158>)
    43d2:	4798      	blx	r3
    43d4:	0003      	movs	r3, r0
    43d6:	617b      	str	r3, [r7, #20]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    43d8:	697b      	ldr	r3, [r7, #20]
    43da:	b2da      	uxtb	r2, r3
    43dc:	2308      	movs	r3, #8
    43de:	18fb      	adds	r3, r7, r3
    43e0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    43e2:	2308      	movs	r3, #8
    43e4:	18fb      	adds	r3, r7, r3
    43e6:	2202      	movs	r2, #2
    43e8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    43ea:	697b      	ldr	r3, [r7, #20]
    43ec:	0c1b      	lsrs	r3, r3, #16
    43ee:	b2db      	uxtb	r3, r3
    43f0:	2208      	movs	r2, #8
    43f2:	18ba      	adds	r2, r7, r2
    43f4:	0011      	movs	r1, r2
    43f6:	0018      	movs	r0, r3
    43f8:	4b2c      	ldr	r3, [pc, #176]	; (44ac <_i2c_slave_set_config+0x15c>)
    43fa:	4798      	blx	r3

	/* Prepare config to write to register CTRLA */
	if (config->run_in_standby || system_is_debugger_present()) {
    43fc:	683b      	ldr	r3, [r7, #0]
    43fe:	7e9b      	ldrb	r3, [r3, #26]
    4400:	2b00      	cmp	r3, #0
    4402:	d103      	bne.n	440c <_i2c_slave_set_config+0xbc>
    4404:	4b2a      	ldr	r3, [pc, #168]	; (44b0 <_i2c_slave_set_config+0x160>)
    4406:	4798      	blx	r3
    4408:	1e03      	subs	r3, r0, #0
    440a:	d002      	beq.n	4412 <_i2c_slave_set_config+0xc2>
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
    440c:	2380      	movs	r3, #128	; 0x80
    440e:	61fb      	str	r3, [r7, #28]
    4410:	e001      	b.n	4416 <_i2c_slave_set_config+0xc6>
	} else {
		tmp_ctrla = 0;
    4412:	2300      	movs	r3, #0
    4414:	61fb      	str	r3, [r7, #28]
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
    4416:	683b      	ldr	r3, [r7, #0]
    4418:	2225      	movs	r2, #37	; 0x25
    441a:	5c9b      	ldrb	r3, [r3, r2]
    441c:	2b00      	cmp	r3, #0
    441e:	d105      	bne.n	442c <_i2c_slave_set_config+0xdc>
    4420:	683b      	ldr	r3, [r7, #0]
    4422:	695a      	ldr	r2, [r3, #20]
    4424:	2380      	movs	r3, #128	; 0x80
    4426:	049b      	lsls	r3, r3, #18
    4428:	429a      	cmp	r2, r3
    442a:	d104      	bne.n	4436 <_i2c_slave_set_config+0xe6>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    442c:	69fb      	ldr	r3, [r7, #28]
    442e:	2280      	movs	r2, #128	; 0x80
    4430:	0512      	lsls	r2, r2, #20
    4432:	4313      	orrs	r3, r2
    4434:	61fb      	str	r3, [r7, #28]
	}
	
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4436:	683b      	ldr	r3, [r7, #0]
    4438:	685a      	ldr	r2, [r3, #4]
			config->transfer_speed |
    443a:	683b      	ldr	r3, [r7, #0]
    443c:	695b      	ldr	r3, [r3, #20]
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    443e:	4313      	orrs	r3, r2
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4440:	683a      	ldr	r2, [r7, #0]
    4442:	2124      	movs	r1, #36	; 0x24
    4444:	5c52      	ldrb	r2, [r2, r1]
    4446:	0792      	lsls	r2, r2, #30
			config->transfer_speed |
    4448:	4313      	orrs	r3, r2
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
    444a:	683a      	ldr	r2, [r7, #0]
    444c:	2126      	movs	r1, #38	; 0x26
    444e:	5c52      	ldrb	r2, [r2, r1]
    4450:	05d2      	lsls	r2, r2, #23
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
    4452:	4313      	orrs	r3, r2
	tmp_ctrla |= ((uint32_t)config->sda_hold_time |
    4454:	69fa      	ldr	r2, [r7, #28]
    4456:	4313      	orrs	r3, r2
    4458:	61fb      	str	r3, [r7, #28]

	i2c_hw->CTRLA.reg |= tmp_ctrla;
    445a:	693b      	ldr	r3, [r7, #16]
    445c:	681a      	ldr	r2, [r3, #0]
    445e:	69fb      	ldr	r3, [r7, #28]
    4460:	431a      	orrs	r2, r3
    4462:	693b      	ldr	r3, [r7, #16]
    4464:	601a      	str	r2, [r3, #0]

	/* Set CTRLB configuration */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
    4466:	683b      	ldr	r3, [r7, #0]
    4468:	895b      	ldrh	r3, [r3, #10]
    446a:	2280      	movs	r2, #128	; 0x80
    446c:	0052      	lsls	r2, r2, #1
    446e:	4313      	orrs	r3, r2
    4470:	b29b      	uxth	r3, r3
    4472:	001a      	movs	r2, r3
    4474:	693b      	ldr	r3, [r7, #16]
    4476:	605a      	str	r2, [r3, #4]

	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4478:	683b      	ldr	r3, [r7, #0]
    447a:	899b      	ldrh	r3, [r3, #12]
    447c:	005a      	lsls	r2, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    447e:	683b      	ldr	r3, [r7, #0]
    4480:	89db      	ldrh	r3, [r3, #14]
    4482:	045b      	lsls	r3, r3, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4484:	431a      	orrs	r2, r3
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4486:	683b      	ldr	r3, [r7, #0]
    4488:	7c1b      	ldrb	r3, [r3, #16]
    448a:	03db      	lsls	r3, r3, #15
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
    448c:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
    448e:	683a      	ldr	r2, [r7, #0]
    4490:	7c52      	ldrb	r2, [r2, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
    4492:	4313      	orrs	r3, r2
    4494:	001a      	movs	r2, r3
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
    4496:	693b      	ldr	r3, [r7, #16]
    4498:	625a      	str	r2, [r3, #36]	; 0x24

	return STATUS_OK;
    449a:	2300      	movs	r3, #0
}
    449c:	0018      	movs	r0, r3
    449e:	46bd      	mov	sp, r7
    44a0:	b008      	add	sp, #32
    44a2:	bd80      	pop	{r7, pc}
    44a4:	00004309 	.word	0x00004309
    44a8:	00006d89 	.word	0x00006d89
    44ac:	00007e1d 	.word	0x00007e1d
    44b0:	00004331 	.word	0x00004331

000044b4 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
    44b4:	b590      	push	{r4, r7, lr}
    44b6:	b08b      	sub	sp, #44	; 0x2c
    44b8:	af00      	add	r7, sp, #0
    44ba:	60f8      	str	r0, [r7, #12]
    44bc:	60b9      	str	r1, [r7, #8]
    44be:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    44c0:	68fb      	ldr	r3, [r7, #12]
    44c2:	68ba      	ldr	r2, [r7, #8]
    44c4:	601a      	str	r2, [r3, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	681b      	ldr	r3, [r3, #0]
    44ca:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
    44cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	2202      	movs	r2, #2
    44d2:	4013      	ands	r3, r2
    44d4:	d001      	beq.n	44da <i2c_slave_init+0x26>
		return STATUS_ERR_DENIED;
    44d6:	231c      	movs	r3, #28
    44d8:	e069      	b.n	45ae <i2c_slave_init+0xfa>
	}

	/* Check if reset is in progress */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
    44da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	2201      	movs	r2, #1
    44e0:	4013      	ands	r3, r2
    44e2:	d001      	beq.n	44e8 <i2c_slave_init+0x34>
		return STATUS_BUSY;
    44e4:	2305      	movs	r3, #5
    44e6:	e062      	b.n	45ae <i2c_slave_init+0xfa>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	0018      	movs	r0, r3
    44ee:	4b32      	ldr	r3, [pc, #200]	; (45b8 <i2c_slave_init+0x104>)
    44f0:	4798      	blx	r3
    44f2:	0003      	movs	r3, r0
    44f4:	623b      	str	r3, [r7, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    44f6:	6a3b      	ldr	r3, [r7, #32]
    44f8:	3302      	adds	r3, #2
    44fa:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44fc:	6a3b      	ldr	r3, [r7, #32]
    44fe:	3314      	adds	r3, #20
    4500:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4502:	2201      	movs	r2, #1
    4504:	69fb      	ldr	r3, [r7, #28]
    4506:	409a      	lsls	r2, r3
    4508:	0013      	movs	r3, r2
    450a:	0019      	movs	r1, r3
    450c:	2002      	movs	r0, #2
    450e:	4b2b      	ldr	r3, [pc, #172]	; (45bc <i2c_slave_init+0x108>)
    4510:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4512:	2314      	movs	r3, #20
    4514:	18fb      	adds	r3, r7, r3
    4516:	0018      	movs	r0, r3
    4518:	4b29      	ldr	r3, [pc, #164]	; (45c0 <i2c_slave_init+0x10c>)
    451a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	7e5a      	ldrb	r2, [r3, #25]
    4520:	2314      	movs	r3, #20
    4522:	18fb      	adds	r3, r7, r3
    4524:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4526:	69bb      	ldr	r3, [r7, #24]
    4528:	b2db      	uxtb	r3, r3
    452a:	2214      	movs	r2, #20
    452c:	18ba      	adds	r2, r7, r2
    452e:	0011      	movs	r1, r2
    4530:	0018      	movs	r0, r3
    4532:	4b24      	ldr	r3, [pc, #144]	; (45c4 <i2c_slave_init+0x110>)
    4534:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4536:	69bb      	ldr	r3, [r7, #24]
    4538:	b2db      	uxtb	r3, r3
    453a:	0018      	movs	r0, r3
    453c:	4b22      	ldr	r3, [pc, #136]	; (45c8 <i2c_slave_init+0x114>)
    453e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	7e5b      	ldrb	r3, [r3, #25]
    4544:	2100      	movs	r1, #0
    4546:	0018      	movs	r0, r3
    4548:	4b20      	ldr	r3, [pc, #128]	; (45cc <i2c_slave_init+0x118>)
    454a:	4798      	blx	r3

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Get sercom instance index */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	2217      	movs	r2, #23
    4552:	18bc      	adds	r4, r7, r2
    4554:	0018      	movs	r0, r3
    4556:	4b18      	ldr	r3, [pc, #96]	; (45b8 <i2c_slave_init+0x104>)
    4558:	4798      	blx	r3
    455a:	0003      	movs	r3, r0
    455c:	7023      	strb	r3, [r4, #0]

	/* Save software module in interrupt handler */
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
    455e:	4a1c      	ldr	r2, [pc, #112]	; (45d0 <i2c_slave_init+0x11c>)
    4560:	2317      	movs	r3, #23
    4562:	18fb      	adds	r3, r7, r3
    4564:	781b      	ldrb	r3, [r3, #0]
    4566:	0011      	movs	r1, r2
    4568:	0018      	movs	r0, r3
    456a:	4b1a      	ldr	r3, [pc, #104]	; (45d4 <i2c_slave_init+0x120>)
    456c:	4798      	blx	r3

	/* Save software module */
	_sercom_instances[instance_index] = module;
    456e:	2317      	movs	r3, #23
    4570:	18fb      	adds	r3, r7, r3
    4572:	781a      	ldrb	r2, [r3, #0]
    4574:	4b18      	ldr	r3, [pc, #96]	; (45d8 <i2c_slave_init+0x124>)
    4576:	0092      	lsls	r2, r2, #2
    4578:	68f9      	ldr	r1, [r7, #12]
    457a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module */
	module->registered_callback = 0;
    457c:	68fb      	ldr	r3, [r7, #12]
    457e:	2224      	movs	r2, #36	; 0x24
    4580:	2100      	movs	r1, #0
    4582:	5499      	strb	r1, [r3, r2]
	module->enabled_callback = 0;
    4584:	68fb      	ldr	r3, [r7, #12]
    4586:	2225      	movs	r2, #37	; 0x25
    4588:	2100      	movs	r1, #0
    458a:	5499      	strb	r1, [r3, r2]
	module->buffer_length = 0;
    458c:	68fb      	ldr	r3, [r7, #12]
    458e:	2200      	movs	r2, #0
    4590:	84da      	strh	r2, [r3, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	7e1a      	ldrb	r2, [r3, #24]
    4596:	68fb      	ldr	r3, [r7, #12]
    4598:	725a      	strb	r2, [r3, #9]
#endif

	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
    459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    459c:	2210      	movs	r2, #16
    459e:	601a      	str	r2, [r3, #0]

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	68fb      	ldr	r3, [r7, #12]
    45a4:	0011      	movs	r1, r2
    45a6:	0018      	movs	r0, r3
    45a8:	4b0c      	ldr	r3, [pc, #48]	; (45dc <i2c_slave_init+0x128>)
    45aa:	4798      	blx	r3
    45ac:	0003      	movs	r3, r0
}
    45ae:	0018      	movs	r0, r3
    45b0:	46bd      	mov	sp, r7
    45b2:	b00b      	add	sp, #44	; 0x2c
    45b4:	bd90      	pop	{r4, r7, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	00006f45 	.word	0x00006f45
    45bc:	000042ad 	.word	0x000042ad
    45c0:	00004295 	.word	0x00004295
    45c4:	00007b31 	.word	0x00007b31
    45c8:	00007b75 	.word	0x00007b75
    45cc:	00006cfd 	.word	0x00006cfd
    45d0:	000047d5 	.word	0x000047d5
    45d4:	00006fa9 	.word	0x00006fa9
    45d8:	20000468 	.word	0x20000468
    45dc:	00004351 	.word	0x00004351

000045e0 <system_interrupt_enter_critical_section>:
{
    45e0:	b580      	push	{r7, lr}
    45e2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    45e4:	4b02      	ldr	r3, [pc, #8]	; (45f0 <system_interrupt_enter_critical_section+0x10>)
    45e6:	4798      	blx	r3
}
    45e8:	46c0      	nop			; (mov r8, r8)
    45ea:	46bd      	mov	sp, r7
    45ec:	bd80      	pop	{r7, pc}
    45ee:	46c0      	nop			; (mov r8, r8)
    45f0:	0000717d 	.word	0x0000717d

000045f4 <system_interrupt_leave_critical_section>:
{
    45f4:	b580      	push	{r7, lr}
    45f6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    45f8:	4b02      	ldr	r3, [pc, #8]	; (4604 <system_interrupt_leave_critical_section+0x10>)
    45fa:	4798      	blx	r3
}
    45fc:	46c0      	nop			; (mov r8, r8)
    45fe:	46bd      	mov	sp, r7
    4600:	bd80      	pop	{r7, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	000071d1 	.word	0x000071d1

00004608 <_i2c_slave_set_ctrlb_ackact>:
 * \param[in] send_ack true send ACK, false send NACK
 */
static inline void _i2c_slave_set_ctrlb_ackact(
		struct i2c_slave_module *const module,
		bool send_ack)
{
    4608:	b580      	push	{r7, lr}
    460a:	b084      	sub	sp, #16
    460c:	af00      	add	r7, sp, #0
    460e:	6078      	str	r0, [r7, #4]
    4610:	000a      	movs	r2, r1
    4612:	1cfb      	adds	r3, r7, #3
    4614:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	60fb      	str	r3, [r7, #12]

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
    461c:	4b0b      	ldr	r3, [pc, #44]	; (464c <_i2c_slave_set_ctrlb_ackact+0x44>)
    461e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	2200      	movs	r2, #0
    4624:	835a      	strh	r2, [r3, #26]

	if (send_ack == true) {
    4626:	1cfb      	adds	r3, r7, #3
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	2b00      	cmp	r3, #0
    462c:	d003      	beq.n	4636 <_i2c_slave_set_ctrlb_ackact+0x2e>
		i2c_hw->CTRLB.reg = 0;
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	2200      	movs	r2, #0
    4632:	605a      	str	r2, [r3, #4]
    4634:	e003      	b.n	463e <_i2c_slave_set_ctrlb_ackact+0x36>
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    4636:	68fb      	ldr	r3, [r7, #12]
    4638:	2280      	movs	r2, #128	; 0x80
    463a:	02d2      	lsls	r2, r2, #11
    463c:	605a      	str	r2, [r3, #4]
	}
	system_interrupt_leave_critical_section();
    463e:	4b04      	ldr	r3, [pc, #16]	; (4650 <_i2c_slave_set_ctrlb_ackact+0x48>)
    4640:	4798      	blx	r3
	}
	else {
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
	}
#endif
	return;
    4642:	46c0      	nop			; (mov r8, r8)
}
    4644:	46bd      	mov	sp, r7
    4646:	b004      	add	sp, #16
    4648:	bd80      	pop	{r7, pc}
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	000045e1 	.word	0x000045e1
    4650:	000045f5 	.word	0x000045f5

00004654 <_i2c_slave_set_ctrlb_cmd3>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static inline void _i2c_slave_set_ctrlb_cmd3(
		struct i2c_slave_module *const module)
{
    4654:	b580      	push	{r7, lr}
    4656:	b084      	sub	sp, #16
    4658:	af00      	add	r7, sp, #0
    465a:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	60fb      	str	r3, [r7, #12]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	7e1b      	ldrb	r3, [r3, #24]
    4666:	07db      	lsls	r3, r3, #31
    4668:	0fdb      	lsrs	r3, r3, #31
    466a:	b2db      	uxtb	r3, r3
    466c:	2b00      	cmp	r3, #0
    466e:	d002      	beq.n	4676 <_i2c_slave_set_ctrlb_cmd3+0x22>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	2201      	movs	r2, #1
    4674:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    4676:	68fb      	ldr	r3, [r7, #12]
    4678:	2202      	movs	r2, #2
    467a:	761a      	strb	r2, [r3, #24]
#else
	/* Normal operation */
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
#endif
	return;
    467c:	46c0      	nop			; (mov r8, r8)
}
    467e:	46bd      	mov	sp, r7
    4680:	b004      	add	sp, #16
    4682:	bd80      	pop	{r7, pc}

00004684 <_i2c_slave_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_read(
		struct i2c_slave_module *const module)
{
    4684:	b580      	push	{r7, lr}
    4686:	b084      	sub	sp, #16
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    468c:	687b      	ldr	r3, [r7, #4]
    468e:	681b      	ldr	r3, [r3, #0]
    4690:	60fb      	str	r3, [r7, #12]

	/* Read byte from master and put in buffer. */
	*(module->buffer++) = i2c_hw->DATA.reg;
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4696:	1c59      	adds	r1, r3, #1
    4698:	687a      	ldr	r2, [r7, #4]
    469a:	62d1      	str	r1, [r2, #44]	; 0x2c
    469c:	68fa      	ldr	r2, [r7, #12]
    469e:	2128      	movs	r1, #40	; 0x28
    46a0:	5c52      	ldrb	r2, [r2, r1]
    46a2:	b2d2      	uxtb	r2, r2
    46a4:	701a      	strb	r2, [r3, #0]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46aa:	3b01      	subs	r3, #1
    46ac:	b29a      	uxth	r2, r3
    46ae:	687b      	ldr	r3, [r7, #4]
    46b0:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	46bd      	mov	sp, r7
    46b6:	b004      	add	sp, #16
    46b8:	bd80      	pop	{r7, pc}

000046ba <_i2c_slave_write>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_slave_write(
		struct i2c_slave_module *const module)
{
    46ba:	b580      	push	{r7, lr}
    46bc:	b084      	sub	sp, #16
    46be:	af00      	add	r7, sp, #0
    46c0:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	681b      	ldr	r3, [r3, #0]
    46c6:	60fb      	str	r3, [r7, #12]

	/* Write byte from buffer to master */
	i2c_hw->DATA.reg = *(module->buffer++);
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    46cc:	1c59      	adds	r1, r3, #1
    46ce:	687a      	ldr	r2, [r7, #4]
    46d0:	62d1      	str	r1, [r2, #44]	; 0x2c
    46d2:	781b      	ldrb	r3, [r3, #0]
    46d4:	b2d9      	uxtb	r1, r3
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	2228      	movs	r2, #40	; 0x28
    46da:	5499      	strb	r1, [r3, r2]

	/*Decrement remaining buffer length */
	module->buffer_remaining--;
    46dc:	687b      	ldr	r3, [r7, #4]
    46de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    46e0:	3b01      	subs	r3, #1
    46e2:	b29a      	uxth	r2, r3
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	851a      	strh	r2, [r3, #40]	; 0x28
}
    46e8:	46c0      	nop			; (mov r8, r8)
    46ea:	46bd      	mov	sp, r7
    46ec:	b004      	add	sp, #16
    46ee:	bd80      	pop	{r7, pc}

000046f0 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
    46f0:	b580      	push	{r7, lr}
    46f2:	b084      	sub	sp, #16
    46f4:	af00      	add	r7, sp, #0
    46f6:	60f8      	str	r0, [r7, #12]
    46f8:	60b9      	str	r1, [r7, #8]
    46fa:	1dfb      	adds	r3, r7, #7
    46fc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
    46fe:	1dfb      	adds	r3, r7, #7
    4700:	781b      	ldrb	r3, [r3, #0]
    4702:	68fa      	ldr	r2, [r7, #12]
    4704:	3302      	adds	r3, #2
    4706:	009b      	lsls	r3, r3, #2
    4708:	18d3      	adds	r3, r2, r3
    470a:	3304      	adds	r3, #4
    470c:	68ba      	ldr	r2, [r7, #8]
    470e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	2224      	movs	r2, #36	; 0x24
    4714:	5c9b      	ldrb	r3, [r3, r2]
    4716:	b2db      	uxtb	r3, r3
    4718:	b25a      	sxtb	r2, r3
    471a:	1dfb      	adds	r3, r7, #7
    471c:	781b      	ldrb	r3, [r3, #0]
    471e:	2101      	movs	r1, #1
    4720:	4099      	lsls	r1, r3
    4722:	000b      	movs	r3, r1
    4724:	b25b      	sxtb	r3, r3
    4726:	4313      	orrs	r3, r2
    4728:	b25b      	sxtb	r3, r3
    472a:	b2d9      	uxtb	r1, r3
    472c:	68fb      	ldr	r3, [r7, #12]
    472e:	2224      	movs	r2, #36	; 0x24
    4730:	5499      	strb	r1, [r3, r2]
}
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	46bd      	mov	sp, r7
    4736:	b004      	add	sp, #16
    4738:	bd80      	pop	{r7, pc}

0000473a <i2c_slave_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_slave_read_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    473a:	b580      	push	{r7, lr}
    473c:	b084      	sub	sp, #16
    473e:	af00      	add	r7, sp, #0
    4740:	6078      	str	r0, [r7, #4]
    4742:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4748:	2b00      	cmp	r3, #0
    474a:	d001      	beq.n	4750 <i2c_slave_read_packet_job+0x16>
		return STATUS_BUSY;
    474c:	2305      	movs	r3, #5
    474e:	e016      	b.n	477e <i2c_slave_read_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    4750:	683b      	ldr	r3, [r7, #0]
    4752:	685a      	ldr	r2, [r3, #4]
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    4758:	683b      	ldr	r3, [r7, #0]
    475a:	881a      	ldrh	r2, [r3, #0]
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    4760:	683b      	ldr	r3, [r7, #0]
    4762:	881a      	ldrh	r2, [r3, #0]
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	2231      	movs	r2, #49	; 0x31
    476c:	2105      	movs	r1, #5
    476e:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	681b      	ldr	r3, [r3, #0]
    4774:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    4776:	68fb      	ldr	r3, [r7, #12]
    4778:	2207      	movs	r2, #7
    477a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
    477c:	2300      	movs	r3, #0
}
    477e:	0018      	movs	r0, r3
    4780:	46bd      	mov	sp, r7
    4782:	b004      	add	sp, #16
    4784:	bd80      	pop	{r7, pc}

00004786 <i2c_slave_write_packet_job>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
enum status_code i2c_slave_write_packet_job(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
    4786:	b580      	push	{r7, lr}
    4788:	b084      	sub	sp, #16
    478a:	af00      	add	r7, sp, #0
    478c:	6078      	str	r0, [r7, #4]
    478e:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4794:	2b00      	cmp	r3, #0
    4796:	d001      	beq.n	479c <i2c_slave_write_packet_job+0x16>
		return STATUS_BUSY;
    4798:	2305      	movs	r3, #5
    479a:	e016      	b.n	47ca <i2c_slave_write_packet_job+0x44>
	}

	/* Save packet to software module. */
	module->buffer           = packet->data;
    479c:	683b      	ldr	r3, [r7, #0]
    479e:	685a      	ldr	r2, [r3, #4]
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    47a4:	683b      	ldr	r3, [r7, #0]
    47a6:	881a      	ldrh	r2, [r3, #0]
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	851a      	strh	r2, [r3, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    47ac:	683b      	ldr	r3, [r7, #0]
    47ae:	881a      	ldrh	r2, [r3, #0]
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	84da      	strh	r2, [r3, #38]	; 0x26
	module->status           = STATUS_BUSY;
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	2231      	movs	r2, #49	; 0x31
    47b8:	2105      	movs	r1, #5
    47ba:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	681b      	ldr	r3, [r3, #0]
    47c0:	60fb      	str	r3, [r7, #12]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	2207      	movs	r2, #7
    47c6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
    47c8:	2300      	movs	r3, #0
}
    47ca:	0018      	movs	r0, r3
    47cc:	46bd      	mov	sp, r7
    47ce:	b004      	add	sp, #16
    47d0:	bd80      	pop	{r7, pc}
	...

000047d4 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b086      	sub	sp, #24
    47d8:	af00      	add	r7, sp, #0
    47da:	0002      	movs	r2, r0
    47dc:	1dfb      	adds	r3, r7, #7
    47de:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
			(struct i2c_slave_module*)_sercom_instances[instance];
    47e0:	1dfb      	adds	r3, r7, #7
    47e2:	781a      	ldrb	r2, [r3, #0]
	struct i2c_slave_module *module =
    47e4:	4bc6      	ldr	r3, [pc, #792]	; (4b00 <_i2c_slave_interrupt_handler+0x32c>)
    47e6:	0092      	lsls	r2, r2, #2
    47e8:	58d3      	ldr	r3, [r2, r3]
    47ea:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    47ec:	697b      	ldr	r3, [r7, #20]
    47ee:	681b      	ldr	r3, [r3, #0]
    47f0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
    47f2:	230f      	movs	r3, #15
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	697a      	ldr	r2, [r7, #20]
    47f8:	2125      	movs	r1, #37	; 0x25
    47fa:	5c52      	ldrb	r2, [r2, r1]
    47fc:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    47fe:	697b      	ldr	r3, [r7, #20]
    4800:	2224      	movs	r2, #36	; 0x24
    4802:	5c9b      	ldrb	r3, [r3, r2]
    4804:	b2da      	uxtb	r2, r3
    4806:	230f      	movs	r3, #15
    4808:	18fb      	adds	r3, r7, r3
    480a:	210f      	movs	r1, #15
    480c:	1879      	adds	r1, r7, r1
    480e:	7809      	ldrb	r1, [r1, #0]
    4810:	400a      	ands	r2, r1
    4812:	701a      	strb	r2, [r3, #0]


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
    4814:	693b      	ldr	r3, [r7, #16]
    4816:	7e1b      	ldrb	r3, [r3, #24]
    4818:	b2db      	uxtb	r3, r3
    481a:	001a      	movs	r2, r3
    481c:	2302      	movs	r3, #2
    481e:	4013      	ands	r3, r2
    4820:	d100      	bne.n	4824 <_i2c_slave_interrupt_handler+0x50>
    4822:	e0b4      	b.n	498e <_i2c_slave_interrupt_handler+0x1ba>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
    4824:	697b      	ldr	r3, [r7, #20]
    4826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4828:	b29a      	uxth	r2, r3
    482a:	697b      	ldr	r3, [r7, #20]
    482c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    482e:	429a      	cmp	r2, r3
    4830:	d01b      	beq.n	486a <_i2c_slave_interrupt_handler+0x96>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
    4832:	697b      	ldr	r3, [r7, #20]
    4834:	2230      	movs	r2, #48	; 0x30
    4836:	5c9b      	ldrb	r3, [r3, r2]
    4838:	b2db      	uxtb	r3, r3
		if (module->buffer_length != module->buffer_remaining &&
    483a:	2b00      	cmp	r3, #0
    483c:	d115      	bne.n	486a <_i2c_slave_interrupt_handler+0x96>

			module->status = STATUS_OK;
    483e:	697b      	ldr	r3, [r7, #20]
    4840:	2231      	movs	r2, #49	; 0x31
    4842:	2100      	movs	r1, #0
    4844:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    4846:	697b      	ldr	r3, [r7, #20]
    4848:	2200      	movs	r2, #0
    484a:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    484c:	697b      	ldr	r3, [r7, #20]
    484e:	2200      	movs	r2, #0
    4850:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4852:	230f      	movs	r3, #15
    4854:	18fb      	adds	r3, r7, r3
    4856:	781b      	ldrb	r3, [r3, #0]
    4858:	2202      	movs	r2, #2
    485a:	4013      	ands	r3, r2
    485c:	d027      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    485e:	697b      	ldr	r3, [r7, #20]
    4860:	691b      	ldr	r3, [r3, #16]
    4862:	697a      	ldr	r2, [r7, #20]
    4864:	0010      	movs	r0, r2
    4866:	4798      	blx	r3
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    4868:	e021      	b.n	48ae <_i2c_slave_interrupt_handler+0xda>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
    486a:	697b      	ldr	r3, [r7, #20]
    486c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    486e:	b29a      	uxth	r2, r3
    4870:	697b      	ldr	r3, [r7, #20]
    4872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4874:	429a      	cmp	r2, r3
    4876:	d01a      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->transfer_direction == I2C_TRANSFER_READ) {
    4878:	697b      	ldr	r3, [r7, #20]
    487a:	2230      	movs	r2, #48	; 0x30
    487c:	5c9b      	ldrb	r3, [r3, r2]
    487e:	b2db      	uxtb	r3, r3
		} else if (module->buffer_length != module->buffer_remaining &&
    4880:	2b01      	cmp	r3, #1
    4882:	d114      	bne.n	48ae <_i2c_slave_interrupt_handler+0xda>
			module->status = STATUS_OK;
    4884:	697b      	ldr	r3, [r7, #20]
    4886:	2231      	movs	r2, #49	; 0x31
    4888:	2100      	movs	r1, #0
    488a:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    488c:	697b      	ldr	r3, [r7, #20]
    488e:	2200      	movs	r2, #0
    4890:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    4892:	697b      	ldr	r3, [r7, #20]
    4894:	2200      	movs	r2, #0
    4896:	851a      	strh	r2, [r3, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
    4898:	230f      	movs	r3, #15
    489a:	18fb      	adds	r3, r7, r3
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	2201      	movs	r2, #1
    48a0:	4013      	ands	r3, r2
    48a2:	d004      	beq.n	48ae <_i2c_slave_interrupt_handler+0xda>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    48a4:	697b      	ldr	r3, [r7, #20]
    48a6:	68db      	ldr	r3, [r3, #12]
    48a8:	697a      	ldr	r2, [r7, #20]
    48aa:	0010      	movs	r0, r2
    48ac:	4798      	blx	r3
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
    48ae:	693b      	ldr	r3, [r7, #16]
    48b0:	8b5b      	ldrh	r3, [r3, #26]
    48b2:	b29b      	uxth	r3, r3
    48b4:	001a      	movs	r2, r3
    48b6:	2343      	movs	r3, #67	; 0x43
    48b8:	4013      	ands	r3, r2
    48ba:	d00e      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
    48bc:	697b      	ldr	r3, [r7, #20]
    48be:	2231      	movs	r2, #49	; 0x31
    48c0:	2110      	movs	r1, #16
    48c2:	5499      	strb	r1, [r3, r2]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
    48c4:	230f      	movs	r3, #15
    48c6:	18fb      	adds	r3, r7, r3
    48c8:	781b      	ldrb	r3, [r3, #0]
    48ca:	2220      	movs	r2, #32
    48cc:	4013      	ands	r3, r2
    48ce:	d004      	beq.n	48da <_i2c_slave_interrupt_handler+0x106>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
    48d0:	697b      	ldr	r3, [r7, #20]
    48d2:	6a1b      	ldr	r3, [r3, #32]
    48d4:	697a      	ldr	r2, [r7, #20]
    48d6:	0010      	movs	r0, r2
    48d8:	4798      	blx	r3
			}
		}
		if (module->nack_on_address) {
    48da:	697b      	ldr	r3, [r7, #20]
    48dc:	7a5b      	ldrb	r3, [r3, #9]
    48de:	2b00      	cmp	r3, #0
    48e0:	d005      	beq.n	48ee <_i2c_slave_interrupt_handler+0x11a>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
    48e2:	697b      	ldr	r3, [r7, #20]
    48e4:	2100      	movs	r1, #0
    48e6:	0018      	movs	r0, r3
    48e8:	4b86      	ldr	r3, [pc, #536]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    48ea:	4798      	blx	r3
    48ec:	e045      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
    48ee:	693b      	ldr	r3, [r7, #16]
    48f0:	8b5b      	ldrh	r3, [r3, #26]
    48f2:	b29b      	uxth	r3, r3
    48f4:	001a      	movs	r2, r3
    48f6:	2308      	movs	r3, #8
    48f8:	4013      	ands	r3, r2
    48fa:	d01f      	beq.n	493c <_i2c_slave_interrupt_handler+0x168>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
    48fc:	697b      	ldr	r3, [r7, #20]
    48fe:	2230      	movs	r2, #48	; 0x30
    4900:	2101      	movs	r1, #1
    4902:	5499      	strb	r1, [r3, r2]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
    4904:	230f      	movs	r3, #15
    4906:	18fb      	adds	r3, r7, r3
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	2204      	movs	r2, #4
    490c:	4013      	ands	r3, r2
    490e:	d004      	beq.n	491a <_i2c_slave_interrupt_handler+0x146>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
    4910:	697b      	ldr	r3, [r7, #20]
    4912:	695b      	ldr	r3, [r3, #20]
    4914:	697a      	ldr	r2, [r7, #20]
    4916:	0010      	movs	r0, r2
    4918:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    491a:	697b      	ldr	r3, [r7, #20]
    491c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    491e:	b29b      	uxth	r3, r3
    4920:	2b00      	cmp	r3, #0
    4922:	d105      	bne.n	4930 <_i2c_slave_interrupt_handler+0x15c>
				/* Data buffer not set up, NACK address, workaround 13574*/
				_i2c_slave_set_ctrlb_ackact(module, false);
    4924:	697b      	ldr	r3, [r7, #20]
    4926:	2100      	movs	r1, #0
    4928:	0018      	movs	r0, r3
    492a:	4b76      	ldr	r3, [pc, #472]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    492c:	4798      	blx	r3
    492e:	e024      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4930:	697b      	ldr	r3, [r7, #20]
    4932:	2101      	movs	r1, #1
    4934:	0018      	movs	r0, r3
    4936:	4b73      	ldr	r3, [pc, #460]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4938:	4798      	blx	r3
    493a:	e01e      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			}
		} else {
			/* Set transfer direction in dev inst */
			module->transfer_direction = I2C_TRANSFER_WRITE;
    493c:	697b      	ldr	r3, [r7, #20]
    493e:	2230      	movs	r2, #48	; 0x30
    4940:	2100      	movs	r1, #0
    4942:	5499      	strb	r1, [r3, r2]

			/* Write request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
    4944:	230f      	movs	r3, #15
    4946:	18fb      	adds	r3, r7, r3
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	2208      	movs	r2, #8
    494c:	4013      	ands	r3, r2
    494e:	d004      	beq.n	495a <_i2c_slave_interrupt_handler+0x186>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
    4950:	697b      	ldr	r3, [r7, #20]
    4952:	699b      	ldr	r3, [r3, #24]
    4954:	697a      	ldr	r2, [r7, #20]
    4956:	0010      	movs	r0, r2
    4958:	4798      	blx	r3
			}

			if (module->buffer_length == 0) {
    495a:	697b      	ldr	r3, [r7, #20]
    495c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    495e:	b29b      	uxth	r3, r3
    4960:	2b00      	cmp	r3, #0
    4962:	d105      	bne.n	4970 <_i2c_slave_interrupt_handler+0x19c>
				/* Data buffer not set up, NACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, false);
    4964:	697b      	ldr	r3, [r7, #20]
    4966:	2100      	movs	r1, #0
    4968:	0018      	movs	r0, r3
    496a:	4b66      	ldr	r3, [pc, #408]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    496c:	4798      	blx	r3
    496e:	e004      	b.n	497a <_i2c_slave_interrupt_handler+0x1a6>
			} else {
				/* ACK address, workaround 13574 */
				_i2c_slave_set_ctrlb_ackact(module, true);
    4970:	697b      	ldr	r3, [r7, #20]
    4972:	2101      	movs	r1, #1
    4974:	0018      	movs	r0, r3
    4976:	4b63      	ldr	r3, [pc, #396]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4978:	4798      	blx	r3
			}
		}

		/* ACK or NACK address, Workaround 13574 */
		_i2c_slave_set_ctrlb_cmd3(module);
    497a:	697b      	ldr	r3, [r7, #20]
    497c:	0018      	movs	r0, r3
    497e:	4b62      	ldr	r3, [pc, #392]	; (4b08 <_i2c_slave_interrupt_handler+0x334>)
    4980:	4798      	blx	r3

		/* ACK next incoming packet, workaround 13574 */
		_i2c_slave_set_ctrlb_ackact(module, true);
    4982:	697b      	ldr	r3, [r7, #20]
    4984:	2101      	movs	r1, #1
    4986:	0018      	movs	r0, r3
    4988:	4b5e      	ldr	r3, [pc, #376]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    498a:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
    498c:	e0d8      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
    498e:	693b      	ldr	r3, [r7, #16]
    4990:	7e1b      	ldrb	r3, [r3, #24]
    4992:	b2db      	uxtb	r3, r3
    4994:	001a      	movs	r2, r3
    4996:	2301      	movs	r3, #1
    4998:	4013      	ands	r3, r2
    499a:	d054      	beq.n	4a46 <_i2c_slave_interrupt_handler+0x272>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    499c:	693b      	ldr	r3, [r7, #16]
    499e:	2201      	movs	r2, #1
    49a0:	761a      	strb	r2, [r3, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
    49a2:	693b      	ldr	r3, [r7, #16]
    49a4:	2205      	movs	r2, #5
    49a6:	751a      	strb	r2, [r3, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49a8:	697b      	ldr	r3, [r7, #20]
    49aa:	2225      	movs	r2, #37	; 0x25
    49ac:	5c9b      	ldrb	r3, [r3, r2]
    49ae:	b2db      	uxtb	r3, r3
    49b0:	001a      	movs	r2, r3
    49b2:	2304      	movs	r3, #4
    49b4:	4013      	ands	r3, r2
    49b6:	d108      	bne.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
    49b8:	697b      	ldr	r3, [r7, #20]
    49ba:	2225      	movs	r2, #37	; 0x25
    49bc:	5c9b      	ldrb	r3, [r3, r2]
    49be:	b2db      	uxtb	r3, r3
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    49c0:	2b08      	cmp	r3, #8
    49c2:	d002      	beq.n	49ca <_i2c_slave_interrupt_handler+0x1f6>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    49c4:	693b      	ldr	r3, [r7, #16]
    49c6:	2202      	movs	r2, #2
    49c8:	751a      	strb	r2, [r3, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
    49ca:	697b      	ldr	r3, [r7, #20]
    49cc:	2231      	movs	r2, #49	; 0x31
    49ce:	5c9b      	ldrb	r3, [r3, r2]
    49d0:	b2db      	uxtb	r3, r3
    49d2:	2b1e      	cmp	r3, #30
    49d4:	d100      	bne.n	49d8 <_i2c_slave_interrupt_handler+0x204>
    49d6:	e0b3      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    49d8:	697b      	ldr	r3, [r7, #20]
    49da:	2231      	movs	r2, #49	; 0x31
    49dc:	5c9b      	ldrb	r3, [r3, r2]
    49de:	b2db      	uxtb	r3, r3
    49e0:	2b10      	cmp	r3, #16
    49e2:	d100      	bne.n	49e6 <_i2c_slave_interrupt_handler+0x212>
    49e4:	e0ac      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			module->status = STATUS_OK;
    49e6:	697b      	ldr	r3, [r7, #20]
    49e8:	2231      	movs	r2, #49	; 0x31
    49ea:	2100      	movs	r1, #0
    49ec:	5499      	strb	r1, [r3, r2]
			module->buffer_length = 0;
    49ee:	697b      	ldr	r3, [r7, #20]
    49f0:	2200      	movs	r2, #0
    49f2:	84da      	strh	r2, [r3, #38]	; 0x26
			module->buffer_remaining = 0;
    49f4:	697b      	ldr	r3, [r7, #20]
    49f6:	2200      	movs	r2, #0
    49f8:	851a      	strh	r2, [r3, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
    49fa:	230f      	movs	r3, #15
    49fc:	18fb      	adds	r3, r7, r3
    49fe:	781b      	ldrb	r3, [r3, #0]
    4a00:	2202      	movs	r2, #2
    4a02:	4013      	ands	r3, r2
    4a04:	d00b      	beq.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4a06:	697b      	ldr	r3, [r7, #20]
    4a08:	2230      	movs	r2, #48	; 0x30
    4a0a:	5c9b      	ldrb	r3, [r3, r2]
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d105      	bne.n	4a1e <_i2c_slave_interrupt_handler+0x24a>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	691b      	ldr	r3, [r3, #16]
    4a16:	697a      	ldr	r2, [r7, #20]
    4a18:	0010      	movs	r0, r2
    4a1a:	4798      	blx	r3
    4a1c:	e090      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
    4a1e:	230f      	movs	r3, #15
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	781b      	ldrb	r3, [r3, #0]
    4a24:	2201      	movs	r2, #1
    4a26:	4013      	ands	r3, r2
    4a28:	d100      	bne.n	4a2c <_i2c_slave_interrupt_handler+0x258>
    4a2a:	e089      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    4a2c:	697b      	ldr	r3, [r7, #20]
    4a2e:	2230      	movs	r2, #48	; 0x30
    4a30:	5c9b      	ldrb	r3, [r3, r2]
    4a32:	b2db      	uxtb	r3, r3
    4a34:	2b01      	cmp	r3, #1
    4a36:	d000      	beq.n	4a3a <_i2c_slave_interrupt_handler+0x266>
    4a38:	e082      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	68db      	ldr	r3, [r3, #12]
    4a3e:	697a      	ldr	r2, [r7, #20]
    4a40:	0010      	movs	r0, r2
    4a42:	4798      	blx	r3
}
    4a44:	e07c      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
    4a46:	693b      	ldr	r3, [r7, #16]
    4a48:	7e1b      	ldrb	r3, [r3, #24]
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	001a      	movs	r2, r3
    4a4e:	2304      	movs	r3, #4
    4a50:	4013      	ands	r3, r2
    4a52:	d100      	bne.n	4a56 <_i2c_slave_interrupt_handler+0x282>
    4a54:	e074      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
		if (module->buffer_remaining <= 0 ||
    4a56:	697b      	ldr	r3, [r7, #20]
    4a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d013      	beq.n	4a86 <_i2c_slave_interrupt_handler+0x2b2>
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a5e:	697b      	ldr	r3, [r7, #20]
    4a60:	2230      	movs	r2, #48	; 0x30
    4a62:	5c9b      	ldrb	r3, [r3, r2]
    4a64:	b2db      	uxtb	r3, r3
		if (module->buffer_remaining <= 0 ||
    4a66:	2b01      	cmp	r3, #1
    4a68:	d150      	bne.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(module->buffer_length > module->buffer_remaining) &&
    4a6a:	697b      	ldr	r3, [r7, #20]
    4a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4a6e:	b29a      	uxth	r2, r3
    4a70:	697b      	ldr	r3, [r7, #20]
    4a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
				(module->transfer_direction == I2C_TRANSFER_READ &&
    4a74:	429a      	cmp	r2, r3
    4a76:	d949      	bls.n	4b0c <_i2c_slave_interrupt_handler+0x338>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
    4a78:	693b      	ldr	r3, [r7, #16]
    4a7a:	8b5b      	ldrh	r3, [r3, #26]
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	001a      	movs	r2, r3
    4a80:	2304      	movs	r3, #4
    4a82:	4013      	ands	r3, r2
				(module->buffer_length > module->buffer_remaining) &&
    4a84:	d042      	beq.n	4b0c <_i2c_slave_interrupt_handler+0x338>
			module->buffer_remaining = 0;
    4a86:	697b      	ldr	r3, [r7, #20]
    4a88:	2200      	movs	r2, #0
    4a8a:	851a      	strh	r2, [r3, #40]	; 0x28
			module->buffer_length = 0;
    4a8c:	697b      	ldr	r3, [r7, #20]
    4a8e:	2200      	movs	r2, #0
    4a90:	84da      	strh	r2, [r3, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4a92:	697b      	ldr	r3, [r7, #20]
    4a94:	2230      	movs	r2, #48	; 0x30
    4a96:	5c9b      	ldrb	r3, [r3, r2]
    4a98:	b2db      	uxtb	r3, r3
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d11b      	bne.n	4ad6 <_i2c_slave_interrupt_handler+0x302>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4a9e:	697b      	ldr	r3, [r7, #20]
    4aa0:	2100      	movs	r1, #0
    4aa2:	0018      	movs	r0, r3
    4aa4:	4b17      	ldr	r3, [pc, #92]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4aa6:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4aa8:	693b      	ldr	r3, [r7, #16]
    4aaa:	685b      	ldr	r3, [r3, #4]
    4aac:	2280      	movs	r2, #128	; 0x80
    4aae:	0292      	lsls	r2, r2, #10
    4ab0:	431a      	orrs	r2, r3
    4ab2:	693b      	ldr	r3, [r7, #16]
    4ab4:	605a      	str	r2, [r3, #4]
				module->status = STATUS_ERR_OVERFLOW;
    4ab6:	697b      	ldr	r3, [r7, #20]
    4ab8:	2231      	movs	r2, #49	; 0x31
    4aba:	211e      	movs	r1, #30
    4abc:	5499      	strb	r1, [r3, r2]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
    4abe:	230f      	movs	r3, #15
    4ac0:	18fb      	adds	r3, r7, r3
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	2210      	movs	r2, #16
    4ac6:	4013      	ands	r3, r2
    4ac8:	d039      	beq.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
    4aca:	697b      	ldr	r3, [r7, #20]
    4acc:	69db      	ldr	r3, [r3, #28]
    4ace:	697a      	ldr	r2, [r7, #20]
    4ad0:	0010      	movs	r0, r2
    4ad2:	4798      	blx	r3
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4ad4:	e033      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
				_i2c_slave_set_ctrlb_ackact(module, false);
    4ad6:	697b      	ldr	r3, [r7, #20]
    4ad8:	2100      	movs	r1, #0
    4ada:	0018      	movs	r0, r3
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <_i2c_slave_interrupt_handler+0x330>)
    4ade:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    4ae0:	693b      	ldr	r3, [r7, #16]
    4ae2:	685b      	ldr	r3, [r3, #4]
    4ae4:	2280      	movs	r2, #128	; 0x80
    4ae6:	0292      	lsls	r2, r2, #10
    4ae8:	431a      	orrs	r2, r3
    4aea:	693b      	ldr	r3, [r7, #16]
    4aec:	605a      	str	r2, [r3, #4]
				module->status = STATUS_OK;
    4aee:	697b      	ldr	r3, [r7, #20]
    4af0:	2231      	movs	r2, #49	; 0x31
    4af2:	2100      	movs	r1, #0
    4af4:	5499      	strb	r1, [r3, r2]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
    4af6:	693b      	ldr	r3, [r7, #16]
    4af8:	2204      	movs	r2, #4
    4afa:	751a      	strb	r2, [r3, #20]
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4afc:	e01f      	b.n	4b3e <_i2c_slave_interrupt_handler+0x36a>
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	20000468 	.word	0x20000468
    4b04:	00004609 	.word	0x00004609
    4b08:	00004655 	.word	0x00004655
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
    4b0c:	697b      	ldr	r3, [r7, #20]
    4b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b10:	b29b      	uxth	r3, r3
    4b12:	2b00      	cmp	r3, #0
    4b14:	d014      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
    4b16:	697b      	ldr	r3, [r7, #20]
    4b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d010      	beq.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b1e:	697b      	ldr	r3, [r7, #20]
    4b20:	2230      	movs	r2, #48	; 0x30
    4b22:	5c9b      	ldrb	r3, [r3, r2]
    4b24:	b2db      	uxtb	r3, r3
    4b26:	2b00      	cmp	r3, #0
    4b28:	d104      	bne.n	4b34 <_i2c_slave_interrupt_handler+0x360>
				_i2c_slave_read(module);
    4b2a:	697b      	ldr	r3, [r7, #20]
    4b2c:	0018      	movs	r0, r3
    4b2e:	4b06      	ldr	r3, [pc, #24]	; (4b48 <_i2c_slave_interrupt_handler+0x374>)
    4b30:	4798      	blx	r3
}
    4b32:	e005      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
				_i2c_slave_write(module);
    4b34:	697b      	ldr	r3, [r7, #20]
    4b36:	0018      	movs	r0, r3
    4b38:	4b04      	ldr	r3, [pc, #16]	; (4b4c <_i2c_slave_interrupt_handler+0x378>)
    4b3a:	4798      	blx	r3
}
    4b3c:	e000      	b.n	4b40 <_i2c_slave_interrupt_handler+0x36c>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4b3e:	46c0      	nop			; (mov r8, r8)
}
    4b40:	46c0      	nop			; (mov r8, r8)
    4b42:	46bd      	mov	sp, r7
    4b44:	b006      	add	sp, #24
    4b46:	bd80      	pop	{r7, pc}
    4b48:	00004685 	.word	0x00004685
    4b4c:	000046bb 	.word	0x000046bb

00004b50 <system_gclk_chan_get_config_defaults>:
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b082      	sub	sp, #8
    4b54:	af00      	add	r7, sp, #0
    4b56:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	2200      	movs	r2, #0
    4b5c:	701a      	strb	r2, [r3, #0]
}
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	46bd      	mov	sp, r7
    4b62:	b002      	add	sp, #8
    4b64:	bd80      	pop	{r7, pc}
	...

00004b68 <system_apb_clock_set_mask>:
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b082      	sub	sp, #8
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	0002      	movs	r2, r0
    4b70:	6039      	str	r1, [r7, #0]
    4b72:	1dfb      	adds	r3, r7, #7
    4b74:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4b76:	1dfb      	adds	r3, r7, #7
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	2b01      	cmp	r3, #1
    4b7c:	d00a      	beq.n	4b94 <system_apb_clock_set_mask+0x2c>
    4b7e:	2b02      	cmp	r3, #2
    4b80:	d00f      	beq.n	4ba2 <system_apb_clock_set_mask+0x3a>
    4b82:	2b00      	cmp	r3, #0
    4b84:	d114      	bne.n	4bb0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4b86:	4b0e      	ldr	r3, [pc, #56]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b88:	4a0d      	ldr	r2, [pc, #52]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b8a:	6991      	ldr	r1, [r2, #24]
    4b8c:	683a      	ldr	r2, [r7, #0]
    4b8e:	430a      	orrs	r2, r1
    4b90:	619a      	str	r2, [r3, #24]
			break;
    4b92:	e00f      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4b94:	4b0a      	ldr	r3, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b96:	4a0a      	ldr	r2, [pc, #40]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4b98:	69d1      	ldr	r1, [r2, #28]
    4b9a:	683a      	ldr	r2, [r7, #0]
    4b9c:	430a      	orrs	r2, r1
    4b9e:	61da      	str	r2, [r3, #28]
			break;
    4ba0:	e008      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4ba2:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba4:	4a06      	ldr	r2, [pc, #24]	; (4bc0 <system_apb_clock_set_mask+0x58>)
    4ba6:	6a11      	ldr	r1, [r2, #32]
    4ba8:	683a      	ldr	r2, [r7, #0]
    4baa:	430a      	orrs	r2, r1
    4bac:	621a      	str	r2, [r3, #32]
			break;
    4bae:	e001      	b.n	4bb4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4bb0:	2317      	movs	r3, #23
    4bb2:	e000      	b.n	4bb6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4bb4:	2300      	movs	r3, #0
}
    4bb6:	0018      	movs	r0, r3
    4bb8:	46bd      	mov	sp, r7
    4bba:	b002      	add	sp, #8
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	40000400 	.word	0x40000400

00004bc4 <system_pinmux_get_config_defaults>:
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b082      	sub	sp, #8
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	2280      	movs	r2, #128	; 0x80
    4bd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	2200      	movs	r2, #0
    4bd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	2201      	movs	r2, #1
    4bdc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	2200      	movs	r2, #0
    4be2:	70da      	strb	r2, [r3, #3]
}
    4be4:	46c0      	nop			; (mov r8, r8)
    4be6:	46bd      	mov	sp, r7
    4be8:	b002      	add	sp, #8
    4bea:	bd80      	pop	{r7, pc}

00004bec <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b084      	sub	sp, #16
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4bf4:	2300      	movs	r3, #0
    4bf6:	60fb      	str	r3, [r7, #12]
    4bf8:	e00c      	b.n	4c14 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    4bfa:	4b0a      	ldr	r3, [pc, #40]	; (4c24 <_tcc_get_inst_index+0x38>)
    4bfc:	68fa      	ldr	r2, [r7, #12]
    4bfe:	0092      	lsls	r2, r2, #2
    4c00:	58d2      	ldr	r2, [r2, r3]
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	429a      	cmp	r2, r3
    4c06:	d102      	bne.n	4c0e <_tcc_get_inst_index+0x22>
			return i;
    4c08:	68fb      	ldr	r3, [r7, #12]
    4c0a:	b2db      	uxtb	r3, r3
    4c0c:	e006      	b.n	4c1c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4c0e:	68fb      	ldr	r3, [r7, #12]
    4c10:	3301      	adds	r3, #1
    4c12:	60fb      	str	r3, [r7, #12]
    4c14:	68fb      	ldr	r3, [r7, #12]
    4c16:	2b02      	cmp	r3, #2
    4c18:	d9ef      	bls.n	4bfa <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4c1a:	2300      	movs	r3, #0
}
    4c1c:	0018      	movs	r0, r3
    4c1e:	46bd      	mov	sp, r7
    4c20:	b004      	add	sp, #16
    4c22:	bd80      	pop	{r7, pc}
    4c24:	00016f5c 	.word	0x00016f5c

00004c28 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    4c28:	b590      	push	{r4, r7, lr}
    4c2a:	b085      	sub	sp, #20
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
    4c30:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    4c32:	230f      	movs	r3, #15
    4c34:	18fc      	adds	r4, r7, r3
    4c36:	683b      	ldr	r3, [r7, #0]
    4c38:	0018      	movs	r0, r3
    4c3a:	4bad      	ldr	r3, [pc, #692]	; (4ef0 <tcc_get_config_defaults+0x2c8>)
    4c3c:	4798      	blx	r3
    4c3e:	0003      	movs	r3, r0
    4c40:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	2200      	movs	r2, #0
    4c46:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    4c48:	230f      	movs	r3, #15
    4c4a:	18fb      	adds	r3, r7, r3
    4c4c:	781a      	ldrb	r2, [r3, #0]
    4c4e:	4ba9      	ldr	r3, [pc, #676]	; (4ef4 <tcc_get_config_defaults+0x2cc>)
    4c50:	0092      	lsls	r2, r2, #2
    4c52:	58d2      	ldr	r2, [r2, r3]
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	2200      	movs	r2, #0
    4c5c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	2200      	movs	r2, #0
    4c62:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	2200      	movs	r2, #0
    4c68:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	2200      	movs	r2, #0
    4c6e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    4c70:	687b      	ldr	r3, [r7, #4]
    4c72:	2200      	movs	r2, #0
    4c74:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	2200      	movs	r2, #0
    4c7a:	61da      	str	r2, [r3, #28]
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	2200      	movs	r2, #0
    4c80:	621a      	str	r2, [r3, #32]
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	2200      	movs	r2, #0
    4c86:	625a      	str	r2, [r3, #36]	; 0x24
    4c88:	687b      	ldr	r3, [r7, #4]
    4c8a:	2200      	movs	r2, #0
    4c8c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	2200      	movs	r2, #0
    4c92:	751a      	strb	r2, [r3, #20]
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	2200      	movs	r2, #0
    4c98:	755a      	strb	r2, [r3, #21]
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	2200      	movs	r2, #0
    4c9e:	759a      	strb	r2, [r3, #22]
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	2200      	movs	r2, #0
    4ca4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	2200      	movs	r2, #0
    4caa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    4cac:	687b      	ldr	r3, [r7, #4]
    4cae:	2200      	movs	r2, #0
    4cb0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	2200      	movs	r2, #0
    4cb6:	741a      	strb	r2, [r3, #16]
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	2200      	movs	r2, #0
    4cbc:	745a      	strb	r2, [r3, #17]
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	2200      	movs	r2, #0
    4cc2:	749a      	strb	r2, [r3, #18]
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	2200      	movs	r2, #0
    4cc8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	222c      	movs	r2, #44	; 0x2c
    4cce:	2100      	movs	r1, #0
    4cd0:	5499      	strb	r1, [r3, r2]
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	222d      	movs	r2, #45	; 0x2d
    4cd6:	2100      	movs	r1, #0
    4cd8:	5499      	strb	r1, [r3, r2]
    4cda:	687b      	ldr	r3, [r7, #4]
    4cdc:	222e      	movs	r2, #46	; 0x2e
    4cde:	2100      	movs	r1, #0
    4ce0:	5499      	strb	r1, [r3, r2]
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	222f      	movs	r2, #47	; 0x2f
    4ce6:	2100      	movs	r1, #0
    4ce8:	5499      	strb	r1, [r3, r2]
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	2230      	movs	r2, #48	; 0x30
    4cee:	2100      	movs	r1, #0
    4cf0:	5499      	strb	r1, [r3, r2]
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	2231      	movs	r2, #49	; 0x31
    4cf6:	2100      	movs	r1, #0
    4cf8:	5499      	strb	r1, [r3, r2]
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	2232      	movs	r2, #50	; 0x32
    4cfe:	2100      	movs	r1, #0
    4d00:	5499      	strb	r1, [r3, r2]
    4d02:	687b      	ldr	r3, [r7, #4]
    4d04:	2233      	movs	r2, #51	; 0x33
    4d06:	2100      	movs	r1, #0
    4d08:	5499      	strb	r1, [r3, r2]
    4d0a:	687b      	ldr	r3, [r7, #4]
    4d0c:	2234      	movs	r2, #52	; 0x34
    4d0e:	2100      	movs	r1, #0
    4d10:	5499      	strb	r1, [r3, r2]
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	2235      	movs	r2, #53	; 0x35
    4d16:	2100      	movs	r1, #0
    4d18:	5499      	strb	r1, [r3, r2]
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	2236      	movs	r2, #54	; 0x36
    4d1e:	2100      	movs	r1, #0
    4d20:	5499      	strb	r1, [r3, r2]
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	2237      	movs	r2, #55	; 0x37
    4d26:	2100      	movs	r1, #0
    4d28:	5499      	strb	r1, [r3, r2]
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	2238      	movs	r2, #56	; 0x38
    4d2e:	2100      	movs	r1, #0
    4d30:	5499      	strb	r1, [r3, r2]
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	2239      	movs	r2, #57	; 0x39
    4d36:	2100      	movs	r1, #0
    4d38:	5499      	strb	r1, [r3, r2]
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	223a      	movs	r2, #58	; 0x3a
    4d3e:	2100      	movs	r1, #0
    4d40:	5499      	strb	r1, [r3, r2]
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	223b      	movs	r2, #59	; 0x3b
    4d46:	2100      	movs	r1, #0
    4d48:	5499      	strb	r1, [r3, r2]
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	223c      	movs	r2, #60	; 0x3c
    4d4e:	2100      	movs	r1, #0
    4d50:	5499      	strb	r1, [r3, r2]
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	223d      	movs	r2, #61	; 0x3d
    4d56:	2100      	movs	r1, #0
    4d58:	5499      	strb	r1, [r3, r2]
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	223e      	movs	r2, #62	; 0x3e
    4d5e:	2100      	movs	r1, #0
    4d60:	5499      	strb	r1, [r3, r2]
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	223f      	movs	r2, #63	; 0x3f
    4d66:	2100      	movs	r1, #0
    4d68:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	2240      	movs	r2, #64	; 0x40
    4d6e:	2100      	movs	r1, #0
    4d70:	5499      	strb	r1, [r3, r2]
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	2241      	movs	r2, #65	; 0x41
    4d76:	2100      	movs	r1, #0
    4d78:	5499      	strb	r1, [r3, r2]
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	2242      	movs	r2, #66	; 0x42
    4d7e:	2100      	movs	r1, #0
    4d80:	5499      	strb	r1, [r3, r2]
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	2243      	movs	r2, #67	; 0x43
    4d86:	2100      	movs	r1, #0
    4d88:	5499      	strb	r1, [r3, r2]
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	2244      	movs	r2, #68	; 0x44
    4d8e:	2100      	movs	r1, #0
    4d90:	5499      	strb	r1, [r3, r2]
    4d92:	687b      	ldr	r3, [r7, #4]
    4d94:	2245      	movs	r2, #69	; 0x45
    4d96:	2100      	movs	r1, #0
    4d98:	5499      	strb	r1, [r3, r2]
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	2246      	movs	r2, #70	; 0x46
    4d9e:	2100      	movs	r1, #0
    4da0:	5499      	strb	r1, [r3, r2]
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	2247      	movs	r2, #71	; 0x47
    4da6:	2100      	movs	r1, #0
    4da8:	5499      	strb	r1, [r3, r2]
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	2248      	movs	r2, #72	; 0x48
    4dae:	2100      	movs	r1, #0
    4db0:	5499      	strb	r1, [r3, r2]
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	2249      	movs	r2, #73	; 0x49
    4db6:	2100      	movs	r1, #0
    4db8:	5499      	strb	r1, [r3, r2]
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	224a      	movs	r2, #74	; 0x4a
    4dbe:	2100      	movs	r1, #0
    4dc0:	5499      	strb	r1, [r3, r2]
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	224b      	movs	r2, #75	; 0x4b
    4dc6:	2100      	movs	r1, #0
    4dc8:	5499      	strb	r1, [r3, r2]
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	224c      	movs	r2, #76	; 0x4c
    4dce:	2100      	movs	r1, #0
    4dd0:	5499      	strb	r1, [r3, r2]
    4dd2:	687b      	ldr	r3, [r7, #4]
    4dd4:	224d      	movs	r2, #77	; 0x4d
    4dd6:	2100      	movs	r1, #0
    4dd8:	5499      	strb	r1, [r3, r2]
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	224e      	movs	r2, #78	; 0x4e
    4dde:	2100      	movs	r1, #0
    4de0:	5499      	strb	r1, [r3, r2]
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	224f      	movs	r2, #79	; 0x4f
    4de6:	2100      	movs	r1, #0
    4de8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	2250      	movs	r2, #80	; 0x50
    4dee:	2100      	movs	r1, #0
    4df0:	5499      	strb	r1, [r3, r2]
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	2251      	movs	r2, #81	; 0x51
    4df6:	2100      	movs	r1, #0
    4df8:	5499      	strb	r1, [r3, r2]
    4dfa:	687b      	ldr	r3, [r7, #4]
    4dfc:	2252      	movs	r2, #82	; 0x52
    4dfe:	2100      	movs	r1, #0
    4e00:	5499      	strb	r1, [r3, r2]
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	2253      	movs	r2, #83	; 0x53
    4e06:	2100      	movs	r1, #0
    4e08:	5499      	strb	r1, [r3, r2]
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	2254      	movs	r2, #84	; 0x54
    4e0e:	2100      	movs	r1, #0
    4e10:	5499      	strb	r1, [r3, r2]
    4e12:	687b      	ldr	r3, [r7, #4]
    4e14:	2255      	movs	r2, #85	; 0x55
    4e16:	2100      	movs	r1, #0
    4e18:	5499      	strb	r1, [r3, r2]
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	2256      	movs	r2, #86	; 0x56
    4e1e:	2100      	movs	r1, #0
    4e20:	5499      	strb	r1, [r3, r2]
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	2257      	movs	r2, #87	; 0x57
    4e26:	2100      	movs	r1, #0
    4e28:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	2298      	movs	r2, #152	; 0x98
    4e2e:	2100      	movs	r1, #0
    4e30:	5499      	strb	r1, [r3, r2]
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	2200      	movs	r2, #0
    4e36:	659a      	str	r2, [r3, #88]	; 0x58
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	2200      	movs	r2, #0
    4e3c:	679a      	str	r2, [r3, #120]	; 0x78
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	2299      	movs	r2, #153	; 0x99
    4e42:	2100      	movs	r1, #0
    4e44:	5499      	strb	r1, [r3, r2]
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	2200      	movs	r2, #0
    4e4a:	65da      	str	r2, [r3, #92]	; 0x5c
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	2200      	movs	r2, #0
    4e50:	67da      	str	r2, [r3, #124]	; 0x7c
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	229a      	movs	r2, #154	; 0x9a
    4e56:	2100      	movs	r1, #0
    4e58:	5499      	strb	r1, [r3, r2]
    4e5a:	687b      	ldr	r3, [r7, #4]
    4e5c:	2200      	movs	r2, #0
    4e5e:	661a      	str	r2, [r3, #96]	; 0x60
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	2280      	movs	r2, #128	; 0x80
    4e64:	2100      	movs	r1, #0
    4e66:	5099      	str	r1, [r3, r2]
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	229b      	movs	r2, #155	; 0x9b
    4e6c:	2100      	movs	r1, #0
    4e6e:	5499      	strb	r1, [r3, r2]
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	2200      	movs	r2, #0
    4e74:	665a      	str	r2, [r3, #100]	; 0x64
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	2284      	movs	r2, #132	; 0x84
    4e7a:	2100      	movs	r1, #0
    4e7c:	5099      	str	r1, [r3, r2]
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	229c      	movs	r2, #156	; 0x9c
    4e82:	2100      	movs	r1, #0
    4e84:	5499      	strb	r1, [r3, r2]
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	2200      	movs	r2, #0
    4e8a:	669a      	str	r2, [r3, #104]	; 0x68
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	2288      	movs	r2, #136	; 0x88
    4e90:	2100      	movs	r1, #0
    4e92:	5099      	str	r1, [r3, r2]
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	229d      	movs	r2, #157	; 0x9d
    4e98:	2100      	movs	r1, #0
    4e9a:	5499      	strb	r1, [r3, r2]
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	2200      	movs	r2, #0
    4ea0:	66da      	str	r2, [r3, #108]	; 0x6c
    4ea2:	687b      	ldr	r3, [r7, #4]
    4ea4:	228c      	movs	r2, #140	; 0x8c
    4ea6:	2100      	movs	r1, #0
    4ea8:	5099      	str	r1, [r3, r2]
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	229e      	movs	r2, #158	; 0x9e
    4eae:	2100      	movs	r1, #0
    4eb0:	5499      	strb	r1, [r3, r2]
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	2200      	movs	r2, #0
    4eb6:	671a      	str	r2, [r3, #112]	; 0x70
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	2290      	movs	r2, #144	; 0x90
    4ebc:	2100      	movs	r1, #0
    4ebe:	5099      	str	r1, [r3, r2]
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	229f      	movs	r2, #159	; 0x9f
    4ec4:	2100      	movs	r1, #0
    4ec6:	5499      	strb	r1, [r3, r2]
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	2200      	movs	r2, #0
    4ecc:	675a      	str	r2, [r3, #116]	; 0x74
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	2294      	movs	r2, #148	; 0x94
    4ed2:	2100      	movs	r1, #0
    4ed4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	22a0      	movs	r2, #160	; 0xa0
    4eda:	2101      	movs	r1, #1
    4edc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	22a1      	movs	r2, #161	; 0xa1
    4ee2:	2100      	movs	r1, #0
    4ee4:	5499      	strb	r1, [r3, r2]
}
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	46bd      	mov	sp, r7
    4eea:	b005      	add	sp, #20
    4eec:	bd90      	pop	{r4, r7, pc}
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	00004bed 	.word	0x00004bed
    4ef4:	00016f78 	.word	0x00016f78

00004ef8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ef8:	b580      	push	{r7, lr}
    4efa:	b086      	sub	sp, #24
    4efc:	af00      	add	r7, sp, #0
    4efe:	60b9      	str	r1, [r7, #8]
    4f00:	607a      	str	r2, [r7, #4]
    4f02:	230f      	movs	r3, #15
    4f04:	18fb      	adds	r3, r7, r3
    4f06:	1c02      	adds	r2, r0, #0
    4f08:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    4f0a:	2300      	movs	r3, #0
    4f0c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f0e:	2300      	movs	r3, #0
    4f10:	613b      	str	r3, [r7, #16]
    4f12:	e01d      	b.n	4f50 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    4f14:	68ba      	ldr	r2, [r7, #8]
    4f16:	693b      	ldr	r3, [r7, #16]
    4f18:	18d3      	adds	r3, r2, r3
    4f1a:	3310      	adds	r3, #16
    4f1c:	781b      	ldrb	r3, [r3, #0]
    4f1e:	2b01      	cmp	r3, #1
    4f20:	d113      	bne.n	4f4a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    4f22:	230f      	movs	r3, #15
    4f24:	18fb      	adds	r3, r7, r3
    4f26:	781b      	ldrb	r3, [r3, #0]
    4f28:	4a1b      	ldr	r2, [pc, #108]	; (4f98 <_tcc_build_ctrla+0xa0>)
    4f2a:	5cd3      	ldrb	r3, [r2, r3]
    4f2c:	001a      	movs	r2, r3
    4f2e:	693b      	ldr	r3, [r7, #16]
    4f30:	429a      	cmp	r2, r3
    4f32:	da01      	bge.n	4f38 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    4f34:	2317      	movs	r3, #23
    4f36:	e02a      	b.n	4f8e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4f38:	2380      	movs	r3, #128	; 0x80
    4f3a:	045a      	lsls	r2, r3, #17
    4f3c:	693b      	ldr	r3, [r7, #16]
    4f3e:	409a      	lsls	r2, r3
    4f40:	0013      	movs	r3, r2
    4f42:	001a      	movs	r2, r3
    4f44:	697b      	ldr	r3, [r7, #20]
    4f46:	4313      	orrs	r3, r2
    4f48:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4f4a:	693b      	ldr	r3, [r7, #16]
    4f4c:	3301      	adds	r3, #1
    4f4e:	613b      	str	r3, [r7, #16]
    4f50:	693b      	ldr	r3, [r7, #16]
    4f52:	2b03      	cmp	r3, #3
    4f54:	ddde      	ble.n	4f14 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    4f56:	68bb      	ldr	r3, [r7, #8]
    4f58:	22a1      	movs	r2, #161	; 0xa1
    4f5a:	5c9b      	ldrb	r3, [r3, r2]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d004      	beq.n	4f6a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    4f60:	697b      	ldr	r3, [r7, #20]
    4f62:	2280      	movs	r2, #128	; 0x80
    4f64:	0112      	lsls	r2, r2, #4
    4f66:	4313      	orrs	r3, r2
    4f68:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4f6a:	68bb      	ldr	r3, [r7, #8]
    4f6c:	7b1b      	ldrb	r3, [r3, #12]
    4f6e:	031b      	lsls	r3, r3, #12
    4f70:	001a      	movs	r2, r3
    4f72:	697b      	ldr	r3, [r7, #20]
    4f74:	4313      	orrs	r3, r2
    4f76:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4f78:	68bb      	ldr	r3, [r7, #8]
    4f7a:	7adb      	ldrb	r3, [r3, #11]
    4f7c:	021b      	lsls	r3, r3, #8
    4f7e:	001a      	movs	r2, r3
    4f80:	697b      	ldr	r3, [r7, #20]
    4f82:	4313      	orrs	r3, r2
    4f84:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    4f86:	687b      	ldr	r3, [r7, #4]
    4f88:	697a      	ldr	r2, [r7, #20]
    4f8a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    4f8c:	2300      	movs	r3, #0
}
    4f8e:	0018      	movs	r0, r3
    4f90:	46bd      	mov	sp, r7
    4f92:	b006      	add	sp, #24
    4f94:	bd80      	pop	{r7, pc}
    4f96:	46c0      	nop			; (mov r8, r8)
    4f98:	00016f84 	.word	0x00016f84

00004f9c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b086      	sub	sp, #24
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	60b9      	str	r1, [r7, #8]
    4fa4:	607a      	str	r2, [r7, #4]
    4fa6:	230f      	movs	r3, #15
    4fa8:	18fb      	adds	r3, r7, r3
    4faa:	1c02      	adds	r2, r0, #0
    4fac:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    4fae:	2317      	movs	r3, #23
    4fb0:	18fb      	adds	r3, r7, r3
    4fb2:	2200      	movs	r2, #0
    4fb4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    4fb6:	68bb      	ldr	r3, [r7, #8]
    4fb8:	7a1b      	ldrb	r3, [r3, #8]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d007      	beq.n	4fce <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    4fbe:	2317      	movs	r3, #23
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	2217      	movs	r2, #23
    4fc4:	18ba      	adds	r2, r7, r2
    4fc6:	7812      	ldrb	r2, [r2, #0]
    4fc8:	2104      	movs	r1, #4
    4fca:	430a      	orrs	r2, r1
    4fcc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    4fce:	68bb      	ldr	r3, [r7, #8]
    4fd0:	7a5b      	ldrb	r3, [r3, #9]
    4fd2:	2b01      	cmp	r3, #1
    4fd4:	d107      	bne.n	4fe6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    4fd6:	2317      	movs	r3, #23
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	2217      	movs	r2, #23
    4fdc:	18ba      	adds	r2, r7, r2
    4fde:	7812      	ldrb	r2, [r2, #0]
    4fe0:	2101      	movs	r1, #1
    4fe2:	430a      	orrs	r2, r1
    4fe4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	2217      	movs	r2, #23
    4fea:	18ba      	adds	r2, r7, r2
    4fec:	7812      	ldrb	r2, [r2, #0]
    4fee:	701a      	strb	r2, [r3, #0]
}
    4ff0:	46c0      	nop			; (mov r8, r8)
    4ff2:	46bd      	mov	sp, r7
    4ff4:	b006      	add	sp, #24
    4ff6:	bd80      	pop	{r7, pc}

00004ff8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b088      	sub	sp, #32
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	60b9      	str	r1, [r7, #8]
    5000:	607a      	str	r2, [r7, #4]
    5002:	230f      	movs	r3, #15
    5004:	18fb      	adds	r3, r7, r3
    5006:	1c02      	adds	r2, r0, #0
    5008:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    500a:	230f      	movs	r3, #15
    500c:	18fb      	adds	r3, r7, r3
    500e:	781a      	ldrb	r2, [r3, #0]
    5010:	231b      	movs	r3, #27
    5012:	18fb      	adds	r3, r7, r3
    5014:	493e      	ldr	r1, [pc, #248]	; (5110 <_tcc_build_faults+0x118>)
    5016:	5c8a      	ldrb	r2, [r1, r2]
    5018:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    501a:	2300      	movs	r3, #0
    501c:	61fb      	str	r3, [r7, #28]
    501e:	e06e      	b.n	50fe <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    5020:	69fa      	ldr	r2, [r7, #28]
    5022:	0013      	movs	r3, r2
    5024:	009b      	lsls	r3, r3, #2
    5026:	189b      	adds	r3, r3, r2
    5028:	005b      	lsls	r3, r3, #1
    502a:	3328      	adds	r3, #40	; 0x28
    502c:	68ba      	ldr	r2, [r7, #8]
    502e:	18d3      	adds	r3, r2, r3
    5030:	3304      	adds	r3, #4
    5032:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    5034:	697b      	ldr	r3, [r7, #20]
    5036:	7a5b      	ldrb	r3, [r3, #9]
    5038:	221b      	movs	r2, #27
    503a:	18ba      	adds	r2, r7, r2
    503c:	7812      	ldrb	r2, [r2, #0]
    503e:	429a      	cmp	r2, r3
    5040:	d801      	bhi.n	5046 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    5042:	2317      	movs	r3, #23
    5044:	e05f      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    5046:	697b      	ldr	r3, [r7, #20]
    5048:	781b      	ldrb	r3, [r3, #0]
    504a:	2b0f      	cmp	r3, #15
    504c:	d901      	bls.n	5052 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    504e:	2317      	movs	r3, #23
    5050:	e059      	b.n	5106 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5052:	697b      	ldr	r3, [r7, #20]
    5054:	781b      	ldrb	r3, [r3, #0]
    5056:	061b      	lsls	r3, r3, #24
    5058:	001a      	movs	r2, r3
    505a:	23f0      	movs	r3, #240	; 0xf0
    505c:	051b      	lsls	r3, r3, #20
    505e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5060:	697b      	ldr	r3, [r7, #20]
    5062:	785b      	ldrb	r3, [r3, #1]
    5064:	041b      	lsls	r3, r3, #16
    5066:	0019      	movs	r1, r3
    5068:	23ff      	movs	r3, #255	; 0xff
    506a:	041b      	lsls	r3, r3, #16
    506c:	400b      	ands	r3, r1
    506e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5070:	697b      	ldr	r3, [r7, #20]
    5072:	789b      	ldrb	r3, [r3, #2]
    5074:	2b00      	cmp	r3, #0
    5076:	d001      	beq.n	507c <_tcc_build_faults+0x84>
    5078:	2380      	movs	r3, #128	; 0x80
    507a:	e000      	b.n	507e <_tcc_build_faults+0x86>
    507c:	2300      	movs	r3, #0
    507e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5080:	697b      	ldr	r3, [r7, #20]
    5082:	78db      	ldrb	r3, [r3, #3]
    5084:	2b00      	cmp	r3, #0
    5086:	d001      	beq.n	508c <_tcc_build_faults+0x94>
    5088:	2308      	movs	r3, #8
    508a:	e000      	b.n	508e <_tcc_build_faults+0x96>
    508c:	2300      	movs	r3, #0
    508e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5090:	697b      	ldr	r3, [r7, #20]
    5092:	791b      	ldrb	r3, [r3, #4]
    5094:	2b00      	cmp	r3, #0
    5096:	d001      	beq.n	509c <_tcc_build_faults+0xa4>
    5098:	2310      	movs	r3, #16
    509a:	e000      	b.n	509e <_tcc_build_faults+0xa6>
    509c:	2300      	movs	r3, #0
    509e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    50a0:	697b      	ldr	r3, [r7, #20]
    50a2:	795b      	ldrb	r3, [r3, #5]
    50a4:	0019      	movs	r1, r3
    50a6:	2303      	movs	r3, #3
    50a8:	400b      	ands	r3, r1
    50aa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    50ac:	697b      	ldr	r3, [r7, #20]
    50ae:	799b      	ldrb	r3, [r3, #6]
    50b0:	015b      	lsls	r3, r3, #5
    50b2:	0019      	movs	r1, r3
    50b4:	2360      	movs	r3, #96	; 0x60
    50b6:	400b      	ands	r3, r1
    50b8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    50ba:	697b      	ldr	r3, [r7, #20]
    50bc:	79db      	ldrb	r3, [r3, #7]
    50be:	021b      	lsls	r3, r3, #8
    50c0:	0019      	movs	r1, r3
    50c2:	23c0      	movs	r3, #192	; 0xc0
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	400b      	ands	r3, r1
    50c8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    50ca:	697b      	ldr	r3, [r7, #20]
    50cc:	7a1b      	ldrb	r3, [r3, #8]
    50ce:	031b      	lsls	r3, r3, #12
    50d0:	0019      	movs	r1, r3
    50d2:	23e0      	movs	r3, #224	; 0xe0
    50d4:	01db      	lsls	r3, r3, #7
    50d6:	400b      	ands	r3, r1
    50d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    50da:	697b      	ldr	r3, [r7, #20]
    50dc:	7a5b      	ldrb	r3, [r3, #9]
    50de:	029b      	lsls	r3, r3, #10
    50e0:	0019      	movs	r1, r3
    50e2:	23c0      	movs	r3, #192	; 0xc0
    50e4:	011b      	lsls	r3, r3, #4
    50e6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    50e8:	4313      	orrs	r3, r2
    50ea:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    50ec:	69fb      	ldr	r3, [r7, #28]
    50ee:	009b      	lsls	r3, r3, #2
    50f0:	687a      	ldr	r2, [r7, #4]
    50f2:	18d3      	adds	r3, r2, r3
    50f4:	693a      	ldr	r2, [r7, #16]
    50f6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    50f8:	69fb      	ldr	r3, [r7, #28]
    50fa:	3301      	adds	r3, #1
    50fc:	61fb      	str	r3, [r7, #28]
    50fe:	69fb      	ldr	r3, [r7, #28]
    5100:	2b01      	cmp	r3, #1
    5102:	dd8d      	ble.n	5020 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    5104:	2300      	movs	r3, #0
}
    5106:	0018      	movs	r0, r3
    5108:	46bd      	mov	sp, r7
    510a:	b008      	add	sp, #32
    510c:	bd80      	pop	{r7, pc}
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	00016f84 	.word	0x00016f84

00005114 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    5114:	b580      	push	{r7, lr}
    5116:	b088      	sub	sp, #32
    5118:	af00      	add	r7, sp, #0
    511a:	60b9      	str	r1, [r7, #8]
    511c:	607a      	str	r2, [r7, #4]
    511e:	230f      	movs	r3, #15
    5120:	18fb      	adds	r3, r7, r3
    5122:	1c02      	adds	r2, r0, #0
    5124:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5126:	230f      	movs	r3, #15
    5128:	18fb      	adds	r3, r7, r3
    512a:	781a      	ldrb	r2, [r3, #0]
    512c:	2317      	movs	r3, #23
    512e:	18fb      	adds	r3, r7, r3
    5130:	492d      	ldr	r1, [pc, #180]	; (51e8 <_tcc_build_drvctrl+0xd4>)
    5132:	5c8a      	ldrb	r2, [r1, r2]
    5134:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    5136:	2300      	movs	r3, #0
    5138:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    513a:	2300      	movs	r3, #0
    513c:	61fb      	str	r3, [r7, #28]
    513e:	e048      	b.n	51d2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    5140:	68ba      	ldr	r2, [r7, #8]
    5142:	2150      	movs	r1, #80	; 0x50
    5144:	69fb      	ldr	r3, [r7, #28]
    5146:	18d3      	adds	r3, r2, r3
    5148:	185b      	adds	r3, r3, r1
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	2b00      	cmp	r3, #0
    514e:	d010      	beq.n	5172 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    5150:	2317      	movs	r3, #23
    5152:	18fb      	adds	r3, r7, r3
    5154:	781a      	ldrb	r2, [r3, #0]
    5156:	69fb      	ldr	r3, [r7, #28]
    5158:	429a      	cmp	r2, r3
    515a:	d801      	bhi.n	5160 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    515c:	2317      	movs	r3, #23
    515e:	e03f      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5160:	2380      	movs	r3, #128	; 0x80
    5162:	025a      	lsls	r2, r3, #9
    5164:	69fb      	ldr	r3, [r7, #28]
    5166:	409a      	lsls	r2, r3
    5168:	0013      	movs	r3, r2
    516a:	001a      	movs	r2, r3
    516c:	69bb      	ldr	r3, [r7, #24]
    516e:	4313      	orrs	r3, r2
    5170:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5172:	68ba      	ldr	r2, [r7, #8]
    5174:	69fb      	ldr	r3, [r7, #28]
    5176:	331c      	adds	r3, #28
    5178:	005b      	lsls	r3, r3, #1
    517a:	18d3      	adds	r3, r2, r3
    517c:	3309      	adds	r3, #9
    517e:	781b      	ldrb	r3, [r3, #0]
    5180:	2b00      	cmp	r3, #0
    5182:	d023      	beq.n	51cc <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    5184:	2317      	movs	r3, #23
    5186:	18fb      	adds	r3, r7, r3
    5188:	781a      	ldrb	r2, [r3, #0]
    518a:	69fb      	ldr	r3, [r7, #28]
    518c:	429a      	cmp	r2, r3
    518e:	d801      	bhi.n	5194 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    5190:	2317      	movs	r3, #23
    5192:	e025      	b.n	51e0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5194:	68ba      	ldr	r2, [r7, #8]
    5196:	69fb      	ldr	r3, [r7, #28]
    5198:	331c      	adds	r3, #28
    519a:	005b      	lsls	r3, r3, #1
    519c:	18d3      	adds	r3, r2, r3
    519e:	3309      	adds	r3, #9
    51a0:	781b      	ldrb	r3, [r3, #0]
    51a2:	2b02      	cmp	r3, #2
    51a4:	d10a      	bne.n	51bc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    51a6:	2302      	movs	r3, #2
    51a8:	33ff      	adds	r3, #255	; 0xff
    51aa:	001a      	movs	r2, r3
    51ac:	69fb      	ldr	r3, [r7, #28]
    51ae:	409a      	lsls	r2, r3
    51b0:	0013      	movs	r3, r2
    51b2:	001a      	movs	r2, r3
    51b4:	69bb      	ldr	r3, [r7, #24]
    51b6:	4313      	orrs	r3, r2
    51b8:	61bb      	str	r3, [r7, #24]
    51ba:	e007      	b.n	51cc <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    51bc:	2201      	movs	r2, #1
    51be:	69fb      	ldr	r3, [r7, #28]
    51c0:	409a      	lsls	r2, r3
    51c2:	0013      	movs	r3, r2
    51c4:	001a      	movs	r2, r3
    51c6:	69bb      	ldr	r3, [r7, #24]
    51c8:	4313      	orrs	r3, r2
    51ca:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    51cc:	69fb      	ldr	r3, [r7, #28]
    51ce:	3301      	adds	r3, #1
    51d0:	61fb      	str	r3, [r7, #28]
    51d2:	69fb      	ldr	r3, [r7, #28]
    51d4:	2b07      	cmp	r3, #7
    51d6:	d9b3      	bls.n	5140 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	69ba      	ldr	r2, [r7, #24]
    51dc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    51de:	2300      	movs	r3, #0
}
    51e0:	0018      	movs	r0, r3
    51e2:	46bd      	mov	sp, r7
    51e4:	b008      	add	sp, #32
    51e6:	bd80      	pop	{r7, pc}
    51e8:	00016f88 	.word	0x00016f88

000051ec <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    51ec:	b580      	push	{r7, lr}
    51ee:	b088      	sub	sp, #32
    51f0:	af00      	add	r7, sp, #0
    51f2:	60b9      	str	r1, [r7, #8]
    51f4:	607a      	str	r2, [r7, #4]
    51f6:	230f      	movs	r3, #15
    51f8:	18fb      	adds	r3, r7, r3
    51fa:	1c02      	adds	r2, r0, #0
    51fc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    51fe:	230f      	movs	r3, #15
    5200:	18fb      	adds	r3, r7, r3
    5202:	781a      	ldrb	r2, [r3, #0]
    5204:	2317      	movs	r3, #23
    5206:	18fb      	adds	r3, r7, r3
    5208:	491d      	ldr	r1, [pc, #116]	; (5280 <_tcc_build_waves+0x94>)
    520a:	5c8a      	ldrb	r2, [r1, r2]
    520c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    520e:	68bb      	ldr	r3, [r7, #8]
    5210:	3310      	adds	r3, #16
    5212:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5214:	693b      	ldr	r3, [r7, #16]
    5216:	7a5b      	ldrb	r3, [r3, #9]
    5218:	011b      	lsls	r3, r3, #4
    521a:	001a      	movs	r2, r3
    521c:	2330      	movs	r3, #48	; 0x30
    521e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5220:	693b      	ldr	r3, [r7, #16]
    5222:	7a1b      	ldrb	r3, [r3, #8]
    5224:	0019      	movs	r1, r3
    5226:	2307      	movs	r3, #7
    5228:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    522a:	4313      	orrs	r3, r2
    522c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    522e:	2300      	movs	r3, #0
    5230:	61fb      	str	r3, [r7, #28]
    5232:	e01a      	b.n	526a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    5234:	693a      	ldr	r2, [r7, #16]
    5236:	69fb      	ldr	r3, [r7, #28]
    5238:	18d3      	adds	r3, r2, r3
    523a:	3304      	adds	r3, #4
    523c:	781b      	ldrb	r3, [r3, #0]
    523e:	2b00      	cmp	r3, #0
    5240:	d010      	beq.n	5264 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    5242:	2317      	movs	r3, #23
    5244:	18fb      	adds	r3, r7, r3
    5246:	781a      	ldrb	r2, [r3, #0]
    5248:	69fb      	ldr	r3, [r7, #28]
    524a:	429a      	cmp	r2, r3
    524c:	dc01      	bgt.n	5252 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    524e:	2317      	movs	r3, #23
    5250:	e012      	b.n	5278 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    5252:	2380      	movs	r3, #128	; 0x80
    5254:	025a      	lsls	r2, r3, #9
    5256:	69fb      	ldr	r3, [r7, #28]
    5258:	409a      	lsls	r2, r3
    525a:	0013      	movs	r3, r2
    525c:	001a      	movs	r2, r3
    525e:	69bb      	ldr	r3, [r7, #24]
    5260:	4313      	orrs	r3, r2
    5262:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5264:	69fb      	ldr	r3, [r7, #28]
    5266:	3301      	adds	r3, #1
    5268:	61fb      	str	r3, [r7, #28]
    526a:	69fb      	ldr	r3, [r7, #28]
    526c:	2b03      	cmp	r3, #3
    526e:	dde1      	ble.n	5234 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	69ba      	ldr	r2, [r7, #24]
    5274:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    5276:	2300      	movs	r3, #0
}
    5278:	0018      	movs	r0, r3
    527a:	46bd      	mov	sp, r7
    527c:	b008      	add	sp, #32
    527e:	bd80      	pop	{r7, pc}
    5280:	00016f84 	.word	0x00016f84

00005284 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5284:	b590      	push	{r4, r7, lr}
    5286:	b091      	sub	sp, #68	; 0x44
    5288:	af00      	add	r7, sp, #0
    528a:	60f8      	str	r0, [r7, #12]
    528c:	60b9      	str	r1, [r7, #8]
    528e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5290:	233b      	movs	r3, #59	; 0x3b
    5292:	18fc      	adds	r4, r7, r3
    5294:	68bb      	ldr	r3, [r7, #8]
    5296:	0018      	movs	r0, r3
    5298:	4bc4      	ldr	r3, [pc, #784]	; (55ac <tcc_init+0x328>)
    529a:	4798      	blx	r3
    529c:	0003      	movs	r3, r0
    529e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    52a0:	233b      	movs	r3, #59	; 0x3b
    52a2:	18fb      	adds	r3, r7, r3
    52a4:	781a      	ldrb	r2, [r3, #0]
    52a6:	4bc2      	ldr	r3, [pc, #776]	; (55b0 <tcc_init+0x32c>)
    52a8:	0092      	lsls	r2, r2, #2
    52aa:	58d3      	ldr	r3, [r2, r3]
    52ac:	0019      	movs	r1, r3
    52ae:	2002      	movs	r0, #2
    52b0:	4bc0      	ldr	r3, [pc, #768]	; (55b4 <tcc_init+0x330>)
    52b2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    52b4:	68bb      	ldr	r3, [r7, #8]
    52b6:	681b      	ldr	r3, [r3, #0]
    52b8:	2202      	movs	r2, #2
    52ba:	4013      	ands	r3, r2
    52bc:	d001      	beq.n	52c2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    52be:	231c      	movs	r3, #28
    52c0:	e1be      	b.n	5640 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    52c2:	68bb      	ldr	r3, [r7, #8]
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	2201      	movs	r2, #1
    52c8:	4013      	ands	r3, r2
    52ca:	d001      	beq.n	52d0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    52cc:	231c      	movs	r3, #28
    52ce:	e1b7      	b.n	5640 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    52d0:	233b      	movs	r3, #59	; 0x3b
    52d2:	18fb      	adds	r3, r7, r3
    52d4:	781a      	ldrb	r2, [r3, #0]
    52d6:	4bb8      	ldr	r3, [pc, #736]	; (55b8 <tcc_init+0x334>)
    52d8:	0092      	lsls	r2, r2, #2
    52da:	58d3      	ldr	r3, [r2, r3]
    52dc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	681a      	ldr	r2, [r3, #0]
    52e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52e4:	429a      	cmp	r2, r3
    52e6:	d804      	bhi.n	52f2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    52e8:	687b      	ldr	r3, [r7, #4]
    52ea:	685a      	ldr	r2, [r3, #4]
    52ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ee:	429a      	cmp	r2, r3
    52f0:	d901      	bls.n	52f6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    52f2:	2317      	movs	r3, #23
    52f4:	e1a4      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    52f6:	2300      	movs	r3, #0
    52f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    52fa:	e00e      	b.n	531a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    52fc:	687a      	ldr	r2, [r7, #4]
    52fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5300:	3306      	adds	r3, #6
    5302:	009b      	lsls	r3, r3, #2
    5304:	18d3      	adds	r3, r2, r3
    5306:	3304      	adds	r3, #4
    5308:	681a      	ldr	r2, [r3, #0]
    530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    530c:	429a      	cmp	r2, r3
    530e:	d901      	bls.n	5314 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    5310:	2317      	movs	r3, #23
    5312:	e195      	b.n	5640 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5316:	3301      	adds	r3, #1
    5318:	63fb      	str	r3, [r7, #60]	; 0x3c
    531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    531c:	2b03      	cmp	r3, #3
    531e:	dded      	ble.n	52fc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5320:	2300      	movs	r3, #0
    5322:	63fb      	str	r3, [r7, #60]	; 0x3c
    5324:	e019      	b.n	535a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    5326:	687a      	ldr	r2, [r7, #4]
    5328:	2198      	movs	r1, #152	; 0x98
    532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    532c:	18d3      	adds	r3, r2, r3
    532e:	185b      	adds	r3, r3, r1
    5330:	781b      	ldrb	r3, [r3, #0]
    5332:	2201      	movs	r2, #1
    5334:	4053      	eors	r3, r2
    5336:	b2db      	uxtb	r3, r3
    5338:	2b00      	cmp	r3, #0
    533a:	d10a      	bne.n	5352 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    533c:	233b      	movs	r3, #59	; 0x3b
    533e:	18fb      	adds	r3, r7, r3
    5340:	781b      	ldrb	r3, [r3, #0]
    5342:	4a9e      	ldr	r2, [pc, #632]	; (55bc <tcc_init+0x338>)
    5344:	5cd3      	ldrb	r3, [r2, r3]
    5346:	001a      	movs	r2, r3
    5348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    534a:	429a      	cmp	r2, r3
    534c:	dc02      	bgt.n	5354 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    534e:	2317      	movs	r3, #23
    5350:	e176      	b.n	5640 <tcc_init+0x3bc>
			continue;
    5352:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5356:	3301      	adds	r3, #1
    5358:	63fb      	str	r3, [r7, #60]	; 0x3c
    535a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    535c:	2b07      	cmp	r3, #7
    535e:	dde2      	ble.n	5326 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    5360:	2300      	movs	r3, #0
    5362:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    5364:	2333      	movs	r3, #51	; 0x33
    5366:	18fc      	adds	r4, r7, r3
    5368:	232c      	movs	r3, #44	; 0x2c
    536a:	18fa      	adds	r2, r7, r3
    536c:	6879      	ldr	r1, [r7, #4]
    536e:	233b      	movs	r3, #59	; 0x3b
    5370:	18fb      	adds	r3, r7, r3
    5372:	781b      	ldrb	r3, [r3, #0]
    5374:	0018      	movs	r0, r3
    5376:	4b92      	ldr	r3, [pc, #584]	; (55c0 <tcc_init+0x33c>)
    5378:	4798      	blx	r3
    537a:	0003      	movs	r3, r0
    537c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    537e:	2333      	movs	r3, #51	; 0x33
    5380:	18fb      	adds	r3, r7, r3
    5382:	781b      	ldrb	r3, [r3, #0]
    5384:	2b00      	cmp	r3, #0
    5386:	d003      	beq.n	5390 <tcc_init+0x10c>
		return status;
    5388:	2333      	movs	r3, #51	; 0x33
    538a:	18fb      	adds	r3, r7, r3
    538c:	781b      	ldrb	r3, [r3, #0]
    538e:	e157      	b.n	5640 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    5390:	232b      	movs	r3, #43	; 0x2b
    5392:	18fa      	adds	r2, r7, r3
    5394:	6879      	ldr	r1, [r7, #4]
    5396:	233b      	movs	r3, #59	; 0x3b
    5398:	18fb      	adds	r3, r7, r3
    539a:	781b      	ldrb	r3, [r3, #0]
    539c:	0018      	movs	r0, r3
    539e:	4b89      	ldr	r3, [pc, #548]	; (55c4 <tcc_init+0x340>)
    53a0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    53a2:	2333      	movs	r3, #51	; 0x33
    53a4:	18fc      	adds	r4, r7, r3
    53a6:	2320      	movs	r3, #32
    53a8:	18fa      	adds	r2, r7, r3
    53aa:	6879      	ldr	r1, [r7, #4]
    53ac:	233b      	movs	r3, #59	; 0x3b
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	0018      	movs	r0, r3
    53b4:	4b84      	ldr	r3, [pc, #528]	; (55c8 <tcc_init+0x344>)
    53b6:	4798      	blx	r3
    53b8:	0003      	movs	r3, r0
    53ba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53bc:	2333      	movs	r3, #51	; 0x33
    53be:	18fb      	adds	r3, r7, r3
    53c0:	781b      	ldrb	r3, [r3, #0]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d003      	beq.n	53ce <tcc_init+0x14a>
		return status;
    53c6:	2333      	movs	r3, #51	; 0x33
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	781b      	ldrb	r3, [r3, #0]
    53cc:	e138      	b.n	5640 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    53ce:	2300      	movs	r3, #0
    53d0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    53d2:	2333      	movs	r3, #51	; 0x33
    53d4:	18fc      	adds	r4, r7, r3
    53d6:	231c      	movs	r3, #28
    53d8:	18fa      	adds	r2, r7, r3
    53da:	6879      	ldr	r1, [r7, #4]
    53dc:	233b      	movs	r3, #59	; 0x3b
    53de:	18fb      	adds	r3, r7, r3
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	0018      	movs	r0, r3
    53e4:	4b79      	ldr	r3, [pc, #484]	; (55cc <tcc_init+0x348>)
    53e6:	4798      	blx	r3
    53e8:	0003      	movs	r3, r0
    53ea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    53ec:	2333      	movs	r3, #51	; 0x33
    53ee:	18fb      	adds	r3, r7, r3
    53f0:	781b      	ldrb	r3, [r3, #0]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d003      	beq.n	53fe <tcc_init+0x17a>
		return status;
    53f6:	2333      	movs	r3, #51	; 0x33
    53f8:	18fb      	adds	r3, r7, r3
    53fa:	781b      	ldrb	r3, [r3, #0]
    53fc:	e120      	b.n	5640 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    53fe:	2333      	movs	r3, #51	; 0x33
    5400:	18fc      	adds	r4, r7, r3
    5402:	2318      	movs	r3, #24
    5404:	18fa      	adds	r2, r7, r3
    5406:	6879      	ldr	r1, [r7, #4]
    5408:	233b      	movs	r3, #59	; 0x3b
    540a:	18fb      	adds	r3, r7, r3
    540c:	781b      	ldrb	r3, [r3, #0]
    540e:	0018      	movs	r0, r3
    5410:	4b6f      	ldr	r3, [pc, #444]	; (55d0 <tcc_init+0x34c>)
    5412:	4798      	blx	r3
    5414:	0003      	movs	r3, r0
    5416:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    5418:	2333      	movs	r3, #51	; 0x33
    541a:	18fb      	adds	r3, r7, r3
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	2b00      	cmp	r3, #0
    5420:	d003      	beq.n	542a <tcc_init+0x1a6>
		return status;
    5422:	2333      	movs	r3, #51	; 0x33
    5424:	18fb      	adds	r3, r7, r3
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	e10a      	b.n	5640 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    542a:	2300      	movs	r3, #0
    542c:	63fb      	str	r3, [r7, #60]	; 0x3c
    542e:	e009      	b.n	5444 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    5430:	68fa      	ldr	r2, [r7, #12]
    5432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5434:	009b      	lsls	r3, r3, #2
    5436:	18d3      	adds	r3, r2, r3
    5438:	3304      	adds	r3, #4
    543a:	2200      	movs	r2, #0
    543c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5440:	3301      	adds	r3, #1
    5442:	63fb      	str	r3, [r7, #60]	; 0x3c
    5444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5446:	2b0b      	cmp	r3, #11
    5448:	ddf2      	ble.n	5430 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    544a:	68fb      	ldr	r3, [r7, #12]
    544c:	2200      	movs	r2, #0
    544e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5450:	68fb      	ldr	r3, [r7, #12]
    5452:	2200      	movs	r2, #0
    5454:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5456:	233b      	movs	r3, #59	; 0x3b
    5458:	18fb      	adds	r3, r7, r3
    545a:	781a      	ldrb	r2, [r3, #0]
    545c:	4b5d      	ldr	r3, [pc, #372]	; (55d4 <tcc_init+0x350>)
    545e:	0092      	lsls	r2, r2, #2
    5460:	68f9      	ldr	r1, [r7, #12]
    5462:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    5464:	68fb      	ldr	r3, [r7, #12]
    5466:	68ba      	ldr	r2, [r7, #8]
    5468:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	22a0      	movs	r2, #160	; 0xa0
    546e:	5c99      	ldrb	r1, [r3, r2]
    5470:	68fb      	ldr	r3, [r7, #12]
    5472:	223c      	movs	r2, #60	; 0x3c
    5474:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5476:	2314      	movs	r3, #20
    5478:	18fb      	adds	r3, r7, r3
    547a:	0018      	movs	r0, r3
    547c:	4b56      	ldr	r3, [pc, #344]	; (55d8 <tcc_init+0x354>)
    547e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	7a9a      	ldrb	r2, [r3, #10]
    5484:	2314      	movs	r3, #20
    5486:	18fb      	adds	r3, r7, r3
    5488:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    548a:	233b      	movs	r3, #59	; 0x3b
    548c:	18fb      	adds	r3, r7, r3
    548e:	781b      	ldrb	r3, [r3, #0]
    5490:	4a52      	ldr	r2, [pc, #328]	; (55dc <tcc_init+0x358>)
    5492:	5cd3      	ldrb	r3, [r2, r3]
    5494:	2214      	movs	r2, #20
    5496:	18ba      	adds	r2, r7, r2
    5498:	0011      	movs	r1, r2
    549a:	0018      	movs	r0, r3
    549c:	4b50      	ldr	r3, [pc, #320]	; (55e0 <tcc_init+0x35c>)
    549e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    54a0:	233b      	movs	r3, #59	; 0x3b
    54a2:	18fb      	adds	r3, r7, r3
    54a4:	781b      	ldrb	r3, [r3, #0]
    54a6:	4a4d      	ldr	r2, [pc, #308]	; (55dc <tcc_init+0x358>)
    54a8:	5cd3      	ldrb	r3, [r2, r3]
    54aa:	0018      	movs	r0, r3
    54ac:	4b4d      	ldr	r3, [pc, #308]	; (55e4 <tcc_init+0x360>)
    54ae:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    54b0:	2300      	movs	r3, #0
    54b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    54b4:	e02d      	b.n	5512 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    54b6:	687a      	ldr	r2, [r7, #4]
    54b8:	2198      	movs	r1, #152	; 0x98
    54ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    54bc:	18d3      	adds	r3, r2, r3
    54be:	185b      	adds	r3, r3, r1
    54c0:	781b      	ldrb	r3, [r3, #0]
    54c2:	2201      	movs	r2, #1
    54c4:	4053      	eors	r3, r2
    54c6:	b2db      	uxtb	r3, r3
    54c8:	2b00      	cmp	r3, #0
    54ca:	d11e      	bne.n	550a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    54cc:	2310      	movs	r3, #16
    54ce:	18fb      	adds	r3, r7, r3
    54d0:	0018      	movs	r0, r3
    54d2:	4b45      	ldr	r3, [pc, #276]	; (55e8 <tcc_init+0x364>)
    54d4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54da:	321e      	adds	r2, #30
    54dc:	0092      	lsls	r2, r2, #2
    54de:	58d3      	ldr	r3, [r2, r3]
    54e0:	b2da      	uxtb	r2, r3
    54e2:	2310      	movs	r3, #16
    54e4:	18fb      	adds	r3, r7, r3
    54e6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    54e8:	2310      	movs	r3, #16
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	2201      	movs	r2, #1
    54ee:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54f4:	3216      	adds	r2, #22
    54f6:	0092      	lsls	r2, r2, #2
    54f8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    54fa:	b2db      	uxtb	r3, r3
    54fc:	2210      	movs	r2, #16
    54fe:	18ba      	adds	r2, r7, r2
    5500:	0011      	movs	r1, r2
    5502:	0018      	movs	r0, r3
    5504:	4b39      	ldr	r3, [pc, #228]	; (55ec <tcc_init+0x368>)
    5506:	4798      	blx	r3
    5508:	e000      	b.n	550c <tcc_init+0x288>
			continue;
    550a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    550e:	3301      	adds	r3, #1
    5510:	63fb      	str	r3, [r7, #60]	; 0x3c
    5512:	233b      	movs	r3, #59	; 0x3b
    5514:	18fb      	adds	r3, r7, r3
    5516:	781b      	ldrb	r3, [r3, #0]
    5518:	4a28      	ldr	r2, [pc, #160]	; (55bc <tcc_init+0x338>)
    551a:	5cd3      	ldrb	r3, [r2, r3]
    551c:	001a      	movs	r2, r3
    551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5520:	429a      	cmp	r2, r3
    5522:	dcc8      	bgt.n	54b6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    5524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5526:	68bb      	ldr	r3, [r7, #8]
    5528:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	68bb      	ldr	r3, [r7, #8]
    552e:	689b      	ldr	r3, [r3, #8]
    5530:	2204      	movs	r2, #4
    5532:	4013      	ands	r3, r2
    5534:	d1fa      	bne.n	552c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    5536:	68bb      	ldr	r3, [r7, #8]
    5538:	22ff      	movs	r2, #255	; 0xff
    553a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    553c:	46c0      	nop			; (mov r8, r8)
    553e:	68bb      	ldr	r3, [r7, #8]
    5540:	689b      	ldr	r3, [r3, #8]
    5542:	2204      	movs	r2, #4
    5544:	4013      	ands	r3, r2
    5546:	d1fa      	bne.n	553e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    5548:	232b      	movs	r3, #43	; 0x2b
    554a:	18fb      	adds	r3, r7, r3
    554c:	781a      	ldrb	r2, [r3, #0]
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    5552:	2320      	movs	r3, #32
    5554:	18fb      	adds	r3, r7, r3
    5556:	681a      	ldr	r2, [r3, #0]
    5558:	68bb      	ldr	r3, [r7, #8]
    555a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    555c:	2320      	movs	r3, #32
    555e:	18fb      	adds	r3, r7, r3
    5560:	685a      	ldr	r2, [r3, #4]
    5562:	68bb      	ldr	r3, [r7, #8]
    5564:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    5566:	69fa      	ldr	r2, [r7, #28]
    5568:	68bb      	ldr	r3, [r7, #8]
    556a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    556c:	46c0      	nop			; (mov r8, r8)
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	689b      	ldr	r3, [r3, #8]
    5572:	4a1f      	ldr	r2, [pc, #124]	; (55f0 <tcc_init+0x36c>)
    5574:	4013      	ands	r3, r2
    5576:	d1fa      	bne.n	556e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    5578:	69ba      	ldr	r2, [r7, #24]
    557a:	68bb      	ldr	r3, [r7, #8]
    557c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    557e:	46c0      	nop			; (mov r8, r8)
    5580:	68bb      	ldr	r3, [r7, #8]
    5582:	689b      	ldr	r3, [r3, #8]
    5584:	2210      	movs	r2, #16
    5586:	4013      	ands	r3, r2
    5588:	d1fa      	bne.n	5580 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    558a:	687b      	ldr	r3, [r7, #4]
    558c:	681a      	ldr	r2, [r3, #0]
    558e:	68bb      	ldr	r3, [r7, #8]
    5590:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	68bb      	ldr	r3, [r7, #8]
    5596:	689b      	ldr	r3, [r3, #8]
    5598:	4a16      	ldr	r2, [pc, #88]	; (55f4 <tcc_init+0x370>)
    559a:	4013      	ands	r3, r2
    559c:	d1fa      	bne.n	5594 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	685a      	ldr	r2, [r3, #4]
    55a2:	68bb      	ldr	r3, [r7, #8]
    55a4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    55a6:	2300      	movs	r3, #0
    55a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    55aa:	e03f      	b.n	562c <tcc_init+0x3a8>
    55ac:	00004bed 	.word	0x00004bed
    55b0:	00016f6c 	.word	0x00016f6c
    55b4:	00004b69 	.word	0x00004b69
    55b8:	00016f78 	.word	0x00016f78
    55bc:	00016f88 	.word	0x00016f88
    55c0:	00004ef9 	.word	0x00004ef9
    55c4:	00004f9d 	.word	0x00004f9d
    55c8:	00004ff9 	.word	0x00004ff9
    55cc:	00005115 	.word	0x00005115
    55d0:	000051ed 	.word	0x000051ed
    55d4:	20000450 	.word	0x20000450
    55d8:	00004b51 	.word	0x00004b51
    55dc:	00016f68 	.word	0x00016f68
    55e0:	00007b31 	.word	0x00007b31
    55e4:	00007b75 	.word	0x00007b75
    55e8:	00004bc5 	.word	0x00004bc5
    55ec:	00007e1d 	.word	0x00007e1d
    55f0:	00020040 	.word	0x00020040
    55f4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    55f8:	46c0      	nop			; (mov r8, r8)
    55fa:	68bb      	ldr	r3, [r7, #8]
    55fc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    55fe:	4912      	ldr	r1, [pc, #72]	; (5648 <tcc_init+0x3c4>)
    5600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5602:	4091      	lsls	r1, r2
    5604:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    5606:	4013      	ands	r3, r2
    5608:	d1f7      	bne.n	55fa <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    560a:	687a      	ldr	r2, [r7, #4]
    560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    560e:	3306      	adds	r3, #6
    5610:	009b      	lsls	r3, r3, #2
    5612:	18d3      	adds	r3, r2, r3
    5614:	3304      	adds	r3, #4
    5616:	681a      	ldr	r2, [r3, #0]
    5618:	68b9      	ldr	r1, [r7, #8]
    561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    561c:	3310      	adds	r3, #16
    561e:	009b      	lsls	r3, r3, #2
    5620:	18cb      	adds	r3, r1, r3
    5622:	3304      	adds	r3, #4
    5624:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5628:	3301      	adds	r3, #1
    562a:	63fb      	str	r3, [r7, #60]	; 0x3c
    562c:	233b      	movs	r3, #59	; 0x3b
    562e:	18fb      	adds	r3, r7, r3
    5630:	781b      	ldrb	r3, [r3, #0]
    5632:	4a06      	ldr	r2, [pc, #24]	; (564c <tcc_init+0x3c8>)
    5634:	5cd3      	ldrb	r3, [r2, r3]
    5636:	001a      	movs	r2, r3
    5638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    563a:	429a      	cmp	r2, r3
    563c:	dcdc      	bgt.n	55f8 <tcc_init+0x374>
	}

	return STATUS_OK;
    563e:	2300      	movs	r3, #0
}
    5640:	0018      	movs	r0, r3
    5642:	46bd      	mov	sp, r7
    5644:	b011      	add	sp, #68	; 0x44
    5646:	bd90      	pop	{r4, r7, pc}
    5648:	00080100 	.word	0x00080100
    564c:	00016f84 	.word	0x00016f84

00005650 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    5650:	b590      	push	{r4, r7, lr}
    5652:	b089      	sub	sp, #36	; 0x24
    5654:	af00      	add	r7, sp, #0
    5656:	60f8      	str	r0, [r7, #12]
    5658:	0008      	movs	r0, r1
    565a:	607a      	str	r2, [r7, #4]
    565c:	0019      	movs	r1, r3
    565e:	230b      	movs	r3, #11
    5660:	18fb      	adds	r3, r7, r3
    5662:	1c02      	adds	r2, r0, #0
    5664:	701a      	strb	r2, [r3, #0]
    5666:	230a      	movs	r3, #10
    5668:	18fb      	adds	r3, r7, r3
    566a:	1c0a      	adds	r2, r1, #0
    566c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    566e:	68fb      	ldr	r3, [r7, #12]
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    5674:	231b      	movs	r3, #27
    5676:	18fc      	adds	r4, r7, r3
    5678:	69fb      	ldr	r3, [r7, #28]
    567a:	0018      	movs	r0, r3
    567c:	4b28      	ldr	r3, [pc, #160]	; (5720 <_tcc_set_compare_value+0xd0>)
    567e:	4798      	blx	r3
    5680:	0003      	movs	r3, r0
    5682:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    5684:	231b      	movs	r3, #27
    5686:	18fb      	adds	r3, r7, r3
    5688:	781b      	ldrb	r3, [r3, #0]
    568a:	4a26      	ldr	r2, [pc, #152]	; (5724 <_tcc_set_compare_value+0xd4>)
    568c:	5cd3      	ldrb	r3, [r2, r3]
    568e:	220b      	movs	r2, #11
    5690:	18ba      	adds	r2, r7, r2
    5692:	7812      	ldrb	r2, [r2, #0]
    5694:	429a      	cmp	r2, r3
    5696:	d301      	bcc.n	569c <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
    5698:	2317      	movs	r3, #23
    569a:	e03d      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	uint32_t max_count = _tcc_maxs[module_index];
    569c:	231b      	movs	r3, #27
    569e:	18fb      	adds	r3, r7, r3
    56a0:	781a      	ldrb	r2, [r3, #0]
    56a2:	4b21      	ldr	r3, [pc, #132]	; (5728 <_tcc_set_compare_value+0xd8>)
    56a4:	0092      	lsls	r2, r2, #2
    56a6:	58d3      	ldr	r3, [r2, r3]
    56a8:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
    56aa:	687a      	ldr	r2, [r7, #4]
    56ac:	697b      	ldr	r3, [r7, #20]
    56ae:	429a      	cmp	r2, r3
    56b0:	d901      	bls.n	56b6 <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
    56b2:	2317      	movs	r3, #23
    56b4:	e030      	b.n	5718 <_tcc_set_compare_value+0xc8>
	}

	if (double_buffering_enabled) {
    56b6:	230a      	movs	r3, #10
    56b8:	18fb      	adds	r3, r7, r3
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	2b00      	cmp	r3, #0
    56be:	d014      	beq.n	56ea <_tcc_set_compare_value+0x9a>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    56c0:	46c0      	nop			; (mov r8, r8)
    56c2:	69fb      	ldr	r3, [r7, #28]
    56c4:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    56c6:	220b      	movs	r2, #11
    56c8:	18ba      	adds	r2, r7, r2
    56ca:	7812      	ldrb	r2, [r2, #0]
    56cc:	2180      	movs	r1, #128	; 0x80
    56ce:	0309      	lsls	r1, r1, #12
    56d0:	4091      	lsls	r1, r2
    56d2:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
    56d4:	4013      	ands	r3, r2
    56d6:	d1f4      	bne.n	56c2 <_tcc_set_compare_value+0x72>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    56d8:	230b      	movs	r3, #11
    56da:	18fb      	adds	r3, r7, r3
    56dc:	781a      	ldrb	r2, [r3, #0]
    56de:	69fb      	ldr	r3, [r7, #28]
    56e0:	321c      	adds	r2, #28
    56e2:	0092      	lsls	r2, r2, #2
    56e4:	6879      	ldr	r1, [r7, #4]
    56e6:	50d1      	str	r1, [r2, r3]
    56e8:	e015      	b.n	5716 <_tcc_set_compare_value+0xc6>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    56ea:	46c0      	nop			; (mov r8, r8)
    56ec:	69fb      	ldr	r3, [r7, #28]
    56ee:	689b      	ldr	r3, [r3, #8]
    56f0:	220b      	movs	r2, #11
    56f2:	18ba      	adds	r2, r7, r2
    56f4:	7812      	ldrb	r2, [r2, #0]
    56f6:	2180      	movs	r1, #128	; 0x80
    56f8:	0049      	lsls	r1, r1, #1
    56fa:	4091      	lsls	r1, r2
    56fc:	000a      	movs	r2, r1
    56fe:	4013      	ands	r3, r2
    5700:	d1f4      	bne.n	56ec <_tcc_set_compare_value+0x9c>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    5702:	230b      	movs	r3, #11
    5704:	18fb      	adds	r3, r7, r3
    5706:	781b      	ldrb	r3, [r3, #0]
    5708:	69fa      	ldr	r2, [r7, #28]
    570a:	3310      	adds	r3, #16
    570c:	009b      	lsls	r3, r3, #2
    570e:	18d3      	adds	r3, r2, r3
    5710:	3304      	adds	r3, #4
    5712:	687a      	ldr	r2, [r7, #4]
    5714:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
    5716:	2300      	movs	r3, #0
}
    5718:	0018      	movs	r0, r3
    571a:	46bd      	mov	sp, r7
    571c:	b009      	add	sp, #36	; 0x24
    571e:	bd90      	pop	{r4, r7, pc}
    5720:	00004bed 	.word	0x00004bed
    5724:	00016f84 	.word	0x00016f84
    5728:	00016f78 	.word	0x00016f78

0000572c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    572c:	b590      	push	{r4, r7, lr}
    572e:	b085      	sub	sp, #20
    5730:	af00      	add	r7, sp, #0
    5732:	60f8      	str	r0, [r7, #12]
    5734:	607a      	str	r2, [r7, #4]
    5736:	230b      	movs	r3, #11
    5738:	18fb      	adds	r3, r7, r3
    573a:	1c0a      	adds	r2, r1, #0
    573c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    573e:	68fb      	ldr	r3, [r7, #12]
    5740:	223c      	movs	r2, #60	; 0x3c
    5742:	5c9c      	ldrb	r4, [r3, r2]
    5744:	687a      	ldr	r2, [r7, #4]
    5746:	230b      	movs	r3, #11
    5748:	18fb      	adds	r3, r7, r3
    574a:	7819      	ldrb	r1, [r3, #0]
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	0023      	movs	r3, r4
    5750:	4c03      	ldr	r4, [pc, #12]	; (5760 <tcc_set_compare_value+0x34>)
    5752:	47a0      	blx	r4
    5754:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
    5756:	0018      	movs	r0, r3
    5758:	46bd      	mov	sp, r7
    575a:	b005      	add	sp, #20
    575c:	bd90      	pop	{r4, r7, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	00005651 	.word	0x00005651

00005764 <system_gclk_chan_get_config_defaults>:
{
    5764:	b580      	push	{r7, lr}
    5766:	b082      	sub	sp, #8
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	2200      	movs	r2, #0
    5770:	701a      	strb	r2, [r3, #0]
}
    5772:	46c0      	nop			; (mov r8, r8)
    5774:	46bd      	mov	sp, r7
    5776:	b002      	add	sp, #8
    5778:	bd80      	pop	{r7, pc}
	...

0000577c <system_apb_clock_set_mask>:
{
    577c:	b580      	push	{r7, lr}
    577e:	b082      	sub	sp, #8
    5780:	af00      	add	r7, sp, #0
    5782:	0002      	movs	r2, r0
    5784:	6039      	str	r1, [r7, #0]
    5786:	1dfb      	adds	r3, r7, #7
    5788:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    578a:	1dfb      	adds	r3, r7, #7
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	2b01      	cmp	r3, #1
    5790:	d00a      	beq.n	57a8 <system_apb_clock_set_mask+0x2c>
    5792:	2b02      	cmp	r3, #2
    5794:	d00f      	beq.n	57b6 <system_apb_clock_set_mask+0x3a>
    5796:	2b00      	cmp	r3, #0
    5798:	d114      	bne.n	57c4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    579a:	4b0e      	ldr	r3, [pc, #56]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579c:	4a0d      	ldr	r2, [pc, #52]	; (57d4 <system_apb_clock_set_mask+0x58>)
    579e:	6991      	ldr	r1, [r2, #24]
    57a0:	683a      	ldr	r2, [r7, #0]
    57a2:	430a      	orrs	r2, r1
    57a4:	619a      	str	r2, [r3, #24]
			break;
    57a6:	e00f      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    57a8:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57aa:	4a0a      	ldr	r2, [pc, #40]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ac:	69d1      	ldr	r1, [r2, #28]
    57ae:	683a      	ldr	r2, [r7, #0]
    57b0:	430a      	orrs	r2, r1
    57b2:	61da      	str	r2, [r3, #28]
			break;
    57b4:	e008      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    57b6:	4b07      	ldr	r3, [pc, #28]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57b8:	4a06      	ldr	r2, [pc, #24]	; (57d4 <system_apb_clock_set_mask+0x58>)
    57ba:	6a11      	ldr	r1, [r2, #32]
    57bc:	683a      	ldr	r2, [r7, #0]
    57be:	430a      	orrs	r2, r1
    57c0:	621a      	str	r2, [r3, #32]
			break;
    57c2:	e001      	b.n	57c8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    57c4:	2317      	movs	r3, #23
    57c6:	e000      	b.n	57ca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    57c8:	2300      	movs	r3, #0
}
    57ca:	0018      	movs	r0, r3
    57cc:	46bd      	mov	sp, r7
    57ce:	b002      	add	sp, #8
    57d0:	bd80      	pop	{r7, pc}
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	40000400 	.word	0x40000400

000057d8 <system_pinmux_get_config_defaults>:
{
    57d8:	b580      	push	{r7, lr}
    57da:	b082      	sub	sp, #8
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	2280      	movs	r2, #128	; 0x80
    57e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	2200      	movs	r2, #0
    57ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    57ec:	687b      	ldr	r3, [r7, #4]
    57ee:	2201      	movs	r2, #1
    57f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	2200      	movs	r2, #0
    57f6:	70da      	strb	r2, [r3, #3]
}
    57f8:	46c0      	nop			; (mov r8, r8)
    57fa:	46bd      	mov	sp, r7
    57fc:	b002      	add	sp, #8
    57fe:	bd80      	pop	{r7, pc}

00005800 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5800:	b580      	push	{r7, lr}
    5802:	b084      	sub	sp, #16
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    580e:	68fb      	ldr	r3, [r7, #12]
    5810:	7bdb      	ldrb	r3, [r3, #15]
    5812:	b2db      	uxtb	r3, r3
    5814:	001a      	movs	r2, r3
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	4013      	ands	r3, r2
    581a:	1e5a      	subs	r2, r3, #1
    581c:	4193      	sbcs	r3, r2
    581e:	b2db      	uxtb	r3, r3
#endif
}
    5820:	0018      	movs	r0, r3
    5822:	46bd      	mov	sp, r7
    5824:	b004      	add	sp, #16
    5826:	bd80      	pop	{r7, pc}

00005828 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5828:	b590      	push	{r4, r7, lr}
    582a:	b087      	sub	sp, #28
    582c:	af00      	add	r7, sp, #0
    582e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5830:	2308      	movs	r3, #8
    5832:	18fb      	adds	r3, r7, r3
    5834:	4a0d      	ldr	r2, [pc, #52]	; (586c <_tc_get_inst_index+0x44>)
    5836:	ca13      	ldmia	r2!, {r0, r1, r4}
    5838:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    583a:	2300      	movs	r3, #0
    583c:	617b      	str	r3, [r7, #20]
    583e:	e00d      	b.n	585c <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    5840:	2308      	movs	r3, #8
    5842:	18fb      	adds	r3, r7, r3
    5844:	697a      	ldr	r2, [r7, #20]
    5846:	0092      	lsls	r2, r2, #2
    5848:	58d2      	ldr	r2, [r2, r3]
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	429a      	cmp	r2, r3
    584e:	d102      	bne.n	5856 <_tc_get_inst_index+0x2e>
			return i;
    5850:	697b      	ldr	r3, [r7, #20]
    5852:	b2db      	uxtb	r3, r3
    5854:	e006      	b.n	5864 <_tc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5856:	697b      	ldr	r3, [r7, #20]
    5858:	3301      	adds	r3, #1
    585a:	617b      	str	r3, [r7, #20]
    585c:	697b      	ldr	r3, [r7, #20]
    585e:	2b02      	cmp	r3, #2
    5860:	d9ee      	bls.n	5840 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5862:	2300      	movs	r3, #0
}
    5864:	0018      	movs	r0, r3
    5866:	46bd      	mov	sp, r7
    5868:	b007      	add	sp, #28
    586a:	bd90      	pop	{r4, r7, pc}
    586c:	00016f8c 	.word	0x00016f8c

00005870 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5870:	b590      	push	{r4, r7, lr}
    5872:	b08d      	sub	sp, #52	; 0x34
    5874:	af00      	add	r7, sp, #0
    5876:	60f8      	str	r0, [r7, #12]
    5878:	60b9      	str	r1, [r7, #8]
    587a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    587c:	232e      	movs	r3, #46	; 0x2e
    587e:	18fb      	adds	r3, r7, r3
    5880:	2200      	movs	r2, #0
    5882:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    5884:	232d      	movs	r3, #45	; 0x2d
    5886:	18fb      	adds	r3, r7, r3
    5888:	2200      	movs	r2, #0
    588a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    588c:	232c      	movs	r3, #44	; 0x2c
    588e:	18fb      	adds	r3, r7, r3
    5890:	2200      	movs	r2, #0
    5892:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    5894:	2329      	movs	r3, #41	; 0x29
    5896:	18fc      	adds	r4, r7, r3
    5898:	68bb      	ldr	r3, [r7, #8]
    589a:	0018      	movs	r0, r3
    589c:	4bbd      	ldr	r3, [pc, #756]	; (5b94 <tc_init+0x324>)
    589e:	4798      	blx	r3
    58a0:	0003      	movs	r3, r0
    58a2:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    58a4:	2324      	movs	r3, #36	; 0x24
    58a6:	18fb      	adds	r3, r7, r3
    58a8:	4abb      	ldr	r2, [pc, #748]	; (5b98 <tc_init+0x328>)
    58aa:	8811      	ldrh	r1, [r2, #0]
    58ac:	8019      	strh	r1, [r3, #0]
    58ae:	7892      	ldrb	r2, [r2, #2]
    58b0:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    58b2:	231c      	movs	r3, #28
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	4ab9      	ldr	r2, [pc, #740]	; (5b9c <tc_init+0x32c>)
    58b8:	6811      	ldr	r1, [r2, #0]
    58ba:	6019      	str	r1, [r3, #0]
    58bc:	8892      	ldrh	r2, [r2, #4]
    58be:	809a      	strh	r2, [r3, #4]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58c0:	232b      	movs	r3, #43	; 0x2b
    58c2:	18fb      	adds	r3, r7, r3
    58c4:	2200      	movs	r2, #0
    58c6:	701a      	strb	r2, [r3, #0]
    58c8:	e00e      	b.n	58e8 <tc_init+0x78>
		module_inst->callback[i]        = NULL;
    58ca:	232b      	movs	r3, #43	; 0x2b
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	781a      	ldrb	r2, [r3, #0]
    58d0:	68fb      	ldr	r3, [r7, #12]
    58d2:	3202      	adds	r2, #2
    58d4:	0092      	lsls	r2, r2, #2
    58d6:	2100      	movs	r1, #0
    58d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    58da:	232b      	movs	r3, #43	; 0x2b
    58dc:	18fb      	adds	r3, r7, r3
    58de:	781a      	ldrb	r2, [r3, #0]
    58e0:	232b      	movs	r3, #43	; 0x2b
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	3201      	adds	r2, #1
    58e6:	701a      	strb	r2, [r3, #0]
    58e8:	232b      	movs	r3, #43	; 0x2b
    58ea:	18fb      	adds	r3, r7, r3
    58ec:	781b      	ldrb	r3, [r3, #0]
    58ee:	2b03      	cmp	r3, #3
    58f0:	d9eb      	bls.n	58ca <tc_init+0x5a>
	}
	module_inst->register_callback_mask     = 0x00;
    58f2:	68fb      	ldr	r3, [r7, #12]
    58f4:	2200      	movs	r2, #0
    58f6:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    58f8:	68fb      	ldr	r3, [r7, #12]
    58fa:	2200      	movs	r2, #0
    58fc:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    58fe:	2329      	movs	r3, #41	; 0x29
    5900:	18fb      	adds	r3, r7, r3
    5902:	781a      	ldrb	r2, [r3, #0]
    5904:	4ba6      	ldr	r3, [pc, #664]	; (5ba0 <tc_init+0x330>)
    5906:	0092      	lsls	r2, r2, #2
    5908:	68f9      	ldr	r1, [r7, #12]
    590a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    590c:	68fb      	ldr	r3, [r7, #12]
    590e:	68ba      	ldr	r2, [r7, #8]
    5910:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	789b      	ldrb	r3, [r3, #2]
    5916:	2b08      	cmp	r3, #8
    5918:	d108      	bne.n	592c <tc_init+0xbc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    591a:	2329      	movs	r3, #41	; 0x29
    591c:	18fb      	adds	r3, r7, r3
    591e:	781b      	ldrb	r3, [r3, #0]
    5920:	3303      	adds	r3, #3
    5922:	2201      	movs	r2, #1
    5924:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5926:	d001      	beq.n	592c <tc_init+0xbc>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5928:	2317      	movs	r3, #23
    592a:	e1c2      	b.n	5cb2 <tc_init+0x442>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    592c:	687b      	ldr	r3, [r7, #4]
    592e:	789a      	ldrb	r2, [r3, #2]
    5930:	68fb      	ldr	r3, [r7, #12]
    5932:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5934:	68bb      	ldr	r3, [r7, #8]
    5936:	881b      	ldrh	r3, [r3, #0]
    5938:	b29b      	uxth	r3, r3
    593a:	001a      	movs	r2, r3
    593c:	2301      	movs	r3, #1
    593e:	4013      	ands	r3, r2
    5940:	d001      	beq.n	5946 <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5942:	2305      	movs	r3, #5
    5944:	e1b5      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5946:	68bb      	ldr	r3, [r7, #8]
    5948:	7bdb      	ldrb	r3, [r3, #15]
    594a:	b2db      	uxtb	r3, r3
    594c:	001a      	movs	r2, r3
    594e:	2310      	movs	r3, #16
    5950:	4013      	ands	r3, r2
    5952:	d001      	beq.n	5958 <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    5954:	231c      	movs	r3, #28
    5956:	e1ac      	b.n	5cb2 <tc_init+0x442>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5958:	68bb      	ldr	r3, [r7, #8]
    595a:	881b      	ldrh	r3, [r3, #0]
    595c:	b29b      	uxth	r3, r3
    595e:	001a      	movs	r2, r3
    5960:	2302      	movs	r3, #2
    5962:	4013      	ands	r3, r2
    5964:	d001      	beq.n	596a <tc_init+0xfa>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    5966:	231c      	movs	r3, #28
    5968:	e1a3      	b.n	5cb2 <tc_init+0x442>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	7c1b      	ldrb	r3, [r3, #16]
    596e:	2b00      	cmp	r3, #0
    5970:	d017      	beq.n	59a2 <tc_init+0x132>
		system_pinmux_get_config_defaults(&pin_config);
    5972:	2318      	movs	r3, #24
    5974:	18fb      	adds	r3, r7, r3
    5976:	0018      	movs	r0, r3
    5978:	4b8a      	ldr	r3, [pc, #552]	; (5ba4 <tc_init+0x334>)
    597a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	699b      	ldr	r3, [r3, #24]
    5980:	b2da      	uxtb	r2, r3
    5982:	2318      	movs	r3, #24
    5984:	18fb      	adds	r3, r7, r3
    5986:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5988:	2318      	movs	r3, #24
    598a:	18fb      	adds	r3, r7, r3
    598c:	2201      	movs	r2, #1
    598e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    5994:	b2db      	uxtb	r3, r3
    5996:	2218      	movs	r2, #24
    5998:	18ba      	adds	r2, r7, r2
    599a:	0011      	movs	r1, r2
    599c:	0018      	movs	r0, r3
    599e:	4b82      	ldr	r3, [pc, #520]	; (5ba8 <tc_init+0x338>)
    59a0:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	7f1b      	ldrb	r3, [r3, #28]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d017      	beq.n	59da <tc_init+0x16a>
		system_pinmux_get_config_defaults(&pin_config);
    59aa:	2318      	movs	r3, #24
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	0018      	movs	r0, r3
    59b0:	4b7c      	ldr	r3, [pc, #496]	; (5ba4 <tc_init+0x334>)
    59b2:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59b8:	b2da      	uxtb	r2, r3
    59ba:	2318      	movs	r3, #24
    59bc:	18fb      	adds	r3, r7, r3
    59be:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    59c0:	2318      	movs	r3, #24
    59c2:	18fb      	adds	r3, r7, r3
    59c4:	2201      	movs	r2, #1
    59c6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    59c8:	687b      	ldr	r3, [r7, #4]
    59ca:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    59cc:	b2db      	uxtb	r3, r3
    59ce:	2218      	movs	r2, #24
    59d0:	18ba      	adds	r2, r7, r2
    59d2:	0011      	movs	r1, r2
    59d4:	0018      	movs	r0, r3
    59d6:	4b74      	ldr	r3, [pc, #464]	; (5ba8 <tc_init+0x338>)
    59d8:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    59da:	2329      	movs	r3, #41	; 0x29
    59dc:	18fb      	adds	r3, r7, r3
    59de:	781a      	ldrb	r2, [r3, #0]
    59e0:	231c      	movs	r3, #28
    59e2:	18fb      	adds	r3, r7, r3
    59e4:	0052      	lsls	r2, r2, #1
    59e6:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    59e8:	0019      	movs	r1, r3
    59ea:	2002      	movs	r0, #2
    59ec:	4b6f      	ldr	r3, [pc, #444]	; (5bac <tc_init+0x33c>)
    59ee:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	789b      	ldrb	r3, [r3, #2]
    59f4:	2b08      	cmp	r3, #8
    59f6:	d10b      	bne.n	5a10 <tc_init+0x1a0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    59f8:	2329      	movs	r3, #41	; 0x29
    59fa:	18fb      	adds	r3, r7, r3
    59fc:	781b      	ldrb	r3, [r3, #0]
    59fe:	1c5a      	adds	r2, r3, #1
    5a00:	231c      	movs	r3, #28
    5a02:	18fb      	adds	r3, r7, r3
    5a04:	0052      	lsls	r2, r2, #1
    5a06:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5a08:	0019      	movs	r1, r3
    5a0a:	2002      	movs	r0, #2
    5a0c:	4b67      	ldr	r3, [pc, #412]	; (5bac <tc_init+0x33c>)
    5a0e:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5a10:	2314      	movs	r3, #20
    5a12:	18fb      	adds	r3, r7, r3
    5a14:	0018      	movs	r0, r3
    5a16:	4b66      	ldr	r3, [pc, #408]	; (5bb0 <tc_init+0x340>)
    5a18:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	781a      	ldrb	r2, [r3, #0]
    5a1e:	2314      	movs	r3, #20
    5a20:	18fb      	adds	r3, r7, r3
    5a22:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5a24:	2329      	movs	r3, #41	; 0x29
    5a26:	18fb      	adds	r3, r7, r3
    5a28:	781b      	ldrb	r3, [r3, #0]
    5a2a:	2224      	movs	r2, #36	; 0x24
    5a2c:	18ba      	adds	r2, r7, r2
    5a2e:	5cd3      	ldrb	r3, [r2, r3]
    5a30:	2214      	movs	r2, #20
    5a32:	18ba      	adds	r2, r7, r2
    5a34:	0011      	movs	r1, r2
    5a36:	0018      	movs	r0, r3
    5a38:	4b5e      	ldr	r3, [pc, #376]	; (5bb4 <tc_init+0x344>)
    5a3a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5a3c:	2329      	movs	r3, #41	; 0x29
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	781b      	ldrb	r3, [r3, #0]
    5a42:	2224      	movs	r2, #36	; 0x24
    5a44:	18ba      	adds	r2, r7, r2
    5a46:	5cd3      	ldrb	r3, [r2, r3]
    5a48:	0018      	movs	r0, r3
    5a4a:	4b5b      	ldr	r3, [pc, #364]	; (5bb8 <tc_init+0x348>)
    5a4c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    5a52:	687b      	ldr	r3, [r7, #4]
    5a54:	799b      	ldrb	r3, [r3, #6]
    5a56:	4313      	orrs	r3, r2
    5a58:	b2db      	uxtb	r3, r3
    5a5a:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
    5a5c:	687b      	ldr	r3, [r7, #4]
    5a5e:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
    5a60:	4313      	orrs	r3, r2
    5a62:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
    5a68:	232e      	movs	r3, #46	; 0x2e
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	430a      	orrs	r2, r1
    5a6e:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	785b      	ldrb	r3, [r3, #1]
    5a74:	2b00      	cmp	r3, #0
    5a76:	d008      	beq.n	5a8a <tc_init+0x21a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    5a78:	232e      	movs	r3, #46	; 0x2e
    5a7a:	18fb      	adds	r3, r7, r3
    5a7c:	222e      	movs	r2, #46	; 0x2e
    5a7e:	18ba      	adds	r2, r7, r2
    5a80:	8812      	ldrh	r2, [r2, #0]
    5a82:	2180      	movs	r1, #128	; 0x80
    5a84:	0109      	lsls	r1, r1, #4
    5a86:	430a      	orrs	r2, r1
    5a88:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	68fb      	ldr	r3, [r7, #12]
    5a8e:	0018      	movs	r0, r3
    5a90:	4b4a      	ldr	r3, [pc, #296]	; (5bbc <tc_init+0x34c>)
    5a92:	4798      	blx	r3
    5a94:	1e03      	subs	r3, r0, #0
    5a96:	d1f9      	bne.n	5a8c <tc_init+0x21c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5a98:	68bb      	ldr	r3, [r7, #8]
    5a9a:	222e      	movs	r2, #46	; 0x2e
    5a9c:	18ba      	adds	r2, r7, r2
    5a9e:	8812      	ldrh	r2, [r2, #0]
    5aa0:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	7b5b      	ldrb	r3, [r3, #13]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d003      	beq.n	5ab2 <tc_init+0x242>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    5aaa:	232d      	movs	r3, #45	; 0x2d
    5aac:	18fb      	adds	r3, r7, r3
    5aae:	2204      	movs	r2, #4
    5ab0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    5ab2:	687b      	ldr	r3, [r7, #4]
    5ab4:	7b9b      	ldrb	r3, [r3, #14]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d007      	beq.n	5aca <tc_init+0x25a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    5aba:	232d      	movs	r3, #45	; 0x2d
    5abc:	18fb      	adds	r3, r7, r3
    5abe:	222d      	movs	r2, #45	; 0x2d
    5ac0:	18ba      	adds	r2, r7, r2
    5ac2:	7812      	ldrb	r2, [r2, #0]
    5ac4:	2101      	movs	r1, #1
    5ac6:	430a      	orrs	r2, r1
    5ac8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	68fb      	ldr	r3, [r7, #12]
    5ace:	0018      	movs	r0, r3
    5ad0:	4b3a      	ldr	r3, [pc, #232]	; (5bbc <tc_init+0x34c>)
    5ad2:	4798      	blx	r3
    5ad4:	1e03      	subs	r3, r0, #0
    5ad6:	d1f9      	bne.n	5acc <tc_init+0x25c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    5ad8:	68bb      	ldr	r3, [r7, #8]
    5ada:	22ff      	movs	r2, #255	; 0xff
    5adc:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    5ade:	232d      	movs	r3, #45	; 0x2d
    5ae0:	18fb      	adds	r3, r7, r3
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d00b      	beq.n	5b00 <tc_init+0x290>
		while (tc_is_syncing(module_inst)) {
    5ae8:	46c0      	nop			; (mov r8, r8)
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	0018      	movs	r0, r3
    5aee:	4b33      	ldr	r3, [pc, #204]	; (5bbc <tc_init+0x34c>)
    5af0:	4798      	blx	r3
    5af2:	1e03      	subs	r3, r0, #0
    5af4:	d1f9      	bne.n	5aea <tc_init+0x27a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5af6:	68bb      	ldr	r3, [r7, #8]
    5af8:	222d      	movs	r2, #45	; 0x2d
    5afa:	18ba      	adds	r2, r7, r2
    5afc:	7812      	ldrb	r2, [r2, #0]
    5afe:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    5b00:	232c      	movs	r3, #44	; 0x2c
    5b02:	18fb      	adds	r3, r7, r3
    5b04:	687a      	ldr	r2, [r7, #4]
    5b06:	7a92      	ldrb	r2, [r2, #10]
    5b08:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b0a:	232a      	movs	r3, #42	; 0x2a
    5b0c:	18fb      	adds	r3, r7, r3
    5b0e:	2200      	movs	r2, #0
    5b10:	701a      	strb	r2, [r3, #0]
    5b12:	e01c      	b.n	5b4e <tc_init+0x2de>
		if (config->enable_capture_on_channel[i] == true) {
    5b14:	232a      	movs	r3, #42	; 0x2a
    5b16:	18fb      	adds	r3, r7, r3
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	687a      	ldr	r2, [r7, #4]
    5b1c:	18d3      	adds	r3, r2, r3
    5b1e:	7adb      	ldrb	r3, [r3, #11]
    5b20:	2b00      	cmp	r3, #0
    5b22:	d00d      	beq.n	5b40 <tc_init+0x2d0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    5b24:	232a      	movs	r3, #42	; 0x2a
    5b26:	18fb      	adds	r3, r7, r3
    5b28:	781b      	ldrb	r3, [r3, #0]
    5b2a:	2210      	movs	r2, #16
    5b2c:	409a      	lsls	r2, r3
    5b2e:	0013      	movs	r3, r2
    5b30:	b2d9      	uxtb	r1, r3
    5b32:	232c      	movs	r3, #44	; 0x2c
    5b34:	18fb      	adds	r3, r7, r3
    5b36:	222c      	movs	r2, #44	; 0x2c
    5b38:	18ba      	adds	r2, r7, r2
    5b3a:	7812      	ldrb	r2, [r2, #0]
    5b3c:	430a      	orrs	r2, r1
    5b3e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5b40:	232a      	movs	r3, #42	; 0x2a
    5b42:	18fb      	adds	r3, r7, r3
    5b44:	781a      	ldrb	r2, [r3, #0]
    5b46:	232a      	movs	r3, #42	; 0x2a
    5b48:	18fb      	adds	r3, r7, r3
    5b4a:	3201      	adds	r2, #1
    5b4c:	701a      	strb	r2, [r3, #0]
    5b4e:	232a      	movs	r3, #42	; 0x2a
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	781b      	ldrb	r3, [r3, #0]
    5b54:	2b01      	cmp	r3, #1
    5b56:	d9dd      	bls.n	5b14 <tc_init+0x2a4>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b58:	46c0      	nop			; (mov r8, r8)
    5b5a:	68fb      	ldr	r3, [r7, #12]
    5b5c:	0018      	movs	r0, r3
    5b5e:	4b17      	ldr	r3, [pc, #92]	; (5bbc <tc_init+0x34c>)
    5b60:	4798      	blx	r3
    5b62:	1e03      	subs	r3, r0, #0
    5b64:	d1f9      	bne.n	5b5a <tc_init+0x2ea>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    5b66:	68bb      	ldr	r3, [r7, #8]
    5b68:	222c      	movs	r2, #44	; 0x2c
    5b6a:	18ba      	adds	r2, r7, r2
    5b6c:	7812      	ldrb	r2, [r2, #0]
    5b6e:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5b70:	46c0      	nop			; (mov r8, r8)
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	0018      	movs	r0, r3
    5b76:	4b11      	ldr	r3, [pc, #68]	; (5bbc <tc_init+0x34c>)
    5b78:	4798      	blx	r3
    5b7a:	1e03      	subs	r3, r0, #0
    5b7c:	d1f9      	bne.n	5b72 <tc_init+0x302>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    5b7e:	68fb      	ldr	r3, [r7, #12]
    5b80:	791b      	ldrb	r3, [r3, #4]
    5b82:	2b04      	cmp	r3, #4
    5b84:	d01c      	beq.n	5bc0 <tc_init+0x350>
    5b86:	2b08      	cmp	r3, #8
    5b88:	d100      	bne.n	5b8c <tc_init+0x31c>
    5b8a:	e06e      	b.n	5c6a <tc_init+0x3fa>
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d049      	beq.n	5c24 <tc_init+0x3b4>
    5b90:	e08e      	b.n	5cb0 <tc_init+0x440>
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	00005829 	.word	0x00005829
    5b98:	00016f98 	.word	0x00016f98
    5b9c:	00016f9c 	.word	0x00016f9c
    5ba0:	2000045c 	.word	0x2000045c
    5ba4:	000057d9 	.word	0x000057d9
    5ba8:	00007e1d 	.word	0x00007e1d
    5bac:	0000577d 	.word	0x0000577d
    5bb0:	00005765 	.word	0x00005765
    5bb4:	00007b31 	.word	0x00007b31
    5bb8:	00007b75 	.word	0x00007b75
    5bbc:	00005801 	.word	0x00005801
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    5bc0:	46c0      	nop			; (mov r8, r8)
    5bc2:	68fb      	ldr	r3, [r7, #12]
    5bc4:	0018      	movs	r0, r3
    5bc6:	4b3d      	ldr	r3, [pc, #244]	; (5cbc <tc_init+0x44c>)
    5bc8:	4798      	blx	r3
    5bca:	1e03      	subs	r3, r0, #0
    5bcc:	d1f9      	bne.n	5bc2 <tc_init+0x352>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	2228      	movs	r2, #40	; 0x28
    5bd2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    5bd4:	68bb      	ldr	r3, [r7, #8]
    5bd6:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
    5bd8:	46c0      	nop			; (mov r8, r8)
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	0018      	movs	r0, r3
    5bde:	4b37      	ldr	r3, [pc, #220]	; (5cbc <tc_init+0x44c>)
    5be0:	4798      	blx	r3
    5be2:	1e03      	subs	r3, r0, #0
    5be4:	d1f9      	bne.n	5bda <tc_init+0x36a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    5be6:	687b      	ldr	r3, [r7, #4]
    5be8:	2229      	movs	r2, #41	; 0x29
    5bea:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    5bec:	68bb      	ldr	r3, [r7, #8]
    5bee:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    5bf0:	46c0      	nop			; (mov r8, r8)
    5bf2:	68fb      	ldr	r3, [r7, #12]
    5bf4:	0018      	movs	r0, r3
    5bf6:	4b31      	ldr	r3, [pc, #196]	; (5cbc <tc_init+0x44c>)
    5bf8:	4798      	blx	r3
    5bfa:	1e03      	subs	r3, r0, #0
    5bfc:	d1f9      	bne.n	5bf2 <tc_init+0x382>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	222a      	movs	r2, #42	; 0x2a
    5c02:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    5c04:	68bb      	ldr	r3, [r7, #8]
    5c06:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c08:	46c0      	nop			; (mov r8, r8)
    5c0a:	68fb      	ldr	r3, [r7, #12]
    5c0c:	0018      	movs	r0, r3
    5c0e:	4b2b      	ldr	r3, [pc, #172]	; (5cbc <tc_init+0x44c>)
    5c10:	4798      	blx	r3
    5c12:	1e03      	subs	r3, r0, #0
    5c14:	d1f9      	bne.n	5c0a <tc_init+0x39a>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	222b      	movs	r2, #43	; 0x2b
    5c1a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    5c1c:	68bb      	ldr	r3, [r7, #8]
    5c1e:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
    5c20:	2300      	movs	r3, #0
    5c22:	e046      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    5c24:	46c0      	nop			; (mov r8, r8)
    5c26:	68fb      	ldr	r3, [r7, #12]
    5c28:	0018      	movs	r0, r3
    5c2a:	4b24      	ldr	r3, [pc, #144]	; (5cbc <tc_init+0x44c>)
    5c2c:	4798      	blx	r3
    5c2e:	1e03      	subs	r3, r0, #0
    5c30:	d1f9      	bne.n	5c26 <tc_init+0x3b6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5c36:	68bb      	ldr	r3, [r7, #8]
    5c38:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c3a:	46c0      	nop			; (mov r8, r8)
    5c3c:	68fb      	ldr	r3, [r7, #12]
    5c3e:	0018      	movs	r0, r3
    5c40:	4b1e      	ldr	r3, [pc, #120]	; (5cbc <tc_init+0x44c>)
    5c42:	4798      	blx	r3
    5c44:	1e03      	subs	r3, r0, #0
    5c46:	d1f9      	bne.n	5c3c <tc_init+0x3cc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    5c4c:	68bb      	ldr	r3, [r7, #8]
    5c4e:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c50:	46c0      	nop			; (mov r8, r8)
    5c52:	68fb      	ldr	r3, [r7, #12]
    5c54:	0018      	movs	r0, r3
    5c56:	4b19      	ldr	r3, [pc, #100]	; (5cbc <tc_init+0x44c>)
    5c58:	4798      	blx	r3
    5c5a:	1e03      	subs	r3, r0, #0
    5c5c:	d1f9      	bne.n	5c52 <tc_init+0x3e2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    5c62:	68bb      	ldr	r3, [r7, #8]
    5c64:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
    5c66:	2300      	movs	r3, #0
    5c68:	e023      	b.n	5cb2 <tc_init+0x442>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	0018      	movs	r0, r3
    5c70:	4b12      	ldr	r3, [pc, #72]	; (5cbc <tc_init+0x44c>)
    5c72:	4798      	blx	r3
    5c74:	1e03      	subs	r3, r0, #0
    5c76:	d1f9      	bne.n	5c6c <tc_init+0x3fc>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c7c:	68bb      	ldr	r3, [r7, #8]
    5c7e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    5c80:	46c0      	nop			; (mov r8, r8)
    5c82:	68fb      	ldr	r3, [r7, #12]
    5c84:	0018      	movs	r0, r3
    5c86:	4b0d      	ldr	r3, [pc, #52]	; (5cbc <tc_init+0x44c>)
    5c88:	4798      	blx	r3
    5c8a:	1e03      	subs	r3, r0, #0
    5c8c:	d1f9      	bne.n	5c82 <tc_init+0x412>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    5c8e:	687b      	ldr	r3, [r7, #4]
    5c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    5c92:	68bb      	ldr	r3, [r7, #8]
    5c94:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    5c96:	46c0      	nop			; (mov r8, r8)
    5c98:	68fb      	ldr	r3, [r7, #12]
    5c9a:	0018      	movs	r0, r3
    5c9c:	4b07      	ldr	r3, [pc, #28]	; (5cbc <tc_init+0x44c>)
    5c9e:	4798      	blx	r3
    5ca0:	1e03      	subs	r3, r0, #0
    5ca2:	d1f9      	bne.n	5c98 <tc_init+0x428>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5ca8:	68bb      	ldr	r3, [r7, #8]
    5caa:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
    5cac:	2300      	movs	r3, #0
    5cae:	e000      	b.n	5cb2 <tc_init+0x442>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    5cb0:	2317      	movs	r3, #23
}
    5cb2:	0018      	movs	r0, r3
    5cb4:	46bd      	mov	sp, r7
    5cb6:	b00d      	add	sp, #52	; 0x34
    5cb8:	bd90      	pop	{r4, r7, pc}
    5cba:	46c0      	nop			; (mov r8, r8)
    5cbc:	00005801 	.word	0x00005801

00005cc0 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b084      	sub	sp, #16
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	0018      	movs	r0, r3
    5cd4:	4b0e      	ldr	r3, [pc, #56]	; (5d10 <tc_get_count_value+0x50>)
    5cd6:	4798      	blx	r3
    5cd8:	1e03      	subs	r3, r0, #0
    5cda:	d1f9      	bne.n	5cd0 <tc_get_count_value+0x10>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	791b      	ldrb	r3, [r3, #4]
    5ce0:	2b04      	cmp	r3, #4
    5ce2:	d004      	beq.n	5cee <tc_get_count_value+0x2e>
    5ce4:	2b08      	cmp	r3, #8
    5ce6:	d00a      	beq.n	5cfe <tc_get_count_value+0x3e>
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d004      	beq.n	5cf6 <tc_get_count_value+0x36>
    5cec:	e00a      	b.n	5d04 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    5cee:	68fb      	ldr	r3, [r7, #12]
    5cf0:	7c1b      	ldrb	r3, [r3, #16]
    5cf2:	b2db      	uxtb	r3, r3
    5cf4:	e007      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	8a1b      	ldrh	r3, [r3, #16]
    5cfa:	b29b      	uxth	r3, r3
    5cfc:	e003      	b.n	5d06 <tc_get_count_value+0x46>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    5cfe:	68fb      	ldr	r3, [r7, #12]
    5d00:	691b      	ldr	r3, [r3, #16]
    5d02:	e000      	b.n	5d06 <tc_get_count_value+0x46>
	}

	Assert(false);
	return 0;
    5d04:	2300      	movs	r3, #0
}
    5d06:	0018      	movs	r0, r3
    5d08:	46bd      	mov	sp, r7
    5d0a:	b004      	add	sp, #16
    5d0c:	bd80      	pop	{r7, pc}
    5d0e:	46c0      	nop			; (mov r8, r8)
    5d10:	00005801 	.word	0x00005801

00005d14 <system_gclk_chan_get_config_defaults>:
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b082      	sub	sp, #8
    5d18:	af00      	add	r7, sp, #0
    5d1a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	2200      	movs	r2, #0
    5d20:	701a      	strb	r2, [r3, #0]
}
    5d22:	46c0      	nop			; (mov r8, r8)
    5d24:	46bd      	mov	sp, r7
    5d26:	b002      	add	sp, #8
    5d28:	bd80      	pop	{r7, pc}
	...

00005d2c <system_apb_clock_set_mask>:
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b082      	sub	sp, #8
    5d30:	af00      	add	r7, sp, #0
    5d32:	0002      	movs	r2, r0
    5d34:	6039      	str	r1, [r7, #0]
    5d36:	1dfb      	adds	r3, r7, #7
    5d38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d3a:	1dfb      	adds	r3, r7, #7
    5d3c:	781b      	ldrb	r3, [r3, #0]
    5d3e:	2b01      	cmp	r3, #1
    5d40:	d00a      	beq.n	5d58 <system_apb_clock_set_mask+0x2c>
    5d42:	2b02      	cmp	r3, #2
    5d44:	d00f      	beq.n	5d66 <system_apb_clock_set_mask+0x3a>
    5d46:	2b00      	cmp	r3, #0
    5d48:	d114      	bne.n	5d74 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    5d4a:	4b0e      	ldr	r3, [pc, #56]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4c:	4a0d      	ldr	r2, [pc, #52]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d4e:	6991      	ldr	r1, [r2, #24]
    5d50:	683a      	ldr	r2, [r7, #0]
    5d52:	430a      	orrs	r2, r1
    5d54:	619a      	str	r2, [r3, #24]
			break;
    5d56:	e00f      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5d58:	4b0a      	ldr	r3, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5a:	4a0a      	ldr	r2, [pc, #40]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d5c:	69d1      	ldr	r1, [r2, #28]
    5d5e:	683a      	ldr	r2, [r7, #0]
    5d60:	430a      	orrs	r2, r1
    5d62:	61da      	str	r2, [r3, #28]
			break;
    5d64:	e008      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5d66:	4b07      	ldr	r3, [pc, #28]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d68:	4a06      	ldr	r2, [pc, #24]	; (5d84 <system_apb_clock_set_mask+0x58>)
    5d6a:	6a11      	ldr	r1, [r2, #32]
    5d6c:	683a      	ldr	r2, [r7, #0]
    5d6e:	430a      	orrs	r2, r1
    5d70:	621a      	str	r2, [r3, #32]
			break;
    5d72:	e001      	b.n	5d78 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5d74:	2317      	movs	r3, #23
    5d76:	e000      	b.n	5d7a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5d78:	2300      	movs	r3, #0
}
    5d7a:	0018      	movs	r0, r3
    5d7c:	46bd      	mov	sp, r7
    5d7e:	b002      	add	sp, #8
    5d80:	bd80      	pop	{r7, pc}
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	40000400 	.word	0x40000400

00005d88 <system_pinmux_get_config_defaults>:
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	2280      	movs	r2, #128	; 0x80
    5d94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	2200      	movs	r2, #0
    5d9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	2201      	movs	r2, #1
    5da0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	2200      	movs	r2, #0
    5da6:	70da      	strb	r2, [r3, #3]
}
    5da8:	46c0      	nop			; (mov r8, r8)
    5daa:	46bd      	mov	sp, r7
    5dac:	b002      	add	sp, #8
    5dae:	bd80      	pop	{r7, pc}

00005db0 <system_is_debugger_present>:
{
    5db0:	b580      	push	{r7, lr}
    5db2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5db4:	4b05      	ldr	r3, [pc, #20]	; (5dcc <system_is_debugger_present+0x1c>)
    5db6:	789b      	ldrb	r3, [r3, #2]
    5db8:	b2db      	uxtb	r3, r3
    5dba:	001a      	movs	r2, r3
    5dbc:	2302      	movs	r3, #2
    5dbe:	4013      	ands	r3, r2
    5dc0:	1e5a      	subs	r2, r3, #1
    5dc2:	4193      	sbcs	r3, r2
    5dc4:	b2db      	uxtb	r3, r3
}
    5dc6:	0018      	movs	r0, r3
    5dc8:	46bd      	mov	sp, r7
    5dca:	bd80      	pop	{r7, pc}
    5dcc:	41002000 	.word	0x41002000

00005dd0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5dd0:	b580      	push	{r7, lr}
    5dd2:	b084      	sub	sp, #16
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	681b      	ldr	r3, [r3, #0]
    5ddc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5dde:	68fb      	ldr	r3, [r7, #12]
    5de0:	69db      	ldr	r3, [r3, #28]
    5de2:	1e5a      	subs	r2, r3, #1
    5de4:	4193      	sbcs	r3, r2
    5de6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5de8:	0018      	movs	r0, r3
    5dea:	46bd      	mov	sp, r7
    5dec:	b004      	add	sp, #16
    5dee:	bd80      	pop	{r7, pc}

00005df0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b082      	sub	sp, #8
    5df4:	af00      	add	r7, sp, #0
    5df6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5df8:	46c0      	nop			; (mov r8, r8)
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	0018      	movs	r0, r3
    5dfe:	4b04      	ldr	r3, [pc, #16]	; (5e10 <_usart_wait_for_sync+0x20>)
    5e00:	4798      	blx	r3
    5e02:	1e03      	subs	r3, r0, #0
    5e04:	d1f9      	bne.n	5dfa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	46bd      	mov	sp, r7
    5e0a:	b002      	add	sp, #8
    5e0c:	bd80      	pop	{r7, pc}
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	00005dd1 	.word	0x00005dd1

00005e14 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5e14:	b5b0      	push	{r4, r5, r7, lr}
    5e16:	b08c      	sub	sp, #48	; 0x30
    5e18:	af02      	add	r7, sp, #8
    5e1a:	6078      	str	r0, [r7, #4]
    5e1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	0018      	movs	r0, r3
    5e2a:	4ba8      	ldr	r3, [pc, #672]	; (60cc <_usart_set_config+0x2b8>)
    5e2c:	4798      	blx	r3
    5e2e:	0003      	movs	r3, r0
    5e30:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5e32:	697b      	ldr	r3, [r7, #20]
    5e34:	3314      	adds	r3, #20
    5e36:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5e38:	2300      	movs	r3, #0
    5e3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5e3c:	2300      	movs	r3, #0
    5e3e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5e40:	230a      	movs	r3, #10
    5e42:	18fb      	adds	r3, r7, r3
    5e44:	2200      	movs	r2, #0
    5e46:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e48:	231f      	movs	r3, #31
    5e4a:	18fb      	adds	r3, r7, r3
    5e4c:	2200      	movs	r2, #0
    5e4e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e50:	231e      	movs	r3, #30
    5e52:	18fb      	adds	r3, r7, r3
    5e54:	2210      	movs	r2, #16
    5e56:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5e58:	683b      	ldr	r3, [r7, #0]
    5e5a:	8a1b      	ldrh	r3, [r3, #16]
    5e5c:	2280      	movs	r2, #128	; 0x80
    5e5e:	01d2      	lsls	r2, r2, #7
    5e60:	4293      	cmp	r3, r2
    5e62:	d01c      	beq.n	5e9e <_usart_set_config+0x8a>
    5e64:	2280      	movs	r2, #128	; 0x80
    5e66:	01d2      	lsls	r2, r2, #7
    5e68:	4293      	cmp	r3, r2
    5e6a:	dc06      	bgt.n	5e7a <_usart_set_config+0x66>
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d00d      	beq.n	5e8c <_usart_set_config+0x78>
    5e70:	2280      	movs	r2, #128	; 0x80
    5e72:	0192      	lsls	r2, r2, #6
    5e74:	4293      	cmp	r3, r2
    5e76:	d024      	beq.n	5ec2 <_usart_set_config+0xae>
    5e78:	e035      	b.n	5ee6 <_usart_set_config+0xd2>
    5e7a:	22c0      	movs	r2, #192	; 0xc0
    5e7c:	01d2      	lsls	r2, r2, #7
    5e7e:	4293      	cmp	r3, r2
    5e80:	d028      	beq.n	5ed4 <_usart_set_config+0xc0>
    5e82:	2280      	movs	r2, #128	; 0x80
    5e84:	0212      	lsls	r2, r2, #8
    5e86:	4293      	cmp	r3, r2
    5e88:	d012      	beq.n	5eb0 <_usart_set_config+0x9c>
    5e8a:	e02c      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e8c:	231f      	movs	r3, #31
    5e8e:	18fb      	adds	r3, r7, r3
    5e90:	2200      	movs	r2, #0
    5e92:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e94:	231e      	movs	r3, #30
    5e96:	18fb      	adds	r3, r7, r3
    5e98:	2210      	movs	r2, #16
    5e9a:	701a      	strb	r2, [r3, #0]
			break;
    5e9c:	e023      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e9e:	231f      	movs	r3, #31
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	2200      	movs	r2, #0
    5ea4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5ea6:	231e      	movs	r3, #30
    5ea8:	18fb      	adds	r3, r7, r3
    5eaa:	2208      	movs	r2, #8
    5eac:	701a      	strb	r2, [r3, #0]
			break;
    5eae:	e01a      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5eb0:	231f      	movs	r3, #31
    5eb2:	18fb      	adds	r3, r7, r3
    5eb4:	2200      	movs	r2, #0
    5eb6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5eb8:	231e      	movs	r3, #30
    5eba:	18fb      	adds	r3, r7, r3
    5ebc:	2203      	movs	r2, #3
    5ebe:	701a      	strb	r2, [r3, #0]
			break;
    5ec0:	e011      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ec2:	231f      	movs	r3, #31
    5ec4:	18fb      	adds	r3, r7, r3
    5ec6:	2201      	movs	r2, #1
    5ec8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5eca:	231e      	movs	r3, #30
    5ecc:	18fb      	adds	r3, r7, r3
    5ece:	2210      	movs	r2, #16
    5ed0:	701a      	strb	r2, [r3, #0]
			break;
    5ed2:	e008      	b.n	5ee6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ed4:	231f      	movs	r3, #31
    5ed6:	18fb      	adds	r3, r7, r3
    5ed8:	2201      	movs	r2, #1
    5eda:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5edc:	231e      	movs	r3, #30
    5ede:	18fb      	adds	r3, r7, r3
    5ee0:	2208      	movs	r2, #8
    5ee2:	701a      	strb	r2, [r3, #0]
			break;
    5ee4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5ee6:	683b      	ldr	r3, [r7, #0]
    5ee8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5eea:	683b      	ldr	r3, [r7, #0]
    5eec:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    5eee:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5ef0:	683b      	ldr	r3, [r7, #0]
    5ef2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    5ef4:	4313      	orrs	r3, r2
		config->sample_rate |
    5ef6:	683a      	ldr	r2, [r7, #0]
    5ef8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    5efa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5efc:	683a      	ldr	r2, [r7, #0]
    5efe:	7e12      	ldrb	r2, [r2, #24]
    5f00:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    5f02:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5f04:	683a      	ldr	r2, [r7, #0]
    5f06:	2126      	movs	r1, #38	; 0x26
    5f08:	5c52      	ldrb	r2, [r2, r1]
    5f0a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    5f0c:	4313      	orrs	r3, r2
    5f0e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5f10:	231d      	movs	r3, #29
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	2200      	movs	r2, #0
    5f16:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5f18:	683b      	ldr	r3, [r7, #0]
    5f1a:	685b      	ldr	r3, [r3, #4]
    5f1c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    5f1e:	68fb      	ldr	r3, [r7, #12]
    5f20:	2b00      	cmp	r3, #0
    5f22:	d01e      	beq.n	5f62 <_usart_set_config+0x14e>
    5f24:	2280      	movs	r2, #128	; 0x80
    5f26:	0552      	lsls	r2, r2, #21
    5f28:	4293      	cmp	r3, r2
    5f2a:	d14f      	bne.n	5fcc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	2227      	movs	r2, #39	; 0x27
    5f30:	5c9b      	ldrb	r3, [r3, r2]
    5f32:	2201      	movs	r2, #1
    5f34:	4053      	eors	r3, r2
    5f36:	b2db      	uxtb	r3, r3
    5f38:	2b00      	cmp	r3, #0
    5f3a:	d046      	beq.n	5fca <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5f3c:	683b      	ldr	r3, [r7, #0]
    5f3e:	6a1d      	ldr	r5, [r3, #32]
    5f40:	693b      	ldr	r3, [r7, #16]
    5f42:	b2db      	uxtb	r3, r3
    5f44:	0018      	movs	r0, r3
    5f46:	4b62      	ldr	r3, [pc, #392]	; (60d0 <_usart_set_config+0x2bc>)
    5f48:	4798      	blx	r3
    5f4a:	0001      	movs	r1, r0
    5f4c:	231d      	movs	r3, #29
    5f4e:	18fc      	adds	r4, r7, r3
    5f50:	230a      	movs	r3, #10
    5f52:	18fb      	adds	r3, r7, r3
    5f54:	001a      	movs	r2, r3
    5f56:	0028      	movs	r0, r5
    5f58:	4b5e      	ldr	r3, [pc, #376]	; (60d4 <_usart_set_config+0x2c0>)
    5f5a:	4798      	blx	r3
    5f5c:	0003      	movs	r3, r0
    5f5e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5f60:	e033      	b.n	5fca <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5f62:	683b      	ldr	r3, [r7, #0]
    5f64:	2227      	movs	r2, #39	; 0x27
    5f66:	5c9b      	ldrb	r3, [r3, r2]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d014      	beq.n	5f96 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5f6c:	683b      	ldr	r3, [r7, #0]
    5f6e:	6a18      	ldr	r0, [r3, #32]
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5f74:	231d      	movs	r3, #29
    5f76:	18fc      	adds	r4, r7, r3
    5f78:	231f      	movs	r3, #31
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	781d      	ldrb	r5, [r3, #0]
    5f7e:	230a      	movs	r3, #10
    5f80:	18fa      	adds	r2, r7, r3
    5f82:	231e      	movs	r3, #30
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	9300      	str	r3, [sp, #0]
    5f8a:	002b      	movs	r3, r5
    5f8c:	4d52      	ldr	r5, [pc, #328]	; (60d8 <_usart_set_config+0x2c4>)
    5f8e:	47a8      	blx	r5
    5f90:	0003      	movs	r3, r0
    5f92:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5f94:	e01a      	b.n	5fcc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5f96:	683b      	ldr	r3, [r7, #0]
    5f98:	6a1d      	ldr	r5, [r3, #32]
    5f9a:	693b      	ldr	r3, [r7, #16]
    5f9c:	b2db      	uxtb	r3, r3
    5f9e:	0018      	movs	r0, r3
    5fa0:	4b4b      	ldr	r3, [pc, #300]	; (60d0 <_usart_set_config+0x2bc>)
    5fa2:	4798      	blx	r3
				status_code =
    5fa4:	231d      	movs	r3, #29
    5fa6:	18fc      	adds	r4, r7, r3
    5fa8:	231f      	movs	r3, #31
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	7819      	ldrb	r1, [r3, #0]
    5fae:	230a      	movs	r3, #10
    5fb0:	18fa      	adds	r2, r7, r3
    5fb2:	231e      	movs	r3, #30
    5fb4:	18fb      	adds	r3, r7, r3
    5fb6:	781b      	ldrb	r3, [r3, #0]
    5fb8:	9300      	str	r3, [sp, #0]
    5fba:	000b      	movs	r3, r1
    5fbc:	0001      	movs	r1, r0
    5fbe:	0028      	movs	r0, r5
    5fc0:	4d45      	ldr	r5, [pc, #276]	; (60d8 <_usart_set_config+0x2c4>)
    5fc2:	47a8      	blx	r5
    5fc4:	0003      	movs	r3, r0
    5fc6:	7023      	strb	r3, [r4, #0]
			break;
    5fc8:	e000      	b.n	5fcc <_usart_set_config+0x1b8>
			break;
    5fca:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5fcc:	231d      	movs	r3, #29
    5fce:	18fb      	adds	r3, r7, r3
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d003      	beq.n	5fde <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5fd6:	231d      	movs	r3, #29
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	e071      	b.n	60c2 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5fde:	683b      	ldr	r3, [r7, #0]
    5fe0:	7e5b      	ldrb	r3, [r3, #25]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d003      	beq.n	5fee <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5fe6:	683b      	ldr	r3, [r7, #0]
    5fe8:	7e9a      	ldrb	r2, [r3, #26]
    5fea:	69bb      	ldr	r3, [r7, #24]
    5fec:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	0018      	movs	r0, r3
    5ff2:	4b3a      	ldr	r3, [pc, #232]	; (60dc <_usart_set_config+0x2c8>)
    5ff4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5ff6:	230a      	movs	r3, #10
    5ff8:	18fb      	adds	r3, r7, r3
    5ffa:	881a      	ldrh	r2, [r3, #0]
    5ffc:	69bb      	ldr	r3, [r7, #24]
    5ffe:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    6000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6002:	68fb      	ldr	r3, [r7, #12]
    6004:	4313      	orrs	r3, r2
    6006:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    6008:	683b      	ldr	r3, [r7, #0]
    600a:	2227      	movs	r2, #39	; 0x27
    600c:	5c9b      	ldrb	r3, [r3, r2]
    600e:	2201      	movs	r2, #1
    6010:	4053      	eors	r3, r2
    6012:	b2db      	uxtb	r3, r3
    6014:	2b00      	cmp	r3, #0
    6016:	d003      	beq.n	6020 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    601a:	2204      	movs	r2, #4
    601c:	4313      	orrs	r3, r2
    601e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6020:	683b      	ldr	r3, [r7, #0]
    6022:	7e5b      	ldrb	r3, [r3, #25]
    6024:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6026:	683b      	ldr	r3, [r7, #0]
    6028:	7f1b      	ldrb	r3, [r3, #28]
    602a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    602c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    602e:	683b      	ldr	r3, [r7, #0]
    6030:	7f5b      	ldrb	r3, [r3, #29]
    6032:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6034:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6036:	683b      	ldr	r3, [r7, #0]
    6038:	2124      	movs	r1, #36	; 0x24
    603a:	5c5b      	ldrb	r3, [r3, r1]
    603c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    603e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6040:	683b      	ldr	r3, [r7, #0]
    6042:	2125      	movs	r1, #37	; 0x25
    6044:	5c5b      	ldrb	r3, [r3, r1]
    6046:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6048:	4313      	orrs	r3, r2
	ctrlb =  
    604a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    604c:	683b      	ldr	r3, [r7, #0]
    604e:	7adb      	ldrb	r3, [r3, #11]
    6050:	001a      	movs	r2, r3
    6052:	6a3b      	ldr	r3, [r7, #32]
    6054:	4313      	orrs	r3, r2
    6056:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    6058:	683b      	ldr	r3, [r7, #0]
    605a:	891b      	ldrh	r3, [r3, #8]
    605c:	2bff      	cmp	r3, #255	; 0xff
    605e:	d00b      	beq.n	6078 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6062:	2280      	movs	r2, #128	; 0x80
    6064:	0452      	lsls	r2, r2, #17
    6066:	4313      	orrs	r3, r2
    6068:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    606a:	683b      	ldr	r3, [r7, #0]
    606c:	891b      	ldrh	r3, [r3, #8]
    606e:	001a      	movs	r2, r3
    6070:	6a3b      	ldr	r3, [r7, #32]
    6072:	4313      	orrs	r3, r2
    6074:	623b      	str	r3, [r7, #32]
    6076:	e008      	b.n	608a <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    6078:	683b      	ldr	r3, [r7, #0]
    607a:	7edb      	ldrb	r3, [r3, #27]
    607c:	2b00      	cmp	r3, #0
    607e:	d004      	beq.n	608a <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6082:	2280      	movs	r2, #128	; 0x80
    6084:	04d2      	lsls	r2, r2, #19
    6086:	4313      	orrs	r3, r2
    6088:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    608a:	683b      	ldr	r3, [r7, #0]
    608c:	222c      	movs	r2, #44	; 0x2c
    608e:	5c9b      	ldrb	r3, [r3, r2]
    6090:	2b00      	cmp	r3, #0
    6092:	d103      	bne.n	609c <_usart_set_config+0x288>
    6094:	4b12      	ldr	r3, [pc, #72]	; (60e0 <_usart_set_config+0x2cc>)
    6096:	4798      	blx	r3
    6098:	1e03      	subs	r3, r0, #0
    609a:	d003      	beq.n	60a4 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    609e:	2280      	movs	r2, #128	; 0x80
    60a0:	4313      	orrs	r3, r2
    60a2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60a4:	687b      	ldr	r3, [r7, #4]
    60a6:	0018      	movs	r0, r3
    60a8:	4b0c      	ldr	r3, [pc, #48]	; (60dc <_usart_set_config+0x2c8>)
    60aa:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    60ac:	69bb      	ldr	r3, [r7, #24]
    60ae:	6a3a      	ldr	r2, [r7, #32]
    60b0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	0018      	movs	r0, r3
    60b6:	4b09      	ldr	r3, [pc, #36]	; (60dc <_usart_set_config+0x2c8>)
    60b8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    60ba:	69bb      	ldr	r3, [r7, #24]
    60bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    60be:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    60c0:	2300      	movs	r3, #0
}
    60c2:	0018      	movs	r0, r3
    60c4:	46bd      	mov	sp, r7
    60c6:	b00a      	add	sp, #40	; 0x28
    60c8:	bdb0      	pop	{r4, r5, r7, pc}
    60ca:	46c0      	nop			; (mov r8, r8)
    60cc:	00006f45 	.word	0x00006f45
    60d0:	00007c55 	.word	0x00007c55
    60d4:	00006a93 	.word	0x00006a93
    60d8:	00006b11 	.word	0x00006b11
    60dc:	00005df1 	.word	0x00005df1
    60e0:	00005db1 	.word	0x00005db1

000060e4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    60e4:	b590      	push	{r4, r7, lr}
    60e6:	b093      	sub	sp, #76	; 0x4c
    60e8:	af00      	add	r7, sp, #0
    60ea:	60f8      	str	r0, [r7, #12]
    60ec:	60b9      	str	r1, [r7, #8]
    60ee:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    60f0:	233b      	movs	r3, #59	; 0x3b
    60f2:	18fb      	adds	r3, r7, r3
    60f4:	2200      	movs	r2, #0
    60f6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    60f8:	68fb      	ldr	r3, [r7, #12]
    60fa:	68ba      	ldr	r2, [r7, #8]
    60fc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    60fe:	68fb      	ldr	r3, [r7, #12]
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6104:	68fb      	ldr	r3, [r7, #12]
    6106:	681b      	ldr	r3, [r3, #0]
    6108:	0018      	movs	r0, r3
    610a:	4b86      	ldr	r3, [pc, #536]	; (6324 <usart_init+0x240>)
    610c:	4798      	blx	r3
    610e:	0003      	movs	r3, r0
    6110:	633b      	str	r3, [r7, #48]	; 0x30
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6114:	3302      	adds	r3, #2
    6116:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    611a:	3314      	adds	r3, #20
    611c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	2201      	movs	r2, #1
    6124:	4013      	ands	r3, r2
    6126:	d001      	beq.n	612c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6128:	2305      	movs	r3, #5
    612a:	e0f6      	b.n	631a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	2202      	movs	r2, #2
    6132:	4013      	ands	r3, r2
    6134:	d001      	beq.n	613a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    6136:	231c      	movs	r3, #28
    6138:	e0ef      	b.n	631a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    613a:	2201      	movs	r2, #1
    613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    613e:	409a      	lsls	r2, r3
    6140:	0013      	movs	r3, r2
    6142:	0019      	movs	r1, r3
    6144:	2002      	movs	r0, #2
    6146:	4b78      	ldr	r3, [pc, #480]	; (6328 <usart_init+0x244>)
    6148:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    614a:	2324      	movs	r3, #36	; 0x24
    614c:	18fb      	adds	r3, r7, r3
    614e:	0018      	movs	r0, r3
    6150:	4b76      	ldr	r3, [pc, #472]	; (632c <usart_init+0x248>)
    6152:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	222d      	movs	r2, #45	; 0x2d
    6158:	5c9a      	ldrb	r2, [r3, r2]
    615a:	2324      	movs	r3, #36	; 0x24
    615c:	18fb      	adds	r3, r7, r3
    615e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6160:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6162:	b2db      	uxtb	r3, r3
    6164:	2224      	movs	r2, #36	; 0x24
    6166:	18ba      	adds	r2, r7, r2
    6168:	0011      	movs	r1, r2
    616a:	0018      	movs	r0, r3
    616c:	4b70      	ldr	r3, [pc, #448]	; (6330 <usart_init+0x24c>)
    616e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6170:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6172:	b2db      	uxtb	r3, r3
    6174:	0018      	movs	r0, r3
    6176:	4b6f      	ldr	r3, [pc, #444]	; (6334 <usart_init+0x250>)
    6178:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	222d      	movs	r2, #45	; 0x2d
    617e:	5c9b      	ldrb	r3, [r3, r2]
    6180:	2100      	movs	r1, #0
    6182:	0018      	movs	r0, r3
    6184:	4b6c      	ldr	r3, [pc, #432]	; (6338 <usart_init+0x254>)
    6186:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	7ada      	ldrb	r2, [r3, #11]
    618c:	68fb      	ldr	r3, [r7, #12]
    618e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	2224      	movs	r2, #36	; 0x24
    6194:	5c9a      	ldrb	r2, [r3, r2]
    6196:	68fb      	ldr	r3, [r7, #12]
    6198:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	2225      	movs	r2, #37	; 0x25
    619e:	5c9a      	ldrb	r2, [r3, r2]
    61a0:	68fb      	ldr	r3, [r7, #12]
    61a2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	7eda      	ldrb	r2, [r3, #27]
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	7f1a      	ldrb	r2, [r3, #28]
    61b0:	68fb      	ldr	r3, [r7, #12]
    61b2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    61b4:	233b      	movs	r3, #59	; 0x3b
    61b6:	18fc      	adds	r4, r7, r3
    61b8:	687a      	ldr	r2, [r7, #4]
    61ba:	68fb      	ldr	r3, [r7, #12]
    61bc:	0011      	movs	r1, r2
    61be:	0018      	movs	r0, r3
    61c0:	4b5e      	ldr	r3, [pc, #376]	; (633c <usart_init+0x258>)
    61c2:	4798      	blx	r3
    61c4:	0003      	movs	r3, r0
    61c6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    61c8:	233b      	movs	r3, #59	; 0x3b
    61ca:	18fb      	adds	r3, r7, r3
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d003      	beq.n	61da <usart_init+0xf6>
		return status_code;
    61d2:	233b      	movs	r3, #59	; 0x3b
    61d4:	18fb      	adds	r3, r7, r3
    61d6:	781b      	ldrb	r3, [r3, #0]
    61d8:	e09f      	b.n	631a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    61da:	2320      	movs	r3, #32
    61dc:	18fb      	adds	r3, r7, r3
    61de:	0018      	movs	r0, r3
    61e0:	4b57      	ldr	r3, [pc, #348]	; (6340 <usart_init+0x25c>)
    61e2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    61e4:	2320      	movs	r3, #32
    61e6:	18fb      	adds	r3, r7, r3
    61e8:	2200      	movs	r2, #0
    61ea:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    61ec:	2320      	movs	r3, #32
    61ee:	18fb      	adds	r3, r7, r3
    61f0:	2200      	movs	r2, #0
    61f2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    61f4:	687b      	ldr	r3, [r7, #4]
    61f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    61f8:	2310      	movs	r3, #16
    61fa:	18fb      	adds	r3, r7, r3
    61fc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    61fe:	687b      	ldr	r3, [r7, #4]
    6200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6202:	2310      	movs	r3, #16
    6204:	18fb      	adds	r3, r7, r3
    6206:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    620c:	2310      	movs	r3, #16
    620e:	18fb      	adds	r3, r7, r3
    6210:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    6216:	2310      	movs	r3, #16
    6218:	18fb      	adds	r3, r7, r3
    621a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    621c:	2347      	movs	r3, #71	; 0x47
    621e:	18fb      	adds	r3, r7, r3
    6220:	2200      	movs	r2, #0
    6222:	701a      	strb	r2, [r3, #0]
    6224:	e02c      	b.n	6280 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6226:	2347      	movs	r3, #71	; 0x47
    6228:	18fb      	adds	r3, r7, r3
    622a:	781a      	ldrb	r2, [r3, #0]
    622c:	2310      	movs	r3, #16
    622e:	18fb      	adds	r3, r7, r3
    6230:	0092      	lsls	r2, r2, #2
    6232:	58d3      	ldr	r3, [r2, r3]
    6234:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6238:	2b00      	cmp	r3, #0
    623a:	d109      	bne.n	6250 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    623c:	2347      	movs	r3, #71	; 0x47
    623e:	18fb      	adds	r3, r7, r3
    6240:	781a      	ldrb	r2, [r3, #0]
    6242:	68bb      	ldr	r3, [r7, #8]
    6244:	0011      	movs	r1, r2
    6246:	0018      	movs	r0, r3
    6248:	4b3e      	ldr	r3, [pc, #248]	; (6344 <usart_init+0x260>)
    624a:	4798      	blx	r3
    624c:	0003      	movs	r3, r0
    624e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6252:	3301      	adds	r3, #1
    6254:	d00d      	beq.n	6272 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6258:	b2da      	uxtb	r2, r3
    625a:	2320      	movs	r3, #32
    625c:	18fb      	adds	r3, r7, r3
    625e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6262:	0c1b      	lsrs	r3, r3, #16
    6264:	b2db      	uxtb	r3, r3
    6266:	2220      	movs	r2, #32
    6268:	18ba      	adds	r2, r7, r2
    626a:	0011      	movs	r1, r2
    626c:	0018      	movs	r0, r3
    626e:	4b36      	ldr	r3, [pc, #216]	; (6348 <usart_init+0x264>)
    6270:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6272:	2347      	movs	r3, #71	; 0x47
    6274:	18fb      	adds	r3, r7, r3
    6276:	781a      	ldrb	r2, [r3, #0]
    6278:	2347      	movs	r3, #71	; 0x47
    627a:	18fb      	adds	r3, r7, r3
    627c:	3201      	adds	r2, #1
    627e:	701a      	strb	r2, [r3, #0]
    6280:	2347      	movs	r3, #71	; 0x47
    6282:	18fb      	adds	r3, r7, r3
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	2b03      	cmp	r3, #3
    6288:	d9cd      	bls.n	6226 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    628a:	2300      	movs	r3, #0
    628c:	63fb      	str	r3, [r7, #60]	; 0x3c
    628e:	e00a      	b.n	62a6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    6290:	68fa      	ldr	r2, [r7, #12]
    6292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6294:	3302      	adds	r3, #2
    6296:	009b      	lsls	r3, r3, #2
    6298:	18d3      	adds	r3, r2, r3
    629a:	3304      	adds	r3, #4
    629c:	2200      	movs	r2, #0
    629e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    62a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a2:	3301      	adds	r3, #1
    62a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    62a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    62a8:	2b05      	cmp	r3, #5
    62aa:	d9f1      	bls.n	6290 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    62ac:	68fb      	ldr	r3, [r7, #12]
    62ae:	2200      	movs	r2, #0
    62b0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    62b2:	68fb      	ldr	r3, [r7, #12]
    62b4:	2200      	movs	r2, #0
    62b6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    62b8:	68fb      	ldr	r3, [r7, #12]
    62ba:	2200      	movs	r2, #0
    62bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    62be:	68fb      	ldr	r3, [r7, #12]
    62c0:	2200      	movs	r2, #0
    62c2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    62c4:	68fb      	ldr	r3, [r7, #12]
    62c6:	2230      	movs	r2, #48	; 0x30
    62c8:	2100      	movs	r1, #0
    62ca:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    62cc:	68fb      	ldr	r3, [r7, #12]
    62ce:	2231      	movs	r2, #49	; 0x31
    62d0:	2100      	movs	r1, #0
    62d2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    62d4:	68fb      	ldr	r3, [r7, #12]
    62d6:	2232      	movs	r2, #50	; 0x32
    62d8:	2100      	movs	r1, #0
    62da:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    62dc:	68fb      	ldr	r3, [r7, #12]
    62de:	2233      	movs	r2, #51	; 0x33
    62e0:	2100      	movs	r1, #0
    62e2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	2227      	movs	r2, #39	; 0x27
    62ea:	18bc      	adds	r4, r7, r2
    62ec:	0018      	movs	r0, r3
    62ee:	4b0d      	ldr	r3, [pc, #52]	; (6324 <usart_init+0x240>)
    62f0:	4798      	blx	r3
    62f2:	0003      	movs	r3, r0
    62f4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    62f6:	4a15      	ldr	r2, [pc, #84]	; (634c <usart_init+0x268>)
    62f8:	2327      	movs	r3, #39	; 0x27
    62fa:	18fb      	adds	r3, r7, r3
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	0011      	movs	r1, r2
    6300:	0018      	movs	r0, r3
    6302:	4b13      	ldr	r3, [pc, #76]	; (6350 <usart_init+0x26c>)
    6304:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6306:	2327      	movs	r3, #39	; 0x27
    6308:	18fb      	adds	r3, r7, r3
    630a:	781a      	ldrb	r2, [r3, #0]
    630c:	4b11      	ldr	r3, [pc, #68]	; (6354 <usart_init+0x270>)
    630e:	0092      	lsls	r2, r2, #2
    6310:	68f9      	ldr	r1, [r7, #12]
    6312:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    6314:	233b      	movs	r3, #59	; 0x3b
    6316:	18fb      	adds	r3, r7, r3
    6318:	781b      	ldrb	r3, [r3, #0]
}
    631a:	0018      	movs	r0, r3
    631c:	46bd      	mov	sp, r7
    631e:	b013      	add	sp, #76	; 0x4c
    6320:	bd90      	pop	{r4, r7, pc}
    6322:	46c0      	nop			; (mov r8, r8)
    6324:	00006f45 	.word	0x00006f45
    6328:	00005d2d 	.word	0x00005d2d
    632c:	00005d15 	.word	0x00005d15
    6330:	00007b31 	.word	0x00007b31
    6334:	00007b75 	.word	0x00007b75
    6338:	00006cfd 	.word	0x00006cfd
    633c:	00005e15 	.word	0x00005e15
    6340:	00005d89 	.word	0x00005d89
    6344:	00006d89 	.word	0x00006d89
    6348:	00007e1d 	.word	0x00007e1d
    634c:	0000665d 	.word	0x0000665d
    6350:	00006fa9 	.word	0x00006fa9
    6354:	20000468 	.word	0x20000468

00006358 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    6358:	b580      	push	{r7, lr}
    635a:	b084      	sub	sp, #16
    635c:	af00      	add	r7, sp, #0
    635e:	6078      	str	r0, [r7, #4]
    6360:	000a      	movs	r2, r1
    6362:	1cbb      	adds	r3, r7, #2
    6364:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	79db      	ldrb	r3, [r3, #7]
    6370:	2201      	movs	r2, #1
    6372:	4053      	eors	r3, r2
    6374:	b2db      	uxtb	r3, r3
    6376:	2b00      	cmp	r3, #0
    6378:	d001      	beq.n	637e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    637a:	231c      	movs	r3, #28
    637c:	e017      	b.n	63ae <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6382:	b29b      	uxth	r3, r3
    6384:	2b00      	cmp	r3, #0
    6386:	d001      	beq.n	638c <usart_write_wait+0x34>
		return STATUS_BUSY;
    6388:	2305      	movs	r3, #5
    638a:	e010      	b.n	63ae <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	0018      	movs	r0, r3
    6390:	4b09      	ldr	r3, [pc, #36]	; (63b8 <usart_write_wait+0x60>)
    6392:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    6394:	68fb      	ldr	r3, [r7, #12]
    6396:	1cba      	adds	r2, r7, #2
    6398:	8812      	ldrh	r2, [r2, #0]
    639a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    639c:	46c0      	nop			; (mov r8, r8)
    639e:	68fb      	ldr	r3, [r7, #12]
    63a0:	7e1b      	ldrb	r3, [r3, #24]
    63a2:	b2db      	uxtb	r3, r3
    63a4:	001a      	movs	r2, r3
    63a6:	2302      	movs	r3, #2
    63a8:	4013      	ands	r3, r2
    63aa:	d0f8      	beq.n	639e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    63ac:	2300      	movs	r3, #0
}
    63ae:	0018      	movs	r0, r3
    63b0:	46bd      	mov	sp, r7
    63b2:	b004      	add	sp, #16
    63b4:	bd80      	pop	{r7, pc}
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	00005df1 	.word	0x00005df1

000063bc <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b08a      	sub	sp, #40	; 0x28
    63c0:	af00      	add	r7, sp, #0
    63c2:	60f8      	str	r0, [r7, #12]
    63c4:	60b9      	str	r1, [r7, #8]
    63c6:	1dbb      	adds	r3, r7, #6
    63c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    63ca:	1dbb      	adds	r3, r7, #6
    63cc:	881b      	ldrh	r3, [r3, #0]
    63ce:	2b00      	cmp	r3, #0
    63d0:	d101      	bne.n	63d6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    63d2:	2317      	movs	r3, #23
    63d4:	e07e      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    63d6:	68fb      	ldr	r3, [r7, #12]
    63d8:	79db      	ldrb	r3, [r3, #7]
    63da:	2201      	movs	r2, #1
    63dc:	4053      	eors	r3, r2
    63de:	b2db      	uxtb	r3, r3
    63e0:	2b00      	cmp	r3, #0
    63e2:	d001      	beq.n	63e8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    63e4:	231c      	movs	r3, #28
    63e6:	e075      	b.n	64d4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    63e8:	68fb      	ldr	r3, [r7, #12]
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    63ee:	68fb      	ldr	r3, [r7, #12]
    63f0:	0018      	movs	r0, r3
    63f2:	4b3a      	ldr	r3, [pc, #232]	; (64dc <usart_write_buffer_wait+0x120>)
    63f4:	4798      	blx	r3

	uint16_t tx_pos = 0;
    63f6:	2326      	movs	r3, #38	; 0x26
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	2200      	movs	r2, #0
    63fc:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    63fe:	e048      	b.n	6492 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6400:	2300      	movs	r3, #0
    6402:	623b      	str	r3, [r7, #32]
    6404:	e00f      	b.n	6426 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6406:	697b      	ldr	r3, [r7, #20]
    6408:	7e1b      	ldrb	r3, [r3, #24]
    640a:	b2db      	uxtb	r3, r3
    640c:	001a      	movs	r2, r3
    640e:	2301      	movs	r3, #1
    6410:	4013      	ands	r3, r2
    6412:	d10d      	bne.n	6430 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    6414:	6a3b      	ldr	r3, [r7, #32]
    6416:	4a32      	ldr	r2, [pc, #200]	; (64e0 <usart_write_buffer_wait+0x124>)
    6418:	4293      	cmp	r3, r2
    641a:	d101      	bne.n	6420 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    641c:	2312      	movs	r3, #18
    641e:	e059      	b.n	64d4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6420:	6a3b      	ldr	r3, [r7, #32]
    6422:	3301      	adds	r3, #1
    6424:	623b      	str	r3, [r7, #32]
    6426:	6a3b      	ldr	r3, [r7, #32]
    6428:	4a2d      	ldr	r2, [pc, #180]	; (64e0 <usart_write_buffer_wait+0x124>)
    642a:	4293      	cmp	r3, r2
    642c:	d9eb      	bls.n	6406 <usart_write_buffer_wait+0x4a>
    642e:	e000      	b.n	6432 <usart_write_buffer_wait+0x76>
				break;
    6430:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    6432:	2326      	movs	r3, #38	; 0x26
    6434:	18fb      	adds	r3, r7, r3
    6436:	881b      	ldrh	r3, [r3, #0]
    6438:	2226      	movs	r2, #38	; 0x26
    643a:	18ba      	adds	r2, r7, r2
    643c:	1c59      	adds	r1, r3, #1
    643e:	8011      	strh	r1, [r2, #0]
    6440:	001a      	movs	r2, r3
    6442:	68bb      	ldr	r3, [r7, #8]
    6444:	189b      	adds	r3, r3, r2
    6446:	781a      	ldrb	r2, [r3, #0]
    6448:	231e      	movs	r3, #30
    644a:	18fb      	adds	r3, r7, r3
    644c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    644e:	68fb      	ldr	r3, [r7, #12]
    6450:	795b      	ldrb	r3, [r3, #5]
    6452:	2b01      	cmp	r3, #1
    6454:	d115      	bne.n	6482 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6456:	2326      	movs	r3, #38	; 0x26
    6458:	18fb      	adds	r3, r7, r3
    645a:	881b      	ldrh	r3, [r3, #0]
    645c:	2226      	movs	r2, #38	; 0x26
    645e:	18ba      	adds	r2, r7, r2
    6460:	1c59      	adds	r1, r3, #1
    6462:	8011      	strh	r1, [r2, #0]
    6464:	001a      	movs	r2, r3
    6466:	68bb      	ldr	r3, [r7, #8]
    6468:	189b      	adds	r3, r3, r2
    646a:	781b      	ldrb	r3, [r3, #0]
    646c:	021b      	lsls	r3, r3, #8
    646e:	b21a      	sxth	r2, r3
    6470:	231e      	movs	r3, #30
    6472:	18fb      	adds	r3, r7, r3
    6474:	2100      	movs	r1, #0
    6476:	5e5b      	ldrsh	r3, [r3, r1]
    6478:	4313      	orrs	r3, r2
    647a:	b21a      	sxth	r2, r3
    647c:	231e      	movs	r3, #30
    647e:	18fb      	adds	r3, r7, r3
    6480:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    6482:	231e      	movs	r3, #30
    6484:	18fb      	adds	r3, r7, r3
    6486:	881a      	ldrh	r2, [r3, #0]
    6488:	68fb      	ldr	r3, [r7, #12]
    648a:	0011      	movs	r1, r2
    648c:	0018      	movs	r0, r3
    648e:	4b15      	ldr	r3, [pc, #84]	; (64e4 <usart_write_buffer_wait+0x128>)
    6490:	4798      	blx	r3
	while (length--) {
    6492:	1dbb      	adds	r3, r7, #6
    6494:	881b      	ldrh	r3, [r3, #0]
    6496:	1dba      	adds	r2, r7, #6
    6498:	1e59      	subs	r1, r3, #1
    649a:	8011      	strh	r1, [r2, #0]
    649c:	2b00      	cmp	r3, #0
    649e:	d1af      	bne.n	6400 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64a0:	2300      	movs	r3, #0
    64a2:	61bb      	str	r3, [r7, #24]
    64a4:	e00f      	b.n	64c6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    64a6:	697b      	ldr	r3, [r7, #20]
    64a8:	7e1b      	ldrb	r3, [r3, #24]
    64aa:	b2db      	uxtb	r3, r3
    64ac:	001a      	movs	r2, r3
    64ae:	2302      	movs	r3, #2
    64b0:	4013      	ands	r3, r2
    64b2:	d10d      	bne.n	64d0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    64b4:	69bb      	ldr	r3, [r7, #24]
    64b6:	4a0a      	ldr	r2, [pc, #40]	; (64e0 <usart_write_buffer_wait+0x124>)
    64b8:	4293      	cmp	r3, r2
    64ba:	d101      	bne.n	64c0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    64bc:	2312      	movs	r3, #18
    64be:	e009      	b.n	64d4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    64c0:	69bb      	ldr	r3, [r7, #24]
    64c2:	3301      	adds	r3, #1
    64c4:	61bb      	str	r3, [r7, #24]
    64c6:	69bb      	ldr	r3, [r7, #24]
    64c8:	4a05      	ldr	r2, [pc, #20]	; (64e0 <usart_write_buffer_wait+0x124>)
    64ca:	4293      	cmp	r3, r2
    64cc:	d9eb      	bls.n	64a6 <usart_write_buffer_wait+0xea>
    64ce:	e000      	b.n	64d2 <usart_write_buffer_wait+0x116>
			break;
    64d0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    64d2:	2300      	movs	r3, #0
}
    64d4:	0018      	movs	r0, r3
    64d6:	46bd      	mov	sp, r7
    64d8:	b00a      	add	sp, #40	; 0x28
    64da:	bd80      	pop	{r7, pc}
    64dc:	00005df1 	.word	0x00005df1
    64e0:	0000ffff 	.word	0x0000ffff
    64e4:	00006359 	.word	0x00006359

000064e8 <system_interrupt_enter_critical_section>:
{
    64e8:	b580      	push	{r7, lr}
    64ea:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    64ec:	4b02      	ldr	r3, [pc, #8]	; (64f8 <system_interrupt_enter_critical_section+0x10>)
    64ee:	4798      	blx	r3
}
    64f0:	46c0      	nop			; (mov r8, r8)
    64f2:	46bd      	mov	sp, r7
    64f4:	bd80      	pop	{r7, pc}
    64f6:	46c0      	nop			; (mov r8, r8)
    64f8:	0000717d 	.word	0x0000717d

000064fc <system_interrupt_leave_critical_section>:
{
    64fc:	b580      	push	{r7, lr}
    64fe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6500:	4b02      	ldr	r3, [pc, #8]	; (650c <system_interrupt_leave_critical_section+0x10>)
    6502:	4798      	blx	r3
}
    6504:	46c0      	nop			; (mov r8, r8)
    6506:	46bd      	mov	sp, r7
    6508:	bd80      	pop	{r7, pc}
    650a:	46c0      	nop			; (mov r8, r8)
    650c:	000071d1 	.word	0x000071d1

00006510 <usart_is_syncing>:
{
    6510:	b580      	push	{r7, lr}
    6512:	b084      	sub	sp, #16
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	69db      	ldr	r3, [r3, #28]
    6522:	1e5a      	subs	r2, r3, #1
    6524:	4193      	sbcs	r3, r2
    6526:	b2db      	uxtb	r3, r3
}
    6528:	0018      	movs	r0, r3
    652a:	46bd      	mov	sp, r7
    652c:	b004      	add	sp, #16
    652e:	bd80      	pop	{r7, pc}

00006530 <_usart_wait_for_sync>:
{
    6530:	b580      	push	{r7, lr}
    6532:	b082      	sub	sp, #8
    6534:	af00      	add	r7, sp, #0
    6536:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    6538:	46c0      	nop			; (mov r8, r8)
    653a:	687b      	ldr	r3, [r7, #4]
    653c:	0018      	movs	r0, r3
    653e:	4b04      	ldr	r3, [pc, #16]	; (6550 <_usart_wait_for_sync+0x20>)
    6540:	4798      	blx	r3
    6542:	1e03      	subs	r3, r0, #0
    6544:	d1f9      	bne.n	653a <_usart_wait_for_sync+0xa>
}
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	46bd      	mov	sp, r7
    654a:	b002      	add	sp, #8
    654c:	bd80      	pop	{r7, pc}
    654e:	46c0      	nop			; (mov r8, r8)
    6550:	00006511 	.word	0x00006511

00006554 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6554:	b580      	push	{r7, lr}
    6556:	b086      	sub	sp, #24
    6558:	af00      	add	r7, sp, #0
    655a:	60f8      	str	r0, [r7, #12]
    655c:	60b9      	str	r1, [r7, #8]
    655e:	1dbb      	adds	r3, r7, #6
    6560:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6562:	68fb      	ldr	r3, [r7, #12]
    6564:	681b      	ldr	r3, [r3, #0]
    6566:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    6568:	4b16      	ldr	r3, [pc, #88]	; (65c4 <_usart_read_buffer+0x70>)
    656a:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    656c:	68fb      	ldr	r3, [r7, #12]
    656e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6570:	b29b      	uxth	r3, r3
    6572:	2b00      	cmp	r3, #0
    6574:	d003      	beq.n	657e <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    6576:	4b14      	ldr	r3, [pc, #80]	; (65c8 <_usart_read_buffer+0x74>)
    6578:	4798      	blx	r3
		return STATUS_BUSY;
    657a:	2305      	movs	r3, #5
    657c:	e01e      	b.n	65bc <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	1dba      	adds	r2, r7, #6
    6582:	8812      	ldrh	r2, [r2, #0]
    6584:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    6586:	4b10      	ldr	r3, [pc, #64]	; (65c8 <_usart_read_buffer+0x74>)
    6588:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    658a:	68fb      	ldr	r3, [r7, #12]
    658c:	68ba      	ldr	r2, [r7, #8]
    658e:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    6590:	68fb      	ldr	r3, [r7, #12]
    6592:	2232      	movs	r2, #50	; 0x32
    6594:	2105      	movs	r1, #5
    6596:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6598:	697b      	ldr	r3, [r7, #20]
    659a:	2204      	movs	r2, #4
    659c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    659e:	68fb      	ldr	r3, [r7, #12]
    65a0:	7a1b      	ldrb	r3, [r3, #8]
    65a2:	2b00      	cmp	r3, #0
    65a4:	d002      	beq.n	65ac <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    65a6:	697b      	ldr	r3, [r7, #20]
    65a8:	2220      	movs	r2, #32
    65aa:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    65ac:	68fb      	ldr	r3, [r7, #12]
    65ae:	7a5b      	ldrb	r3, [r3, #9]
    65b0:	2b00      	cmp	r3, #0
    65b2:	d002      	beq.n	65ba <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    65b4:	697b      	ldr	r3, [r7, #20]
    65b6:	2208      	movs	r2, #8
    65b8:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    65ba:	2300      	movs	r3, #0
}
    65bc:	0018      	movs	r0, r3
    65be:	46bd      	mov	sp, r7
    65c0:	b006      	add	sp, #24
    65c2:	bd80      	pop	{r7, pc}
    65c4:	000064e9 	.word	0x000064e9
    65c8:	000064fd 	.word	0x000064fd

000065cc <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    65cc:	b580      	push	{r7, lr}
    65ce:	b084      	sub	sp, #16
    65d0:	af00      	add	r7, sp, #0
    65d2:	60f8      	str	r0, [r7, #12]
    65d4:	60b9      	str	r1, [r7, #8]
    65d6:	1dfb      	adds	r3, r7, #7
    65d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    65da:	1dfb      	adds	r3, r7, #7
    65dc:	781b      	ldrb	r3, [r3, #0]
    65de:	68fa      	ldr	r2, [r7, #12]
    65e0:	3302      	adds	r3, #2
    65e2:	009b      	lsls	r3, r3, #2
    65e4:	18d3      	adds	r3, r2, r3
    65e6:	3304      	adds	r3, #4
    65e8:	68ba      	ldr	r2, [r7, #8]
    65ea:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    65ec:	68fb      	ldr	r3, [r7, #12]
    65ee:	2230      	movs	r2, #48	; 0x30
    65f0:	5c9b      	ldrb	r3, [r3, r2]
    65f2:	b25a      	sxtb	r2, r3
    65f4:	1dfb      	adds	r3, r7, #7
    65f6:	781b      	ldrb	r3, [r3, #0]
    65f8:	2101      	movs	r1, #1
    65fa:	4099      	lsls	r1, r3
    65fc:	000b      	movs	r3, r1
    65fe:	b25b      	sxtb	r3, r3
    6600:	4313      	orrs	r3, r2
    6602:	b25b      	sxtb	r3, r3
    6604:	b2d9      	uxtb	r1, r3
    6606:	68fb      	ldr	r3, [r7, #12]
    6608:	2230      	movs	r2, #48	; 0x30
    660a:	5499      	strb	r1, [r3, r2]
}
    660c:	46c0      	nop			; (mov r8, r8)
    660e:	46bd      	mov	sp, r7
    6610:	b004      	add	sp, #16
    6612:	bd80      	pop	{r7, pc}

00006614 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6614:	b580      	push	{r7, lr}
    6616:	b084      	sub	sp, #16
    6618:	af00      	add	r7, sp, #0
    661a:	60f8      	str	r0, [r7, #12]
    661c:	60b9      	str	r1, [r7, #8]
    661e:	1dbb      	adds	r3, r7, #6
    6620:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    6622:	1dbb      	adds	r3, r7, #6
    6624:	881b      	ldrh	r3, [r3, #0]
    6626:	2b00      	cmp	r3, #0
    6628:	d101      	bne.n	662e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    662a:	2317      	movs	r3, #23
    662c:	e010      	b.n	6650 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    662e:	68fb      	ldr	r3, [r7, #12]
    6630:	799b      	ldrb	r3, [r3, #6]
    6632:	2201      	movs	r2, #1
    6634:	4053      	eors	r3, r2
    6636:	b2db      	uxtb	r3, r3
    6638:	2b00      	cmp	r3, #0
    663a:	d001      	beq.n	6640 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    663c:	231c      	movs	r3, #28
    663e:	e007      	b.n	6650 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    6640:	1dbb      	adds	r3, r7, #6
    6642:	881a      	ldrh	r2, [r3, #0]
    6644:	68b9      	ldr	r1, [r7, #8]
    6646:	68fb      	ldr	r3, [r7, #12]
    6648:	0018      	movs	r0, r3
    664a:	4b03      	ldr	r3, [pc, #12]	; (6658 <usart_read_buffer_job+0x44>)
    664c:	4798      	blx	r3
    664e:	0003      	movs	r3, r0
}
    6650:	0018      	movs	r0, r3
    6652:	46bd      	mov	sp, r7
    6654:	b004      	add	sp, #16
    6656:	bd80      	pop	{r7, pc}
    6658:	00006555 	.word	0x00006555

0000665c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    665c:	b580      	push	{r7, lr}
    665e:	b088      	sub	sp, #32
    6660:	af00      	add	r7, sp, #0
    6662:	0002      	movs	r2, r0
    6664:	1dfb      	adds	r3, r7, #7
    6666:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    6668:	1dfb      	adds	r3, r7, #7
    666a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    666c:	4ba3      	ldr	r3, [pc, #652]	; (68fc <_usart_interrupt_handler+0x2a0>)
    666e:	0092      	lsls	r2, r2, #2
    6670:	58d3      	ldr	r3, [r2, r3]
    6672:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6674:	69bb      	ldr	r3, [r7, #24]
    6676:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    6678:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    667a:	69bb      	ldr	r3, [r7, #24]
    667c:	0018      	movs	r0, r3
    667e:	4ba0      	ldr	r3, [pc, #640]	; (6900 <_usart_interrupt_handler+0x2a4>)
    6680:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6682:	697b      	ldr	r3, [r7, #20]
    6684:	7e1b      	ldrb	r3, [r3, #24]
    6686:	b2da      	uxtb	r2, r3
    6688:	2312      	movs	r3, #18
    668a:	18fb      	adds	r3, r7, r3
    668c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    668e:	697b      	ldr	r3, [r7, #20]
    6690:	7d9b      	ldrb	r3, [r3, #22]
    6692:	b2db      	uxtb	r3, r3
    6694:	b29a      	uxth	r2, r3
    6696:	2312      	movs	r3, #18
    6698:	18fb      	adds	r3, r7, r3
    669a:	2112      	movs	r1, #18
    669c:	1879      	adds	r1, r7, r1
    669e:	8809      	ldrh	r1, [r1, #0]
    66a0:	400a      	ands	r2, r1
    66a2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    66a4:	69bb      	ldr	r3, [r7, #24]
    66a6:	2230      	movs	r2, #48	; 0x30
    66a8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    66aa:	69ba      	ldr	r2, [r7, #24]
    66ac:	2131      	movs	r1, #49	; 0x31
    66ae:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    66b0:	4013      	ands	r3, r2
    66b2:	b2da      	uxtb	r2, r3
    66b4:	2310      	movs	r3, #16
    66b6:	18fb      	adds	r3, r7, r3
    66b8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    66ba:	2312      	movs	r3, #18
    66bc:	18fb      	adds	r3, r7, r3
    66be:	881b      	ldrh	r3, [r3, #0]
    66c0:	2201      	movs	r2, #1
    66c2:	4013      	ands	r3, r2
    66c4:	d044      	beq.n	6750 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    66c6:	69bb      	ldr	r3, [r7, #24]
    66c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    66ca:	b29b      	uxth	r3, r3
    66cc:	2b00      	cmp	r3, #0
    66ce:	d03c      	beq.n	674a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    66d0:	69bb      	ldr	r3, [r7, #24]
    66d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66d4:	781b      	ldrb	r3, [r3, #0]
    66d6:	b2da      	uxtb	r2, r3
    66d8:	231c      	movs	r3, #28
    66da:	18fb      	adds	r3, r7, r3
    66dc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    66de:	69bb      	ldr	r3, [r7, #24]
    66e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66e2:	1c5a      	adds	r2, r3, #1
    66e4:	69bb      	ldr	r3, [r7, #24]
    66e6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    66e8:	69bb      	ldr	r3, [r7, #24]
    66ea:	795b      	ldrb	r3, [r3, #5]
    66ec:	2b01      	cmp	r3, #1
    66ee:	d113      	bne.n	6718 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    66f0:	69bb      	ldr	r3, [r7, #24]
    66f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66f4:	781b      	ldrb	r3, [r3, #0]
    66f6:	b2db      	uxtb	r3, r3
    66f8:	021b      	lsls	r3, r3, #8
    66fa:	b21a      	sxth	r2, r3
    66fc:	231c      	movs	r3, #28
    66fe:	18fb      	adds	r3, r7, r3
    6700:	2100      	movs	r1, #0
    6702:	5e5b      	ldrsh	r3, [r3, r1]
    6704:	4313      	orrs	r3, r2
    6706:	b21a      	sxth	r2, r3
    6708:	231c      	movs	r3, #28
    670a:	18fb      	adds	r3, r7, r3
    670c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    670e:	69bb      	ldr	r3, [r7, #24]
    6710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6712:	1c5a      	adds	r2, r3, #1
    6714:	69bb      	ldr	r3, [r7, #24]
    6716:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    6718:	231c      	movs	r3, #28
    671a:	18fb      	adds	r3, r7, r3
    671c:	881b      	ldrh	r3, [r3, #0]
    671e:	05db      	lsls	r3, r3, #23
    6720:	0ddb      	lsrs	r3, r3, #23
    6722:	b29a      	uxth	r2, r3
    6724:	697b      	ldr	r3, [r7, #20]
    6726:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    6728:	69bb      	ldr	r3, [r7, #24]
    672a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    672c:	b29b      	uxth	r3, r3
    672e:	3b01      	subs	r3, #1
    6730:	b29b      	uxth	r3, r3
    6732:	69ba      	ldr	r2, [r7, #24]
    6734:	1c19      	adds	r1, r3, #0
    6736:	85d1      	strh	r1, [r2, #46]	; 0x2e
    6738:	2b00      	cmp	r3, #0
    673a:	d109      	bne.n	6750 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    673c:	697b      	ldr	r3, [r7, #20]
    673e:	2201      	movs	r2, #1
    6740:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6742:	697b      	ldr	r3, [r7, #20]
    6744:	2202      	movs	r2, #2
    6746:	759a      	strb	r2, [r3, #22]
    6748:	e002      	b.n	6750 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    674a:	697b      	ldr	r3, [r7, #20]
    674c:	2201      	movs	r2, #1
    674e:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6750:	2312      	movs	r3, #18
    6752:	18fb      	adds	r3, r7, r3
    6754:	881b      	ldrh	r3, [r3, #0]
    6756:	2202      	movs	r2, #2
    6758:	4013      	ands	r3, r2
    675a:	d011      	beq.n	6780 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    675c:	697b      	ldr	r3, [r7, #20]
    675e:	2202      	movs	r2, #2
    6760:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    6762:	69bb      	ldr	r3, [r7, #24]
    6764:	2233      	movs	r2, #51	; 0x33
    6766:	2100      	movs	r1, #0
    6768:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    676a:	2310      	movs	r3, #16
    676c:	18fb      	adds	r3, r7, r3
    676e:	881b      	ldrh	r3, [r3, #0]
    6770:	2201      	movs	r2, #1
    6772:	4013      	ands	r3, r2
    6774:	d004      	beq.n	6780 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6776:	69bb      	ldr	r3, [r7, #24]
    6778:	68db      	ldr	r3, [r3, #12]
    677a:	69ba      	ldr	r2, [r7, #24]
    677c:	0010      	movs	r0, r2
    677e:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6780:	2312      	movs	r3, #18
    6782:	18fb      	adds	r3, r7, r3
    6784:	881b      	ldrh	r3, [r3, #0]
    6786:	2204      	movs	r2, #4
    6788:	4013      	ands	r3, r2
    678a:	d100      	bne.n	678e <_usart_interrupt_handler+0x132>
    678c:	e0bd      	b.n	690a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    678e:	69bb      	ldr	r3, [r7, #24]
    6790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6792:	b29b      	uxth	r3, r3
    6794:	2b00      	cmp	r3, #0
    6796:	d100      	bne.n	679a <_usart_interrupt_handler+0x13e>
    6798:	e0b4      	b.n	6904 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    679a:	697b      	ldr	r3, [r7, #20]
    679c:	8b5b      	ldrh	r3, [r3, #26]
    679e:	b29b      	uxth	r3, r3
    67a0:	b2da      	uxtb	r2, r3
    67a2:	231f      	movs	r3, #31
    67a4:	18fb      	adds	r3, r7, r3
    67a6:	213f      	movs	r1, #63	; 0x3f
    67a8:	400a      	ands	r2, r1
    67aa:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    67ac:	231f      	movs	r3, #31
    67ae:	18fb      	adds	r3, r7, r3
    67b0:	781b      	ldrb	r3, [r3, #0]
    67b2:	2208      	movs	r2, #8
    67b4:	4013      	ands	r3, r2
    67b6:	d007      	beq.n	67c8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    67b8:	231f      	movs	r3, #31
    67ba:	18fb      	adds	r3, r7, r3
    67bc:	221f      	movs	r2, #31
    67be:	18ba      	adds	r2, r7, r2
    67c0:	7812      	ldrb	r2, [r2, #0]
    67c2:	2108      	movs	r1, #8
    67c4:	438a      	bics	r2, r1
    67c6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    67c8:	231f      	movs	r3, #31
    67ca:	18fb      	adds	r3, r7, r3
    67cc:	781b      	ldrb	r3, [r3, #0]
    67ce:	2b00      	cmp	r3, #0
    67d0:	d050      	beq.n	6874 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    67d2:	231f      	movs	r3, #31
    67d4:	18fb      	adds	r3, r7, r3
    67d6:	781b      	ldrb	r3, [r3, #0]
    67d8:	2202      	movs	r2, #2
    67da:	4013      	ands	r3, r2
    67dc:	d007      	beq.n	67ee <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    67de:	69bb      	ldr	r3, [r7, #24]
    67e0:	2232      	movs	r2, #50	; 0x32
    67e2:	211a      	movs	r1, #26
    67e4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    67e6:	697b      	ldr	r3, [r7, #20]
    67e8:	2202      	movs	r2, #2
    67ea:	835a      	strh	r2, [r3, #26]
    67ec:	e036      	b.n	685c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    67ee:	231f      	movs	r3, #31
    67f0:	18fb      	adds	r3, r7, r3
    67f2:	781b      	ldrb	r3, [r3, #0]
    67f4:	2204      	movs	r2, #4
    67f6:	4013      	ands	r3, r2
    67f8:	d007      	beq.n	680a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    67fa:	69bb      	ldr	r3, [r7, #24]
    67fc:	2232      	movs	r2, #50	; 0x32
    67fe:	211e      	movs	r1, #30
    6800:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6802:	697b      	ldr	r3, [r7, #20]
    6804:	2204      	movs	r2, #4
    6806:	835a      	strh	r2, [r3, #26]
    6808:	e028      	b.n	685c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    680a:	231f      	movs	r3, #31
    680c:	18fb      	adds	r3, r7, r3
    680e:	781b      	ldrb	r3, [r3, #0]
    6810:	2201      	movs	r2, #1
    6812:	4013      	ands	r3, r2
    6814:	d007      	beq.n	6826 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    6816:	69bb      	ldr	r3, [r7, #24]
    6818:	2232      	movs	r2, #50	; 0x32
    681a:	2113      	movs	r1, #19
    681c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    681e:	697b      	ldr	r3, [r7, #20]
    6820:	2201      	movs	r2, #1
    6822:	835a      	strh	r2, [r3, #26]
    6824:	e01a      	b.n	685c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6826:	231f      	movs	r3, #31
    6828:	18fb      	adds	r3, r7, r3
    682a:	781b      	ldrb	r3, [r3, #0]
    682c:	2210      	movs	r2, #16
    682e:	4013      	ands	r3, r2
    6830:	d007      	beq.n	6842 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    6832:	69bb      	ldr	r3, [r7, #24]
    6834:	2232      	movs	r2, #50	; 0x32
    6836:	2142      	movs	r1, #66	; 0x42
    6838:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    683a:	697b      	ldr	r3, [r7, #20]
    683c:	2210      	movs	r2, #16
    683e:	835a      	strh	r2, [r3, #26]
    6840:	e00c      	b.n	685c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6842:	231f      	movs	r3, #31
    6844:	18fb      	adds	r3, r7, r3
    6846:	781b      	ldrb	r3, [r3, #0]
    6848:	2220      	movs	r2, #32
    684a:	4013      	ands	r3, r2
    684c:	d006      	beq.n	685c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    684e:	69bb      	ldr	r3, [r7, #24]
    6850:	2232      	movs	r2, #50	; 0x32
    6852:	2141      	movs	r1, #65	; 0x41
    6854:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6856:	697b      	ldr	r3, [r7, #20]
    6858:	2220      	movs	r2, #32
    685a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    685c:	2310      	movs	r3, #16
    685e:	18fb      	adds	r3, r7, r3
    6860:	881b      	ldrh	r3, [r3, #0]
    6862:	2204      	movs	r2, #4
    6864:	4013      	ands	r3, r2
				if (callback_status
    6866:	d050      	beq.n	690a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6868:	69bb      	ldr	r3, [r7, #24]
    686a:	695b      	ldr	r3, [r3, #20]
    686c:	69ba      	ldr	r2, [r7, #24]
    686e:	0010      	movs	r0, r2
    6870:	4798      	blx	r3
    6872:	e04a      	b.n	690a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6874:	697b      	ldr	r3, [r7, #20]
    6876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6878:	b29a      	uxth	r2, r3
    687a:	230e      	movs	r3, #14
    687c:	18fb      	adds	r3, r7, r3
    687e:	05d2      	lsls	r2, r2, #23
    6880:	0dd2      	lsrs	r2, r2, #23
    6882:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6884:	69bb      	ldr	r3, [r7, #24]
    6886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6888:	220e      	movs	r2, #14
    688a:	18ba      	adds	r2, r7, r2
    688c:	8812      	ldrh	r2, [r2, #0]
    688e:	b2d2      	uxtb	r2, r2
    6890:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6892:	69bb      	ldr	r3, [r7, #24]
    6894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6896:	1c5a      	adds	r2, r3, #1
    6898:	69bb      	ldr	r3, [r7, #24]
    689a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    689c:	69bb      	ldr	r3, [r7, #24]
    689e:	795b      	ldrb	r3, [r3, #5]
    68a0:	2b01      	cmp	r3, #1
    68a2:	d10d      	bne.n	68c0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    68a4:	69bb      	ldr	r3, [r7, #24]
    68a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68a8:	220e      	movs	r2, #14
    68aa:	18ba      	adds	r2, r7, r2
    68ac:	8812      	ldrh	r2, [r2, #0]
    68ae:	0a12      	lsrs	r2, r2, #8
    68b0:	b292      	uxth	r2, r2
    68b2:	b2d2      	uxtb	r2, r2
    68b4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    68b6:	69bb      	ldr	r3, [r7, #24]
    68b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68ba:	1c5a      	adds	r2, r3, #1
    68bc:	69bb      	ldr	r3, [r7, #24]
    68be:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    68c0:	69bb      	ldr	r3, [r7, #24]
    68c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    68c4:	b29b      	uxth	r3, r3
    68c6:	3b01      	subs	r3, #1
    68c8:	b29b      	uxth	r3, r3
    68ca:	69ba      	ldr	r2, [r7, #24]
    68cc:	1c19      	adds	r1, r3, #0
    68ce:	8591      	strh	r1, [r2, #44]	; 0x2c
    68d0:	2b00      	cmp	r3, #0
    68d2:	d11a      	bne.n	690a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    68d4:	697b      	ldr	r3, [r7, #20]
    68d6:	2204      	movs	r2, #4
    68d8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    68da:	69bb      	ldr	r3, [r7, #24]
    68dc:	2232      	movs	r2, #50	; 0x32
    68de:	2100      	movs	r1, #0
    68e0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    68e2:	2310      	movs	r3, #16
    68e4:	18fb      	adds	r3, r7, r3
    68e6:	881b      	ldrh	r3, [r3, #0]
    68e8:	2202      	movs	r2, #2
    68ea:	4013      	ands	r3, r2
					if (callback_status
    68ec:	d00d      	beq.n	690a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    68ee:	69bb      	ldr	r3, [r7, #24]
    68f0:	691b      	ldr	r3, [r3, #16]
    68f2:	69ba      	ldr	r2, [r7, #24]
    68f4:	0010      	movs	r0, r2
    68f6:	4798      	blx	r3
    68f8:	e007      	b.n	690a <_usart_interrupt_handler+0x2ae>
    68fa:	46c0      	nop			; (mov r8, r8)
    68fc:	20000468 	.word	0x20000468
    6900:	00006531 	.word	0x00006531
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6904:	697b      	ldr	r3, [r7, #20]
    6906:	2204      	movs	r2, #4
    6908:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    690a:	2312      	movs	r3, #18
    690c:	18fb      	adds	r3, r7, r3
    690e:	881b      	ldrh	r3, [r3, #0]
    6910:	2210      	movs	r2, #16
    6912:	4013      	ands	r3, r2
    6914:	d010      	beq.n	6938 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6916:	697b      	ldr	r3, [r7, #20]
    6918:	2210      	movs	r2, #16
    691a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    691c:	697b      	ldr	r3, [r7, #20]
    691e:	2210      	movs	r2, #16
    6920:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6922:	2310      	movs	r3, #16
    6924:	18fb      	adds	r3, r7, r3
    6926:	881b      	ldrh	r3, [r3, #0]
    6928:	2210      	movs	r2, #16
    692a:	4013      	ands	r3, r2
    692c:	d004      	beq.n	6938 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    692e:	69bb      	ldr	r3, [r7, #24]
    6930:	69db      	ldr	r3, [r3, #28]
    6932:	69ba      	ldr	r2, [r7, #24]
    6934:	0010      	movs	r0, r2
    6936:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6938:	2312      	movs	r3, #18
    693a:	18fb      	adds	r3, r7, r3
    693c:	881b      	ldrh	r3, [r3, #0]
    693e:	2220      	movs	r2, #32
    6940:	4013      	ands	r3, r2
    6942:	d010      	beq.n	6966 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6944:	697b      	ldr	r3, [r7, #20]
    6946:	2220      	movs	r2, #32
    6948:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    694a:	697b      	ldr	r3, [r7, #20]
    694c:	2220      	movs	r2, #32
    694e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6950:	2310      	movs	r3, #16
    6952:	18fb      	adds	r3, r7, r3
    6954:	881b      	ldrh	r3, [r3, #0]
    6956:	2208      	movs	r2, #8
    6958:	4013      	ands	r3, r2
    695a:	d004      	beq.n	6966 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    695c:	69bb      	ldr	r3, [r7, #24]
    695e:	699b      	ldr	r3, [r3, #24]
    6960:	69ba      	ldr	r2, [r7, #24]
    6962:	0010      	movs	r0, r2
    6964:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6966:	2312      	movs	r3, #18
    6968:	18fb      	adds	r3, r7, r3
    696a:	881b      	ldrh	r3, [r3, #0]
    696c:	2208      	movs	r2, #8
    696e:	4013      	ands	r3, r2
    6970:	d010      	beq.n	6994 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6972:	697b      	ldr	r3, [r7, #20]
    6974:	2208      	movs	r2, #8
    6976:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6978:	697b      	ldr	r3, [r7, #20]
    697a:	2208      	movs	r2, #8
    697c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    697e:	2310      	movs	r3, #16
    6980:	18fb      	adds	r3, r7, r3
    6982:	881b      	ldrh	r3, [r3, #0]
    6984:	2220      	movs	r2, #32
    6986:	4013      	ands	r3, r2
    6988:	d004      	beq.n	6994 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    698a:	69bb      	ldr	r3, [r7, #24]
    698c:	6a1b      	ldr	r3, [r3, #32]
    698e:	69ba      	ldr	r2, [r7, #24]
    6990:	0010      	movs	r0, r2
    6992:	4798      	blx	r3
		}
	}
#endif
}
    6994:	46c0      	nop			; (mov r8, r8)
    6996:	46bd      	mov	sp, r7
    6998:	b008      	add	sp, #32
    699a:	bd80      	pop	{r7, pc}

0000699c <system_gclk_chan_get_config_defaults>:
{
    699c:	b580      	push	{r7, lr}
    699e:	b082      	sub	sp, #8
    69a0:	af00      	add	r7, sp, #0
    69a2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	2200      	movs	r2, #0
    69a8:	701a      	strb	r2, [r3, #0]
}
    69aa:	46c0      	nop			; (mov r8, r8)
    69ac:	46bd      	mov	sp, r7
    69ae:	b002      	add	sp, #8
    69b0:	bd80      	pop	{r7, pc}

000069b2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    69b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    69b4:	b08d      	sub	sp, #52	; 0x34
    69b6:	af00      	add	r7, sp, #0
    69b8:	60b8      	str	r0, [r7, #8]
    69ba:	60f9      	str	r1, [r7, #12]
    69bc:	603a      	str	r2, [r7, #0]
    69be:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    69c0:	2300      	movs	r3, #0
    69c2:	2400      	movs	r4, #0
    69c4:	623b      	str	r3, [r7, #32]
    69c6:	627c      	str	r4, [r7, #36]	; 0x24
    69c8:	2300      	movs	r3, #0
    69ca:	2400      	movs	r4, #0
    69cc:	61bb      	str	r3, [r7, #24]
    69ce:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    69d0:	233f      	movs	r3, #63	; 0x3f
    69d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    69d4:	e053      	b.n	6a7e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    69d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    69d8:	3b20      	subs	r3, #32
    69da:	2b00      	cmp	r3, #0
    69dc:	db04      	blt.n	69e8 <long_division+0x36>
    69de:	2201      	movs	r2, #1
    69e0:	409a      	lsls	r2, r3
    69e2:	0013      	movs	r3, r2
    69e4:	617b      	str	r3, [r7, #20]
    69e6:	e00b      	b.n	6a00 <long_division+0x4e>
    69e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    69ea:	2220      	movs	r2, #32
    69ec:	1ad3      	subs	r3, r2, r3
    69ee:	2201      	movs	r2, #1
    69f0:	40da      	lsrs	r2, r3
    69f2:	0013      	movs	r3, r2
    69f4:	2100      	movs	r1, #0
    69f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    69f8:	4091      	lsls	r1, r2
    69fa:	000a      	movs	r2, r1
    69fc:	4313      	orrs	r3, r2
    69fe:	617b      	str	r3, [r7, #20]
    6a00:	2201      	movs	r2, #1
    6a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a04:	409a      	lsls	r2, r3
    6a06:	0013      	movs	r3, r2
    6a08:	613b      	str	r3, [r7, #16]

		r = r << 1;
    6a0a:	69bb      	ldr	r3, [r7, #24]
    6a0c:	69fc      	ldr	r4, [r7, #28]
    6a0e:	18db      	adds	r3, r3, r3
    6a10:	4164      	adcs	r4, r4
    6a12:	61bb      	str	r3, [r7, #24]
    6a14:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    6a16:	68bb      	ldr	r3, [r7, #8]
    6a18:	693a      	ldr	r2, [r7, #16]
    6a1a:	401a      	ands	r2, r3
    6a1c:	0015      	movs	r5, r2
    6a1e:	68fb      	ldr	r3, [r7, #12]
    6a20:	697a      	ldr	r2, [r7, #20]
    6a22:	401a      	ands	r2, r3
    6a24:	0016      	movs	r6, r2
    6a26:	002b      	movs	r3, r5
    6a28:	4333      	orrs	r3, r6
    6a2a:	d007      	beq.n	6a3c <long_division+0x8a>
			r |= 0x01;
    6a2c:	69bb      	ldr	r3, [r7, #24]
    6a2e:	2201      	movs	r2, #1
    6a30:	4313      	orrs	r3, r2
    6a32:	61bb      	str	r3, [r7, #24]
    6a34:	69fb      	ldr	r3, [r7, #28]
    6a36:	2200      	movs	r2, #0
    6a38:	4313      	orrs	r3, r2
    6a3a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    6a3c:	687a      	ldr	r2, [r7, #4]
    6a3e:	69fb      	ldr	r3, [r7, #28]
    6a40:	429a      	cmp	r2, r3
    6a42:	d819      	bhi.n	6a78 <long_division+0xc6>
    6a44:	687a      	ldr	r2, [r7, #4]
    6a46:	69fb      	ldr	r3, [r7, #28]
    6a48:	429a      	cmp	r2, r3
    6a4a:	d103      	bne.n	6a54 <long_division+0xa2>
    6a4c:	683a      	ldr	r2, [r7, #0]
    6a4e:	69bb      	ldr	r3, [r7, #24]
    6a50:	429a      	cmp	r2, r3
    6a52:	d811      	bhi.n	6a78 <long_division+0xc6>
			r = r - d;
    6a54:	69b9      	ldr	r1, [r7, #24]
    6a56:	69fa      	ldr	r2, [r7, #28]
    6a58:	683b      	ldr	r3, [r7, #0]
    6a5a:	687c      	ldr	r4, [r7, #4]
    6a5c:	1ac9      	subs	r1, r1, r3
    6a5e:	41a2      	sbcs	r2, r4
    6a60:	000b      	movs	r3, r1
    6a62:	0014      	movs	r4, r2
    6a64:	61bb      	str	r3, [r7, #24]
    6a66:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    6a68:	6a3a      	ldr	r2, [r7, #32]
    6a6a:	693b      	ldr	r3, [r7, #16]
    6a6c:	4313      	orrs	r3, r2
    6a6e:	623b      	str	r3, [r7, #32]
    6a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6a72:	697b      	ldr	r3, [r7, #20]
    6a74:	4313      	orrs	r3, r2
    6a76:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    6a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a7a:	3b01      	subs	r3, #1
    6a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    6a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6a80:	2b00      	cmp	r3, #0
    6a82:	daa8      	bge.n	69d6 <long_division+0x24>
		}
	}

	return q;
    6a84:	6a3b      	ldr	r3, [r7, #32]
    6a86:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    6a88:	0018      	movs	r0, r3
    6a8a:	0021      	movs	r1, r4
    6a8c:	46bd      	mov	sp, r7
    6a8e:	b00d      	add	sp, #52	; 0x34
    6a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a92 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6a92:	b580      	push	{r7, lr}
    6a94:	b086      	sub	sp, #24
    6a96:	af00      	add	r7, sp, #0
    6a98:	60f8      	str	r0, [r7, #12]
    6a9a:	60b9      	str	r1, [r7, #8]
    6a9c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    6a9e:	2316      	movs	r3, #22
    6aa0:	18fb      	adds	r3, r7, r3
    6aa2:	2200      	movs	r2, #0
    6aa4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    6aa6:	68bb      	ldr	r3, [r7, #8]
    6aa8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6aaa:	68bb      	ldr	r3, [r7, #8]
    6aac:	085a      	lsrs	r2, r3, #1
    6aae:	68fb      	ldr	r3, [r7, #12]
    6ab0:	429a      	cmp	r2, r3
    6ab2:	d201      	bcs.n	6ab8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6ab4:	2340      	movs	r3, #64	; 0x40
    6ab6:	e026      	b.n	6b06 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    6ab8:	68bb      	ldr	r3, [r7, #8]
    6aba:	085b      	lsrs	r3, r3, #1
    6abc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    6abe:	e00a      	b.n	6ad6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    6ac0:	693a      	ldr	r2, [r7, #16]
    6ac2:	68fb      	ldr	r3, [r7, #12]
    6ac4:	1ad3      	subs	r3, r2, r3
    6ac6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    6ac8:	2316      	movs	r3, #22
    6aca:	18fb      	adds	r3, r7, r3
    6acc:	881a      	ldrh	r2, [r3, #0]
    6ace:	2316      	movs	r3, #22
    6ad0:	18fb      	adds	r3, r7, r3
    6ad2:	3201      	adds	r2, #1
    6ad4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    6ad6:	693a      	ldr	r2, [r7, #16]
    6ad8:	68fb      	ldr	r3, [r7, #12]
    6ada:	429a      	cmp	r2, r3
    6adc:	d2f0      	bcs.n	6ac0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    6ade:	2316      	movs	r3, #22
    6ae0:	18fb      	adds	r3, r7, r3
    6ae2:	2216      	movs	r2, #22
    6ae4:	18ba      	adds	r2, r7, r2
    6ae6:	8812      	ldrh	r2, [r2, #0]
    6ae8:	3a01      	subs	r2, #1
    6aea:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    6aec:	2316      	movs	r3, #22
    6aee:	18fb      	adds	r3, r7, r3
    6af0:	881b      	ldrh	r3, [r3, #0]
    6af2:	2bff      	cmp	r3, #255	; 0xff
    6af4:	d901      	bls.n	6afa <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6af6:	2340      	movs	r3, #64	; 0x40
    6af8:	e005      	b.n	6b06 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	2216      	movs	r2, #22
    6afe:	18ba      	adds	r2, r7, r2
    6b00:	8812      	ldrh	r2, [r2, #0]
    6b02:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    6b04:	2300      	movs	r3, #0
	}
}
    6b06:	0018      	movs	r0, r3
    6b08:	46bd      	mov	sp, r7
    6b0a:	b006      	add	sp, #24
    6b0c:	bd80      	pop	{r7, pc}
	...

00006b10 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b12:	b09d      	sub	sp, #116	; 0x74
    6b14:	af00      	add	r7, sp, #0
    6b16:	63f8      	str	r0, [r7, #60]	; 0x3c
    6b18:	63b9      	str	r1, [r7, #56]	; 0x38
    6b1a:	637a      	str	r2, [r7, #52]	; 0x34
    6b1c:	2233      	movs	r2, #51	; 0x33
    6b1e:	18ba      	adds	r2, r7, r2
    6b20:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    6b22:	2300      	movs	r3, #0
    6b24:	2400      	movs	r4, #0
    6b26:	65bb      	str	r3, [r7, #88]	; 0x58
    6b28:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    6b2a:	2300      	movs	r3, #0
    6b2c:	2400      	movs	r4, #0
    6b2e:	653b      	str	r3, [r7, #80]	; 0x50
    6b30:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    6b32:	2300      	movs	r3, #0
    6b34:	2400      	movs	r4, #0
    6b36:	66bb      	str	r3, [r7, #104]	; 0x68
    6b38:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    6b3a:	2300      	movs	r3, #0
    6b3c:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6b3e:	2358      	movs	r3, #88	; 0x58
    6b40:	2230      	movs	r2, #48	; 0x30
    6b42:	4694      	mov	ip, r2
    6b44:	44bc      	add	ip, r7
    6b46:	4463      	add	r3, ip
    6b48:	781a      	ldrb	r2, [r3, #0]
    6b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6b4c:	435a      	muls	r2, r3
    6b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6b50:	429a      	cmp	r2, r3
    6b52:	d901      	bls.n	6b58 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6b54:	2340      	movs	r3, #64	; 0x40
    6b56:	e0c6      	b.n	6ce6 <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6b58:	2333      	movs	r3, #51	; 0x33
    6b5a:	18fb      	adds	r3, r7, r3
    6b5c:	781b      	ldrb	r3, [r3, #0]
    6b5e:	2b00      	cmp	r3, #0
    6b60:	d13d      	bne.n	6bde <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6b62:	2358      	movs	r3, #88	; 0x58
    6b64:	2230      	movs	r2, #48	; 0x30
    6b66:	4694      	mov	ip, r2
    6b68:	44bc      	add	ip, r7
    6b6a:	4463      	add	r3, ip
    6b6c:	781b      	ldrb	r3, [r3, #0]
    6b6e:	b2db      	uxtb	r3, r3
    6b70:	613b      	str	r3, [r7, #16]
    6b72:	2300      	movs	r3, #0
    6b74:	617b      	str	r3, [r7, #20]
    6b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6b78:	60bb      	str	r3, [r7, #8]
    6b7a:	2300      	movs	r3, #0
    6b7c:	60fb      	str	r3, [r7, #12]
    6b7e:	4c5c      	ldr	r4, [pc, #368]	; (6cf0 <_sercom_get_async_baud_val+0x1e0>)
    6b80:	68ba      	ldr	r2, [r7, #8]
    6b82:	68fb      	ldr	r3, [r7, #12]
    6b84:	6938      	ldr	r0, [r7, #16]
    6b86:	6979      	ldr	r1, [r7, #20]
    6b88:	47a0      	blx	r4
    6b8a:	0003      	movs	r3, r0
    6b8c:	000c      	movs	r4, r1
    6b8e:	001b      	movs	r3, r3
    6b90:	64fb      	str	r3, [r7, #76]	; 0x4c
    6b92:	2300      	movs	r3, #0
    6b94:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    6b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6b98:	603b      	str	r3, [r7, #0]
    6b9a:	2300      	movs	r3, #0
    6b9c:	607b      	str	r3, [r7, #4]
    6b9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6ba0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6ba2:	683a      	ldr	r2, [r7, #0]
    6ba4:	687b      	ldr	r3, [r7, #4]
    6ba6:	4c53      	ldr	r4, [pc, #332]	; (6cf4 <_sercom_get_async_baud_val+0x1e4>)
    6ba8:	47a0      	blx	r4
    6baa:	0003      	movs	r3, r0
    6bac:	000c      	movs	r4, r1
    6bae:	65bb      	str	r3, [r7, #88]	; 0x58
    6bb0:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6bb2:	2100      	movs	r1, #0
    6bb4:	2201      	movs	r2, #1
    6bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6bb8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    6bba:	1ac9      	subs	r1, r1, r3
    6bbc:	41a2      	sbcs	r2, r4
    6bbe:	000b      	movs	r3, r1
    6bc0:	0014      	movs	r4, r2
    6bc2:	653b      	str	r3, [r7, #80]	; 0x50
    6bc4:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    6bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6bc8:	0c1b      	lsrs	r3, r3, #16
    6bca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6bcc:	0416      	lsls	r6, r2, #16
    6bce:	431e      	orrs	r6, r3
    6bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6bd2:	041d      	lsls	r5, r3, #16
    6bd4:	0033      	movs	r3, r6
    6bd6:	66bb      	str	r3, [r7, #104]	; 0x68
    6bd8:	2300      	movs	r3, #0
    6bda:	66fb      	str	r3, [r7, #108]	; 0x6c
    6bdc:	e07d      	b.n	6cda <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6bde:	2333      	movs	r3, #51	; 0x33
    6be0:	18fb      	adds	r3, r7, r3
    6be2:	781b      	ldrb	r3, [r3, #0]
    6be4:	2b01      	cmp	r3, #1
    6be6:	d000      	beq.n	6bea <_sercom_get_async_baud_val+0xda>
    6be8:	e077      	b.n	6cda <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    6bea:	2337      	movs	r3, #55	; 0x37
    6bec:	2230      	movs	r2, #48	; 0x30
    6bee:	4694      	mov	ip, r2
    6bf0:	44bc      	add	ip, r7
    6bf2:	4463      	add	r3, ip
    6bf4:	2200      	movs	r2, #0
    6bf6:	701a      	strb	r2, [r3, #0]
    6bf8:	e04e      	b.n	6c98 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    6bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    6bfe:	2300      	movs	r3, #0
    6c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6c06:	0003      	movs	r3, r0
    6c08:	0f5b      	lsrs	r3, r3, #29
    6c0a:	000a      	movs	r2, r1
    6c0c:	00d2      	lsls	r2, r2, #3
    6c0e:	4313      	orrs	r3, r2
    6c10:	64fb      	str	r3, [r7, #76]	; 0x4c
    6c12:	0003      	movs	r3, r0
    6c14:	00db      	lsls	r3, r3, #3
    6c16:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    6c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6c1a:	623b      	str	r3, [r7, #32]
    6c1c:	2300      	movs	r3, #0
    6c1e:	627b      	str	r3, [r7, #36]	; 0x24
    6c20:	2358      	movs	r3, #88	; 0x58
    6c22:	2230      	movs	r2, #48	; 0x30
    6c24:	4694      	mov	ip, r2
    6c26:	44bc      	add	ip, r7
    6c28:	4463      	add	r3, ip
    6c2a:	781b      	ldrb	r3, [r3, #0]
    6c2c:	b2db      	uxtb	r3, r3
    6c2e:	61bb      	str	r3, [r7, #24]
    6c30:	2300      	movs	r3, #0
    6c32:	61fb      	str	r3, [r7, #28]
    6c34:	4c2e      	ldr	r4, [pc, #184]	; (6cf0 <_sercom_get_async_baud_val+0x1e0>)
    6c36:	69ba      	ldr	r2, [r7, #24]
    6c38:	69fb      	ldr	r3, [r7, #28]
    6c3a:	6a38      	ldr	r0, [r7, #32]
    6c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6c3e:	47a0      	blx	r4
    6c40:	0003      	movs	r3, r0
    6c42:	000c      	movs	r4, r1
    6c44:	643b      	str	r3, [r7, #64]	; 0x40
    6c46:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    6c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6c4a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    6c4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6c4e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6c50:	001a      	movs	r2, r3
    6c52:	0023      	movs	r3, r4
    6c54:	4c27      	ldr	r4, [pc, #156]	; (6cf4 <_sercom_get_async_baud_val+0x1e4>)
    6c56:	47a0      	blx	r4
    6c58:	0003      	movs	r3, r0
    6c5a:	000c      	movs	r4, r1
    6c5c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    6c5e:	2337      	movs	r3, #55	; 0x37
    6c60:	2230      	movs	r2, #48	; 0x30
    6c62:	4694      	mov	ip, r2
    6c64:	44bc      	add	ip, r7
    6c66:	4463      	add	r3, ip
    6c68:	781b      	ldrb	r3, [r3, #0]
    6c6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6c6c:	1ad3      	subs	r3, r2, r3
    6c6e:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    6c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6c72:	08db      	lsrs	r3, r3, #3
    6c74:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    6c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6c78:	4a1f      	ldr	r2, [pc, #124]	; (6cf8 <_sercom_get_async_baud_val+0x1e8>)
    6c7a:	4293      	cmp	r3, r2
    6c7c:	d915      	bls.n	6caa <_sercom_get_async_baud_val+0x19a>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    6c7e:	2337      	movs	r3, #55	; 0x37
    6c80:	2230      	movs	r2, #48	; 0x30
    6c82:	4694      	mov	ip, r2
    6c84:	44bc      	add	ip, r7
    6c86:	4463      	add	r3, ip
    6c88:	781a      	ldrb	r2, [r3, #0]
    6c8a:	2337      	movs	r3, #55	; 0x37
    6c8c:	2130      	movs	r1, #48	; 0x30
    6c8e:	468c      	mov	ip, r1
    6c90:	44bc      	add	ip, r7
    6c92:	4463      	add	r3, ip
    6c94:	3201      	adds	r2, #1
    6c96:	701a      	strb	r2, [r3, #0]
    6c98:	2337      	movs	r3, #55	; 0x37
    6c9a:	2230      	movs	r2, #48	; 0x30
    6c9c:	4694      	mov	ip, r2
    6c9e:	44bc      	add	ip, r7
    6ca0:	4463      	add	r3, ip
    6ca2:	781b      	ldrb	r3, [r3, #0]
    6ca4:	2b07      	cmp	r3, #7
    6ca6:	d9a8      	bls.n	6bfa <_sercom_get_async_baud_val+0xea>
    6ca8:	e000      	b.n	6cac <_sercom_get_async_baud_val+0x19c>
				break;
    6caa:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    6cac:	2337      	movs	r3, #55	; 0x37
    6cae:	2230      	movs	r2, #48	; 0x30
    6cb0:	4694      	mov	ip, r2
    6cb2:	44bc      	add	ip, r7
    6cb4:	4463      	add	r3, ip
    6cb6:	781b      	ldrb	r3, [r3, #0]
    6cb8:	2b08      	cmp	r3, #8
    6cba:	d101      	bne.n	6cc0 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6cbc:	2340      	movs	r3, #64	; 0x40
    6cbe:	e012      	b.n	6ce6 <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    6cc0:	2337      	movs	r3, #55	; 0x37
    6cc2:	2230      	movs	r2, #48	; 0x30
    6cc4:	4694      	mov	ip, r2
    6cc6:	44bc      	add	ip, r7
    6cc8:	4463      	add	r3, ip
    6cca:	781b      	ldrb	r3, [r3, #0]
    6ccc:	035b      	lsls	r3, r3, #13
    6cce:	001a      	movs	r2, r3
    6cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6cd2:	4313      	orrs	r3, r2
    6cd4:	66bb      	str	r3, [r7, #104]	; 0x68
    6cd6:	2300      	movs	r3, #0
    6cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    6cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6cdc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    6cde:	b29a      	uxth	r2, r3
    6ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ce2:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    6ce4:	2300      	movs	r3, #0
}
    6ce6:	0018      	movs	r0, r3
    6ce8:	46bd      	mov	sp, r7
    6cea:	b01d      	add	sp, #116	; 0x74
    6cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cee:	46c0      	nop			; (mov r8, r8)
    6cf0:	000140cd 	.word	0x000140cd
    6cf4:	000069b3 	.word	0x000069b3
    6cf8:	00001fff 	.word	0x00001fff

00006cfc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6cfc:	b580      	push	{r7, lr}
    6cfe:	b084      	sub	sp, #16
    6d00:	af00      	add	r7, sp, #0
    6d02:	0002      	movs	r2, r0
    6d04:	1dfb      	adds	r3, r7, #7
    6d06:	701a      	strb	r2, [r3, #0]
    6d08:	1dbb      	adds	r3, r7, #6
    6d0a:	1c0a      	adds	r2, r1, #0
    6d0c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6d0e:	4b1a      	ldr	r3, [pc, #104]	; (6d78 <sercom_set_gclk_generator+0x7c>)
    6d10:	781b      	ldrb	r3, [r3, #0]
    6d12:	2201      	movs	r2, #1
    6d14:	4053      	eors	r3, r2
    6d16:	b2db      	uxtb	r3, r3
    6d18:	2b00      	cmp	r3, #0
    6d1a:	d103      	bne.n	6d24 <sercom_set_gclk_generator+0x28>
    6d1c:	1dbb      	adds	r3, r7, #6
    6d1e:	781b      	ldrb	r3, [r3, #0]
    6d20:	2b00      	cmp	r3, #0
    6d22:	d01b      	beq.n	6d5c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6d24:	230c      	movs	r3, #12
    6d26:	18fb      	adds	r3, r7, r3
    6d28:	0018      	movs	r0, r3
    6d2a:	4b14      	ldr	r3, [pc, #80]	; (6d7c <sercom_set_gclk_generator+0x80>)
    6d2c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    6d2e:	230c      	movs	r3, #12
    6d30:	18fb      	adds	r3, r7, r3
    6d32:	1dfa      	adds	r2, r7, #7
    6d34:	7812      	ldrb	r2, [r2, #0]
    6d36:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6d38:	230c      	movs	r3, #12
    6d3a:	18fb      	adds	r3, r7, r3
    6d3c:	0019      	movs	r1, r3
    6d3e:	2013      	movs	r0, #19
    6d40:	4b0f      	ldr	r3, [pc, #60]	; (6d80 <sercom_set_gclk_generator+0x84>)
    6d42:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6d44:	2013      	movs	r0, #19
    6d46:	4b0f      	ldr	r3, [pc, #60]	; (6d84 <sercom_set_gclk_generator+0x88>)
    6d48:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    6d4a:	4b0b      	ldr	r3, [pc, #44]	; (6d78 <sercom_set_gclk_generator+0x7c>)
    6d4c:	1dfa      	adds	r2, r7, #7
    6d4e:	7812      	ldrb	r2, [r2, #0]
    6d50:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    6d52:	4b09      	ldr	r3, [pc, #36]	; (6d78 <sercom_set_gclk_generator+0x7c>)
    6d54:	2201      	movs	r2, #1
    6d56:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    6d58:	2300      	movs	r3, #0
    6d5a:	e008      	b.n	6d6e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    6d5c:	4b06      	ldr	r3, [pc, #24]	; (6d78 <sercom_set_gclk_generator+0x7c>)
    6d5e:	785b      	ldrb	r3, [r3, #1]
    6d60:	1dfa      	adds	r2, r7, #7
    6d62:	7812      	ldrb	r2, [r2, #0]
    6d64:	429a      	cmp	r2, r3
    6d66:	d101      	bne.n	6d6c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    6d68:	2300      	movs	r3, #0
    6d6a:	e000      	b.n	6d6e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6d6c:	231d      	movs	r3, #29
}
    6d6e:	0018      	movs	r0, r3
    6d70:	46bd      	mov	sp, r7
    6d72:	b004      	add	sp, #16
    6d74:	bd80      	pop	{r7, pc}
    6d76:	46c0      	nop			; (mov r8, r8)
    6d78:	200001dc 	.word	0x200001dc
    6d7c:	0000699d 	.word	0x0000699d
    6d80:	00007b31 	.word	0x00007b31
    6d84:	00007b75 	.word	0x00007b75

00006d88 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    6d88:	b580      	push	{r7, lr}
    6d8a:	b082      	sub	sp, #8
    6d8c:	af00      	add	r7, sp, #0
    6d8e:	6078      	str	r0, [r7, #4]
    6d90:	000a      	movs	r2, r1
    6d92:	1cfb      	adds	r3, r7, #3
    6d94:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	4a4d      	ldr	r2, [pc, #308]	; (6ed0 <_sercom_get_default_pad+0x148>)
    6d9a:	4293      	cmp	r3, r2
    6d9c:	d03f      	beq.n	6e1e <_sercom_get_default_pad+0x96>
    6d9e:	4a4c      	ldr	r2, [pc, #304]	; (6ed0 <_sercom_get_default_pad+0x148>)
    6da0:	4293      	cmp	r3, r2
    6da2:	d806      	bhi.n	6db2 <_sercom_get_default_pad+0x2a>
    6da4:	4a4b      	ldr	r2, [pc, #300]	; (6ed4 <_sercom_get_default_pad+0x14c>)
    6da6:	4293      	cmp	r3, r2
    6da8:	d00f      	beq.n	6dca <_sercom_get_default_pad+0x42>
    6daa:	4a4b      	ldr	r2, [pc, #300]	; (6ed8 <_sercom_get_default_pad+0x150>)
    6dac:	4293      	cmp	r3, r2
    6dae:	d021      	beq.n	6df4 <_sercom_get_default_pad+0x6c>
    6db0:	e089      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6db2:	4a4a      	ldr	r2, [pc, #296]	; (6edc <_sercom_get_default_pad+0x154>)
    6db4:	4293      	cmp	r3, r2
    6db6:	d100      	bne.n	6dba <_sercom_get_default_pad+0x32>
    6db8:	e05b      	b.n	6e72 <_sercom_get_default_pad+0xea>
    6dba:	4a49      	ldr	r2, [pc, #292]	; (6ee0 <_sercom_get_default_pad+0x158>)
    6dbc:	4293      	cmp	r3, r2
    6dbe:	d100      	bne.n	6dc2 <_sercom_get_default_pad+0x3a>
    6dc0:	e06c      	b.n	6e9c <_sercom_get_default_pad+0x114>
    6dc2:	4a48      	ldr	r2, [pc, #288]	; (6ee4 <_sercom_get_default_pad+0x15c>)
    6dc4:	4293      	cmp	r3, r2
    6dc6:	d03f      	beq.n	6e48 <_sercom_get_default_pad+0xc0>
    6dc8:	e07d      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6dca:	1cfb      	adds	r3, r7, #3
    6dcc:	781b      	ldrb	r3, [r3, #0]
    6dce:	2b01      	cmp	r3, #1
    6dd0:	d00a      	beq.n	6de8 <_sercom_get_default_pad+0x60>
    6dd2:	dc02      	bgt.n	6dda <_sercom_get_default_pad+0x52>
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	d005      	beq.n	6de4 <_sercom_get_default_pad+0x5c>
    6dd8:	e075      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6dda:	2b02      	cmp	r3, #2
    6ddc:	d006      	beq.n	6dec <_sercom_get_default_pad+0x64>
    6dde:	2b03      	cmp	r3, #3
    6de0:	d006      	beq.n	6df0 <_sercom_get_default_pad+0x68>
    6de2:	e070      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6de4:	4b40      	ldr	r3, [pc, #256]	; (6ee8 <_sercom_get_default_pad+0x160>)
    6de6:	e06f      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6de8:	4b40      	ldr	r3, [pc, #256]	; (6eec <_sercom_get_default_pad+0x164>)
    6dea:	e06d      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6dec:	4b40      	ldr	r3, [pc, #256]	; (6ef0 <_sercom_get_default_pad+0x168>)
    6dee:	e06b      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6df0:	4b40      	ldr	r3, [pc, #256]	; (6ef4 <_sercom_get_default_pad+0x16c>)
    6df2:	e069      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6df4:	1cfb      	adds	r3, r7, #3
    6df6:	781b      	ldrb	r3, [r3, #0]
    6df8:	2b01      	cmp	r3, #1
    6dfa:	d00a      	beq.n	6e12 <_sercom_get_default_pad+0x8a>
    6dfc:	dc02      	bgt.n	6e04 <_sercom_get_default_pad+0x7c>
    6dfe:	2b00      	cmp	r3, #0
    6e00:	d005      	beq.n	6e0e <_sercom_get_default_pad+0x86>
    6e02:	e060      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e04:	2b02      	cmp	r3, #2
    6e06:	d006      	beq.n	6e16 <_sercom_get_default_pad+0x8e>
    6e08:	2b03      	cmp	r3, #3
    6e0a:	d006      	beq.n	6e1a <_sercom_get_default_pad+0x92>
    6e0c:	e05b      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e0e:	2303      	movs	r3, #3
    6e10:	e05a      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e12:	4b39      	ldr	r3, [pc, #228]	; (6ef8 <_sercom_get_default_pad+0x170>)
    6e14:	e058      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e16:	4b39      	ldr	r3, [pc, #228]	; (6efc <_sercom_get_default_pad+0x174>)
    6e18:	e056      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e1a:	4b39      	ldr	r3, [pc, #228]	; (6f00 <_sercom_get_default_pad+0x178>)
    6e1c:	e054      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e1e:	1cfb      	adds	r3, r7, #3
    6e20:	781b      	ldrb	r3, [r3, #0]
    6e22:	2b01      	cmp	r3, #1
    6e24:	d00a      	beq.n	6e3c <_sercom_get_default_pad+0xb4>
    6e26:	dc02      	bgt.n	6e2e <_sercom_get_default_pad+0xa6>
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d005      	beq.n	6e38 <_sercom_get_default_pad+0xb0>
    6e2c:	e04b      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e2e:	2b02      	cmp	r3, #2
    6e30:	d006      	beq.n	6e40 <_sercom_get_default_pad+0xb8>
    6e32:	2b03      	cmp	r3, #3
    6e34:	d006      	beq.n	6e44 <_sercom_get_default_pad+0xbc>
    6e36:	e046      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e38:	4b32      	ldr	r3, [pc, #200]	; (6f04 <_sercom_get_default_pad+0x17c>)
    6e3a:	e045      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e3c:	4b32      	ldr	r3, [pc, #200]	; (6f08 <_sercom_get_default_pad+0x180>)
    6e3e:	e043      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e40:	4b32      	ldr	r3, [pc, #200]	; (6f0c <_sercom_get_default_pad+0x184>)
    6e42:	e041      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e44:	4b32      	ldr	r3, [pc, #200]	; (6f10 <_sercom_get_default_pad+0x188>)
    6e46:	e03f      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e48:	1cfb      	adds	r3, r7, #3
    6e4a:	781b      	ldrb	r3, [r3, #0]
    6e4c:	2b01      	cmp	r3, #1
    6e4e:	d00a      	beq.n	6e66 <_sercom_get_default_pad+0xde>
    6e50:	dc02      	bgt.n	6e58 <_sercom_get_default_pad+0xd0>
    6e52:	2b00      	cmp	r3, #0
    6e54:	d005      	beq.n	6e62 <_sercom_get_default_pad+0xda>
    6e56:	e036      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e58:	2b02      	cmp	r3, #2
    6e5a:	d006      	beq.n	6e6a <_sercom_get_default_pad+0xe2>
    6e5c:	2b03      	cmp	r3, #3
    6e5e:	d006      	beq.n	6e6e <_sercom_get_default_pad+0xe6>
    6e60:	e031      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e62:	4b2c      	ldr	r3, [pc, #176]	; (6f14 <_sercom_get_default_pad+0x18c>)
    6e64:	e030      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e66:	4b2c      	ldr	r3, [pc, #176]	; (6f18 <_sercom_get_default_pad+0x190>)
    6e68:	e02e      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e6a:	4b2c      	ldr	r3, [pc, #176]	; (6f1c <_sercom_get_default_pad+0x194>)
    6e6c:	e02c      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e6e:	4b2c      	ldr	r3, [pc, #176]	; (6f20 <_sercom_get_default_pad+0x198>)
    6e70:	e02a      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e72:	1cfb      	adds	r3, r7, #3
    6e74:	781b      	ldrb	r3, [r3, #0]
    6e76:	2b01      	cmp	r3, #1
    6e78:	d00a      	beq.n	6e90 <_sercom_get_default_pad+0x108>
    6e7a:	dc02      	bgt.n	6e82 <_sercom_get_default_pad+0xfa>
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	d005      	beq.n	6e8c <_sercom_get_default_pad+0x104>
    6e80:	e021      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e82:	2b02      	cmp	r3, #2
    6e84:	d006      	beq.n	6e94 <_sercom_get_default_pad+0x10c>
    6e86:	2b03      	cmp	r3, #3
    6e88:	d006      	beq.n	6e98 <_sercom_get_default_pad+0x110>
    6e8a:	e01c      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6e8c:	4b25      	ldr	r3, [pc, #148]	; (6f24 <_sercom_get_default_pad+0x19c>)
    6e8e:	e01b      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e90:	4b25      	ldr	r3, [pc, #148]	; (6f28 <_sercom_get_default_pad+0x1a0>)
    6e92:	e019      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e94:	4b25      	ldr	r3, [pc, #148]	; (6f2c <_sercom_get_default_pad+0x1a4>)
    6e96:	e017      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e98:	4b25      	ldr	r3, [pc, #148]	; (6f30 <_sercom_get_default_pad+0x1a8>)
    6e9a:	e015      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6e9c:	1cfb      	adds	r3, r7, #3
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	2b01      	cmp	r3, #1
    6ea2:	d00a      	beq.n	6eba <_sercom_get_default_pad+0x132>
    6ea4:	dc02      	bgt.n	6eac <_sercom_get_default_pad+0x124>
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d005      	beq.n	6eb6 <_sercom_get_default_pad+0x12e>
    6eaa:	e00c      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6eac:	2b02      	cmp	r3, #2
    6eae:	d006      	beq.n	6ebe <_sercom_get_default_pad+0x136>
    6eb0:	2b03      	cmp	r3, #3
    6eb2:	d006      	beq.n	6ec2 <_sercom_get_default_pad+0x13a>
    6eb4:	e007      	b.n	6ec6 <_sercom_get_default_pad+0x13e>
    6eb6:	4b1f      	ldr	r3, [pc, #124]	; (6f34 <_sercom_get_default_pad+0x1ac>)
    6eb8:	e006      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6eba:	4b1f      	ldr	r3, [pc, #124]	; (6f38 <_sercom_get_default_pad+0x1b0>)
    6ebc:	e004      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6ebe:	4b1f      	ldr	r3, [pc, #124]	; (6f3c <_sercom_get_default_pad+0x1b4>)
    6ec0:	e002      	b.n	6ec8 <_sercom_get_default_pad+0x140>
    6ec2:	4b1f      	ldr	r3, [pc, #124]	; (6f40 <_sercom_get_default_pad+0x1b8>)
    6ec4:	e000      	b.n	6ec8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    6ec6:	2300      	movs	r3, #0
}
    6ec8:	0018      	movs	r0, r3
    6eca:	46bd      	mov	sp, r7
    6ecc:	b002      	add	sp, #8
    6ece:	bd80      	pop	{r7, pc}
    6ed0:	42001000 	.word	0x42001000
    6ed4:	42000800 	.word	0x42000800
    6ed8:	42000c00 	.word	0x42000c00
    6edc:	42001800 	.word	0x42001800
    6ee0:	42001c00 	.word	0x42001c00
    6ee4:	42001400 	.word	0x42001400
    6ee8:	00040003 	.word	0x00040003
    6eec:	00050003 	.word	0x00050003
    6ef0:	00060003 	.word	0x00060003
    6ef4:	00070003 	.word	0x00070003
    6ef8:	00010003 	.word	0x00010003
    6efc:	001e0003 	.word	0x001e0003
    6f00:	001f0003 	.word	0x001f0003
    6f04:	00080003 	.word	0x00080003
    6f08:	00090003 	.word	0x00090003
    6f0c:	000a0003 	.word	0x000a0003
    6f10:	000b0003 	.word	0x000b0003
    6f14:	00100003 	.word	0x00100003
    6f18:	00110003 	.word	0x00110003
    6f1c:	00120003 	.word	0x00120003
    6f20:	00130003 	.word	0x00130003
    6f24:	000c0003 	.word	0x000c0003
    6f28:	000d0003 	.word	0x000d0003
    6f2c:	000e0003 	.word	0x000e0003
    6f30:	000f0003 	.word	0x000f0003
    6f34:	00160003 	.word	0x00160003
    6f38:	00170003 	.word	0x00170003
    6f3c:	00180003 	.word	0x00180003
    6f40:	00190003 	.word	0x00190003

00006f44 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6f44:	b590      	push	{r4, r7, lr}
    6f46:	b08b      	sub	sp, #44	; 0x2c
    6f48:	af00      	add	r7, sp, #0
    6f4a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6f4c:	230c      	movs	r3, #12
    6f4e:	18fb      	adds	r3, r7, r3
    6f50:	4a0f      	ldr	r2, [pc, #60]	; (6f90 <_sercom_get_sercom_inst_index+0x4c>)
    6f52:	ca13      	ldmia	r2!, {r0, r1, r4}
    6f54:	c313      	stmia	r3!, {r0, r1, r4}
    6f56:	ca13      	ldmia	r2!, {r0, r1, r4}
    6f58:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6f5a:	2300      	movs	r3, #0
    6f5c:	627b      	str	r3, [r7, #36]	; 0x24
    6f5e:	e00e      	b.n	6f7e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6f60:	230c      	movs	r3, #12
    6f62:	18fb      	adds	r3, r7, r3
    6f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6f66:	0092      	lsls	r2, r2, #2
    6f68:	58d3      	ldr	r3, [r2, r3]
    6f6a:	001a      	movs	r2, r3
    6f6c:	687b      	ldr	r3, [r7, #4]
    6f6e:	429a      	cmp	r2, r3
    6f70:	d102      	bne.n	6f78 <_sercom_get_sercom_inst_index+0x34>
			return i;
    6f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f74:	b2db      	uxtb	r3, r3
    6f76:	e006      	b.n	6f86 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f7a:	3301      	adds	r3, #1
    6f7c:	627b      	str	r3, [r7, #36]	; 0x24
    6f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f80:	2b05      	cmp	r3, #5
    6f82:	d9ed      	bls.n	6f60 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6f84:	2300      	movs	r3, #0
}
    6f86:	0018      	movs	r0, r3
    6f88:	46bd      	mov	sp, r7
    6f8a:	b00b      	add	sp, #44	; 0x2c
    6f8c:	bd90      	pop	{r4, r7, pc}
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	00016fa4 	.word	0x00016fa4

00006f94 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    6f94:	b580      	push	{r7, lr}
    6f96:	b082      	sub	sp, #8
    6f98:	af00      	add	r7, sp, #0
    6f9a:	0002      	movs	r2, r0
    6f9c:	1dfb      	adds	r3, r7, #7
    6f9e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    6fa0:	46c0      	nop			; (mov r8, r8)
    6fa2:	46bd      	mov	sp, r7
    6fa4:	b002      	add	sp, #8
    6fa6:	bd80      	pop	{r7, pc}

00006fa8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	b084      	sub	sp, #16
    6fac:	af00      	add	r7, sp, #0
    6fae:	0002      	movs	r2, r0
    6fb0:	6039      	str	r1, [r7, #0]
    6fb2:	1dfb      	adds	r3, r7, #7
    6fb4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6fb6:	4b13      	ldr	r3, [pc, #76]	; (7004 <_sercom_set_handler+0x5c>)
    6fb8:	781b      	ldrb	r3, [r3, #0]
    6fba:	2201      	movs	r2, #1
    6fbc:	4053      	eors	r3, r2
    6fbe:	b2db      	uxtb	r3, r3
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d015      	beq.n	6ff0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6fc4:	2300      	movs	r3, #0
    6fc6:	60fb      	str	r3, [r7, #12]
    6fc8:	e00c      	b.n	6fe4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6fca:	4b0f      	ldr	r3, [pc, #60]	; (7008 <_sercom_set_handler+0x60>)
    6fcc:	68fa      	ldr	r2, [r7, #12]
    6fce:	0092      	lsls	r2, r2, #2
    6fd0:	490e      	ldr	r1, [pc, #56]	; (700c <_sercom_set_handler+0x64>)
    6fd2:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    6fd4:	4b0e      	ldr	r3, [pc, #56]	; (7010 <_sercom_set_handler+0x68>)
    6fd6:	68fa      	ldr	r2, [r7, #12]
    6fd8:	0092      	lsls	r2, r2, #2
    6fda:	2100      	movs	r1, #0
    6fdc:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6fde:	68fb      	ldr	r3, [r7, #12]
    6fe0:	3301      	adds	r3, #1
    6fe2:	60fb      	str	r3, [r7, #12]
    6fe4:	68fb      	ldr	r3, [r7, #12]
    6fe6:	2b05      	cmp	r3, #5
    6fe8:	d9ef      	bls.n	6fca <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    6fea:	4b06      	ldr	r3, [pc, #24]	; (7004 <_sercom_set_handler+0x5c>)
    6fec:	2201      	movs	r2, #1
    6fee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6ff0:	1dfb      	adds	r3, r7, #7
    6ff2:	781a      	ldrb	r2, [r3, #0]
    6ff4:	4b04      	ldr	r3, [pc, #16]	; (7008 <_sercom_set_handler+0x60>)
    6ff6:	0092      	lsls	r2, r2, #2
    6ff8:	6839      	ldr	r1, [r7, #0]
    6ffa:	50d1      	str	r1, [r2, r3]
}
    6ffc:	46c0      	nop			; (mov r8, r8)
    6ffe:	46bd      	mov	sp, r7
    7000:	b004      	add	sp, #16
    7002:	bd80      	pop	{r7, pc}
    7004:	200001de 	.word	0x200001de
    7008:	200001e0 	.word	0x200001e0
    700c:	00006f95 	.word	0x00006f95
    7010:	20000468 	.word	0x20000468

00007014 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7014:	b590      	push	{r4, r7, lr}
    7016:	b085      	sub	sp, #20
    7018:	af00      	add	r7, sp, #0
    701a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    701c:	2308      	movs	r3, #8
    701e:	18fb      	adds	r3, r7, r3
    7020:	4a0b      	ldr	r2, [pc, #44]	; (7050 <_sercom_get_interrupt_vector+0x3c>)
    7022:	6811      	ldr	r1, [r2, #0]
    7024:	6019      	str	r1, [r3, #0]
    7026:	8892      	ldrh	r2, [r2, #4]
    7028:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    702a:	230f      	movs	r3, #15
    702c:	18fc      	adds	r4, r7, r3
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	0018      	movs	r0, r3
    7032:	4b08      	ldr	r3, [pc, #32]	; (7054 <_sercom_get_interrupt_vector+0x40>)
    7034:	4798      	blx	r3
    7036:	0003      	movs	r3, r0
    7038:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    703a:	230f      	movs	r3, #15
    703c:	18fb      	adds	r3, r7, r3
    703e:	781b      	ldrb	r3, [r3, #0]
    7040:	2208      	movs	r2, #8
    7042:	18ba      	adds	r2, r7, r2
    7044:	5cd3      	ldrb	r3, [r2, r3]
    7046:	b25b      	sxtb	r3, r3
}
    7048:	0018      	movs	r0, r3
    704a:	46bd      	mov	sp, r7
    704c:	b005      	add	sp, #20
    704e:	bd90      	pop	{r4, r7, pc}
    7050:	00016fbc 	.word	0x00016fbc
    7054:	00006f45 	.word	0x00006f45

00007058 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7058:	b580      	push	{r7, lr}
    705a:	af00      	add	r7, sp, #0
    705c:	4b03      	ldr	r3, [pc, #12]	; (706c <SERCOM0_Handler+0x14>)
    705e:	681b      	ldr	r3, [r3, #0]
    7060:	2000      	movs	r0, #0
    7062:	4798      	blx	r3
    7064:	46c0      	nop			; (mov r8, r8)
    7066:	46bd      	mov	sp, r7
    7068:	bd80      	pop	{r7, pc}
    706a:	46c0      	nop			; (mov r8, r8)
    706c:	200001e0 	.word	0x200001e0

00007070 <SERCOM1_Handler>:
    7070:	b580      	push	{r7, lr}
    7072:	af00      	add	r7, sp, #0
    7074:	4b03      	ldr	r3, [pc, #12]	; (7084 <SERCOM1_Handler+0x14>)
    7076:	685b      	ldr	r3, [r3, #4]
    7078:	2001      	movs	r0, #1
    707a:	4798      	blx	r3
    707c:	46c0      	nop			; (mov r8, r8)
    707e:	46bd      	mov	sp, r7
    7080:	bd80      	pop	{r7, pc}
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	200001e0 	.word	0x200001e0

00007088 <SERCOM2_Handler>:
    7088:	b580      	push	{r7, lr}
    708a:	af00      	add	r7, sp, #0
    708c:	4b03      	ldr	r3, [pc, #12]	; (709c <SERCOM2_Handler+0x14>)
    708e:	689b      	ldr	r3, [r3, #8]
    7090:	2002      	movs	r0, #2
    7092:	4798      	blx	r3
    7094:	46c0      	nop			; (mov r8, r8)
    7096:	46bd      	mov	sp, r7
    7098:	bd80      	pop	{r7, pc}
    709a:	46c0      	nop			; (mov r8, r8)
    709c:	200001e0 	.word	0x200001e0

000070a0 <SERCOM3_Handler>:
    70a0:	b580      	push	{r7, lr}
    70a2:	af00      	add	r7, sp, #0
    70a4:	4b03      	ldr	r3, [pc, #12]	; (70b4 <SERCOM3_Handler+0x14>)
    70a6:	68db      	ldr	r3, [r3, #12]
    70a8:	2003      	movs	r0, #3
    70aa:	4798      	blx	r3
    70ac:	46c0      	nop			; (mov r8, r8)
    70ae:	46bd      	mov	sp, r7
    70b0:	bd80      	pop	{r7, pc}
    70b2:	46c0      	nop			; (mov r8, r8)
    70b4:	200001e0 	.word	0x200001e0

000070b8 <SERCOM4_Handler>:
    70b8:	b580      	push	{r7, lr}
    70ba:	af00      	add	r7, sp, #0
    70bc:	4b03      	ldr	r3, [pc, #12]	; (70cc <SERCOM4_Handler+0x14>)
    70be:	691b      	ldr	r3, [r3, #16]
    70c0:	2004      	movs	r0, #4
    70c2:	4798      	blx	r3
    70c4:	46c0      	nop			; (mov r8, r8)
    70c6:	46bd      	mov	sp, r7
    70c8:	bd80      	pop	{r7, pc}
    70ca:	46c0      	nop			; (mov r8, r8)
    70cc:	200001e0 	.word	0x200001e0

000070d0 <SERCOM5_Handler>:
    70d0:	b580      	push	{r7, lr}
    70d2:	af00      	add	r7, sp, #0
    70d4:	4b03      	ldr	r3, [pc, #12]	; (70e4 <SERCOM5_Handler+0x14>)
    70d6:	695b      	ldr	r3, [r3, #20]
    70d8:	2005      	movs	r0, #5
    70da:	4798      	blx	r3
    70dc:	46c0      	nop			; (mov r8, r8)
    70de:	46bd      	mov	sp, r7
    70e0:	bd80      	pop	{r7, pc}
    70e2:	46c0      	nop			; (mov r8, r8)
    70e4:	200001e0 	.word	0x200001e0

000070e8 <system_pinmux_get_config_defaults>:
{
    70e8:	b580      	push	{r7, lr}
    70ea:	b082      	sub	sp, #8
    70ec:	af00      	add	r7, sp, #0
    70ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    70f0:	687b      	ldr	r3, [r7, #4]
    70f2:	2280      	movs	r2, #128	; 0x80
    70f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    70f6:	687b      	ldr	r3, [r7, #4]
    70f8:	2200      	movs	r2, #0
    70fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	2201      	movs	r2, #1
    7100:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7102:	687b      	ldr	r3, [r7, #4]
    7104:	2200      	movs	r2, #0
    7106:	70da      	strb	r2, [r3, #3]
}
    7108:	46c0      	nop			; (mov r8, r8)
    710a:	46bd      	mov	sp, r7
    710c:	b002      	add	sp, #8
    710e:	bd80      	pop	{r7, pc}

00007110 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7110:	b580      	push	{r7, lr}
    7112:	b084      	sub	sp, #16
    7114:	af00      	add	r7, sp, #0
    7116:	0002      	movs	r2, r0
    7118:	6039      	str	r1, [r7, #0]
    711a:	1dfb      	adds	r3, r7, #7
    711c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    711e:	230c      	movs	r3, #12
    7120:	18fb      	adds	r3, r7, r3
    7122:	0018      	movs	r0, r3
    7124:	4b10      	ldr	r3, [pc, #64]	; (7168 <port_pin_set_config+0x58>)
    7126:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    7128:	230c      	movs	r3, #12
    712a:	18fb      	adds	r3, r7, r3
    712c:	2280      	movs	r2, #128	; 0x80
    712e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7130:	683b      	ldr	r3, [r7, #0]
    7132:	781a      	ldrb	r2, [r3, #0]
    7134:	230c      	movs	r3, #12
    7136:	18fb      	adds	r3, r7, r3
    7138:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    713a:	683b      	ldr	r3, [r7, #0]
    713c:	785a      	ldrb	r2, [r3, #1]
    713e:	230c      	movs	r3, #12
    7140:	18fb      	adds	r3, r7, r3
    7142:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    7144:	683b      	ldr	r3, [r7, #0]
    7146:	789a      	ldrb	r2, [r3, #2]
    7148:	230c      	movs	r3, #12
    714a:	18fb      	adds	r3, r7, r3
    714c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    714e:	230c      	movs	r3, #12
    7150:	18fa      	adds	r2, r7, r3
    7152:	1dfb      	adds	r3, r7, #7
    7154:	781b      	ldrb	r3, [r3, #0]
    7156:	0011      	movs	r1, r2
    7158:	0018      	movs	r0, r3
    715a:	4b04      	ldr	r3, [pc, #16]	; (716c <port_pin_set_config+0x5c>)
    715c:	4798      	blx	r3
}
    715e:	46c0      	nop			; (mov r8, r8)
    7160:	46bd      	mov	sp, r7
    7162:	b004      	add	sp, #16
    7164:	bd80      	pop	{r7, pc}
    7166:	46c0      	nop			; (mov r8, r8)
    7168:	000070e9 	.word	0x000070e9
    716c:	00007e1d 	.word	0x00007e1d

00007170 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7170:	b580      	push	{r7, lr}
    7172:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    7174:	46c0      	nop			; (mov r8, r8)
    7176:	46bd      	mov	sp, r7
    7178:	bd80      	pop	{r7, pc}
	...

0000717c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    717c:	b580      	push	{r7, lr}
    717e:	b082      	sub	sp, #8
    7180:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    7182:	4b10      	ldr	r3, [pc, #64]	; (71c4 <cpu_irq_enter_critical+0x48>)
    7184:	681b      	ldr	r3, [r3, #0]
    7186:	2b00      	cmp	r3, #0
    7188:	d112      	bne.n	71b0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    718a:	f3ef 8310 	mrs	r3, PRIMASK
    718e:	607b      	str	r3, [r7, #4]
  return(result);
    7190:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    7192:	2b00      	cmp	r3, #0
    7194:	d109      	bne.n	71aa <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    7196:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    7198:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    719c:	4b0a      	ldr	r3, [pc, #40]	; (71c8 <cpu_irq_enter_critical+0x4c>)
    719e:	2200      	movs	r2, #0
    71a0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    71a2:	4b0a      	ldr	r3, [pc, #40]	; (71cc <cpu_irq_enter_critical+0x50>)
    71a4:	2201      	movs	r2, #1
    71a6:	701a      	strb	r2, [r3, #0]
    71a8:	e002      	b.n	71b0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    71aa:	4b08      	ldr	r3, [pc, #32]	; (71cc <cpu_irq_enter_critical+0x50>)
    71ac:	2200      	movs	r2, #0
    71ae:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    71b0:	4b04      	ldr	r3, [pc, #16]	; (71c4 <cpu_irq_enter_critical+0x48>)
    71b2:	681b      	ldr	r3, [r3, #0]
    71b4:	1c5a      	adds	r2, r3, #1
    71b6:	4b03      	ldr	r3, [pc, #12]	; (71c4 <cpu_irq_enter_critical+0x48>)
    71b8:	601a      	str	r2, [r3, #0]
}
    71ba:	46c0      	nop			; (mov r8, r8)
    71bc:	46bd      	mov	sp, r7
    71be:	b002      	add	sp, #8
    71c0:	bd80      	pop	{r7, pc}
    71c2:	46c0      	nop			; (mov r8, r8)
    71c4:	200001f8 	.word	0x200001f8
    71c8:	20000000 	.word	0x20000000
    71cc:	200001fc 	.word	0x200001fc

000071d0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    71d0:	b580      	push	{r7, lr}
    71d2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    71d4:	4b0b      	ldr	r3, [pc, #44]	; (7204 <cpu_irq_leave_critical+0x34>)
    71d6:	681b      	ldr	r3, [r3, #0]
    71d8:	1e5a      	subs	r2, r3, #1
    71da:	4b0a      	ldr	r3, [pc, #40]	; (7204 <cpu_irq_leave_critical+0x34>)
    71dc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    71de:	4b09      	ldr	r3, [pc, #36]	; (7204 <cpu_irq_leave_critical+0x34>)
    71e0:	681b      	ldr	r3, [r3, #0]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d10a      	bne.n	71fc <cpu_irq_leave_critical+0x2c>
    71e6:	4b08      	ldr	r3, [pc, #32]	; (7208 <cpu_irq_leave_critical+0x38>)
    71e8:	781b      	ldrb	r3, [r3, #0]
    71ea:	b2db      	uxtb	r3, r3
    71ec:	2b00      	cmp	r3, #0
    71ee:	d005      	beq.n	71fc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    71f0:	4b06      	ldr	r3, [pc, #24]	; (720c <cpu_irq_leave_critical+0x3c>)
    71f2:	2201      	movs	r2, #1
    71f4:	701a      	strb	r2, [r3, #0]
    71f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    71fa:	b662      	cpsie	i
	}
}
    71fc:	46c0      	nop			; (mov r8, r8)
    71fe:	46bd      	mov	sp, r7
    7200:	bd80      	pop	{r7, pc}
    7202:	46c0      	nop			; (mov r8, r8)
    7204:	200001f8 	.word	0x200001f8
    7208:	200001fc 	.word	0x200001fc
    720c:	20000000 	.word	0x20000000

00007210 <system_gclk_gen_get_config_defaults>:
{
    7210:	b580      	push	{r7, lr}
    7212:	b082      	sub	sp, #8
    7214:	af00      	add	r7, sp, #0
    7216:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	2201      	movs	r2, #1
    721c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	2200      	movs	r2, #0
    7222:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	2206      	movs	r2, #6
    7228:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    722a:	687b      	ldr	r3, [r7, #4]
    722c:	2200      	movs	r2, #0
    722e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	2200      	movs	r2, #0
    7234:	725a      	strb	r2, [r3, #9]
}
    7236:	46c0      	nop			; (mov r8, r8)
    7238:	46bd      	mov	sp, r7
    723a:	b002      	add	sp, #8
    723c:	bd80      	pop	{r7, pc}

0000723e <system_clock_source_osc32k_get_config_defaults>:
{
    723e:	b580      	push	{r7, lr}
    7240:	b082      	sub	sp, #8
    7242:	af00      	add	r7, sp, #0
    7244:	6078      	str	r0, [r7, #4]
	config->enable_1khz_output  = true;
    7246:	687b      	ldr	r3, [r7, #4]
    7248:	2201      	movs	r2, #1
    724a:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	2201      	movs	r2, #1
    7250:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	2200      	movs	r2, #0
    7256:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	2201      	movs	r2, #1
    725c:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	2207      	movs	r2, #7
    7262:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	2200      	movs	r2, #0
    7268:	715a      	strb	r2, [r3, #5]
}
    726a:	46c0      	nop			; (mov r8, r8)
    726c:	46bd      	mov	sp, r7
    726e:	b002      	add	sp, #8
    7270:	bd80      	pop	{r7, pc}

00007272 <system_clock_source_osc8m_get_config_defaults>:
{
    7272:	b580      	push	{r7, lr}
    7274:	b082      	sub	sp, #8
    7276:	af00      	add	r7, sp, #0
    7278:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	2203      	movs	r2, #3
    727e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    7280:	687b      	ldr	r3, [r7, #4]
    7282:	2200      	movs	r2, #0
    7284:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	2201      	movs	r2, #1
    728a:	709a      	strb	r2, [r3, #2]
}
    728c:	46c0      	nop			; (mov r8, r8)
    728e:	46bd      	mov	sp, r7
    7290:	b002      	add	sp, #8
    7292:	bd80      	pop	{r7, pc}

00007294 <system_cpu_clock_set_divider>:
{
    7294:	b580      	push	{r7, lr}
    7296:	b082      	sub	sp, #8
    7298:	af00      	add	r7, sp, #0
    729a:	0002      	movs	r2, r0
    729c:	1dfb      	adds	r3, r7, #7
    729e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    72a0:	4a03      	ldr	r2, [pc, #12]	; (72b0 <system_cpu_clock_set_divider+0x1c>)
    72a2:	1dfb      	adds	r3, r7, #7
    72a4:	781b      	ldrb	r3, [r3, #0]
    72a6:	7213      	strb	r3, [r2, #8]
}
    72a8:	46c0      	nop			; (mov r8, r8)
    72aa:	46bd      	mov	sp, r7
    72ac:	b002      	add	sp, #8
    72ae:	bd80      	pop	{r7, pc}
    72b0:	40000400 	.word	0x40000400

000072b4 <system_apb_clock_set_divider>:
{
    72b4:	b580      	push	{r7, lr}
    72b6:	b082      	sub	sp, #8
    72b8:	af00      	add	r7, sp, #0
    72ba:	0002      	movs	r2, r0
    72bc:	1dfb      	adds	r3, r7, #7
    72be:	701a      	strb	r2, [r3, #0]
    72c0:	1dbb      	adds	r3, r7, #6
    72c2:	1c0a      	adds	r2, r1, #0
    72c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    72c6:	1dfb      	adds	r3, r7, #7
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	2b01      	cmp	r3, #1
    72cc:	d008      	beq.n	72e0 <system_apb_clock_set_divider+0x2c>
    72ce:	2b02      	cmp	r3, #2
    72d0:	d00b      	beq.n	72ea <system_apb_clock_set_divider+0x36>
    72d2:	2b00      	cmp	r3, #0
    72d4:	d10e      	bne.n	72f4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    72d6:	4a0b      	ldr	r2, [pc, #44]	; (7304 <system_apb_clock_set_divider+0x50>)
    72d8:	1dbb      	adds	r3, r7, #6
    72da:	781b      	ldrb	r3, [r3, #0]
    72dc:	7253      	strb	r3, [r2, #9]
			break;
    72de:	e00b      	b.n	72f8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    72e0:	4a08      	ldr	r2, [pc, #32]	; (7304 <system_apb_clock_set_divider+0x50>)
    72e2:	1dbb      	adds	r3, r7, #6
    72e4:	781b      	ldrb	r3, [r3, #0]
    72e6:	7293      	strb	r3, [r2, #10]
			break;
    72e8:	e006      	b.n	72f8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    72ea:	4a06      	ldr	r2, [pc, #24]	; (7304 <system_apb_clock_set_divider+0x50>)
    72ec:	1dbb      	adds	r3, r7, #6
    72ee:	781b      	ldrb	r3, [r3, #0]
    72f0:	72d3      	strb	r3, [r2, #11]
			break;
    72f2:	e001      	b.n	72f8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    72f4:	2317      	movs	r3, #23
    72f6:	e000      	b.n	72fa <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    72f8:	2300      	movs	r3, #0
}
    72fa:	0018      	movs	r0, r3
    72fc:	46bd      	mov	sp, r7
    72fe:	b002      	add	sp, #8
    7300:	bd80      	pop	{r7, pc}
    7302:	46c0      	nop			; (mov r8, r8)
    7304:	40000400 	.word	0x40000400

00007308 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    7308:	b580      	push	{r7, lr}
    730a:	b082      	sub	sp, #8
    730c:	af00      	add	r7, sp, #0
    730e:	0002      	movs	r2, r0
    7310:	1dfb      	adds	r3, r7, #7
    7312:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7314:	4a08      	ldr	r2, [pc, #32]	; (7338 <system_flash_set_waitstates+0x30>)
    7316:	1dfb      	adds	r3, r7, #7
    7318:	781b      	ldrb	r3, [r3, #0]
    731a:	210f      	movs	r1, #15
    731c:	400b      	ands	r3, r1
    731e:	b2d9      	uxtb	r1, r3
    7320:	6853      	ldr	r3, [r2, #4]
    7322:	200f      	movs	r0, #15
    7324:	4001      	ands	r1, r0
    7326:	0049      	lsls	r1, r1, #1
    7328:	201e      	movs	r0, #30
    732a:	4383      	bics	r3, r0
    732c:	430b      	orrs	r3, r1
    732e:	6053      	str	r3, [r2, #4]
}
    7330:	46c0      	nop			; (mov r8, r8)
    7332:	46bd      	mov	sp, r7
    7334:	b002      	add	sp, #8
    7336:	bd80      	pop	{r7, pc}
    7338:	41004000 	.word	0x41004000

0000733c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    733c:	b580      	push	{r7, lr}
    733e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7340:	46c0      	nop			; (mov r8, r8)
    7342:	4b04      	ldr	r3, [pc, #16]	; (7354 <_system_dfll_wait_for_sync+0x18>)
    7344:	68db      	ldr	r3, [r3, #12]
    7346:	2210      	movs	r2, #16
    7348:	4013      	ands	r3, r2
    734a:	d0fa      	beq.n	7342 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    734c:	46c0      	nop			; (mov r8, r8)
    734e:	46bd      	mov	sp, r7
    7350:	bd80      	pop	{r7, pc}
    7352:	46c0      	nop			; (mov r8, r8)
    7354:	40000800 	.word	0x40000800

00007358 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    7358:	b580      	push	{r7, lr}
    735a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    735c:	4b0c      	ldr	r3, [pc, #48]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    735e:	2202      	movs	r2, #2
    7360:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7362:	4b0c      	ldr	r3, [pc, #48]	; (7394 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    7364:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7366:	4a0a      	ldr	r2, [pc, #40]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7368:	4b0b      	ldr	r3, [pc, #44]	; (7398 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    736a:	689b      	ldr	r3, [r3, #8]
    736c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    736e:	4a08      	ldr	r2, [pc, #32]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7370:	4b09      	ldr	r3, [pc, #36]	; (7398 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7372:	685b      	ldr	r3, [r3, #4]
    7374:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    7376:	4b06      	ldr	r3, [pc, #24]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7378:	2200      	movs	r2, #0
    737a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    737c:	4b05      	ldr	r3, [pc, #20]	; (7394 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    737e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7380:	4a03      	ldr	r2, [pc, #12]	; (7390 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    7382:	4b05      	ldr	r3, [pc, #20]	; (7398 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    7384:	681b      	ldr	r3, [r3, #0]
    7386:	b29b      	uxth	r3, r3
    7388:	8493      	strh	r3, [r2, #36]	; 0x24
}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	46bd      	mov	sp, r7
    738e:	bd80      	pop	{r7, pc}
    7390:	40000800 	.word	0x40000800
    7394:	0000733d 	.word	0x0000733d
    7398:	20000200 	.word	0x20000200

0000739c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    739c:	b580      	push	{r7, lr}
    739e:	b082      	sub	sp, #8
    73a0:	af00      	add	r7, sp, #0
    73a2:	0002      	movs	r2, r0
    73a4:	1dfb      	adds	r3, r7, #7
    73a6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    73a8:	1dfb      	adds	r3, r7, #7
    73aa:	781b      	ldrb	r3, [r3, #0]
    73ac:	2b08      	cmp	r3, #8
    73ae:	d840      	bhi.n	7432 <system_clock_source_get_hz+0x96>
    73b0:	009a      	lsls	r2, r3, #2
    73b2:	4b22      	ldr	r3, [pc, #136]	; (743c <system_clock_source_get_hz+0xa0>)
    73b4:	18d3      	adds	r3, r2, r3
    73b6:	681b      	ldr	r3, [r3, #0]
    73b8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    73ba:	4b21      	ldr	r3, [pc, #132]	; (7440 <system_clock_source_get_hz+0xa4>)
    73bc:	691b      	ldr	r3, [r3, #16]
    73be:	e039      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    73c0:	4b20      	ldr	r3, [pc, #128]	; (7444 <system_clock_source_get_hz+0xa8>)
    73c2:	6a1b      	ldr	r3, [r3, #32]
    73c4:	059b      	lsls	r3, r3, #22
    73c6:	0f9b      	lsrs	r3, r3, #30
    73c8:	b2db      	uxtb	r3, r3
    73ca:	001a      	movs	r2, r3
    73cc:	4b1e      	ldr	r3, [pc, #120]	; (7448 <system_clock_source_get_hz+0xac>)
    73ce:	40d3      	lsrs	r3, r2
    73d0:	e030      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    73d2:	2380      	movs	r3, #128	; 0x80
    73d4:	021b      	lsls	r3, r3, #8
    73d6:	e02d      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    73d8:	2380      	movs	r3, #128	; 0x80
    73da:	021b      	lsls	r3, r3, #8
    73dc:	e02a      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    73de:	4b18      	ldr	r3, [pc, #96]	; (7440 <system_clock_source_get_hz+0xa4>)
    73e0:	695b      	ldr	r3, [r3, #20]
    73e2:	e027      	b.n	7434 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    73e4:	4b16      	ldr	r3, [pc, #88]	; (7440 <system_clock_source_get_hz+0xa4>)
    73e6:	681b      	ldr	r3, [r3, #0]
    73e8:	2202      	movs	r2, #2
    73ea:	4013      	ands	r3, r2
    73ec:	d101      	bne.n	73f2 <system_clock_source_get_hz+0x56>
			return 0;
    73ee:	2300      	movs	r3, #0
    73f0:	e020      	b.n	7434 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    73f2:	4b16      	ldr	r3, [pc, #88]	; (744c <system_clock_source_get_hz+0xb0>)
    73f4:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    73f6:	4b12      	ldr	r3, [pc, #72]	; (7440 <system_clock_source_get_hz+0xa4>)
    73f8:	681b      	ldr	r3, [r3, #0]
    73fa:	2204      	movs	r2, #4
    73fc:	4013      	ands	r3, r2
    73fe:	d009      	beq.n	7414 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7400:	2000      	movs	r0, #0
    7402:	4b13      	ldr	r3, [pc, #76]	; (7450 <system_clock_source_get_hz+0xb4>)
    7404:	4798      	blx	r3
    7406:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    7408:	4b0d      	ldr	r3, [pc, #52]	; (7440 <system_clock_source_get_hz+0xa4>)
    740a:	689b      	ldr	r3, [r3, #8]
    740c:	041b      	lsls	r3, r3, #16
    740e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7410:	4353      	muls	r3, r2
    7412:	e00f      	b.n	7434 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    7414:	4b0f      	ldr	r3, [pc, #60]	; (7454 <system_clock_source_get_hz+0xb8>)
    7416:	e00d      	b.n	7434 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7418:	4a0a      	ldr	r2, [pc, #40]	; (7444 <system_clock_source_get_hz+0xa8>)
    741a:	2350      	movs	r3, #80	; 0x50
    741c:	5cd3      	ldrb	r3, [r2, r3]
    741e:	b2db      	uxtb	r3, r3
    7420:	001a      	movs	r2, r3
    7422:	2304      	movs	r3, #4
    7424:	4013      	ands	r3, r2
    7426:	d101      	bne.n	742c <system_clock_source_get_hz+0x90>
			return 0;
    7428:	2300      	movs	r3, #0
    742a:	e003      	b.n	7434 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    742c:	4b04      	ldr	r3, [pc, #16]	; (7440 <system_clock_source_get_hz+0xa4>)
    742e:	68db      	ldr	r3, [r3, #12]
    7430:	e000      	b.n	7434 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    7432:	2300      	movs	r3, #0
	}
}
    7434:	0018      	movs	r0, r3
    7436:	46bd      	mov	sp, r7
    7438:	b002      	add	sp, #8
    743a:	bd80      	pop	{r7, pc}
    743c:	00016fc4 	.word	0x00016fc4
    7440:	20000200 	.word	0x20000200
    7444:	40000800 	.word	0x40000800
    7448:	007a1200 	.word	0x007a1200
    744c:	0000733d 	.word	0x0000733d
    7450:	00007c55 	.word	0x00007c55
    7454:	02dc6c00 	.word	0x02dc6c00

00007458 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7458:	b580      	push	{r7, lr}
    745a:	b084      	sub	sp, #16
    745c:	af00      	add	r7, sp, #0
    745e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7460:	4b1a      	ldr	r3, [pc, #104]	; (74cc <system_clock_source_osc8m_set_config+0x74>)
    7462:	6a1b      	ldr	r3, [r3, #32]
    7464:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7466:	687b      	ldr	r3, [r7, #4]
    7468:	781b      	ldrb	r3, [r3, #0]
    746a:	1c1a      	adds	r2, r3, #0
    746c:	2303      	movs	r3, #3
    746e:	4013      	ands	r3, r2
    7470:	b2da      	uxtb	r2, r3
    7472:	230d      	movs	r3, #13
    7474:	18fb      	adds	r3, r7, r3
    7476:	2103      	movs	r1, #3
    7478:	400a      	ands	r2, r1
    747a:	0010      	movs	r0, r2
    747c:	781a      	ldrb	r2, [r3, #0]
    747e:	2103      	movs	r1, #3
    7480:	438a      	bics	r2, r1
    7482:	1c11      	adds	r1, r2, #0
    7484:	1c02      	adds	r2, r0, #0
    7486:	430a      	orrs	r2, r1
    7488:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	789a      	ldrb	r2, [r3, #2]
    748e:	230c      	movs	r3, #12
    7490:	18fb      	adds	r3, r7, r3
    7492:	01d0      	lsls	r0, r2, #7
    7494:	781a      	ldrb	r2, [r3, #0]
    7496:	217f      	movs	r1, #127	; 0x7f
    7498:	400a      	ands	r2, r1
    749a:	1c11      	adds	r1, r2, #0
    749c:	1c02      	adds	r2, r0, #0
    749e:	430a      	orrs	r2, r1
    74a0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    74a2:	687b      	ldr	r3, [r7, #4]
    74a4:	785a      	ldrb	r2, [r3, #1]
    74a6:	230c      	movs	r3, #12
    74a8:	18fb      	adds	r3, r7, r3
    74aa:	2101      	movs	r1, #1
    74ac:	400a      	ands	r2, r1
    74ae:	0190      	lsls	r0, r2, #6
    74b0:	781a      	ldrb	r2, [r3, #0]
    74b2:	2140      	movs	r1, #64	; 0x40
    74b4:	438a      	bics	r2, r1
    74b6:	1c11      	adds	r1, r2, #0
    74b8:	1c02      	adds	r2, r0, #0
    74ba:	430a      	orrs	r2, r1
    74bc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    74be:	4b03      	ldr	r3, [pc, #12]	; (74cc <system_clock_source_osc8m_set_config+0x74>)
    74c0:	68fa      	ldr	r2, [r7, #12]
    74c2:	621a      	str	r2, [r3, #32]
}
    74c4:	46c0      	nop			; (mov r8, r8)
    74c6:	46bd      	mov	sp, r7
    74c8:	b004      	add	sp, #16
    74ca:	bd80      	pop	{r7, pc}
    74cc:	40000800 	.word	0x40000800

000074d0 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    74d0:	b580      	push	{r7, lr}
    74d2:	b084      	sub	sp, #16
    74d4:	af00      	add	r7, sp, #0
    74d6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    74d8:	4b2f      	ldr	r3, [pc, #188]	; (7598 <system_clock_source_osc32k_set_config+0xc8>)
    74da:	699b      	ldr	r3, [r3, #24]
    74dc:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    74de:	687b      	ldr	r3, [r7, #4]
    74e0:	785a      	ldrb	r2, [r3, #1]
    74e2:	230c      	movs	r3, #12
    74e4:	18fb      	adds	r3, r7, r3
    74e6:	2101      	movs	r1, #1
    74e8:	400a      	ands	r2, r1
    74ea:	00d0      	lsls	r0, r2, #3
    74ec:	781a      	ldrb	r2, [r3, #0]
    74ee:	2108      	movs	r1, #8
    74f0:	438a      	bics	r2, r1
    74f2:	1c11      	adds	r1, r2, #0
    74f4:	1c02      	adds	r2, r0, #0
    74f6:	430a      	orrs	r2, r1
    74f8:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    74fa:	687b      	ldr	r3, [r7, #4]
    74fc:	789a      	ldrb	r2, [r3, #2]
    74fe:	230c      	movs	r3, #12
    7500:	18fb      	adds	r3, r7, r3
    7502:	2101      	movs	r1, #1
    7504:	400a      	ands	r2, r1
    7506:	0090      	lsls	r0, r2, #2
    7508:	781a      	ldrb	r2, [r3, #0]
    750a:	2104      	movs	r1, #4
    750c:	438a      	bics	r2, r1
    750e:	1c11      	adds	r1, r2, #0
    7510:	1c02      	adds	r2, r0, #0
    7512:	430a      	orrs	r2, r1
    7514:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    7516:	687b      	ldr	r3, [r7, #4]
    7518:	781b      	ldrb	r3, [r3, #0]
    751a:	1c1a      	adds	r2, r3, #0
    751c:	2307      	movs	r3, #7
    751e:	4013      	ands	r3, r2
    7520:	b2da      	uxtb	r2, r3
    7522:	230d      	movs	r3, #13
    7524:	18fb      	adds	r3, r7, r3
    7526:	2107      	movs	r1, #7
    7528:	400a      	ands	r2, r1
    752a:	0010      	movs	r0, r2
    752c:	781a      	ldrb	r2, [r3, #0]
    752e:	2107      	movs	r1, #7
    7530:	438a      	bics	r2, r1
    7532:	1c11      	adds	r1, r2, #0
    7534:	1c02      	adds	r2, r0, #0
    7536:	430a      	orrs	r2, r1
    7538:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    753a:	687b      	ldr	r3, [r7, #4]
    753c:	791a      	ldrb	r2, [r3, #4]
    753e:	230c      	movs	r3, #12
    7540:	18fb      	adds	r3, r7, r3
    7542:	01d0      	lsls	r0, r2, #7
    7544:	781a      	ldrb	r2, [r3, #0]
    7546:	217f      	movs	r1, #127	; 0x7f
    7548:	400a      	ands	r2, r1
    754a:	1c11      	adds	r1, r2, #0
    754c:	1c02      	adds	r2, r0, #0
    754e:	430a      	orrs	r2, r1
    7550:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7552:	687b      	ldr	r3, [r7, #4]
    7554:	78da      	ldrb	r2, [r3, #3]
    7556:	230c      	movs	r3, #12
    7558:	18fb      	adds	r3, r7, r3
    755a:	2101      	movs	r1, #1
    755c:	400a      	ands	r2, r1
    755e:	0190      	lsls	r0, r2, #6
    7560:	781a      	ldrb	r2, [r3, #0]
    7562:	2140      	movs	r1, #64	; 0x40
    7564:	438a      	bics	r2, r1
    7566:	1c11      	adds	r1, r2, #0
    7568:	1c02      	adds	r2, r0, #0
    756a:	430a      	orrs	r2, r1
    756c:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    756e:	687b      	ldr	r3, [r7, #4]
    7570:	795a      	ldrb	r2, [r3, #5]
    7572:	230d      	movs	r3, #13
    7574:	18fb      	adds	r3, r7, r3
    7576:	2101      	movs	r1, #1
    7578:	400a      	ands	r2, r1
    757a:	0110      	lsls	r0, r2, #4
    757c:	781a      	ldrb	r2, [r3, #0]
    757e:	2110      	movs	r1, #16
    7580:	438a      	bics	r2, r1
    7582:	1c11      	adds	r1, r2, #0
    7584:	1c02      	adds	r2, r0, #0
    7586:	430a      	orrs	r2, r1
    7588:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    758a:	4b03      	ldr	r3, [pc, #12]	; (7598 <system_clock_source_osc32k_set_config+0xc8>)
    758c:	68fa      	ldr	r2, [r7, #12]
    758e:	619a      	str	r2, [r3, #24]
}
    7590:	46c0      	nop			; (mov r8, r8)
    7592:	46bd      	mov	sp, r7
    7594:	b004      	add	sp, #16
    7596:	bd80      	pop	{r7, pc}
    7598:	40000800 	.word	0x40000800

0000759c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    759c:	b580      	push	{r7, lr}
    759e:	b082      	sub	sp, #8
    75a0:	af00      	add	r7, sp, #0
    75a2:	0002      	movs	r2, r0
    75a4:	1dfb      	adds	r3, r7, #7
    75a6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    75a8:	1dfb      	adds	r3, r7, #7
    75aa:	781b      	ldrb	r3, [r3, #0]
    75ac:	2b08      	cmp	r3, #8
    75ae:	d83b      	bhi.n	7628 <system_clock_source_enable+0x8c>
    75b0:	009a      	lsls	r2, r3, #2
    75b2:	4b21      	ldr	r3, [pc, #132]	; (7638 <system_clock_source_enable+0x9c>)
    75b4:	18d3      	adds	r3, r2, r3
    75b6:	681b      	ldr	r3, [r3, #0]
    75b8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    75ba:	4b20      	ldr	r3, [pc, #128]	; (763c <system_clock_source_enable+0xa0>)
    75bc:	4a1f      	ldr	r2, [pc, #124]	; (763c <system_clock_source_enable+0xa0>)
    75be:	6a12      	ldr	r2, [r2, #32]
    75c0:	2102      	movs	r1, #2
    75c2:	430a      	orrs	r2, r1
    75c4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    75c6:	2300      	movs	r3, #0
    75c8:	e031      	b.n	762e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    75ca:	4b1c      	ldr	r3, [pc, #112]	; (763c <system_clock_source_enable+0xa0>)
    75cc:	4a1b      	ldr	r2, [pc, #108]	; (763c <system_clock_source_enable+0xa0>)
    75ce:	6992      	ldr	r2, [r2, #24]
    75d0:	2102      	movs	r1, #2
    75d2:	430a      	orrs	r2, r1
    75d4:	619a      	str	r2, [r3, #24]
		break;
    75d6:	e029      	b.n	762c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    75d8:	4a18      	ldr	r2, [pc, #96]	; (763c <system_clock_source_enable+0xa0>)
    75da:	4b18      	ldr	r3, [pc, #96]	; (763c <system_clock_source_enable+0xa0>)
    75dc:	8a1b      	ldrh	r3, [r3, #16]
    75de:	b29b      	uxth	r3, r3
    75e0:	2102      	movs	r1, #2
    75e2:	430b      	orrs	r3, r1
    75e4:	b29b      	uxth	r3, r3
    75e6:	8213      	strh	r3, [r2, #16]
		break;
    75e8:	e020      	b.n	762c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    75ea:	4a14      	ldr	r2, [pc, #80]	; (763c <system_clock_source_enable+0xa0>)
    75ec:	4b13      	ldr	r3, [pc, #76]	; (763c <system_clock_source_enable+0xa0>)
    75ee:	8a9b      	ldrh	r3, [r3, #20]
    75f0:	b29b      	uxth	r3, r3
    75f2:	2102      	movs	r1, #2
    75f4:	430b      	orrs	r3, r1
    75f6:	b29b      	uxth	r3, r3
    75f8:	8293      	strh	r3, [r2, #20]
		break;
    75fa:	e017      	b.n	762c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    75fc:	4b10      	ldr	r3, [pc, #64]	; (7640 <system_clock_source_enable+0xa4>)
    75fe:	681b      	ldr	r3, [r3, #0]
    7600:	2202      	movs	r2, #2
    7602:	431a      	orrs	r2, r3
    7604:	4b0e      	ldr	r3, [pc, #56]	; (7640 <system_clock_source_enable+0xa4>)
    7606:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    7608:	4b0e      	ldr	r3, [pc, #56]	; (7644 <system_clock_source_enable+0xa8>)
    760a:	4798      	blx	r3
		break;
    760c:	e00e      	b.n	762c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    760e:	4a0b      	ldr	r2, [pc, #44]	; (763c <system_clock_source_enable+0xa0>)
    7610:	490a      	ldr	r1, [pc, #40]	; (763c <system_clock_source_enable+0xa0>)
    7612:	2344      	movs	r3, #68	; 0x44
    7614:	5ccb      	ldrb	r3, [r1, r3]
    7616:	b2db      	uxtb	r3, r3
    7618:	2102      	movs	r1, #2
    761a:	430b      	orrs	r3, r1
    761c:	b2d9      	uxtb	r1, r3
    761e:	2344      	movs	r3, #68	; 0x44
    7620:	54d1      	strb	r1, [r2, r3]
		break;
    7622:	e003      	b.n	762c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    7624:	2300      	movs	r3, #0
    7626:	e002      	b.n	762e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7628:	2317      	movs	r3, #23
    762a:	e000      	b.n	762e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    762c:	2300      	movs	r3, #0
}
    762e:	0018      	movs	r0, r3
    7630:	46bd      	mov	sp, r7
    7632:	b002      	add	sp, #8
    7634:	bd80      	pop	{r7, pc}
    7636:	46c0      	nop			; (mov r8, r8)
    7638:	00016fe8 	.word	0x00016fe8
    763c:	40000800 	.word	0x40000800
    7640:	20000200 	.word	0x20000200
    7644:	00007359 	.word	0x00007359

00007648 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    7648:	b580      	push	{r7, lr}
    764a:	b082      	sub	sp, #8
    764c:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    764e:	003b      	movs	r3, r7
    7650:	2201      	movs	r2, #1
    7652:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7654:	2300      	movs	r3, #0
    7656:	607b      	str	r3, [r7, #4]
    7658:	e009      	b.n	766e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    765a:	687b      	ldr	r3, [r7, #4]
    765c:	b2db      	uxtb	r3, r3
    765e:	003a      	movs	r2, r7
    7660:	0011      	movs	r1, r2
    7662:	0018      	movs	r0, r3
    7664:	4b05      	ldr	r3, [pc, #20]	; (767c <_switch_peripheral_gclk+0x34>)
    7666:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	3301      	adds	r3, #1
    766c:	607b      	str	r3, [r7, #4]
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	2b24      	cmp	r3, #36	; 0x24
    7672:	d9f2      	bls.n	765a <_switch_peripheral_gclk+0x12>
	}
}
    7674:	46c0      	nop			; (mov r8, r8)
    7676:	46bd      	mov	sp, r7
    7678:	b002      	add	sp, #8
    767a:	bd80      	pop	{r7, pc}
    767c:	00007b31 	.word	0x00007b31

00007680 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    7680:	b580      	push	{r7, lr}
    7682:	b0a2      	sub	sp, #136	; 0x88
    7684:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    7686:	4b4f      	ldr	r3, [pc, #316]	; (77c4 <system_clock_init+0x144>)
    7688:	22c2      	movs	r2, #194	; 0xc2
    768a:	00d2      	lsls	r2, r2, #3
    768c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    768e:	2000      	movs	r0, #0
    7690:	4b4d      	ldr	r3, [pc, #308]	; (77c8 <system_clock_init+0x148>)
    7692:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    7694:	4b4d      	ldr	r3, [pc, #308]	; (77cc <system_clock_init+0x14c>)
    7696:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    7698:	4a4a      	ldr	r2, [pc, #296]	; (77c4 <system_clock_init+0x144>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    769a:	4b4d      	ldr	r3, [pc, #308]	; (77d0 <system_clock_init+0x150>)
    769c:	681b      	ldr	r3, [r3, #0]
    769e:	099b      	lsrs	r3, r3, #6
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    76a0:	b2db      	uxtb	r3, r3
    76a2:	1c19      	adds	r1, r3, #0
    76a4:	237f      	movs	r3, #127	; 0x7f
    76a6:	400b      	ands	r3, r1
    76a8:	b2d9      	uxtb	r1, r3
	SYSCTRL->OSC32K.bit.CALIB =
    76aa:	6993      	ldr	r3, [r2, #24]
    76ac:	207f      	movs	r0, #127	; 0x7f
    76ae:	4001      	ands	r1, r0
    76b0:	0409      	lsls	r1, r1, #16
    76b2:	4848      	ldr	r0, [pc, #288]	; (77d4 <system_clock_init+0x154>)
    76b4:	4003      	ands	r3, r0
    76b6:	430b      	orrs	r3, r1
    76b8:	6193      	str	r3, [r2, #24]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    76ba:	2380      	movs	r3, #128	; 0x80
    76bc:	18fb      	adds	r3, r7, r3
    76be:	0018      	movs	r0, r3
    76c0:	4b45      	ldr	r3, [pc, #276]	; (77d8 <system_clock_init+0x158>)
    76c2:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    76c4:	2380      	movs	r3, #128	; 0x80
    76c6:	18fb      	adds	r3, r7, r3
    76c8:	2207      	movs	r2, #7
    76ca:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    76cc:	2380      	movs	r3, #128	; 0x80
    76ce:	18fb      	adds	r3, r7, r3
    76d0:	2201      	movs	r2, #1
    76d2:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    76d4:	2380      	movs	r3, #128	; 0x80
    76d6:	18fb      	adds	r3, r7, r3
    76d8:	2201      	movs	r2, #1
    76da:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    76dc:	2380      	movs	r3, #128	; 0x80
    76de:	18fb      	adds	r3, r7, r3
    76e0:	2201      	movs	r2, #1
    76e2:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    76e4:	2380      	movs	r3, #128	; 0x80
    76e6:	18fb      	adds	r3, r7, r3
    76e8:	2200      	movs	r2, #0
    76ea:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    76ec:	2380      	movs	r3, #128	; 0x80
    76ee:	18fb      	adds	r3, r7, r3
    76f0:	0018      	movs	r0, r3
    76f2:	4b3a      	ldr	r3, [pc, #232]	; (77dc <system_clock_init+0x15c>)
    76f4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    76f6:	2004      	movs	r0, #4
    76f8:	4b39      	ldr	r3, [pc, #228]	; (77e0 <system_clock_init+0x160>)
    76fa:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    76fc:	237c      	movs	r3, #124	; 0x7c
    76fe:	18fb      	adds	r3, r7, r3
    7700:	0018      	movs	r0, r3
    7702:	4b38      	ldr	r3, [pc, #224]	; (77e4 <system_clock_init+0x164>)
    7704:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    7706:	237c      	movs	r3, #124	; 0x7c
    7708:	18fb      	adds	r3, r7, r3
    770a:	2200      	movs	r2, #0
    770c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    770e:	237c      	movs	r3, #124	; 0x7c
    7710:	18fb      	adds	r3, r7, r3
    7712:	2201      	movs	r2, #1
    7714:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    7716:	237c      	movs	r3, #124	; 0x7c
    7718:	18fb      	adds	r3, r7, r3
    771a:	2200      	movs	r2, #0
    771c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    771e:	237c      	movs	r3, #124	; 0x7c
    7720:	18fb      	adds	r3, r7, r3
    7722:	0018      	movs	r0, r3
    7724:	4b30      	ldr	r3, [pc, #192]	; (77e8 <system_clock_init+0x168>)
    7726:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    7728:	2006      	movs	r0, #6
    772a:	4b2d      	ldr	r3, [pc, #180]	; (77e0 <system_clock_init+0x160>)
    772c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    772e:	4b2f      	ldr	r3, [pc, #188]	; (77ec <system_clock_init+0x16c>)
    7730:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    7732:	2358      	movs	r3, #88	; 0x58
    7734:	18fb      	adds	r3, r7, r3
    7736:	0018      	movs	r0, r3
    7738:	4b2d      	ldr	r3, [pc, #180]	; (77f0 <system_clock_init+0x170>)
    773a:	4798      	blx	r3
    773c:	2358      	movs	r3, #88	; 0x58
    773e:	18fb      	adds	r3, r7, r3
    7740:	2204      	movs	r2, #4
    7742:	701a      	strb	r2, [r3, #0]
    7744:	2358      	movs	r3, #88	; 0x58
    7746:	18fb      	adds	r3, r7, r3
    7748:	2220      	movs	r2, #32
    774a:	605a      	str	r2, [r3, #4]
    774c:	2358      	movs	r3, #88	; 0x58
    774e:	18fb      	adds	r3, r7, r3
    7750:	2200      	movs	r2, #0
    7752:	721a      	strb	r2, [r3, #8]
    7754:	2358      	movs	r3, #88	; 0x58
    7756:	18fb      	adds	r3, r7, r3
    7758:	2200      	movs	r2, #0
    775a:	725a      	strb	r2, [r3, #9]
    775c:	2358      	movs	r3, #88	; 0x58
    775e:	18fb      	adds	r3, r7, r3
    7760:	0019      	movs	r1, r3
    7762:	2002      	movs	r0, #2
    7764:	4b23      	ldr	r3, [pc, #140]	; (77f4 <system_clock_init+0x174>)
    7766:	4798      	blx	r3
    7768:	2002      	movs	r0, #2
    776a:	4b23      	ldr	r3, [pc, #140]	; (77f8 <system_clock_init+0x178>)
    776c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    776e:	2000      	movs	r0, #0
    7770:	4b22      	ldr	r3, [pc, #136]	; (77fc <system_clock_init+0x17c>)
    7772:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    7774:	2100      	movs	r1, #0
    7776:	2000      	movs	r0, #0
    7778:	4b21      	ldr	r3, [pc, #132]	; (7800 <system_clock_init+0x180>)
    777a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    777c:	2100      	movs	r1, #0
    777e:	2001      	movs	r0, #1
    7780:	4b1f      	ldr	r3, [pc, #124]	; (7800 <system_clock_init+0x180>)
    7782:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    7784:	2100      	movs	r1, #0
    7786:	2002      	movs	r0, #2
    7788:	4b1d      	ldr	r3, [pc, #116]	; (7800 <system_clock_init+0x180>)
    778a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    778c:	1d3b      	adds	r3, r7, #4
    778e:	0018      	movs	r0, r3
    7790:	4b17      	ldr	r3, [pc, #92]	; (77f0 <system_clock_init+0x170>)
    7792:	4798      	blx	r3
    7794:	1d3b      	adds	r3, r7, #4
    7796:	2206      	movs	r2, #6
    7798:	701a      	strb	r2, [r3, #0]
    779a:	1d3b      	adds	r3, r7, #4
    779c:	2201      	movs	r2, #1
    779e:	605a      	str	r2, [r3, #4]
    77a0:	1d3b      	adds	r3, r7, #4
    77a2:	2200      	movs	r2, #0
    77a4:	721a      	strb	r2, [r3, #8]
    77a6:	1d3b      	adds	r3, r7, #4
    77a8:	2200      	movs	r2, #0
    77aa:	725a      	strb	r2, [r3, #9]
    77ac:	1d3b      	adds	r3, r7, #4
    77ae:	0019      	movs	r1, r3
    77b0:	2000      	movs	r0, #0
    77b2:	4b10      	ldr	r3, [pc, #64]	; (77f4 <system_clock_init+0x174>)
    77b4:	4798      	blx	r3
    77b6:	2000      	movs	r0, #0
    77b8:	4b0f      	ldr	r3, [pc, #60]	; (77f8 <system_clock_init+0x178>)
    77ba:	4798      	blx	r3
#endif
}
    77bc:	46c0      	nop			; (mov r8, r8)
    77be:	46bd      	mov	sp, r7
    77c0:	b022      	add	sp, #136	; 0x88
    77c2:	bd80      	pop	{r7, pc}
    77c4:	40000800 	.word	0x40000800
    77c8:	00007309 	.word	0x00007309
    77cc:	00007649 	.word	0x00007649
    77d0:	00806024 	.word	0x00806024
    77d4:	ff80ffff 	.word	0xff80ffff
    77d8:	0000723f 	.word	0x0000723f
    77dc:	000074d1 	.word	0x000074d1
    77e0:	0000759d 	.word	0x0000759d
    77e4:	00007273 	.word	0x00007273
    77e8:	00007459 	.word	0x00007459
    77ec:	000078a9 	.word	0x000078a9
    77f0:	00007211 	.word	0x00007211
    77f4:	000078d9 	.word	0x000078d9
    77f8:	000079fd 	.word	0x000079fd
    77fc:	00007295 	.word	0x00007295
    7800:	000072b5 	.word	0x000072b5

00007804 <system_apb_clock_set_mask>:
{
    7804:	b580      	push	{r7, lr}
    7806:	b082      	sub	sp, #8
    7808:	af00      	add	r7, sp, #0
    780a:	0002      	movs	r2, r0
    780c:	6039      	str	r1, [r7, #0]
    780e:	1dfb      	adds	r3, r7, #7
    7810:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7812:	1dfb      	adds	r3, r7, #7
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	2b01      	cmp	r3, #1
    7818:	d00a      	beq.n	7830 <system_apb_clock_set_mask+0x2c>
    781a:	2b02      	cmp	r3, #2
    781c:	d00f      	beq.n	783e <system_apb_clock_set_mask+0x3a>
    781e:	2b00      	cmp	r3, #0
    7820:	d114      	bne.n	784c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7822:	4b0e      	ldr	r3, [pc, #56]	; (785c <system_apb_clock_set_mask+0x58>)
    7824:	4a0d      	ldr	r2, [pc, #52]	; (785c <system_apb_clock_set_mask+0x58>)
    7826:	6991      	ldr	r1, [r2, #24]
    7828:	683a      	ldr	r2, [r7, #0]
    782a:	430a      	orrs	r2, r1
    782c:	619a      	str	r2, [r3, #24]
			break;
    782e:	e00f      	b.n	7850 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7830:	4b0a      	ldr	r3, [pc, #40]	; (785c <system_apb_clock_set_mask+0x58>)
    7832:	4a0a      	ldr	r2, [pc, #40]	; (785c <system_apb_clock_set_mask+0x58>)
    7834:	69d1      	ldr	r1, [r2, #28]
    7836:	683a      	ldr	r2, [r7, #0]
    7838:	430a      	orrs	r2, r1
    783a:	61da      	str	r2, [r3, #28]
			break;
    783c:	e008      	b.n	7850 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    783e:	4b07      	ldr	r3, [pc, #28]	; (785c <system_apb_clock_set_mask+0x58>)
    7840:	4a06      	ldr	r2, [pc, #24]	; (785c <system_apb_clock_set_mask+0x58>)
    7842:	6a11      	ldr	r1, [r2, #32]
    7844:	683a      	ldr	r2, [r7, #0]
    7846:	430a      	orrs	r2, r1
    7848:	621a      	str	r2, [r3, #32]
			break;
    784a:	e001      	b.n	7850 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    784c:	2317      	movs	r3, #23
    784e:	e000      	b.n	7852 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7850:	2300      	movs	r3, #0
}
    7852:	0018      	movs	r0, r3
    7854:	46bd      	mov	sp, r7
    7856:	b002      	add	sp, #8
    7858:	bd80      	pop	{r7, pc}
    785a:	46c0      	nop			; (mov r8, r8)
    785c:	40000400 	.word	0x40000400

00007860 <system_interrupt_enter_critical_section>:
{
    7860:	b580      	push	{r7, lr}
    7862:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    7864:	4b02      	ldr	r3, [pc, #8]	; (7870 <system_interrupt_enter_critical_section+0x10>)
    7866:	4798      	blx	r3
}
    7868:	46c0      	nop			; (mov r8, r8)
    786a:	46bd      	mov	sp, r7
    786c:	bd80      	pop	{r7, pc}
    786e:	46c0      	nop			; (mov r8, r8)
    7870:	0000717d 	.word	0x0000717d

00007874 <system_interrupt_leave_critical_section>:
{
    7874:	b580      	push	{r7, lr}
    7876:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    7878:	4b02      	ldr	r3, [pc, #8]	; (7884 <system_interrupt_leave_critical_section+0x10>)
    787a:	4798      	blx	r3
}
    787c:	46c0      	nop			; (mov r8, r8)
    787e:	46bd      	mov	sp, r7
    7880:	bd80      	pop	{r7, pc}
    7882:	46c0      	nop			; (mov r8, r8)
    7884:	000071d1 	.word	0x000071d1

00007888 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    7888:	b580      	push	{r7, lr}
    788a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    788c:	4b05      	ldr	r3, [pc, #20]	; (78a4 <system_gclk_is_syncing+0x1c>)
    788e:	785b      	ldrb	r3, [r3, #1]
    7890:	b2db      	uxtb	r3, r3
    7892:	b25b      	sxtb	r3, r3
    7894:	2b00      	cmp	r3, #0
    7896:	da01      	bge.n	789c <system_gclk_is_syncing+0x14>
		return true;
    7898:	2301      	movs	r3, #1
    789a:	e000      	b.n	789e <system_gclk_is_syncing+0x16>
	}

	return false;
    789c:	2300      	movs	r3, #0
}
    789e:	0018      	movs	r0, r3
    78a0:	46bd      	mov	sp, r7
    78a2:	bd80      	pop	{r7, pc}
    78a4:	40000c00 	.word	0x40000c00

000078a8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    78a8:	b580      	push	{r7, lr}
    78aa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    78ac:	2108      	movs	r1, #8
    78ae:	2000      	movs	r0, #0
    78b0:	4b07      	ldr	r3, [pc, #28]	; (78d0 <system_gclk_init+0x28>)
    78b2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    78b4:	4b07      	ldr	r3, [pc, #28]	; (78d4 <system_gclk_init+0x2c>)
    78b6:	2201      	movs	r2, #1
    78b8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    78ba:	46c0      	nop			; (mov r8, r8)
    78bc:	4b05      	ldr	r3, [pc, #20]	; (78d4 <system_gclk_init+0x2c>)
    78be:	781b      	ldrb	r3, [r3, #0]
    78c0:	b2db      	uxtb	r3, r3
    78c2:	001a      	movs	r2, r3
    78c4:	2301      	movs	r3, #1
    78c6:	4013      	ands	r3, r2
    78c8:	d1f8      	bne.n	78bc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    78ca:	46c0      	nop			; (mov r8, r8)
    78cc:	46bd      	mov	sp, r7
    78ce:	bd80      	pop	{r7, pc}
    78d0:	00007805 	.word	0x00007805
    78d4:	40000c00 	.word	0x40000c00

000078d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    78d8:	b580      	push	{r7, lr}
    78da:	b086      	sub	sp, #24
    78dc:	af00      	add	r7, sp, #0
    78de:	0002      	movs	r2, r0
    78e0:	6039      	str	r1, [r7, #0]
    78e2:	1dfb      	adds	r3, r7, #7
    78e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    78e6:	1dfb      	adds	r3, r7, #7
    78e8:	781b      	ldrb	r3, [r3, #0]
    78ea:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    78ec:	1dfb      	adds	r3, r7, #7
    78ee:	781b      	ldrb	r3, [r3, #0]
    78f0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    78f2:	683b      	ldr	r3, [r7, #0]
    78f4:	781b      	ldrb	r3, [r3, #0]
    78f6:	021b      	lsls	r3, r3, #8
    78f8:	001a      	movs	r2, r3
    78fa:	697b      	ldr	r3, [r7, #20]
    78fc:	4313      	orrs	r3, r2
    78fe:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    7900:	683b      	ldr	r3, [r7, #0]
    7902:	785b      	ldrb	r3, [r3, #1]
    7904:	2b00      	cmp	r3, #0
    7906:	d004      	beq.n	7912 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7908:	697b      	ldr	r3, [r7, #20]
    790a:	2280      	movs	r2, #128	; 0x80
    790c:	02d2      	lsls	r2, r2, #11
    790e:	4313      	orrs	r3, r2
    7910:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7912:	683b      	ldr	r3, [r7, #0]
    7914:	7a5b      	ldrb	r3, [r3, #9]
    7916:	2b00      	cmp	r3, #0
    7918:	d004      	beq.n	7924 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    791a:	697b      	ldr	r3, [r7, #20]
    791c:	2280      	movs	r2, #128	; 0x80
    791e:	0312      	lsls	r2, r2, #12
    7920:	4313      	orrs	r3, r2
    7922:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7924:	683b      	ldr	r3, [r7, #0]
    7926:	685b      	ldr	r3, [r3, #4]
    7928:	2b01      	cmp	r3, #1
    792a:	d92c      	bls.n	7986 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    792c:	683b      	ldr	r3, [r7, #0]
    792e:	685a      	ldr	r2, [r3, #4]
    7930:	683b      	ldr	r3, [r7, #0]
    7932:	685b      	ldr	r3, [r3, #4]
    7934:	3b01      	subs	r3, #1
    7936:	4013      	ands	r3, r2
    7938:	d11a      	bne.n	7970 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    793a:	2300      	movs	r3, #0
    793c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    793e:	2302      	movs	r3, #2
    7940:	60bb      	str	r3, [r7, #8]
    7942:	e005      	b.n	7950 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    7944:	68fb      	ldr	r3, [r7, #12]
    7946:	3301      	adds	r3, #1
    7948:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    794a:	68bb      	ldr	r3, [r7, #8]
    794c:	005b      	lsls	r3, r3, #1
    794e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    7950:	683b      	ldr	r3, [r7, #0]
    7952:	685a      	ldr	r2, [r3, #4]
    7954:	68bb      	ldr	r3, [r7, #8]
    7956:	429a      	cmp	r2, r3
    7958:	d8f4      	bhi.n	7944 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    795a:	68fb      	ldr	r3, [r7, #12]
    795c:	021b      	lsls	r3, r3, #8
    795e:	693a      	ldr	r2, [r7, #16]
    7960:	4313      	orrs	r3, r2
    7962:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7964:	697b      	ldr	r3, [r7, #20]
    7966:	2280      	movs	r2, #128	; 0x80
    7968:	0352      	lsls	r2, r2, #13
    796a:	4313      	orrs	r3, r2
    796c:	617b      	str	r3, [r7, #20]
    796e:	e00a      	b.n	7986 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    7970:	683b      	ldr	r3, [r7, #0]
    7972:	685b      	ldr	r3, [r3, #4]
    7974:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    7976:	693a      	ldr	r2, [r7, #16]
    7978:	4313      	orrs	r3, r2
    797a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    797c:	697b      	ldr	r3, [r7, #20]
    797e:	2280      	movs	r2, #128	; 0x80
    7980:	0292      	lsls	r2, r2, #10
    7982:	4313      	orrs	r3, r2
    7984:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7986:	683b      	ldr	r3, [r7, #0]
    7988:	7a1b      	ldrb	r3, [r3, #8]
    798a:	2b00      	cmp	r3, #0
    798c:	d004      	beq.n	7998 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    798e:	697b      	ldr	r3, [r7, #20]
    7990:	2280      	movs	r2, #128	; 0x80
    7992:	0392      	lsls	r2, r2, #14
    7994:	4313      	orrs	r3, r2
    7996:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    7998:	46c0      	nop			; (mov r8, r8)
    799a:	4b13      	ldr	r3, [pc, #76]	; (79e8 <system_gclk_gen_set_config+0x110>)
    799c:	4798      	blx	r3
    799e:	1e03      	subs	r3, r0, #0
    79a0:	d1fb      	bne.n	799a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    79a2:	4b12      	ldr	r3, [pc, #72]	; (79ec <system_gclk_gen_set_config+0x114>)
    79a4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    79a6:	4a12      	ldr	r2, [pc, #72]	; (79f0 <system_gclk_gen_set_config+0x118>)
    79a8:	1dfb      	adds	r3, r7, #7
    79aa:	781b      	ldrb	r3, [r3, #0]
    79ac:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    79ae:	46c0      	nop			; (mov r8, r8)
    79b0:	4b0d      	ldr	r3, [pc, #52]	; (79e8 <system_gclk_gen_set_config+0x110>)
    79b2:	4798      	blx	r3
    79b4:	1e03      	subs	r3, r0, #0
    79b6:	d1fb      	bne.n	79b0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    79b8:	4b0e      	ldr	r3, [pc, #56]	; (79f4 <system_gclk_gen_set_config+0x11c>)
    79ba:	693a      	ldr	r2, [r7, #16]
    79bc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    79be:	46c0      	nop			; (mov r8, r8)
    79c0:	4b09      	ldr	r3, [pc, #36]	; (79e8 <system_gclk_gen_set_config+0x110>)
    79c2:	4798      	blx	r3
    79c4:	1e03      	subs	r3, r0, #0
    79c6:	d1fb      	bne.n	79c0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    79c8:	4b0a      	ldr	r3, [pc, #40]	; (79f4 <system_gclk_gen_set_config+0x11c>)
    79ca:	4a0a      	ldr	r2, [pc, #40]	; (79f4 <system_gclk_gen_set_config+0x11c>)
    79cc:	6851      	ldr	r1, [r2, #4]
    79ce:	2280      	movs	r2, #128	; 0x80
    79d0:	0252      	lsls	r2, r2, #9
    79d2:	4011      	ands	r1, r2
    79d4:	697a      	ldr	r2, [r7, #20]
    79d6:	430a      	orrs	r2, r1
    79d8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    79da:	4b07      	ldr	r3, [pc, #28]	; (79f8 <system_gclk_gen_set_config+0x120>)
    79dc:	4798      	blx	r3
}
    79de:	46c0      	nop			; (mov r8, r8)
    79e0:	46bd      	mov	sp, r7
    79e2:	b006      	add	sp, #24
    79e4:	bd80      	pop	{r7, pc}
    79e6:	46c0      	nop			; (mov r8, r8)
    79e8:	00007889 	.word	0x00007889
    79ec:	00007861 	.word	0x00007861
    79f0:	40000c08 	.word	0x40000c08
    79f4:	40000c00 	.word	0x40000c00
    79f8:	00007875 	.word	0x00007875

000079fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    79fc:	b580      	push	{r7, lr}
    79fe:	b082      	sub	sp, #8
    7a00:	af00      	add	r7, sp, #0
    7a02:	0002      	movs	r2, r0
    7a04:	1dfb      	adds	r3, r7, #7
    7a06:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7a08:	46c0      	nop			; (mov r8, r8)
    7a0a:	4b0e      	ldr	r3, [pc, #56]	; (7a44 <system_gclk_gen_enable+0x48>)
    7a0c:	4798      	blx	r3
    7a0e:	1e03      	subs	r3, r0, #0
    7a10:	d1fb      	bne.n	7a0a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7a12:	4b0d      	ldr	r3, [pc, #52]	; (7a48 <system_gclk_gen_enable+0x4c>)
    7a14:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7a16:	4a0d      	ldr	r2, [pc, #52]	; (7a4c <system_gclk_gen_enable+0x50>)
    7a18:	1dfb      	adds	r3, r7, #7
    7a1a:	781b      	ldrb	r3, [r3, #0]
    7a1c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7a1e:	46c0      	nop			; (mov r8, r8)
    7a20:	4b08      	ldr	r3, [pc, #32]	; (7a44 <system_gclk_gen_enable+0x48>)
    7a22:	4798      	blx	r3
    7a24:	1e03      	subs	r3, r0, #0
    7a26:	d1fb      	bne.n	7a20 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    7a28:	4b09      	ldr	r3, [pc, #36]	; (7a50 <system_gclk_gen_enable+0x54>)
    7a2a:	4a09      	ldr	r2, [pc, #36]	; (7a50 <system_gclk_gen_enable+0x54>)
    7a2c:	6852      	ldr	r2, [r2, #4]
    7a2e:	2180      	movs	r1, #128	; 0x80
    7a30:	0249      	lsls	r1, r1, #9
    7a32:	430a      	orrs	r2, r1
    7a34:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7a36:	4b07      	ldr	r3, [pc, #28]	; (7a54 <system_gclk_gen_enable+0x58>)
    7a38:	4798      	blx	r3
}
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	46bd      	mov	sp, r7
    7a3e:	b002      	add	sp, #8
    7a40:	bd80      	pop	{r7, pc}
    7a42:	46c0      	nop			; (mov r8, r8)
    7a44:	00007889 	.word	0x00007889
    7a48:	00007861 	.word	0x00007861
    7a4c:	40000c04 	.word	0x40000c04
    7a50:	40000c00 	.word	0x40000c00
    7a54:	00007875 	.word	0x00007875

00007a58 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7a58:	b580      	push	{r7, lr}
    7a5a:	b086      	sub	sp, #24
    7a5c:	af00      	add	r7, sp, #0
    7a5e:	0002      	movs	r2, r0
    7a60:	1dfb      	adds	r3, r7, #7
    7a62:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7a64:	46c0      	nop			; (mov r8, r8)
    7a66:	4b2a      	ldr	r3, [pc, #168]	; (7b10 <system_gclk_gen_get_hz+0xb8>)
    7a68:	4798      	blx	r3
    7a6a:	1e03      	subs	r3, r0, #0
    7a6c:	d1fb      	bne.n	7a66 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7a6e:	4b29      	ldr	r3, [pc, #164]	; (7b14 <system_gclk_gen_get_hz+0xbc>)
    7a70:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7a72:	4a29      	ldr	r2, [pc, #164]	; (7b18 <system_gclk_gen_get_hz+0xc0>)
    7a74:	1dfb      	adds	r3, r7, #7
    7a76:	781b      	ldrb	r3, [r3, #0]
    7a78:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7a7a:	46c0      	nop			; (mov r8, r8)
    7a7c:	4b24      	ldr	r3, [pc, #144]	; (7b10 <system_gclk_gen_get_hz+0xb8>)
    7a7e:	4798      	blx	r3
    7a80:	1e03      	subs	r3, r0, #0
    7a82:	d1fb      	bne.n	7a7c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7a84:	4b25      	ldr	r3, [pc, #148]	; (7b1c <system_gclk_gen_get_hz+0xc4>)
    7a86:	685b      	ldr	r3, [r3, #4]
    7a88:	04db      	lsls	r3, r3, #19
    7a8a:	0edb      	lsrs	r3, r3, #27
    7a8c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7a8e:	0018      	movs	r0, r3
    7a90:	4b23      	ldr	r3, [pc, #140]	; (7b20 <system_gclk_gen_get_hz+0xc8>)
    7a92:	4798      	blx	r3
    7a94:	0003      	movs	r3, r0
    7a96:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7a98:	4a1f      	ldr	r2, [pc, #124]	; (7b18 <system_gclk_gen_get_hz+0xc0>)
    7a9a:	1dfb      	adds	r3, r7, #7
    7a9c:	781b      	ldrb	r3, [r3, #0]
    7a9e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    7aa0:	4b1e      	ldr	r3, [pc, #120]	; (7b1c <system_gclk_gen_get_hz+0xc4>)
    7aa2:	685b      	ldr	r3, [r3, #4]
    7aa4:	02db      	lsls	r3, r3, #11
    7aa6:	0fdb      	lsrs	r3, r3, #31
    7aa8:	b2da      	uxtb	r2, r3
    7aaa:	2313      	movs	r3, #19
    7aac:	18fb      	adds	r3, r7, r3
    7aae:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7ab0:	4a1c      	ldr	r2, [pc, #112]	; (7b24 <system_gclk_gen_get_hz+0xcc>)
    7ab2:	1dfb      	adds	r3, r7, #7
    7ab4:	781b      	ldrb	r3, [r3, #0]
    7ab6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7ab8:	46c0      	nop			; (mov r8, r8)
    7aba:	4b15      	ldr	r3, [pc, #84]	; (7b10 <system_gclk_gen_get_hz+0xb8>)
    7abc:	4798      	blx	r3
    7abe:	1e03      	subs	r3, r0, #0
    7ac0:	d1fb      	bne.n	7aba <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    7ac2:	4b16      	ldr	r3, [pc, #88]	; (7b1c <system_gclk_gen_get_hz+0xc4>)
    7ac4:	689b      	ldr	r3, [r3, #8]
    7ac6:	021b      	lsls	r3, r3, #8
    7ac8:	0c1b      	lsrs	r3, r3, #16
    7aca:	b29b      	uxth	r3, r3
    7acc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    7ace:	4b16      	ldr	r3, [pc, #88]	; (7b28 <system_gclk_gen_get_hz+0xd0>)
    7ad0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7ad2:	2313      	movs	r3, #19
    7ad4:	18fb      	adds	r3, r7, r3
    7ad6:	781b      	ldrb	r3, [r3, #0]
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d109      	bne.n	7af0 <system_gclk_gen_get_hz+0x98>
    7adc:	68fb      	ldr	r3, [r7, #12]
    7ade:	2b01      	cmp	r3, #1
    7ae0:	d906      	bls.n	7af0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    7ae2:	4b12      	ldr	r3, [pc, #72]	; (7b2c <system_gclk_gen_get_hz+0xd4>)
    7ae4:	68f9      	ldr	r1, [r7, #12]
    7ae6:	6978      	ldr	r0, [r7, #20]
    7ae8:	4798      	blx	r3
    7aea:	0003      	movs	r3, r0
    7aec:	617b      	str	r3, [r7, #20]
    7aee:	e00a      	b.n	7b06 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    7af0:	2313      	movs	r3, #19
    7af2:	18fb      	adds	r3, r7, r3
    7af4:	781b      	ldrb	r3, [r3, #0]
    7af6:	2b00      	cmp	r3, #0
    7af8:	d005      	beq.n	7b06 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    7afa:	68fb      	ldr	r3, [r7, #12]
    7afc:	3301      	adds	r3, #1
    7afe:	697a      	ldr	r2, [r7, #20]
    7b00:	40da      	lsrs	r2, r3
    7b02:	0013      	movs	r3, r2
    7b04:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    7b06:	697b      	ldr	r3, [r7, #20]
}
    7b08:	0018      	movs	r0, r3
    7b0a:	46bd      	mov	sp, r7
    7b0c:	b006      	add	sp, #24
    7b0e:	bd80      	pop	{r7, pc}
    7b10:	00007889 	.word	0x00007889
    7b14:	00007861 	.word	0x00007861
    7b18:	40000c04 	.word	0x40000c04
    7b1c:	40000c00 	.word	0x40000c00
    7b20:	0000739d 	.word	0x0000739d
    7b24:	40000c08 	.word	0x40000c08
    7b28:	00007875 	.word	0x00007875
    7b2c:	00013cf1 	.word	0x00013cf1

00007b30 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    7b30:	b580      	push	{r7, lr}
    7b32:	b084      	sub	sp, #16
    7b34:	af00      	add	r7, sp, #0
    7b36:	0002      	movs	r2, r0
    7b38:	6039      	str	r1, [r7, #0]
    7b3a:	1dfb      	adds	r3, r7, #7
    7b3c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    7b3e:	1dfb      	adds	r3, r7, #7
    7b40:	781b      	ldrb	r3, [r3, #0]
    7b42:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    7b44:	683b      	ldr	r3, [r7, #0]
    7b46:	781b      	ldrb	r3, [r3, #0]
    7b48:	021b      	lsls	r3, r3, #8
    7b4a:	001a      	movs	r2, r3
    7b4c:	68fb      	ldr	r3, [r7, #12]
    7b4e:	4313      	orrs	r3, r2
    7b50:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    7b52:	1dfb      	adds	r3, r7, #7
    7b54:	781b      	ldrb	r3, [r3, #0]
    7b56:	0018      	movs	r0, r3
    7b58:	4b04      	ldr	r3, [pc, #16]	; (7b6c <system_gclk_chan_set_config+0x3c>)
    7b5a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    7b5c:	4b04      	ldr	r3, [pc, #16]	; (7b70 <system_gclk_chan_set_config+0x40>)
    7b5e:	68fa      	ldr	r2, [r7, #12]
    7b60:	b292      	uxth	r2, r2
    7b62:	805a      	strh	r2, [r3, #2]
}
    7b64:	46c0      	nop			; (mov r8, r8)
    7b66:	46bd      	mov	sp, r7
    7b68:	b004      	add	sp, #16
    7b6a:	bd80      	pop	{r7, pc}
    7b6c:	00007bbd 	.word	0x00007bbd
    7b70:	40000c00 	.word	0x40000c00

00007b74 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7b74:	b580      	push	{r7, lr}
    7b76:	b082      	sub	sp, #8
    7b78:	af00      	add	r7, sp, #0
    7b7a:	0002      	movs	r2, r0
    7b7c:	1dfb      	adds	r3, r7, #7
    7b7e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7b80:	4b0a      	ldr	r3, [pc, #40]	; (7bac <system_gclk_chan_enable+0x38>)
    7b82:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7b84:	4a0a      	ldr	r2, [pc, #40]	; (7bb0 <system_gclk_chan_enable+0x3c>)
    7b86:	1dfb      	adds	r3, r7, #7
    7b88:	781b      	ldrb	r3, [r3, #0]
    7b8a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    7b8c:	4909      	ldr	r1, [pc, #36]	; (7bb4 <system_gclk_chan_enable+0x40>)
    7b8e:	4b09      	ldr	r3, [pc, #36]	; (7bb4 <system_gclk_chan_enable+0x40>)
    7b90:	885b      	ldrh	r3, [r3, #2]
    7b92:	b29b      	uxth	r3, r3
    7b94:	2280      	movs	r2, #128	; 0x80
    7b96:	01d2      	lsls	r2, r2, #7
    7b98:	4313      	orrs	r3, r2
    7b9a:	b29b      	uxth	r3, r3
    7b9c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    7b9e:	4b06      	ldr	r3, [pc, #24]	; (7bb8 <system_gclk_chan_enable+0x44>)
    7ba0:	4798      	blx	r3
}
    7ba2:	46c0      	nop			; (mov r8, r8)
    7ba4:	46bd      	mov	sp, r7
    7ba6:	b002      	add	sp, #8
    7ba8:	bd80      	pop	{r7, pc}
    7baa:	46c0      	nop			; (mov r8, r8)
    7bac:	00007861 	.word	0x00007861
    7bb0:	40000c02 	.word	0x40000c02
    7bb4:	40000c00 	.word	0x40000c00
    7bb8:	00007875 	.word	0x00007875

00007bbc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7bbc:	b580      	push	{r7, lr}
    7bbe:	b084      	sub	sp, #16
    7bc0:	af00      	add	r7, sp, #0
    7bc2:	0002      	movs	r2, r0
    7bc4:	1dfb      	adds	r3, r7, #7
    7bc6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7bc8:	4b1c      	ldr	r3, [pc, #112]	; (7c3c <system_gclk_chan_disable+0x80>)
    7bca:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7bcc:	4a1c      	ldr	r2, [pc, #112]	; (7c40 <system_gclk_chan_disable+0x84>)
    7bce:	1dfb      	adds	r3, r7, #7
    7bd0:	781b      	ldrb	r3, [r3, #0]
    7bd2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7bd4:	4b1b      	ldr	r3, [pc, #108]	; (7c44 <system_gclk_chan_disable+0x88>)
    7bd6:	885b      	ldrh	r3, [r3, #2]
    7bd8:	051b      	lsls	r3, r3, #20
    7bda:	0f1b      	lsrs	r3, r3, #28
    7bdc:	b2db      	uxtb	r3, r3
    7bde:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    7be0:	4a18      	ldr	r2, [pc, #96]	; (7c44 <system_gclk_chan_disable+0x88>)
    7be2:	8853      	ldrh	r3, [r2, #2]
    7be4:	4918      	ldr	r1, [pc, #96]	; (7c48 <system_gclk_chan_disable+0x8c>)
    7be6:	400b      	ands	r3, r1
    7be8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    7bea:	4a16      	ldr	r2, [pc, #88]	; (7c44 <system_gclk_chan_disable+0x88>)
    7bec:	4b15      	ldr	r3, [pc, #84]	; (7c44 <system_gclk_chan_disable+0x88>)
    7bee:	885b      	ldrh	r3, [r3, #2]
    7bf0:	b29b      	uxth	r3, r3
    7bf2:	4916      	ldr	r1, [pc, #88]	; (7c4c <system_gclk_chan_disable+0x90>)
    7bf4:	400b      	ands	r3, r1
    7bf6:	b29b      	uxth	r3, r3
    7bf8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    7bfa:	46c0      	nop			; (mov r8, r8)
    7bfc:	4b11      	ldr	r3, [pc, #68]	; (7c44 <system_gclk_chan_disable+0x88>)
    7bfe:	885b      	ldrh	r3, [r3, #2]
    7c00:	b29b      	uxth	r3, r3
    7c02:	001a      	movs	r2, r3
    7c04:	2380      	movs	r3, #128	; 0x80
    7c06:	01db      	lsls	r3, r3, #7
    7c08:	4013      	ands	r3, r2
    7c0a:	d1f7      	bne.n	7bfc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    7c0c:	4a0d      	ldr	r2, [pc, #52]	; (7c44 <system_gclk_chan_disable+0x88>)
    7c0e:	68fb      	ldr	r3, [r7, #12]
    7c10:	b2db      	uxtb	r3, r3
    7c12:	1c19      	adds	r1, r3, #0
    7c14:	230f      	movs	r3, #15
    7c16:	400b      	ands	r3, r1
    7c18:	b2d9      	uxtb	r1, r3
    7c1a:	8853      	ldrh	r3, [r2, #2]
    7c1c:	1c08      	adds	r0, r1, #0
    7c1e:	210f      	movs	r1, #15
    7c20:	4001      	ands	r1, r0
    7c22:	0208      	lsls	r0, r1, #8
    7c24:	4908      	ldr	r1, [pc, #32]	; (7c48 <system_gclk_chan_disable+0x8c>)
    7c26:	400b      	ands	r3, r1
    7c28:	1c19      	adds	r1, r3, #0
    7c2a:	1c03      	adds	r3, r0, #0
    7c2c:	430b      	orrs	r3, r1
    7c2e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    7c30:	4b07      	ldr	r3, [pc, #28]	; (7c50 <system_gclk_chan_disable+0x94>)
    7c32:	4798      	blx	r3
}
    7c34:	46c0      	nop			; (mov r8, r8)
    7c36:	46bd      	mov	sp, r7
    7c38:	b004      	add	sp, #16
    7c3a:	bd80      	pop	{r7, pc}
    7c3c:	00007861 	.word	0x00007861
    7c40:	40000c02 	.word	0x40000c02
    7c44:	40000c00 	.word	0x40000c00
    7c48:	fffff0ff 	.word	0xfffff0ff
    7c4c:	ffffbfff 	.word	0xffffbfff
    7c50:	00007875 	.word	0x00007875

00007c54 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7c54:	b580      	push	{r7, lr}
    7c56:	b084      	sub	sp, #16
    7c58:	af00      	add	r7, sp, #0
    7c5a:	0002      	movs	r2, r0
    7c5c:	1dfb      	adds	r3, r7, #7
    7c5e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    7c60:	4b0d      	ldr	r3, [pc, #52]	; (7c98 <system_gclk_chan_get_hz+0x44>)
    7c62:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7c64:	4a0d      	ldr	r2, [pc, #52]	; (7c9c <system_gclk_chan_get_hz+0x48>)
    7c66:	1dfb      	adds	r3, r7, #7
    7c68:	781b      	ldrb	r3, [r3, #0]
    7c6a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    7c6c:	4b0c      	ldr	r3, [pc, #48]	; (7ca0 <system_gclk_chan_get_hz+0x4c>)
    7c6e:	885b      	ldrh	r3, [r3, #2]
    7c70:	051b      	lsls	r3, r3, #20
    7c72:	0f1b      	lsrs	r3, r3, #28
    7c74:	b2da      	uxtb	r2, r3
    7c76:	230f      	movs	r3, #15
    7c78:	18fb      	adds	r3, r7, r3
    7c7a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    7c7c:	4b09      	ldr	r3, [pc, #36]	; (7ca4 <system_gclk_chan_get_hz+0x50>)
    7c7e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7c80:	230f      	movs	r3, #15
    7c82:	18fb      	adds	r3, r7, r3
    7c84:	781b      	ldrb	r3, [r3, #0]
    7c86:	0018      	movs	r0, r3
    7c88:	4b07      	ldr	r3, [pc, #28]	; (7ca8 <system_gclk_chan_get_hz+0x54>)
    7c8a:	4798      	blx	r3
    7c8c:	0003      	movs	r3, r0
}
    7c8e:	0018      	movs	r0, r3
    7c90:	46bd      	mov	sp, r7
    7c92:	b004      	add	sp, #16
    7c94:	bd80      	pop	{r7, pc}
    7c96:	46c0      	nop			; (mov r8, r8)
    7c98:	00007861 	.word	0x00007861
    7c9c:	40000c02 	.word	0x40000c02
    7ca0:	40000c00 	.word	0x40000c00
    7ca4:	00007875 	.word	0x00007875
    7ca8:	00007a59 	.word	0x00007a59

00007cac <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7cac:	b580      	push	{r7, lr}
    7cae:	b084      	sub	sp, #16
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	0002      	movs	r2, r0
    7cb4:	1dfb      	adds	r3, r7, #7
    7cb6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7cb8:	230f      	movs	r3, #15
    7cba:	18fb      	adds	r3, r7, r3
    7cbc:	1dfa      	adds	r2, r7, #7
    7cbe:	7812      	ldrb	r2, [r2, #0]
    7cc0:	09d2      	lsrs	r2, r2, #7
    7cc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7cc4:	230e      	movs	r3, #14
    7cc6:	18fb      	adds	r3, r7, r3
    7cc8:	1dfa      	adds	r2, r7, #7
    7cca:	7812      	ldrb	r2, [r2, #0]
    7ccc:	0952      	lsrs	r2, r2, #5
    7cce:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7cd0:	4b0d      	ldr	r3, [pc, #52]	; (7d08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7cd2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    7cd4:	230f      	movs	r3, #15
    7cd6:	18fb      	adds	r3, r7, r3
    7cd8:	781b      	ldrb	r3, [r3, #0]
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d10f      	bne.n	7cfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    7cde:	230f      	movs	r3, #15
    7ce0:	18fb      	adds	r3, r7, r3
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	009b      	lsls	r3, r3, #2
    7ce6:	2210      	movs	r2, #16
    7ce8:	4694      	mov	ip, r2
    7cea:	44bc      	add	ip, r7
    7cec:	4463      	add	r3, ip
    7cee:	3b08      	subs	r3, #8
    7cf0:	681a      	ldr	r2, [r3, #0]
    7cf2:	230e      	movs	r3, #14
    7cf4:	18fb      	adds	r3, r7, r3
    7cf6:	781b      	ldrb	r3, [r3, #0]
    7cf8:	01db      	lsls	r3, r3, #7
    7cfa:	18d3      	adds	r3, r2, r3
    7cfc:	e000      	b.n	7d00 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    7cfe:	2300      	movs	r3, #0
	}
}
    7d00:	0018      	movs	r0, r3
    7d02:	46bd      	mov	sp, r7
    7d04:	b004      	add	sp, #16
    7d06:	bd80      	pop	{r7, pc}
    7d08:	41004400 	.word	0x41004400

00007d0c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7d0c:	b580      	push	{r7, lr}
    7d0e:	b088      	sub	sp, #32
    7d10:	af00      	add	r7, sp, #0
    7d12:	60f8      	str	r0, [r7, #12]
    7d14:	60b9      	str	r1, [r7, #8]
    7d16:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    7d18:	2300      	movs	r3, #0
    7d1a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7d1c:	687b      	ldr	r3, [r7, #4]
    7d1e:	78db      	ldrb	r3, [r3, #3]
    7d20:	2201      	movs	r2, #1
    7d22:	4053      	eors	r3, r2
    7d24:	b2db      	uxtb	r3, r3
    7d26:	2b00      	cmp	r3, #0
    7d28:	d035      	beq.n	7d96 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	2b80      	cmp	r3, #128	; 0x80
    7d30:	d00b      	beq.n	7d4a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    7d32:	69fb      	ldr	r3, [r7, #28]
    7d34:	2280      	movs	r2, #128	; 0x80
    7d36:	0252      	lsls	r2, r2, #9
    7d38:	4313      	orrs	r3, r2
    7d3a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	781b      	ldrb	r3, [r3, #0]
    7d40:	061b      	lsls	r3, r3, #24
    7d42:	001a      	movs	r2, r3
    7d44:	69fb      	ldr	r3, [r7, #28]
    7d46:	4313      	orrs	r3, r2
    7d48:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	785b      	ldrb	r3, [r3, #1]
    7d4e:	2b00      	cmp	r3, #0
    7d50:	d003      	beq.n	7d5a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7d56:	2b02      	cmp	r3, #2
    7d58:	d110      	bne.n	7d7c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    7d5a:	69fb      	ldr	r3, [r7, #28]
    7d5c:	2280      	movs	r2, #128	; 0x80
    7d5e:	0292      	lsls	r2, r2, #10
    7d60:	4313      	orrs	r3, r2
    7d62:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7d64:	687b      	ldr	r3, [r7, #4]
    7d66:	789b      	ldrb	r3, [r3, #2]
    7d68:	2b00      	cmp	r3, #0
    7d6a:	d004      	beq.n	7d76 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7d6c:	69fb      	ldr	r3, [r7, #28]
    7d6e:	2280      	movs	r2, #128	; 0x80
    7d70:	02d2      	lsls	r2, r2, #11
    7d72:	4313      	orrs	r3, r2
    7d74:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7d76:	68fb      	ldr	r3, [r7, #12]
    7d78:	68ba      	ldr	r2, [r7, #8]
    7d7a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7d7c:	687b      	ldr	r3, [r7, #4]
    7d7e:	785b      	ldrb	r3, [r3, #1]
    7d80:	2b01      	cmp	r3, #1
    7d82:	d003      	beq.n	7d8c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7d84:	687b      	ldr	r3, [r7, #4]
    7d86:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7d88:	2b02      	cmp	r3, #2
    7d8a:	d107      	bne.n	7d9c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7d8c:	69fb      	ldr	r3, [r7, #28]
    7d8e:	4a22      	ldr	r2, [pc, #136]	; (7e18 <_system_pinmux_config+0x10c>)
    7d90:	4013      	ands	r3, r2
    7d92:	61fb      	str	r3, [r7, #28]
    7d94:	e002      	b.n	7d9c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    7d96:	68fb      	ldr	r3, [r7, #12]
    7d98:	68ba      	ldr	r2, [r7, #8]
    7d9a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7d9c:	68bb      	ldr	r3, [r7, #8]
    7d9e:	041b      	lsls	r3, r3, #16
    7da0:	0c1b      	lsrs	r3, r3, #16
    7da2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7da4:	68bb      	ldr	r3, [r7, #8]
    7da6:	0c1b      	lsrs	r3, r3, #16
    7da8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7daa:	69ba      	ldr	r2, [r7, #24]
    7dac:	69fb      	ldr	r3, [r7, #28]
    7dae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7db0:	22a0      	movs	r2, #160	; 0xa0
    7db2:	05d2      	lsls	r2, r2, #23
    7db4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7db6:	68fb      	ldr	r3, [r7, #12]
    7db8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7dba:	697a      	ldr	r2, [r7, #20]
    7dbc:	69fb      	ldr	r3, [r7, #28]
    7dbe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7dc0:	22d0      	movs	r2, #208	; 0xd0
    7dc2:	0612      	lsls	r2, r2, #24
    7dc4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7dc6:	68fb      	ldr	r3, [r7, #12]
    7dc8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7dca:	687b      	ldr	r3, [r7, #4]
    7dcc:	78db      	ldrb	r3, [r3, #3]
    7dce:	2201      	movs	r2, #1
    7dd0:	4053      	eors	r3, r2
    7dd2:	b2db      	uxtb	r3, r3
    7dd4:	2b00      	cmp	r3, #0
    7dd6:	d01a      	beq.n	7e0e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7dd8:	69fa      	ldr	r2, [r7, #28]
    7dda:	2380      	movs	r3, #128	; 0x80
    7ddc:	02db      	lsls	r3, r3, #11
    7dde:	4013      	ands	r3, r2
    7de0:	d00a      	beq.n	7df8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7de2:	687b      	ldr	r3, [r7, #4]
    7de4:	789b      	ldrb	r3, [r3, #2]
    7de6:	2b01      	cmp	r3, #1
    7de8:	d103      	bne.n	7df2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    7dea:	68fb      	ldr	r3, [r7, #12]
    7dec:	68ba      	ldr	r2, [r7, #8]
    7dee:	619a      	str	r2, [r3, #24]
    7df0:	e002      	b.n	7df8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    7df2:	68fb      	ldr	r3, [r7, #12]
    7df4:	68ba      	ldr	r2, [r7, #8]
    7df6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7df8:	687b      	ldr	r3, [r7, #4]
    7dfa:	785b      	ldrb	r3, [r3, #1]
    7dfc:	2b01      	cmp	r3, #1
    7dfe:	d003      	beq.n	7e08 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7e04:	2b02      	cmp	r3, #2
    7e06:	d102      	bne.n	7e0e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    7e08:	68fb      	ldr	r3, [r7, #12]
    7e0a:	68ba      	ldr	r2, [r7, #8]
    7e0c:	609a      	str	r2, [r3, #8]
		}
	}
}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	46bd      	mov	sp, r7
    7e12:	b008      	add	sp, #32
    7e14:	bd80      	pop	{r7, pc}
    7e16:	46c0      	nop			; (mov r8, r8)
    7e18:	fffbffff 	.word	0xfffbffff

00007e1c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7e1c:	b580      	push	{r7, lr}
    7e1e:	b084      	sub	sp, #16
    7e20:	af00      	add	r7, sp, #0
    7e22:	0002      	movs	r2, r0
    7e24:	6039      	str	r1, [r7, #0]
    7e26:	1dfb      	adds	r3, r7, #7
    7e28:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7e2a:	1dfb      	adds	r3, r7, #7
    7e2c:	781b      	ldrb	r3, [r3, #0]
    7e2e:	0018      	movs	r0, r3
    7e30:	4b0a      	ldr	r3, [pc, #40]	; (7e5c <system_pinmux_pin_set_config+0x40>)
    7e32:	4798      	blx	r3
    7e34:	0003      	movs	r3, r0
    7e36:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7e38:	1dfb      	adds	r3, r7, #7
    7e3a:	781b      	ldrb	r3, [r3, #0]
    7e3c:	221f      	movs	r2, #31
    7e3e:	4013      	ands	r3, r2
    7e40:	2201      	movs	r2, #1
    7e42:	409a      	lsls	r2, r3
    7e44:	0013      	movs	r3, r2
    7e46:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    7e48:	683a      	ldr	r2, [r7, #0]
    7e4a:	68b9      	ldr	r1, [r7, #8]
    7e4c:	68fb      	ldr	r3, [r7, #12]
    7e4e:	0018      	movs	r0, r3
    7e50:	4b03      	ldr	r3, [pc, #12]	; (7e60 <system_pinmux_pin_set_config+0x44>)
    7e52:	4798      	blx	r3
}
    7e54:	46c0      	nop			; (mov r8, r8)
    7e56:	46bd      	mov	sp, r7
    7e58:	b004      	add	sp, #16
    7e5a:	bd80      	pop	{r7, pc}
    7e5c:	00007cad 	.word	0x00007cad
    7e60:	00007d0d 	.word	0x00007d0d

00007e64 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    7e64:	b580      	push	{r7, lr}
    7e66:	af00      	add	r7, sp, #0
	return;
    7e68:	46c0      	nop			; (mov r8, r8)
}
    7e6a:	46bd      	mov	sp, r7
    7e6c:	bd80      	pop	{r7, pc}
	...

00007e70 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7e70:	b580      	push	{r7, lr}
    7e72:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7e74:	4b06      	ldr	r3, [pc, #24]	; (7e90 <system_init+0x20>)
    7e76:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7e78:	4b06      	ldr	r3, [pc, #24]	; (7e94 <system_init+0x24>)
    7e7a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7e7c:	4b06      	ldr	r3, [pc, #24]	; (7e98 <system_init+0x28>)
    7e7e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7e80:	4b06      	ldr	r3, [pc, #24]	; (7e9c <system_init+0x2c>)
    7e82:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7e84:	4b06      	ldr	r3, [pc, #24]	; (7ea0 <system_init+0x30>)
    7e86:	4798      	blx	r3
}
    7e88:	46c0      	nop			; (mov r8, r8)
    7e8a:	46bd      	mov	sp, r7
    7e8c:	bd80      	pop	{r7, pc}
    7e8e:	46c0      	nop			; (mov r8, r8)
    7e90:	00007681 	.word	0x00007681
    7e94:	00007171 	.word	0x00007171
    7e98:	00007e65 	.word	0x00007e65
    7e9c:	00007e65 	.word	0x00007e65
    7ea0:	00007e65 	.word	0x00007e65

00007ea4 <nvm_get_config_defaults>:
{
    7ea4:	b580      	push	{r7, lr}
    7ea6:	b082      	sub	sp, #8
    7ea8:	af00      	add	r7, sp, #0
    7eaa:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    7eac:	687b      	ldr	r3, [r7, #4]
    7eae:	2200      	movs	r2, #0
    7eb0:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    7eb2:	687b      	ldr	r3, [r7, #4]
    7eb4:	2201      	movs	r2, #1
    7eb6:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    7eb8:	4b08      	ldr	r3, [pc, #32]	; (7edc <nvm_get_config_defaults+0x38>)
    7eba:	685b      	ldr	r3, [r3, #4]
    7ebc:	06db      	lsls	r3, r3, #27
    7ebe:	0f1b      	lsrs	r3, r3, #28
    7ec0:	b2db      	uxtb	r3, r3
    7ec2:	001a      	movs	r2, r3
    7ec4:	687b      	ldr	r3, [r7, #4]
    7ec6:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	2200      	movs	r2, #0
    7ecc:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    7ece:	687b      	ldr	r3, [r7, #4]
    7ed0:	2200      	movs	r2, #0
    7ed2:	711a      	strb	r2, [r3, #4]
}
    7ed4:	46c0      	nop			; (mov r8, r8)
    7ed6:	46bd      	mov	sp, r7
    7ed8:	b002      	add	sp, #8
    7eda:	bd80      	pop	{r7, pc}
    7edc:	41004000 	.word	0x41004000

00007ee0 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    7ee0:	b590      	push	{r4, r7, lr}
    7ee2:	b085      	sub	sp, #20
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	0002      	movs	r2, r0
    7ee8:	1dfb      	adds	r3, r7, #7
    7eea:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    7eec:	230f      	movs	r3, #15
    7eee:	18fb      	adds	r3, r7, r3
    7ef0:	2200      	movs	r2, #0
    7ef2:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    7ef4:	4b0a      	ldr	r3, [pc, #40]	; (7f20 <_eeprom_emulator_nvm_erase_row+0x40>)
    7ef6:	685b      	ldr	r3, [r3, #4]
    7ef8:	1dfa      	adds	r2, r7, #7
    7efa:	7812      	ldrb	r2, [r2, #0]
    7efc:	0212      	lsls	r2, r2, #8
    7efe:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
    7f00:	220f      	movs	r2, #15
    7f02:	18bc      	adds	r4, r7, r2
    7f04:	0018      	movs	r0, r3
    7f06:	4b07      	ldr	r3, [pc, #28]	; (7f24 <_eeprom_emulator_nvm_erase_row+0x44>)
    7f08:	4798      	blx	r3
    7f0a:	0003      	movs	r3, r0
    7f0c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    7f0e:	230f      	movs	r3, #15
    7f10:	18fb      	adds	r3, r7, r3
    7f12:	781b      	ldrb	r3, [r3, #0]
    7f14:	2b05      	cmp	r3, #5
    7f16:	d0ed      	beq.n	7ef4 <_eeprom_emulator_nvm_erase_row+0x14>
}
    7f18:	46c0      	nop			; (mov r8, r8)
    7f1a:	46bd      	mov	sp, r7
    7f1c:	b005      	add	sp, #20
    7f1e:	bd90      	pop	{r4, r7, pc}
    7f20:	20000218 	.word	0x20000218
    7f24:	00002f0d 	.word	0x00002f0d

00007f28 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
    7f28:	b590      	push	{r4, r7, lr}
    7f2a:	b085      	sub	sp, #20
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	0002      	movs	r2, r0
    7f30:	6039      	str	r1, [r7, #0]
    7f32:	1dbb      	adds	r3, r7, #6
    7f34:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    7f36:	230f      	movs	r3, #15
    7f38:	18fb      	adds	r3, r7, r3
    7f3a:	2200      	movs	r2, #0
    7f3c:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    7f3e:	4b0c      	ldr	r3, [pc, #48]	; (7f70 <_eeprom_emulator_nvm_fill_cache+0x48>)
    7f40:	685a      	ldr	r2, [r3, #4]
    7f42:	1dbb      	adds	r3, r7, #6
    7f44:	881b      	ldrh	r3, [r3, #0]
    7f46:	019b      	lsls	r3, r3, #6
    7f48:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
    7f4a:	0018      	movs	r0, r3
    7f4c:	230f      	movs	r3, #15
    7f4e:	18fc      	adds	r4, r7, r3
    7f50:	683b      	ldr	r3, [r7, #0]
    7f52:	2240      	movs	r2, #64	; 0x40
    7f54:	0019      	movs	r1, r3
    7f56:	4b07      	ldr	r3, [pc, #28]	; (7f74 <_eeprom_emulator_nvm_fill_cache+0x4c>)
    7f58:	4798      	blx	r3
    7f5a:	0003      	movs	r3, r0
    7f5c:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    7f5e:	230f      	movs	r3, #15
    7f60:	18fb      	adds	r3, r7, r3
    7f62:	781b      	ldrb	r3, [r3, #0]
    7f64:	2b05      	cmp	r3, #5
    7f66:	d0ea      	beq.n	7f3e <_eeprom_emulator_nvm_fill_cache+0x16>
}
    7f68:	46c0      	nop			; (mov r8, r8)
    7f6a:	46bd      	mov	sp, r7
    7f6c:	b005      	add	sp, #20
    7f6e:	bd90      	pop	{r4, r7, pc}
    7f70:	20000218 	.word	0x20000218
    7f74:	00002cc5 	.word	0x00002cc5

00007f78 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
    7f78:	b590      	push	{r4, r7, lr}
    7f7a:	b085      	sub	sp, #20
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	0002      	movs	r2, r0
    7f80:	1dbb      	adds	r3, r7, #6
    7f82:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    7f84:	230f      	movs	r3, #15
    7f86:	18fb      	adds	r3, r7, r3
    7f88:	2200      	movs	r2, #0
    7f8a:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    7f8c:	4b0b      	ldr	r3, [pc, #44]	; (7fbc <_eeprom_emulator_nvm_commit_cache+0x44>)
    7f8e:	685a      	ldr	r2, [r3, #4]
    7f90:	1dbb      	adds	r3, r7, #6
    7f92:	881b      	ldrh	r3, [r3, #0]
    7f94:	019b      	lsls	r3, r3, #6
    7f96:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
    7f98:	220f      	movs	r2, #15
    7f9a:	18bc      	adds	r4, r7, r2
    7f9c:	2200      	movs	r2, #0
    7f9e:	0019      	movs	r1, r3
    7fa0:	2004      	movs	r0, #4
    7fa2:	4b07      	ldr	r3, [pc, #28]	; (7fc0 <_eeprom_emulator_nvm_commit_cache+0x48>)
    7fa4:	4798      	blx	r3
    7fa6:	0003      	movs	r3, r0
    7fa8:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    7faa:	230f      	movs	r3, #15
    7fac:	18fb      	adds	r3, r7, r3
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	2b05      	cmp	r3, #5
    7fb2:	d0eb      	beq.n	7f8c <_eeprom_emulator_nvm_commit_cache+0x14>
}
    7fb4:	46c0      	nop			; (mov r8, r8)
    7fb6:	46bd      	mov	sp, r7
    7fb8:	b005      	add	sp, #20
    7fba:	bd90      	pop	{r4, r7, pc}
    7fbc:	20000218 	.word	0x20000218
    7fc0:	00002bad 	.word	0x00002bad

00007fc4 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
    7fc4:	b590      	push	{r4, r7, lr}
    7fc6:	b085      	sub	sp, #20
    7fc8:	af00      	add	r7, sp, #0
    7fca:	0002      	movs	r2, r0
    7fcc:	6039      	str	r1, [r7, #0]
    7fce:	1dbb      	adds	r3, r7, #6
    7fd0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    7fd2:	230f      	movs	r3, #15
    7fd4:	18fb      	adds	r3, r7, r3
    7fd6:	2200      	movs	r2, #0
    7fd8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
    7fda:	4b0c      	ldr	r3, [pc, #48]	; (800c <_eeprom_emulator_nvm_read_page+0x48>)
    7fdc:	685a      	ldr	r2, [r3, #4]
    7fde:	1dbb      	adds	r3, r7, #6
    7fe0:	881b      	ldrh	r3, [r3, #0]
    7fe2:	019b      	lsls	r3, r3, #6
    7fe4:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
    7fe6:	0018      	movs	r0, r3
    7fe8:	230f      	movs	r3, #15
    7fea:	18fc      	adds	r4, r7, r3
    7fec:	683b      	ldr	r3, [r7, #0]
    7fee:	2240      	movs	r2, #64	; 0x40
    7ff0:	0019      	movs	r1, r3
    7ff2:	4b07      	ldr	r3, [pc, #28]	; (8010 <_eeprom_emulator_nvm_read_page+0x4c>)
    7ff4:	4798      	blx	r3
    7ff6:	0003      	movs	r3, r0
    7ff8:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    7ffa:	230f      	movs	r3, #15
    7ffc:	18fb      	adds	r3, r7, r3
    7ffe:	781b      	ldrb	r3, [r3, #0]
    8000:	2b05      	cmp	r3, #5
    8002:	d0ea      	beq.n	7fda <_eeprom_emulator_nvm_read_page+0x16>
}
    8004:	46c0      	nop			; (mov r8, r8)
    8006:	46bd      	mov	sp, r7
    8008:	b005      	add	sp, #20
    800a:	bd90      	pop	{r4, r7, pc}
    800c:	20000218 	.word	0x20000218
    8010:	00002e11 	.word	0x00002e11

00008014 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
    8014:	b580      	push	{r7, lr}
    8016:	b092      	sub	sp, #72	; 0x48
    8018:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
    801a:	2346      	movs	r3, #70	; 0x46
    801c:	18fb      	adds	r3, r7, r3
    801e:	2200      	movs	r2, #0
    8020:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
    8022:	4b32      	ldr	r3, [pc, #200]	; (80ec <_eeprom_emulator_format_memory+0xd8>)
    8024:	2287      	movs	r2, #135	; 0x87
    8026:	2100      	movs	r1, #0
    8028:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    802a:	4b30      	ldr	r3, [pc, #192]	; (80ec <_eeprom_emulator_format_memory+0xd8>)
    802c:	2287      	movs	r2, #135	; 0x87
    802e:	5c9b      	ldrb	r3, [r3, r2]
    8030:	0018      	movs	r0, r3
    8032:	4b2f      	ldr	r3, [pc, #188]	; (80f0 <_eeprom_emulator_format_memory+0xdc>)
    8034:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    8036:	2344      	movs	r3, #68	; 0x44
    8038:	18fb      	adds	r3, r7, r3
    803a:	2204      	movs	r2, #4
    803c:	801a      	strh	r2, [r3, #0]
    803e:	e04a      	b.n	80d6 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    8040:	2344      	movs	r3, #68	; 0x44
    8042:	18fb      	adds	r3, r7, r3
    8044:	881a      	ldrh	r2, [r3, #0]
    8046:	4b29      	ldr	r3, [pc, #164]	; (80ec <_eeprom_emulator_format_memory+0xd8>)
    8048:	891b      	ldrh	r3, [r3, #8]
    804a:	3b01      	subs	r3, #1
    804c:	429a      	cmp	r2, r3
    804e:	d03a      	beq.n	80c6 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    8050:	2344      	movs	r3, #68	; 0x44
    8052:	18fb      	adds	r3, r7, r3
    8054:	881b      	ldrh	r3, [r3, #0]
    8056:	2203      	movs	r2, #3
    8058:	4013      	ands	r3, r2
    805a:	b29b      	uxth	r3, r3
    805c:	2b00      	cmp	r3, #0
    805e:	d108      	bne.n	8072 <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    8060:	2344      	movs	r3, #68	; 0x44
    8062:	18fb      	adds	r3, r7, r3
    8064:	881b      	ldrh	r3, [r3, #0]
    8066:	089b      	lsrs	r3, r3, #2
    8068:	b29b      	uxth	r3, r3
    806a:	b2db      	uxtb	r3, r3
    806c:	0018      	movs	r0, r3
    806e:	4b20      	ldr	r3, [pc, #128]	; (80f0 <_eeprom_emulator_format_memory+0xdc>)
    8070:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    8072:	2344      	movs	r3, #68	; 0x44
    8074:	18fb      	adds	r3, r7, r3
    8076:	881b      	ldrh	r3, [r3, #0]
    8078:	2203      	movs	r2, #3
    807a:	4013      	ands	r3, r2
    807c:	b29b      	uxth	r3, r3
    807e:	2b01      	cmp	r3, #1
    8080:	d822      	bhi.n	80c8 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
    8082:	1d3b      	adds	r3, r7, #4
    8084:	2240      	movs	r2, #64	; 0x40
    8086:	21ff      	movs	r1, #255	; 0xff
    8088:	0018      	movs	r0, r3
    808a:	4b1a      	ldr	r3, [pc, #104]	; (80f4 <_eeprom_emulator_format_memory+0xe0>)
    808c:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
    808e:	2346      	movs	r3, #70	; 0x46
    8090:	18fb      	adds	r3, r7, r3
    8092:	881b      	ldrh	r3, [r3, #0]
    8094:	b2da      	uxtb	r2, r3
    8096:	1d3b      	adds	r3, r7, #4
    8098:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    809a:	1d3a      	adds	r2, r7, #4
    809c:	2344      	movs	r3, #68	; 0x44
    809e:	18fb      	adds	r3, r7, r3
    80a0:	881b      	ldrh	r3, [r3, #0]
    80a2:	0011      	movs	r1, r2
    80a4:	0018      	movs	r0, r3
    80a6:	4b14      	ldr	r3, [pc, #80]	; (80f8 <_eeprom_emulator_format_memory+0xe4>)
    80a8:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
    80aa:	2344      	movs	r3, #68	; 0x44
    80ac:	18fb      	adds	r3, r7, r3
    80ae:	881b      	ldrh	r3, [r3, #0]
    80b0:	0018      	movs	r0, r3
    80b2:	4b12      	ldr	r3, [pc, #72]	; (80fc <_eeprom_emulator_format_memory+0xe8>)
    80b4:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
    80b6:	2346      	movs	r3, #70	; 0x46
    80b8:	18fb      	adds	r3, r7, r3
    80ba:	881a      	ldrh	r2, [r3, #0]
    80bc:	2346      	movs	r3, #70	; 0x46
    80be:	18fb      	adds	r3, r7, r3
    80c0:	3201      	adds	r2, #1
    80c2:	801a      	strh	r2, [r3, #0]
    80c4:	e000      	b.n	80c8 <_eeprom_emulator_format_memory+0xb4>
			continue;
    80c6:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    80c8:	2344      	movs	r3, #68	; 0x44
    80ca:	18fb      	adds	r3, r7, r3
    80cc:	881a      	ldrh	r2, [r3, #0]
    80ce:	2344      	movs	r3, #68	; 0x44
    80d0:	18fb      	adds	r3, r7, r3
    80d2:	3201      	adds	r2, #1
    80d4:	801a      	strh	r2, [r3, #0]
    80d6:	4b05      	ldr	r3, [pc, #20]	; (80ec <_eeprom_emulator_format_memory+0xd8>)
    80d8:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    80da:	2244      	movs	r2, #68	; 0x44
    80dc:	18ba      	adds	r2, r7, r2
    80de:	8812      	ldrh	r2, [r2, #0]
    80e0:	429a      	cmp	r2, r3
    80e2:	d3ad      	bcc.n	8040 <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
    80e4:	46c0      	nop			; (mov r8, r8)
    80e6:	46bd      	mov	sp, r7
    80e8:	b012      	add	sp, #72	; 0x48
    80ea:	bd80      	pop	{r7, pc}
    80ec:	20000218 	.word	0x20000218
    80f0:	00007ee1 	.word	0x00007ee1
    80f4:	00016cdf 	.word	0x00016cdf
    80f8:	00007f29 	.word	0x00007f29
    80fc:	00007f79 	.word	0x00007f79

00008100 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    8100:	b580      	push	{r7, lr}
    8102:	b084      	sub	sp, #16
    8104:	af00      	add	r7, sp, #0
	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    8106:	230e      	movs	r3, #14
    8108:	18fb      	adds	r3, r7, r3
    810a:	2200      	movs	r2, #0
    810c:	801a      	strh	r2, [r3, #0]
    810e:	e033      	b.n	8178 <_eeprom_emulator_update_page_mapping+0x78>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    8110:	230e      	movs	r3, #14
    8112:	18fb      	adds	r3, r7, r3
    8114:	881a      	ldrh	r2, [r3, #0]
    8116:	4b4c      	ldr	r3, [pc, #304]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8118:	891b      	ldrh	r3, [r3, #8]
    811a:	3b01      	subs	r3, #1
    811c:	429a      	cmp	r2, r3
    811e:	d023      	beq.n	8168 <_eeprom_emulator_update_page_mapping+0x68>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    8120:	4b49      	ldr	r3, [pc, #292]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8122:	685a      	ldr	r2, [r3, #4]
    8124:	230e      	movs	r3, #14
    8126:	18fb      	adds	r3, r7, r3
    8128:	881b      	ldrh	r3, [r3, #0]
    812a:	019b      	lsls	r3, r3, #6
    812c:	18d3      	adds	r3, r2, r3
    812e:	781a      	ldrb	r2, [r3, #0]
    8130:	2308      	movs	r3, #8
    8132:	18fb      	adds	r3, r7, r3
    8134:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    8136:	2308      	movs	r3, #8
    8138:	18fb      	adds	r3, r7, r3
    813a:	881b      	ldrh	r3, [r3, #0]
    813c:	2bff      	cmp	r3, #255	; 0xff
    813e:	d014      	beq.n	816a <_eeprom_emulator_update_page_mapping+0x6a>
				(logical_page < _eeprom_instance.logical_pages)) {
    8140:	4b41      	ldr	r3, [pc, #260]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8142:	7a9b      	ldrb	r3, [r3, #10]
    8144:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    8146:	2208      	movs	r2, #8
    8148:	18ba      	adds	r2, r7, r2
    814a:	8812      	ldrh	r2, [r2, #0]
    814c:	429a      	cmp	r2, r3
    814e:	d20c      	bcs.n	816a <_eeprom_emulator_update_page_mapping+0x6a>
			_eeprom_instance.page_map[logical_page] = c;
    8150:	2308      	movs	r3, #8
    8152:	18fb      	adds	r3, r7, r3
    8154:	881b      	ldrh	r3, [r3, #0]
    8156:	220e      	movs	r2, #14
    8158:	18ba      	adds	r2, r7, r2
    815a:	8812      	ldrh	r2, [r2, #0]
    815c:	b2d1      	uxtb	r1, r2
    815e:	4a3a      	ldr	r2, [pc, #232]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8160:	18d3      	adds	r3, r2, r3
    8162:	1c0a      	adds	r2, r1, #0
    8164:	72da      	strb	r2, [r3, #11]
    8166:	e000      	b.n	816a <_eeprom_emulator_update_page_mapping+0x6a>
			continue;
    8168:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    816a:	230e      	movs	r3, #14
    816c:	18fb      	adds	r3, r7, r3
    816e:	881a      	ldrh	r2, [r3, #0]
    8170:	230e      	movs	r3, #14
    8172:	18fb      	adds	r3, r7, r3
    8174:	3201      	adds	r2, #1
    8176:	801a      	strh	r2, [r3, #0]
    8178:	4b33      	ldr	r3, [pc, #204]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    817a:	891b      	ldrh	r3, [r3, #8]
    817c:	220e      	movs	r2, #14
    817e:	18ba      	adds	r2, r7, r2
    8180:	8812      	ldrh	r2, [r2, #0]
    8182:	429a      	cmp	r2, r3
    8184:	d3c4      	bcc.n	8110 <_eeprom_emulator_update_page_mapping+0x10>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    8186:	4b30      	ldr	r3, [pc, #192]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8188:	2287      	movs	r2, #135	; 0x87
    818a:	213f      	movs	r1, #63	; 0x3f
    818c:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    818e:	230c      	movs	r3, #12
    8190:	18fb      	adds	r3, r7, r3
    8192:	2200      	movs	r2, #0
    8194:	801a      	strh	r2, [r3, #0]
    8196:	e04a      	b.n	822e <_eeprom_emulator_update_page_mapping+0x12e>
		bool spare_row_found = true;
    8198:	230b      	movs	r3, #11
    819a:	18fb      	adds	r3, r7, r3
    819c:	2201      	movs	r2, #1
    819e:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    81a0:	230a      	movs	r3, #10
    81a2:	18fb      	adds	r3, r7, r3
    81a4:	2200      	movs	r2, #0
    81a6:	701a      	strb	r2, [r3, #0]
    81a8:	e028      	b.n	81fc <_eeprom_emulator_update_page_mapping+0xfc>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
    81aa:	230c      	movs	r3, #12
    81ac:	18fb      	adds	r3, r7, r3
    81ae:	881b      	ldrh	r3, [r3, #0]
    81b0:	009b      	lsls	r3, r3, #2
    81b2:	b299      	uxth	r1, r3
    81b4:	230a      	movs	r3, #10
    81b6:	18fb      	adds	r3, r7, r3
    81b8:	781b      	ldrb	r3, [r3, #0]
    81ba:	b29a      	uxth	r2, r3
    81bc:	1dbb      	adds	r3, r7, #6
    81be:	188a      	adds	r2, r1, r2
    81c0:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    81c2:	1dbb      	adds	r3, r7, #6
    81c4:	881a      	ldrh	r2, [r3, #0]
    81c6:	4b20      	ldr	r3, [pc, #128]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    81c8:	891b      	ldrh	r3, [r3, #8]
    81ca:	3b01      	subs	r3, #1
    81cc:	429a      	cmp	r2, r3
    81ce:	d00d      	beq.n	81ec <_eeprom_emulator_update_page_mapping+0xec>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    81d0:	4b1d      	ldr	r3, [pc, #116]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    81d2:	685a      	ldr	r2, [r3, #4]
    81d4:	1dbb      	adds	r3, r7, #6
    81d6:	881b      	ldrh	r3, [r3, #0]
    81d8:	019b      	lsls	r3, r3, #6
    81da:	18d3      	adds	r3, r2, r3
    81dc:	781b      	ldrb	r3, [r3, #0]
    81de:	2bff      	cmp	r3, #255	; 0xff
    81e0:	d005      	beq.n	81ee <_eeprom_emulator_update_page_mapping+0xee>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    81e2:	230b      	movs	r3, #11
    81e4:	18fb      	adds	r3, r7, r3
    81e6:	2200      	movs	r2, #0
    81e8:	701a      	strb	r2, [r3, #0]
    81ea:	e000      	b.n	81ee <_eeprom_emulator_update_page_mapping+0xee>
				continue;
    81ec:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    81ee:	230a      	movs	r3, #10
    81f0:	18fb      	adds	r3, r7, r3
    81f2:	781a      	ldrb	r2, [r3, #0]
    81f4:	230a      	movs	r3, #10
    81f6:	18fb      	adds	r3, r7, r3
    81f8:	3201      	adds	r2, #1
    81fa:	701a      	strb	r2, [r3, #0]
    81fc:	230a      	movs	r3, #10
    81fe:	18fb      	adds	r3, r7, r3
    8200:	781b      	ldrb	r3, [r3, #0]
    8202:	2b03      	cmp	r3, #3
    8204:	d9d1      	bls.n	81aa <_eeprom_emulator_update_page_mapping+0xaa>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    8206:	230b      	movs	r3, #11
    8208:	18fb      	adds	r3, r7, r3
    820a:	781b      	ldrb	r3, [r3, #0]
    820c:	2b00      	cmp	r3, #0
    820e:	d007      	beq.n	8220 <_eeprom_emulator_update_page_mapping+0x120>
			_eeprom_instance.spare_row = c;
    8210:	230c      	movs	r3, #12
    8212:	18fb      	adds	r3, r7, r3
    8214:	881b      	ldrh	r3, [r3, #0]
    8216:	b2d9      	uxtb	r1, r3
    8218:	4b0b      	ldr	r3, [pc, #44]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    821a:	2287      	movs	r2, #135	; 0x87
    821c:	5499      	strb	r1, [r3, r2]
			break;
    821e:	e00f      	b.n	8240 <_eeprom_emulator_update_page_mapping+0x140>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    8220:	230c      	movs	r3, #12
    8222:	18fb      	adds	r3, r7, r3
    8224:	881a      	ldrh	r2, [r3, #0]
    8226:	230c      	movs	r3, #12
    8228:	18fb      	adds	r3, r7, r3
    822a:	3201      	adds	r2, #1
    822c:	801a      	strh	r2, [r3, #0]
    822e:	4b06      	ldr	r3, [pc, #24]	; (8248 <_eeprom_emulator_update_page_mapping+0x148>)
    8230:	891b      	ldrh	r3, [r3, #8]
    8232:	089b      	lsrs	r3, r3, #2
    8234:	b29b      	uxth	r3, r3
    8236:	220c      	movs	r2, #12
    8238:	18ba      	adds	r2, r7, r2
    823a:	8812      	ldrh	r2, [r2, #0]
    823c:	429a      	cmp	r2, r3
    823e:	d3ab      	bcc.n	8198 <_eeprom_emulator_update_page_mapping+0x98>
		}
	}
}
    8240:	46c0      	nop			; (mov r8, r8)
    8242:	46bd      	mov	sp, r7
    8244:	b004      	add	sp, #16
    8246:	bd80      	pop	{r7, pc}
    8248:	20000218 	.word	0x20000218

0000824c <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
    824c:	b580      	push	{r7, lr}
    824e:	b084      	sub	sp, #16
    8250:	af00      	add	r7, sp, #0
    8252:	0002      	movs	r2, r0
    8254:	6039      	str	r1, [r7, #0]
    8256:	1dfb      	adds	r3, r7, #7
    8258:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
    825a:	230e      	movs	r3, #14
    825c:	18fb      	adds	r3, r7, r3
    825e:	1dfa      	adds	r2, r7, #7
    8260:	7812      	ldrb	r2, [r2, #0]
    8262:	0892      	lsrs	r2, r2, #2
    8264:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    8266:	230d      	movs	r3, #13
    8268:	18fb      	adds	r3, r7, r3
    826a:	1dfa      	adds	r2, r7, #7
    826c:	7812      	ldrb	r2, [r2, #0]
    826e:	2103      	movs	r1, #3
    8270:	400a      	ands	r2, r1
    8272:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    8274:	230f      	movs	r3, #15
    8276:	18fb      	adds	r3, r7, r3
    8278:	220d      	movs	r2, #13
    827a:	18ba      	adds	r2, r7, r2
    827c:	7812      	ldrb	r2, [r2, #0]
    827e:	701a      	strb	r2, [r3, #0]
    8280:	e023      	b.n	82ca <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    8282:	230e      	movs	r3, #14
    8284:	18fb      	adds	r3, r7, r3
    8286:	781b      	ldrb	r3, [r3, #0]
    8288:	009b      	lsls	r3, r3, #2
    828a:	b2d9      	uxtb	r1, r3
    828c:	230c      	movs	r3, #12
    828e:	18fb      	adds	r3, r7, r3
    8290:	220f      	movs	r2, #15
    8292:	18ba      	adds	r2, r7, r2
    8294:	7812      	ldrb	r2, [r2, #0]
    8296:	188a      	adds	r2, r1, r2
    8298:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
    829a:	4b11      	ldr	r3, [pc, #68]	; (82e0 <_eeprom_emulator_is_page_free_on_row+0x94>)
    829c:	685a      	ldr	r2, [r3, #4]
    829e:	230c      	movs	r3, #12
    82a0:	18fb      	adds	r3, r7, r3
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	019b      	lsls	r3, r3, #6
    82a6:	18d3      	adds	r3, r2, r3
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	2bff      	cmp	r3, #255	; 0xff
    82ac:	d106      	bne.n	82bc <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
    82ae:	683b      	ldr	r3, [r7, #0]
    82b0:	220c      	movs	r2, #12
    82b2:	18ba      	adds	r2, r7, r2
    82b4:	7812      	ldrb	r2, [r2, #0]
    82b6:	701a      	strb	r2, [r3, #0]
			return true;
    82b8:	2301      	movs	r3, #1
    82ba:	e00c      	b.n	82d6 <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    82bc:	230f      	movs	r3, #15
    82be:	18fb      	adds	r3, r7, r3
    82c0:	781a      	ldrb	r2, [r3, #0]
    82c2:	230f      	movs	r3, #15
    82c4:	18fb      	adds	r3, r7, r3
    82c6:	3201      	adds	r2, #1
    82c8:	701a      	strb	r2, [r3, #0]
    82ca:	230f      	movs	r3, #15
    82cc:	18fb      	adds	r3, r7, r3
    82ce:	781b      	ldrb	r3, [r3, #0]
    82d0:	2b03      	cmp	r3, #3
    82d2:	d9d6      	bls.n	8282 <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
    82d4:	2300      	movs	r3, #0
}
    82d6:	0018      	movs	r0, r3
    82d8:	46bd      	mov	sp, r7
    82da:	b004      	add	sp, #16
    82dc:	bd80      	pop	{r7, pc}
    82de:	46c0      	nop			; (mov r8, r8)
    82e0:	20000218 	.word	0x20000218

000082e4 <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
    82e4:	b580      	push	{r7, lr}
    82e6:	b086      	sub	sp, #24
    82e8:	af00      	add	r7, sp, #0
    82ea:	603a      	str	r2, [r7, #0]
    82ec:	1dfb      	adds	r3, r7, #7
    82ee:	1c02      	adds	r2, r0, #0
    82f0:	701a      	strb	r2, [r3, #0]
    82f2:	1dbb      	adds	r3, r7, #6
    82f4:	1c0a      	adds	r2, r1, #0
    82f6:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
    82f8:	2314      	movs	r3, #20
    82fa:	18fb      	adds	r3, r7, r3
    82fc:	2200      	movs	r2, #0
    82fe:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    8300:	4b69      	ldr	r3, [pc, #420]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8302:	685b      	ldr	r3, [r3, #4]
    8304:	1dfa      	adds	r2, r7, #7
    8306:	7812      	ldrb	r2, [r2, #0]
    8308:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
    830a:	189b      	adds	r3, r3, r2
    830c:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    830e:	693b      	ldr	r3, [r7, #16]
    8310:	781a      	ldrb	r2, [r3, #0]
    8312:	2308      	movs	r3, #8
    8314:	18fb      	adds	r3, r7, r3
    8316:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    8318:	1dfb      	adds	r3, r7, #7
    831a:	781b      	ldrb	r3, [r3, #0]
    831c:	009b      	lsls	r3, r3, #2
    831e:	b2da      	uxtb	r2, r3
    8320:	2308      	movs	r3, #8
    8322:	18fb      	adds	r3, r7, r3
    8324:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
    8326:	693b      	ldr	r3, [r7, #16]
    8328:	3340      	adds	r3, #64	; 0x40
    832a:	781a      	ldrb	r2, [r3, #0]
    832c:	2308      	movs	r3, #8
    832e:	18fb      	adds	r3, r7, r3
    8330:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    8332:	1dfb      	adds	r3, r7, #7
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	009b      	lsls	r3, r3, #2
    8338:	b2db      	uxtb	r3, r3
    833a:	3301      	adds	r3, #1
    833c:	b2da      	uxtb	r2, r3
    833e:	2308      	movs	r3, #8
    8340:	18fb      	adds	r3, r7, r3
    8342:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
    8344:	2317      	movs	r3, #23
    8346:	18fb      	adds	r3, r7, r3
    8348:	2200      	movs	r2, #0
    834a:	701a      	strb	r2, [r3, #0]
    834c:	e03a      	b.n	83c4 <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    834e:	2316      	movs	r3, #22
    8350:	18fb      	adds	r3, r7, r3
    8352:	2202      	movs	r2, #2
    8354:	701a      	strb	r2, [r3, #0]
    8356:	e029      	b.n	83ac <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    8358:	2317      	movs	r3, #23
    835a:	18fb      	adds	r3, r7, r3
    835c:	781a      	ldrb	r2, [r3, #0]
    835e:	2308      	movs	r3, #8
    8360:	18fb      	adds	r3, r7, r3
    8362:	0052      	lsls	r2, r2, #1
    8364:	5cd2      	ldrb	r2, [r2, r3]
    8366:	2316      	movs	r3, #22
    8368:	18fb      	adds	r3, r7, r3
    836a:	781b      	ldrb	r3, [r3, #0]
    836c:	019b      	lsls	r3, r3, #6
    836e:	6939      	ldr	r1, [r7, #16]
    8370:	18cb      	adds	r3, r1, r3
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	429a      	cmp	r2, r3
    8376:	d112      	bne.n	839e <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
    8378:	2317      	movs	r3, #23
    837a:	18fb      	adds	r3, r7, r3
    837c:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    837e:	1dfa      	adds	r2, r7, #7
    8380:	7812      	ldrb	r2, [r2, #0]
    8382:	0092      	lsls	r2, r2, #2
    8384:	b2d1      	uxtb	r1, r2
    8386:	2216      	movs	r2, #22
    8388:	18ba      	adds	r2, r7, r2
    838a:	7812      	ldrb	r2, [r2, #0]
    838c:	188a      	adds	r2, r1, r2
    838e:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
    8390:	2208      	movs	r2, #8
    8392:	18ba      	adds	r2, r7, r2
    8394:	005b      	lsls	r3, r3, #1
    8396:	18d3      	adds	r3, r2, r3
    8398:	3301      	adds	r3, #1
    839a:	1c0a      	adds	r2, r1, #0
    839c:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
    839e:	2316      	movs	r3, #22
    83a0:	18fb      	adds	r3, r7, r3
    83a2:	781a      	ldrb	r2, [r3, #0]
    83a4:	2316      	movs	r3, #22
    83a6:	18fb      	adds	r3, r7, r3
    83a8:	3201      	adds	r2, #1
    83aa:	701a      	strb	r2, [r3, #0]
    83ac:	2316      	movs	r3, #22
    83ae:	18fb      	adds	r3, r7, r3
    83b0:	781b      	ldrb	r3, [r3, #0]
    83b2:	2b03      	cmp	r3, #3
    83b4:	d9d0      	bls.n	8358 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
    83b6:	2317      	movs	r3, #23
    83b8:	18fb      	adds	r3, r7, r3
    83ba:	781a      	ldrb	r2, [r3, #0]
    83bc:	2317      	movs	r3, #23
    83be:	18fb      	adds	r3, r7, r3
    83c0:	3201      	adds	r2, #1
    83c2:	701a      	strb	r2, [r3, #0]
    83c4:	2317      	movs	r3, #23
    83c6:	18fb      	adds	r3, r7, r3
    83c8:	781b      	ldrb	r3, [r3, #0]
    83ca:	2b01      	cmp	r3, #1
    83cc:	d9bf      	bls.n	834e <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
    83ce:	2315      	movs	r3, #21
    83d0:	18fb      	adds	r3, r7, r3
    83d2:	2200      	movs	r2, #0
    83d4:	701a      	strb	r2, [r3, #0]
    83d6:	e051      	b.n	847c <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    83d8:	4b33      	ldr	r3, [pc, #204]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    83da:	2287      	movs	r2, #135	; 0x87
    83dc:	5c9b      	ldrb	r3, [r3, r2]
    83de:	009a      	lsls	r2, r3, #2
    83e0:	2315      	movs	r3, #21
    83e2:	18fb      	adds	r3, r7, r3
    83e4:	781b      	ldrb	r3, [r3, #0]
    83e6:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
    83e8:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    83ea:	4b30      	ldr	r3, [pc, #192]	; (84ac <_eeprom_emulator_move_data_to_spare+0x1c8>)
    83ec:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
    83ee:	2315      	movs	r3, #21
    83f0:	18fb      	adds	r3, r7, r3
    83f2:	781a      	ldrb	r2, [r3, #0]
    83f4:	2308      	movs	r3, #8
    83f6:	18fb      	adds	r3, r7, r3
    83f8:	0052      	lsls	r2, r2, #1
    83fa:	5cd3      	ldrb	r3, [r2, r3]
    83fc:	1dba      	adds	r2, r7, #6
    83fe:	7812      	ldrb	r2, [r2, #0]
    8400:	429a      	cmp	r2, r3
    8402:	d10d      	bne.n	8420 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
    8404:	4b28      	ldr	r3, [pc, #160]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8406:	1dba      	adds	r2, r7, #6
    8408:	2188      	movs	r1, #136	; 0x88
    840a:	7812      	ldrb	r2, [r2, #0]
    840c:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    840e:	4b26      	ldr	r3, [pc, #152]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8410:	228c      	movs	r2, #140	; 0x8c
    8412:	6839      	ldr	r1, [r7, #0]
    8414:	189b      	adds	r3, r3, r2
    8416:	223c      	movs	r2, #60	; 0x3c
    8418:	0018      	movs	r0, r3
    841a:	4b25      	ldr	r3, [pc, #148]	; (84b0 <_eeprom_emulator_move_data_to_spare+0x1cc>)
    841c:	4798      	blx	r3
    841e:	e00e      	b.n	843e <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
    8420:	2315      	movs	r3, #21
    8422:	18fb      	adds	r3, r7, r3
    8424:	781b      	ldrb	r3, [r3, #0]
    8426:	2208      	movs	r2, #8
    8428:	18ba      	adds	r2, r7, r2
    842a:	005b      	lsls	r3, r3, #1
    842c:	18d3      	adds	r3, r2, r3
    842e:	3301      	adds	r3, #1
    8430:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
    8432:	b29b      	uxth	r3, r3
    8434:	4a1f      	ldr	r2, [pc, #124]	; (84b4 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    8436:	0011      	movs	r1, r2
    8438:	0018      	movs	r0, r3
    843a:	4b1f      	ldr	r3, [pc, #124]	; (84b8 <_eeprom_emulator_move_data_to_spare+0x1d4>)
    843c:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    843e:	68fb      	ldr	r3, [r7, #12]
    8440:	b29b      	uxth	r3, r3
    8442:	4a1c      	ldr	r2, [pc, #112]	; (84b4 <_eeprom_emulator_move_data_to_spare+0x1d0>)
    8444:	0011      	movs	r1, r2
    8446:	0018      	movs	r0, r3
    8448:	4b1c      	ldr	r3, [pc, #112]	; (84bc <_eeprom_emulator_move_data_to_spare+0x1d8>)
    844a:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    844c:	2315      	movs	r3, #21
    844e:	18fb      	adds	r3, r7, r3
    8450:	781a      	ldrb	r2, [r3, #0]
    8452:	2308      	movs	r3, #8
    8454:	18fb      	adds	r3, r7, r3
    8456:	0052      	lsls	r2, r2, #1
    8458:	5cd3      	ldrb	r3, [r2, r3]
    845a:	0019      	movs	r1, r3
    845c:	68fb      	ldr	r3, [r7, #12]
    845e:	b2da      	uxtb	r2, r3
    8460:	4b11      	ldr	r3, [pc, #68]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8462:	185b      	adds	r3, r3, r1
    8464:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
    8466:	4b10      	ldr	r3, [pc, #64]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8468:	22c8      	movs	r2, #200	; 0xc8
    846a:	2101      	movs	r1, #1
    846c:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
    846e:	2315      	movs	r3, #21
    8470:	18fb      	adds	r3, r7, r3
    8472:	781a      	ldrb	r2, [r3, #0]
    8474:	2315      	movs	r3, #21
    8476:	18fb      	adds	r3, r7, r3
    8478:	3201      	adds	r2, #1
    847a:	701a      	strb	r2, [r3, #0]
    847c:	2315      	movs	r3, #21
    847e:	18fb      	adds	r3, r7, r3
    8480:	781b      	ldrb	r3, [r3, #0]
    8482:	2b01      	cmp	r3, #1
    8484:	d9a8      	bls.n	83d8 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
    8486:	1dfb      	adds	r3, r7, #7
    8488:	781b      	ldrb	r3, [r3, #0]
    848a:	0018      	movs	r0, r3
    848c:	4b0c      	ldr	r3, [pc, #48]	; (84c0 <_eeprom_emulator_move_data_to_spare+0x1dc>)
    848e:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
    8490:	4b05      	ldr	r3, [pc, #20]	; (84a8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
    8492:	1dfa      	adds	r2, r7, #7
    8494:	2187      	movs	r1, #135	; 0x87
    8496:	7812      	ldrb	r2, [r2, #0]
    8498:	545a      	strb	r2, [r3, r1]

	return error_code;
    849a:	2314      	movs	r3, #20
    849c:	18fb      	adds	r3, r7, r3
    849e:	781b      	ldrb	r3, [r3, #0]
}
    84a0:	0018      	movs	r0, r3
    84a2:	46bd      	mov	sp, r7
    84a4:	b006      	add	sp, #24
    84a6:	bd80      	pop	{r7, pc}
    84a8:	20000218 	.word	0x20000218
    84ac:	000088e1 	.word	0x000088e1
    84b0:	00016ccd 	.word	0x00016ccd
    84b4:	200002a0 	.word	0x200002a0
    84b8:	00007fc5 	.word	0x00007fc5
    84bc:	00007f29 	.word	0x00007f29
    84c0:	00007ee1 	.word	0x00007ee1

000084c4 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
    84c4:	b590      	push	{r4, r7, lr}
    84c6:	b095      	sub	sp, #84	; 0x54
    84c8:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    84ca:	2340      	movs	r3, #64	; 0x40
    84cc:	18fb      	adds	r3, r7, r3
    84ce:	4a29      	ldr	r2, [pc, #164]	; (8574 <_eeprom_emulator_create_master_page+0xb0>)
    84d0:	ca13      	ldmia	r2!, {r0, r1, r4}
    84d2:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
    84d4:	003b      	movs	r3, r7
    84d6:	2240      	movs	r2, #64	; 0x40
    84d8:	21ff      	movs	r1, #255	; 0xff
    84da:	0018      	movs	r0, r3
    84dc:	4b26      	ldr	r3, [pc, #152]	; (8578 <_eeprom_emulator_create_master_page+0xb4>)
    84de:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    84e0:	234f      	movs	r3, #79	; 0x4f
    84e2:	18fb      	adds	r3, r7, r3
    84e4:	2200      	movs	r2, #0
    84e6:	701a      	strb	r2, [r3, #0]
    84e8:	e013      	b.n	8512 <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
    84ea:	234f      	movs	r3, #79	; 0x4f
    84ec:	18fb      	adds	r3, r7, r3
    84ee:	781a      	ldrb	r2, [r3, #0]
    84f0:	234f      	movs	r3, #79	; 0x4f
    84f2:	18fb      	adds	r3, r7, r3
    84f4:	7819      	ldrb	r1, [r3, #0]
    84f6:	2340      	movs	r3, #64	; 0x40
    84f8:	18fb      	adds	r3, r7, r3
    84fa:	0089      	lsls	r1, r1, #2
    84fc:	58c9      	ldr	r1, [r1, r3]
    84fe:	003b      	movs	r3, r7
    8500:	0092      	lsls	r2, r2, #2
    8502:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    8504:	234f      	movs	r3, #79	; 0x4f
    8506:	18fb      	adds	r3, r7, r3
    8508:	781a      	ldrb	r2, [r3, #0]
    850a:	234f      	movs	r3, #79	; 0x4f
    850c:	18fb      	adds	r3, r7, r3
    850e:	3201      	adds	r2, #1
    8510:	701a      	strb	r2, [r3, #0]
    8512:	234f      	movs	r3, #79	; 0x4f
    8514:	18fb      	adds	r3, r7, r3
    8516:	781b      	ldrb	r3, [r3, #0]
    8518:	2b02      	cmp	r3, #2
    851a:	d9e6      	bls.n	84ea <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    851c:	003b      	movs	r3, r7
    851e:	2201      	movs	r2, #1
    8520:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    8522:	003b      	movs	r3, r7
    8524:	2201      	movs	r2, #1
    8526:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    8528:	003b      	movs	r3, r7
    852a:	2200      	movs	r2, #0
    852c:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
    852e:	003b      	movs	r3, r7
    8530:	2200      	movs	r2, #0
    8532:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    8534:	4b11      	ldr	r3, [pc, #68]	; (857c <_eeprom_emulator_create_master_page+0xb8>)
    8536:	891b      	ldrh	r3, [r3, #8]
    8538:	3b01      	subs	r3, #1
    853a:	2b00      	cmp	r3, #0
    853c:	da00      	bge.n	8540 <_eeprom_emulator_create_master_page+0x7c>
    853e:	3303      	adds	r3, #3
    8540:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
    8542:	b2db      	uxtb	r3, r3
    8544:	0018      	movs	r0, r3
    8546:	4b0e      	ldr	r3, [pc, #56]	; (8580 <_eeprom_emulator_create_master_page+0xbc>)
    8548:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    854a:	4b0c      	ldr	r3, [pc, #48]	; (857c <_eeprom_emulator_create_master_page+0xb8>)
    854c:	891b      	ldrh	r3, [r3, #8]
    854e:	3b01      	subs	r3, #1
    8550:	b29b      	uxth	r3, r3
    8552:	003a      	movs	r2, r7
    8554:	0011      	movs	r1, r2
    8556:	0018      	movs	r0, r3
    8558:	4b0a      	ldr	r3, [pc, #40]	; (8584 <_eeprom_emulator_create_master_page+0xc0>)
    855a:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    855c:	4b07      	ldr	r3, [pc, #28]	; (857c <_eeprom_emulator_create_master_page+0xb8>)
    855e:	891b      	ldrh	r3, [r3, #8]
    8560:	3b01      	subs	r3, #1
    8562:	b29b      	uxth	r3, r3
    8564:	0018      	movs	r0, r3
    8566:	4b08      	ldr	r3, [pc, #32]	; (8588 <_eeprom_emulator_create_master_page+0xc4>)
    8568:	4798      	blx	r3
}
    856a:	46c0      	nop			; (mov r8, r8)
    856c:	46bd      	mov	sp, r7
    856e:	b015      	add	sp, #84	; 0x54
    8570:	bd90      	pop	{r4, r7, pc}
    8572:	46c0      	nop			; (mov r8, r8)
    8574:	0001700c 	.word	0x0001700c
    8578:	00016cdf 	.word	0x00016cdf
    857c:	20000218 	.word	0x20000218
    8580:	00007ee1 	.word	0x00007ee1
    8584:	00007f29 	.word	0x00007f29
    8588:	00007f79 	.word	0x00007f79

0000858c <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
    858c:	b590      	push	{r4, r7, lr}
    858e:	b095      	sub	sp, #84	; 0x54
    8590:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    8592:	2340      	movs	r3, #64	; 0x40
    8594:	18fb      	adds	r3, r7, r3
    8596:	4a22      	ldr	r2, [pc, #136]	; (8620 <_eeprom_emulator_verify_master_page+0x94>)
    8598:	ca13      	ldmia	r2!, {r0, r1, r4}
    859a:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    859c:	4b21      	ldr	r3, [pc, #132]	; (8624 <_eeprom_emulator_verify_master_page+0x98>)
    859e:	891b      	ldrh	r3, [r3, #8]
    85a0:	3b01      	subs	r3, #1
    85a2:	b29b      	uxth	r3, r3
    85a4:	003a      	movs	r2, r7
    85a6:	0011      	movs	r1, r2
    85a8:	0018      	movs	r0, r3
    85aa:	4b1f      	ldr	r3, [pc, #124]	; (8628 <_eeprom_emulator_verify_master_page+0x9c>)
    85ac:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    85ae:	234f      	movs	r3, #79	; 0x4f
    85b0:	18fb      	adds	r3, r7, r3
    85b2:	2200      	movs	r2, #0
    85b4:	701a      	strb	r2, [r3, #0]
    85b6:	e017      	b.n	85e8 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
    85b8:	234f      	movs	r3, #79	; 0x4f
    85ba:	18fb      	adds	r3, r7, r3
    85bc:	781a      	ldrb	r2, [r3, #0]
    85be:	003b      	movs	r3, r7
    85c0:	0092      	lsls	r2, r2, #2
    85c2:	58d2      	ldr	r2, [r2, r3]
    85c4:	234f      	movs	r3, #79	; 0x4f
    85c6:	18fb      	adds	r3, r7, r3
    85c8:	7819      	ldrb	r1, [r3, #0]
    85ca:	2340      	movs	r3, #64	; 0x40
    85cc:	18fb      	adds	r3, r7, r3
    85ce:	0089      	lsls	r1, r1, #2
    85d0:	58cb      	ldr	r3, [r1, r3]
    85d2:	429a      	cmp	r2, r3
    85d4:	d001      	beq.n	85da <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
    85d6:	231a      	movs	r3, #26
    85d8:	e01e      	b.n	8618 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    85da:	234f      	movs	r3, #79	; 0x4f
    85dc:	18fb      	adds	r3, r7, r3
    85de:	781a      	ldrb	r2, [r3, #0]
    85e0:	234f      	movs	r3, #79	; 0x4f
    85e2:	18fb      	adds	r3, r7, r3
    85e4:	3201      	adds	r2, #1
    85e6:	701a      	strb	r2, [r3, #0]
    85e8:	234f      	movs	r3, #79	; 0x4f
    85ea:	18fb      	adds	r3, r7, r3
    85ec:	781b      	ldrb	r3, [r3, #0]
    85ee:	2b02      	cmp	r3, #2
    85f0:	d9e2      	bls.n	85b8 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    85f2:	003b      	movs	r3, r7
    85f4:	7bdb      	ldrb	r3, [r3, #15]
    85f6:	2b01      	cmp	r3, #1
    85f8:	d001      	beq.n	85fe <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
    85fa:	2310      	movs	r3, #16
    85fc:	e00c      	b.n	8618 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    85fe:	003b      	movs	r3, r7
    8600:	7b1b      	ldrb	r3, [r3, #12]
    8602:	2b01      	cmp	r3, #1
    8604:	d001      	beq.n	860a <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
    8606:	2310      	movs	r3, #16
    8608:	e006      	b.n	8618 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    860a:	003b      	movs	r3, r7
    860c:	7b5b      	ldrb	r3, [r3, #13]
    860e:	2b00      	cmp	r3, #0
    8610:	d001      	beq.n	8616 <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
    8612:	2310      	movs	r3, #16
    8614:	e000      	b.n	8618 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
    8616:	2300      	movs	r3, #0
}
    8618:	0018      	movs	r0, r3
    861a:	46bd      	mov	sp, r7
    861c:	b015      	add	sp, #84	; 0x54
    861e:	bd90      	pop	{r4, r7, pc}
    8620:	0001700c 	.word	0x0001700c
    8624:	20000218 	.word	0x20000218
    8628:	00007fc5 	.word	0x00007fc5

0000862c <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    862c:	b590      	push	{r4, r7, lr}
    862e:	b087      	sub	sp, #28
    8630:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    8632:	2317      	movs	r3, #23
    8634:	18fb      	adds	r3, r7, r3
    8636:	2200      	movs	r2, #0
    8638:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
    863a:	2310      	movs	r3, #16
    863c:	18fb      	adds	r3, r7, r3
    863e:	0018      	movs	r0, r3
    8640:	4b2e      	ldr	r3, [pc, #184]	; (86fc <eeprom_emulator_init+0xd0>)
    8642:	4798      	blx	r3
	config.manual_page_write = true;
    8644:	2310      	movs	r3, #16
    8646:	18fb      	adds	r3, r7, r3
    8648:	2201      	movs	r2, #1
    864a:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    864c:	2317      	movs	r3, #23
    864e:	18fc      	adds	r4, r7, r3
    8650:	2310      	movs	r3, #16
    8652:	18fb      	adds	r3, r7, r3
    8654:	0018      	movs	r0, r3
    8656:	4b2a      	ldr	r3, [pc, #168]	; (8700 <eeprom_emulator_init+0xd4>)
    8658:	4798      	blx	r3
    865a:	0003      	movs	r3, r0
    865c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    865e:	2317      	movs	r3, #23
    8660:	18fb      	adds	r3, r7, r3
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	2b05      	cmp	r3, #5
    8666:	d0f1      	beq.n	864c <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    8668:	1d3b      	adds	r3, r7, #4
    866a:	0018      	movs	r0, r3
    866c:	4b25      	ldr	r3, [pc, #148]	; (8704 <eeprom_emulator_init+0xd8>)
    866e:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    8670:	1d3b      	adds	r3, r7, #4
    8672:	685b      	ldr	r3, [r3, #4]
    8674:	2b0b      	cmp	r3, #11
    8676:	d801      	bhi.n	867c <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
    8678:	2316      	movs	r3, #22
    867a:	e03b      	b.n	86f4 <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
    867c:	1d3b      	adds	r3, r7, #4
    867e:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
    8680:	b29a      	uxth	r2, r3
    8682:	4b21      	ldr	r3, [pc, #132]	; (8708 <eeprom_emulator_init+0xdc>)
    8684:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    8686:	1d3b      	adds	r3, r7, #4
    8688:	685b      	ldr	r3, [r3, #4]
    868a:	3b08      	subs	r3, #8
    868c:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
    868e:	b2da      	uxtb	r2, r3
    8690:	4b1d      	ldr	r3, [pc, #116]	; (8708 <eeprom_emulator_init+0xdc>)
    8692:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
    8694:	4b1c      	ldr	r3, [pc, #112]	; (8708 <eeprom_emulator_init+0xdc>)
    8696:	891b      	ldrh	r3, [r3, #8]
    8698:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
    869a:	0013      	movs	r3, r2
    869c:	069b      	lsls	r3, r3, #26
    869e:	1a9b      	subs	r3, r3, r2
    86a0:	019b      	lsls	r3, r3, #6
    86a2:	2280      	movs	r2, #128	; 0x80
    86a4:	02d2      	lsls	r2, r2, #11
    86a6:	4694      	mov	ip, r2
    86a8:	4463      	add	r3, ip
    86aa:	001a      	movs	r2, r3
	_eeprom_instance.flash =
    86ac:	4b16      	ldr	r3, [pc, #88]	; (8708 <eeprom_emulator_init+0xdc>)
    86ae:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
    86b0:	4b15      	ldr	r3, [pc, #84]	; (8708 <eeprom_emulator_init+0xdc>)
    86b2:	22c8      	movs	r2, #200	; 0xc8
    86b4:	2100      	movs	r1, #0
    86b6:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
    86b8:	4b14      	ldr	r3, [pc, #80]	; (870c <eeprom_emulator_init+0xe0>)
    86ba:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    86bc:	4b12      	ldr	r3, [pc, #72]	; (8708 <eeprom_emulator_init+0xdc>)
    86be:	2287      	movs	r2, #135	; 0x87
    86c0:	5c9b      	ldrb	r3, [r3, r2]
    86c2:	2b3f      	cmp	r3, #63	; 0x3f
    86c4:	d101      	bne.n	86ca <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
    86c6:	231a      	movs	r3, #26
    86c8:	e014      	b.n	86f4 <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
    86ca:	2317      	movs	r3, #23
    86cc:	18fc      	adds	r4, r7, r3
    86ce:	4b10      	ldr	r3, [pc, #64]	; (8710 <eeprom_emulator_init+0xe4>)
    86d0:	4798      	blx	r3
    86d2:	0003      	movs	r3, r0
    86d4:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
    86d6:	2317      	movs	r3, #23
    86d8:	18fb      	adds	r3, r7, r3
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	2b00      	cmp	r3, #0
    86de:	d003      	beq.n	86e8 <eeprom_emulator_init+0xbc>
		return error_code;
    86e0:	2317      	movs	r3, #23
    86e2:	18fb      	adds	r3, r7, r3
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	e005      	b.n	86f4 <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
    86e8:	4b07      	ldr	r3, [pc, #28]	; (8708 <eeprom_emulator_init+0xdc>)
    86ea:	2201      	movs	r2, #1
    86ec:	701a      	strb	r2, [r3, #0]

	return error_code;
    86ee:	2317      	movs	r3, #23
    86f0:	18fb      	adds	r3, r7, r3
    86f2:	781b      	ldrb	r3, [r3, #0]
}
    86f4:	0018      	movs	r0, r3
    86f6:	46bd      	mov	sp, r7
    86f8:	b007      	add	sp, #28
    86fa:	bd90      	pop	{r4, r7, pc}
    86fc:	00007ea5 	.word	0x00007ea5
    8700:	00002ad5 	.word	0x00002ad5
    8704:	00002fa1 	.word	0x00002fa1
    8708:	20000218 	.word	0x20000218
    870c:	00008101 	.word	0x00008101
    8710:	0000858d 	.word	0x0000858d

00008714 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    8714:	b580      	push	{r7, lr}
    8716:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
    8718:	4b04      	ldr	r3, [pc, #16]	; (872c <eeprom_emulator_erase_memory+0x18>)
    871a:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
    871c:	4b04      	ldr	r3, [pc, #16]	; (8730 <eeprom_emulator_erase_memory+0x1c>)
    871e:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    8720:	4b04      	ldr	r3, [pc, #16]	; (8734 <eeprom_emulator_erase_memory+0x20>)
    8722:	4798      	blx	r3
}
    8724:	46c0      	nop			; (mov r8, r8)
    8726:	46bd      	mov	sp, r7
    8728:	bd80      	pop	{r7, pc}
    872a:	46c0      	nop			; (mov r8, r8)
    872c:	00008015 	.word	0x00008015
    8730:	000084c5 	.word	0x000084c5
    8734:	00008101 	.word	0x00008101

00008738 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
    8738:	b590      	push	{r4, r7, lr}
    873a:	b085      	sub	sp, #20
    873c:	af00      	add	r7, sp, #0
    873e:	0002      	movs	r2, r0
    8740:	6039      	str	r1, [r7, #0]
    8742:	1dfb      	adds	r3, r7, #7
    8744:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    8746:	4b38      	ldr	r3, [pc, #224]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8748:	781b      	ldrb	r3, [r3, #0]
    874a:	2201      	movs	r2, #1
    874c:	4053      	eors	r3, r2
    874e:	b2db      	uxtb	r3, r3
    8750:	2b00      	cmp	r3, #0
    8752:	d001      	beq.n	8758 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    8754:	231f      	movs	r3, #31
    8756:	e063      	b.n	8820 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    8758:	4b33      	ldr	r3, [pc, #204]	; (8828 <eeprom_emulator_write_page+0xf0>)
    875a:	7a9b      	ldrb	r3, [r3, #10]
    875c:	1dfa      	adds	r2, r7, #7
    875e:	7812      	ldrb	r2, [r2, #0]
    8760:	429a      	cmp	r2, r3
    8762:	d301      	bcc.n	8768 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    8764:	2318      	movs	r3, #24
    8766:	e05b      	b.n	8820 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
    8768:	4b2f      	ldr	r3, [pc, #188]	; (8828 <eeprom_emulator_write_page+0xf0>)
    876a:	22c8      	movs	r2, #200	; 0xc8
    876c:	5c9b      	ldrb	r3, [r3, r2]
    876e:	2b00      	cmp	r3, #0
    8770:	d008      	beq.n	8784 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    8772:	4b2d      	ldr	r3, [pc, #180]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8774:	2288      	movs	r2, #136	; 0x88
    8776:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    8778:	1dfa      	adds	r2, r7, #7
    877a:	7812      	ldrb	r2, [r2, #0]
    877c:	429a      	cmp	r2, r3
    877e:	d001      	beq.n	8784 <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
    8780:	4b2a      	ldr	r3, [pc, #168]	; (882c <eeprom_emulator_write_page+0xf4>)
    8782:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
    8784:	230e      	movs	r3, #14
    8786:	18fb      	adds	r3, r7, r3
    8788:	2200      	movs	r2, #0
    878a:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    878c:	1dfb      	adds	r3, r7, #7
    878e:	781b      	ldrb	r3, [r3, #0]
    8790:	4a25      	ldr	r2, [pc, #148]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8792:	18d3      	adds	r3, r2, r3
    8794:	7adb      	ldrb	r3, [r3, #11]
    8796:	220f      	movs	r2, #15
    8798:	18bc      	adds	r4, r7, r2
    879a:	220e      	movs	r2, #14
    879c:	18ba      	adds	r2, r7, r2
    879e:	0011      	movs	r1, r2
    87a0:	0018      	movs	r0, r3
    87a2:	4b23      	ldr	r3, [pc, #140]	; (8830 <eeprom_emulator_write_page+0xf8>)
    87a4:	4798      	blx	r3
    87a6:	0003      	movs	r3, r0
    87a8:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
    87aa:	230f      	movs	r3, #15
    87ac:	18fb      	adds	r3, r7, r3
    87ae:	781b      	ldrb	r3, [r3, #0]
    87b0:	2201      	movs	r2, #1
    87b2:	4053      	eors	r3, r2
    87b4:	b2db      	uxtb	r3, r3
    87b6:	2b00      	cmp	r3, #0
    87b8:	d00e      	beq.n	87d8 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
    87ba:	1dfb      	adds	r3, r7, #7
    87bc:	781b      	ldrb	r3, [r3, #0]
    87be:	4a1a      	ldr	r2, [pc, #104]	; (8828 <eeprom_emulator_write_page+0xf0>)
    87c0:	18d3      	adds	r3, r2, r3
    87c2:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
    87c4:	089b      	lsrs	r3, r3, #2
    87c6:	b2d8      	uxtb	r0, r3
    87c8:	683a      	ldr	r2, [r7, #0]
    87ca:	1dfb      	adds	r3, r7, #7
    87cc:	781b      	ldrb	r3, [r3, #0]
    87ce:	0019      	movs	r1, r3
    87d0:	4b18      	ldr	r3, [pc, #96]	; (8834 <eeprom_emulator_write_page+0xfc>)
    87d2:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
    87d4:	2300      	movs	r3, #0
    87d6:	e023      	b.n	8820 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
    87d8:	4b13      	ldr	r3, [pc, #76]	; (8828 <eeprom_emulator_write_page+0xf0>)
    87da:	1dfa      	adds	r2, r7, #7
    87dc:	2188      	movs	r1, #136	; 0x88
    87de:	7812      	ldrb	r2, [r2, #0]
    87e0:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
    87e2:	4b11      	ldr	r3, [pc, #68]	; (8828 <eeprom_emulator_write_page+0xf0>)
    87e4:	228c      	movs	r2, #140	; 0x8c
    87e6:	6839      	ldr	r1, [r7, #0]
    87e8:	189b      	adds	r3, r3, r2
    87ea:	223c      	movs	r2, #60	; 0x3c
    87ec:	0018      	movs	r0, r3
    87ee:	4b12      	ldr	r3, [pc, #72]	; (8838 <eeprom_emulator_write_page+0x100>)
    87f0:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    87f2:	230e      	movs	r3, #14
    87f4:	18fb      	adds	r3, r7, r3
    87f6:	781b      	ldrb	r3, [r3, #0]
    87f8:	b29b      	uxth	r3, r3
    87fa:	4a10      	ldr	r2, [pc, #64]	; (883c <eeprom_emulator_write_page+0x104>)
    87fc:	0011      	movs	r1, r2
    87fe:	0018      	movs	r0, r3
    8800:	4b0f      	ldr	r3, [pc, #60]	; (8840 <eeprom_emulator_write_page+0x108>)
    8802:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
    8804:	1dfb      	adds	r3, r7, #7
    8806:	781b      	ldrb	r3, [r3, #0]
    8808:	220e      	movs	r2, #14
    880a:	18ba      	adds	r2, r7, r2
    880c:	7811      	ldrb	r1, [r2, #0]
    880e:	4a06      	ldr	r2, [pc, #24]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8810:	18d3      	adds	r3, r2, r3
    8812:	1c0a      	adds	r2, r1, #0
    8814:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
    8816:	4b04      	ldr	r3, [pc, #16]	; (8828 <eeprom_emulator_write_page+0xf0>)
    8818:	22c8      	movs	r2, #200	; 0xc8
    881a:	2101      	movs	r1, #1
    881c:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
    881e:	2300      	movs	r3, #0
}
    8820:	0018      	movs	r0, r3
    8822:	46bd      	mov	sp, r7
    8824:	b005      	add	sp, #20
    8826:	bd90      	pop	{r4, r7, pc}
    8828:	20000218 	.word	0x20000218
    882c:	000088e1 	.word	0x000088e1
    8830:	0000824d 	.word	0x0000824d
    8834:	000082e5 	.word	0x000082e5
    8838:	00016ccd 	.word	0x00016ccd
    883c:	200002a0 	.word	0x200002a0
    8840:	00007f29 	.word	0x00007f29

00008844 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    8844:	b580      	push	{r7, lr}
    8846:	b092      	sub	sp, #72	; 0x48
    8848:	af00      	add	r7, sp, #0
    884a:	0002      	movs	r2, r0
    884c:	6039      	str	r1, [r7, #0]
    884e:	1dfb      	adds	r3, r7, #7
    8850:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    8852:	4b20      	ldr	r3, [pc, #128]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8854:	781b      	ldrb	r3, [r3, #0]
    8856:	2201      	movs	r2, #1
    8858:	4053      	eors	r3, r2
    885a:	b2db      	uxtb	r3, r3
    885c:	2b00      	cmp	r3, #0
    885e:	d001      	beq.n	8864 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
    8860:	231f      	movs	r3, #31
    8862:	e033      	b.n	88cc <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    8864:	4b1b      	ldr	r3, [pc, #108]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8866:	7a9b      	ldrb	r3, [r3, #10]
    8868:	1dfa      	adds	r2, r7, #7
    886a:	7812      	ldrb	r2, [r2, #0]
    886c:	429a      	cmp	r2, r3
    886e:	d301      	bcc.n	8874 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
    8870:	2318      	movs	r3, #24
    8872:	e02b      	b.n	88cc <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
    8874:	4b17      	ldr	r3, [pc, #92]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8876:	22c8      	movs	r2, #200	; 0xc8
    8878:	5c9b      	ldrb	r3, [r3, r2]
    887a:	2b00      	cmp	r3, #0
    887c:	d010      	beq.n	88a0 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    887e:	4b15      	ldr	r3, [pc, #84]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8880:	2288      	movs	r2, #136	; 0x88
    8882:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
    8884:	1dfa      	adds	r2, r7, #7
    8886:	7812      	ldrb	r2, [r2, #0]
    8888:	429a      	cmp	r2, r3
    888a:	d109      	bne.n	88a0 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    888c:	6839      	ldr	r1, [r7, #0]
    888e:	4b11      	ldr	r3, [pc, #68]	; (88d4 <eeprom_emulator_read_page+0x90>)
    8890:	228c      	movs	r2, #140	; 0x8c
    8892:	0008      	movs	r0, r1
    8894:	189b      	adds	r3, r3, r2
    8896:	223c      	movs	r2, #60	; 0x3c
    8898:	0019      	movs	r1, r3
    889a:	4b0f      	ldr	r3, [pc, #60]	; (88d8 <eeprom_emulator_read_page+0x94>)
    889c:	4798      	blx	r3
    889e:	e014      	b.n	88ca <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
    88a0:	1dfb      	adds	r3, r7, #7
    88a2:	781b      	ldrb	r3, [r3, #0]
    88a4:	4a0b      	ldr	r2, [pc, #44]	; (88d4 <eeprom_emulator_read_page+0x90>)
    88a6:	18d3      	adds	r3, r2, r3
    88a8:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
    88aa:	b29b      	uxth	r3, r3
    88ac:	2208      	movs	r2, #8
    88ae:	18ba      	adds	r2, r7, r2
    88b0:	0011      	movs	r1, r2
    88b2:	0018      	movs	r0, r3
    88b4:	4b09      	ldr	r3, [pc, #36]	; (88dc <eeprom_emulator_read_page+0x98>)
    88b6:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    88b8:	683a      	ldr	r2, [r7, #0]
    88ba:	2308      	movs	r3, #8
    88bc:	18fb      	adds	r3, r7, r3
    88be:	0010      	movs	r0, r2
    88c0:	3304      	adds	r3, #4
    88c2:	223c      	movs	r2, #60	; 0x3c
    88c4:	0019      	movs	r1, r3
    88c6:	4b04      	ldr	r3, [pc, #16]	; (88d8 <eeprom_emulator_read_page+0x94>)
    88c8:	4798      	blx	r3
	}

	return STATUS_OK;
    88ca:	2300      	movs	r3, #0
}
    88cc:	0018      	movs	r0, r3
    88ce:	46bd      	mov	sp, r7
    88d0:	b012      	add	sp, #72	; 0x48
    88d2:	bd80      	pop	{r7, pc}
    88d4:	20000218 	.word	0x20000218
    88d8:	00016ccd 	.word	0x00016ccd
    88dc:	00007fc5 	.word	0x00007fc5

000088e0 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
    88e0:	b580      	push	{r7, lr}
    88e2:	b082      	sub	sp, #8
    88e4:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
    88e6:	1dfb      	adds	r3, r7, #7
    88e8:	2200      	movs	r2, #0
    88ea:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    88ec:	4b10      	ldr	r3, [pc, #64]	; (8930 <eeprom_emulator_commit_page_buffer+0x50>)
    88ee:	22c8      	movs	r2, #200	; 0xc8
    88f0:	5c9b      	ldrb	r3, [r3, r2]
    88f2:	2201      	movs	r2, #1
    88f4:	4053      	eors	r3, r2
    88f6:	b2db      	uxtb	r3, r3
    88f8:	2b00      	cmp	r3, #0
    88fa:	d001      	beq.n	8900 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
    88fc:	2300      	movs	r3, #0
    88fe:	e013      	b.n	8928 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    8900:	1dbb      	adds	r3, r7, #6
    8902:	4a0b      	ldr	r2, [pc, #44]	; (8930 <eeprom_emulator_commit_page_buffer+0x50>)
    8904:	2188      	movs	r1, #136	; 0x88
    8906:	5c52      	ldrb	r2, [r2, r1]
    8908:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
    890a:	1dbb      	adds	r3, r7, #6
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	4a08      	ldr	r2, [pc, #32]	; (8930 <eeprom_emulator_commit_page_buffer+0x50>)
    8910:	18d3      	adds	r3, r2, r3
    8912:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
    8914:	b29b      	uxth	r3, r3
    8916:	0018      	movs	r0, r3
    8918:	4b06      	ldr	r3, [pc, #24]	; (8934 <eeprom_emulator_commit_page_buffer+0x54>)
    891a:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
    891c:	4b04      	ldr	r3, [pc, #16]	; (8930 <eeprom_emulator_commit_page_buffer+0x50>)
    891e:	22c8      	movs	r2, #200	; 0xc8
    8920:	2100      	movs	r1, #0
    8922:	5499      	strb	r1, [r3, r2]

	return error_code;
    8924:	1dfb      	adds	r3, r7, #7
    8926:	781b      	ldrb	r3, [r3, #0]
}
    8928:	0018      	movs	r0, r3
    892a:	46bd      	mov	sp, r7
    892c:	b002      	add	sp, #8
    892e:	bd80      	pop	{r7, pc}
    8930:	20000218 	.word	0x20000218
    8934:	00007f79 	.word	0x00007f79

00008938 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8938:	b580      	push	{r7, lr}
    893a:	b082      	sub	sp, #8
    893c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    893e:	4b2f      	ldr	r3, [pc, #188]	; (89fc <Reset_Handler+0xc4>)
    8940:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    8942:	4b2f      	ldr	r3, [pc, #188]	; (8a00 <Reset_Handler+0xc8>)
    8944:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    8946:	687a      	ldr	r2, [r7, #4]
    8948:	683b      	ldr	r3, [r7, #0]
    894a:	429a      	cmp	r2, r3
    894c:	d00c      	beq.n	8968 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    894e:	e007      	b.n	8960 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    8950:	683b      	ldr	r3, [r7, #0]
    8952:	1d1a      	adds	r2, r3, #4
    8954:	603a      	str	r2, [r7, #0]
    8956:	687a      	ldr	r2, [r7, #4]
    8958:	1d11      	adds	r1, r2, #4
    895a:	6079      	str	r1, [r7, #4]
    895c:	6812      	ldr	r2, [r2, #0]
    895e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    8960:	683a      	ldr	r2, [r7, #0]
    8962:	4b28      	ldr	r3, [pc, #160]	; (8a04 <Reset_Handler+0xcc>)
    8964:	429a      	cmp	r2, r3
    8966:	d3f3      	bcc.n	8950 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8968:	4b27      	ldr	r3, [pc, #156]	; (8a08 <Reset_Handler+0xd0>)
    896a:	603b      	str	r3, [r7, #0]
    896c:	e004      	b.n	8978 <Reset_Handler+0x40>
                *pDest++ = 0;
    896e:	683b      	ldr	r3, [r7, #0]
    8970:	1d1a      	adds	r2, r3, #4
    8972:	603a      	str	r2, [r7, #0]
    8974:	2200      	movs	r2, #0
    8976:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    8978:	683a      	ldr	r2, [r7, #0]
    897a:	4b24      	ldr	r3, [pc, #144]	; (8a0c <Reset_Handler+0xd4>)
    897c:	429a      	cmp	r2, r3
    897e:	d3f6      	bcc.n	896e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    8980:	4b23      	ldr	r3, [pc, #140]	; (8a10 <Reset_Handler+0xd8>)
    8982:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8984:	4b23      	ldr	r3, [pc, #140]	; (8a14 <Reset_Handler+0xdc>)
    8986:	687a      	ldr	r2, [r7, #4]
    8988:	21ff      	movs	r1, #255	; 0xff
    898a:	438a      	bics	r2, r1
    898c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    898e:	4a22      	ldr	r2, [pc, #136]	; (8a18 <Reset_Handler+0xe0>)
    8990:	2390      	movs	r3, #144	; 0x90
    8992:	005b      	lsls	r3, r3, #1
    8994:	2102      	movs	r1, #2
    8996:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8998:	4a20      	ldr	r2, [pc, #128]	; (8a1c <Reset_Handler+0xe4>)
    899a:	78d3      	ldrb	r3, [r2, #3]
    899c:	2103      	movs	r1, #3
    899e:	438b      	bics	r3, r1
    89a0:	1c19      	adds	r1, r3, #0
    89a2:	2302      	movs	r3, #2
    89a4:	430b      	orrs	r3, r1
    89a6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    89a8:	4a1c      	ldr	r2, [pc, #112]	; (8a1c <Reset_Handler+0xe4>)
    89aa:	78d3      	ldrb	r3, [r2, #3]
    89ac:	210c      	movs	r1, #12
    89ae:	438b      	bics	r3, r1
    89b0:	1c19      	adds	r1, r3, #0
    89b2:	2308      	movs	r3, #8
    89b4:	430b      	orrs	r3, r1
    89b6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    89b8:	4a19      	ldr	r2, [pc, #100]	; (8a20 <Reset_Handler+0xe8>)
    89ba:	7b93      	ldrb	r3, [r2, #14]
    89bc:	2130      	movs	r1, #48	; 0x30
    89be:	438b      	bics	r3, r1
    89c0:	1c19      	adds	r1, r3, #0
    89c2:	2320      	movs	r3, #32
    89c4:	430b      	orrs	r3, r1
    89c6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    89c8:	4a15      	ldr	r2, [pc, #84]	; (8a20 <Reset_Handler+0xe8>)
    89ca:	7b93      	ldrb	r3, [r2, #14]
    89cc:	210c      	movs	r1, #12
    89ce:	438b      	bics	r3, r1
    89d0:	1c19      	adds	r1, r3, #0
    89d2:	2308      	movs	r3, #8
    89d4:	430b      	orrs	r3, r1
    89d6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    89d8:	4a11      	ldr	r2, [pc, #68]	; (8a20 <Reset_Handler+0xe8>)
    89da:	7b93      	ldrb	r3, [r2, #14]
    89dc:	2103      	movs	r1, #3
    89de:	438b      	bics	r3, r1
    89e0:	1c19      	adds	r1, r3, #0
    89e2:	2302      	movs	r3, #2
    89e4:	430b      	orrs	r3, r1
    89e6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    89e8:	4a0e      	ldr	r2, [pc, #56]	; (8a24 <Reset_Handler+0xec>)
    89ea:	6853      	ldr	r3, [r2, #4]
    89ec:	2180      	movs	r1, #128	; 0x80
    89ee:	430b      	orrs	r3, r1
    89f0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    89f2:	4b0d      	ldr	r3, [pc, #52]	; (8a28 <Reset_Handler+0xf0>)
    89f4:	4798      	blx	r3

        /* Branch to main function */
        main();
    89f6:	4b0d      	ldr	r3, [pc, #52]	; (8a2c <Reset_Handler+0xf4>)
    89f8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    89fa:	e7fe      	b.n	89fa <Reset_Handler+0xc2>
    89fc:	000177b8 	.word	0x000177b8
    8a00:	20000000 	.word	0x20000000
    8a04:	2000014c 	.word	0x2000014c
    8a08:	20000150 	.word	0x20000150
    8a0c:	20000e4c 	.word	0x20000e4c
    8a10:	00002000 	.word	0x00002000
    8a14:	e000ed00 	.word	0xe000ed00
    8a18:	41007000 	.word	0x41007000
    8a1c:	41005000 	.word	0x41005000
    8a20:	41004800 	.word	0x41004800
    8a24:	41004000 	.word	0x41004000
    8a28:	00016c85 	.word	0x00016c85
    8a2c:	00010491 	.word	0x00010491

00008a30 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8a30:	b580      	push	{r7, lr}
    8a32:	af00      	add	r7, sp, #0
        while (1) {
    8a34:	e7fe      	b.n	8a34 <Dummy_Handler+0x4>
	...

00008a38 <system_pinmux_get_group_from_gpio_pin>:
{
    8a38:	b580      	push	{r7, lr}
    8a3a:	b084      	sub	sp, #16
    8a3c:	af00      	add	r7, sp, #0
    8a3e:	0002      	movs	r2, r0
    8a40:	1dfb      	adds	r3, r7, #7
    8a42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8a44:	230f      	movs	r3, #15
    8a46:	18fb      	adds	r3, r7, r3
    8a48:	1dfa      	adds	r2, r7, #7
    8a4a:	7812      	ldrb	r2, [r2, #0]
    8a4c:	09d2      	lsrs	r2, r2, #7
    8a4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8a50:	230e      	movs	r3, #14
    8a52:	18fb      	adds	r3, r7, r3
    8a54:	1dfa      	adds	r2, r7, #7
    8a56:	7812      	ldrb	r2, [r2, #0]
    8a58:	0952      	lsrs	r2, r2, #5
    8a5a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8a5c:	4b0d      	ldr	r3, [pc, #52]	; (8a94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8a5e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8a60:	230f      	movs	r3, #15
    8a62:	18fb      	adds	r3, r7, r3
    8a64:	781b      	ldrb	r3, [r3, #0]
    8a66:	2b00      	cmp	r3, #0
    8a68:	d10f      	bne.n	8a8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8a6a:	230f      	movs	r3, #15
    8a6c:	18fb      	adds	r3, r7, r3
    8a6e:	781b      	ldrb	r3, [r3, #0]
    8a70:	009b      	lsls	r3, r3, #2
    8a72:	2210      	movs	r2, #16
    8a74:	4694      	mov	ip, r2
    8a76:	44bc      	add	ip, r7
    8a78:	4463      	add	r3, ip
    8a7a:	3b08      	subs	r3, #8
    8a7c:	681a      	ldr	r2, [r3, #0]
    8a7e:	230e      	movs	r3, #14
    8a80:	18fb      	adds	r3, r7, r3
    8a82:	781b      	ldrb	r3, [r3, #0]
    8a84:	01db      	lsls	r3, r3, #7
    8a86:	18d3      	adds	r3, r2, r3
    8a88:	e000      	b.n	8a8c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    8a8a:	2300      	movs	r3, #0
}
    8a8c:	0018      	movs	r0, r3
    8a8e:	46bd      	mov	sp, r7
    8a90:	b004      	add	sp, #16
    8a92:	bd80      	pop	{r7, pc}
    8a94:	41004400 	.word	0x41004400

00008a98 <adc_is_syncing>:
{
    8a98:	b580      	push	{r7, lr}
    8a9a:	b084      	sub	sp, #16
    8a9c:	af00      	add	r7, sp, #0
    8a9e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    8aa0:	687b      	ldr	r3, [r7, #4]
    8aa2:	681b      	ldr	r3, [r3, #0]
    8aa4:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    8aa6:	68fb      	ldr	r3, [r7, #12]
    8aa8:	7e5b      	ldrb	r3, [r3, #25]
    8aaa:	b2db      	uxtb	r3, r3
    8aac:	b25b      	sxtb	r3, r3
    8aae:	2b00      	cmp	r3, #0
    8ab0:	da01      	bge.n	8ab6 <adc_is_syncing+0x1e>
		return true;
    8ab2:	2301      	movs	r3, #1
    8ab4:	e000      	b.n	8ab8 <adc_is_syncing+0x20>
	return false;
    8ab6:	2300      	movs	r3, #0
}
    8ab8:	0018      	movs	r0, r3
    8aba:	46bd      	mov	sp, r7
    8abc:	b004      	add	sp, #16
    8abe:	bd80      	pop	{r7, pc}

00008ac0 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    8ac0:	b580      	push	{r7, lr}
    8ac2:	b084      	sub	sp, #16
    8ac4:	af00      	add	r7, sp, #0
    8ac6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8ac8:	687b      	ldr	r3, [r7, #4]
    8aca:	681b      	ldr	r3, [r3, #0]
    8acc:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8ace:	46c0      	nop			; (mov r8, r8)
    8ad0:	687b      	ldr	r3, [r7, #4]
    8ad2:	0018      	movs	r0, r3
    8ad4:	4b0b      	ldr	r3, [pc, #44]	; (8b04 <adc_enable+0x44>)
    8ad6:	4798      	blx	r3
    8ad8:	1e03      	subs	r3, r0, #0
    8ada:	d1f9      	bne.n	8ad0 <adc_enable+0x10>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    8adc:	68fb      	ldr	r3, [r7, #12]
    8ade:	781b      	ldrb	r3, [r3, #0]
    8ae0:	b2db      	uxtb	r3, r3
    8ae2:	2202      	movs	r2, #2
    8ae4:	4313      	orrs	r3, r2
    8ae6:	b2da      	uxtb	r2, r3
    8ae8:	68fb      	ldr	r3, [r7, #12]
    8aea:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    8aec:	46c0      	nop			; (mov r8, r8)
    8aee:	687b      	ldr	r3, [r7, #4]
    8af0:	0018      	movs	r0, r3
    8af2:	4b04      	ldr	r3, [pc, #16]	; (8b04 <adc_enable+0x44>)
    8af4:	4798      	blx	r3
    8af6:	1e03      	subs	r3, r0, #0
    8af8:	d1f9      	bne.n	8aee <adc_enable+0x2e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    8afa:	2300      	movs	r3, #0
}
    8afc:	0018      	movs	r0, r3
    8afe:	46bd      	mov	sp, r7
    8b00:	b004      	add	sp, #16
    8b02:	bd80      	pop	{r7, pc}
    8b04:	00008a99 	.word	0x00008a99

00008b08 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8b08:	b580      	push	{r7, lr}
    8b0a:	b082      	sub	sp, #8
    8b0c:	af00      	add	r7, sp, #0
    8b0e:	0002      	movs	r2, r0
    8b10:	1dfb      	adds	r3, r7, #7
    8b12:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8b14:	1dfb      	adds	r3, r7, #7
    8b16:	781b      	ldrb	r3, [r3, #0]
    8b18:	0018      	movs	r0, r3
    8b1a:	4b03      	ldr	r3, [pc, #12]	; (8b28 <port_get_group_from_gpio_pin+0x20>)
    8b1c:	4798      	blx	r3
    8b1e:	0003      	movs	r3, r0
}
    8b20:	0018      	movs	r0, r3
    8b22:	46bd      	mov	sp, r7
    8b24:	b002      	add	sp, #8
    8b26:	bd80      	pop	{r7, pc}
    8b28:	00008a39 	.word	0x00008a39

00008b2c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8b2c:	b580      	push	{r7, lr}
    8b2e:	b082      	sub	sp, #8
    8b30:	af00      	add	r7, sp, #0
    8b32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    8b34:	687b      	ldr	r3, [r7, #4]
    8b36:	2200      	movs	r2, #0
    8b38:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	2201      	movs	r2, #1
    8b3e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    8b40:	687b      	ldr	r3, [r7, #4]
    8b42:	2200      	movs	r2, #0
    8b44:	709a      	strb	r2, [r3, #2]
}
    8b46:	46c0      	nop			; (mov r8, r8)
    8b48:	46bd      	mov	sp, r7
    8b4a:	b002      	add	sp, #8
    8b4c:	bd80      	pop	{r7, pc}
	...

00008b50 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    8b50:	b580      	push	{r7, lr}
    8b52:	b084      	sub	sp, #16
    8b54:	af00      	add	r7, sp, #0
    8b56:	0002      	movs	r2, r0
    8b58:	1dfb      	adds	r3, r7, #7
    8b5a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8b5c:	1dfb      	adds	r3, r7, #7
    8b5e:	781b      	ldrb	r3, [r3, #0]
    8b60:	0018      	movs	r0, r3
    8b62:	4b0b      	ldr	r3, [pc, #44]	; (8b90 <port_pin_get_input_level+0x40>)
    8b64:	4798      	blx	r3
    8b66:	0003      	movs	r3, r0
    8b68:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8b6a:	1dfb      	adds	r3, r7, #7
    8b6c:	781b      	ldrb	r3, [r3, #0]
    8b6e:	221f      	movs	r2, #31
    8b70:	4013      	ands	r3, r2
    8b72:	2201      	movs	r2, #1
    8b74:	409a      	lsls	r2, r3
    8b76:	0013      	movs	r3, r2
    8b78:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    8b7a:	68fb      	ldr	r3, [r7, #12]
    8b7c:	6a1b      	ldr	r3, [r3, #32]
    8b7e:	68ba      	ldr	r2, [r7, #8]
    8b80:	4013      	ands	r3, r2
    8b82:	1e5a      	subs	r2, r3, #1
    8b84:	4193      	sbcs	r3, r2
    8b86:	b2db      	uxtb	r3, r3
}
    8b88:	0018      	movs	r0, r3
    8b8a:	46bd      	mov	sp, r7
    8b8c:	b004      	add	sp, #16
    8b8e:	bd80      	pop	{r7, pc}
    8b90:	00008b09 	.word	0x00008b09

00008b94 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8b94:	b580      	push	{r7, lr}
    8b96:	b084      	sub	sp, #16
    8b98:	af00      	add	r7, sp, #0
    8b9a:	0002      	movs	r2, r0
    8b9c:	1dfb      	adds	r3, r7, #7
    8b9e:	701a      	strb	r2, [r3, #0]
    8ba0:	1dbb      	adds	r3, r7, #6
    8ba2:	1c0a      	adds	r2, r1, #0
    8ba4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8ba6:	1dfb      	adds	r3, r7, #7
    8ba8:	781b      	ldrb	r3, [r3, #0]
    8baa:	0018      	movs	r0, r3
    8bac:	4b0d      	ldr	r3, [pc, #52]	; (8be4 <port_pin_set_output_level+0x50>)
    8bae:	4798      	blx	r3
    8bb0:	0003      	movs	r3, r0
    8bb2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8bb4:	1dfb      	adds	r3, r7, #7
    8bb6:	781b      	ldrb	r3, [r3, #0]
    8bb8:	221f      	movs	r2, #31
    8bba:	4013      	ands	r3, r2
    8bbc:	2201      	movs	r2, #1
    8bbe:	409a      	lsls	r2, r3
    8bc0:	0013      	movs	r3, r2
    8bc2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8bc4:	1dbb      	adds	r3, r7, #6
    8bc6:	781b      	ldrb	r3, [r3, #0]
    8bc8:	2b00      	cmp	r3, #0
    8bca:	d003      	beq.n	8bd4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8bcc:	68fb      	ldr	r3, [r7, #12]
    8bce:	68ba      	ldr	r2, [r7, #8]
    8bd0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    8bd2:	e002      	b.n	8bda <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    8bd4:	68fb      	ldr	r3, [r7, #12]
    8bd6:	68ba      	ldr	r2, [r7, #8]
    8bd8:	615a      	str	r2, [r3, #20]
}
    8bda:	46c0      	nop			; (mov r8, r8)
    8bdc:	46bd      	mov	sp, r7
    8bde:	b004      	add	sp, #16
    8be0:	bd80      	pop	{r7, pc}
    8be2:	46c0      	nop			; (mov r8, r8)
    8be4:	00008b09 	.word	0x00008b09

00008be8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8be8:	b580      	push	{r7, lr}
    8bea:	b082      	sub	sp, #8
    8bec:	af00      	add	r7, sp, #0
    8bee:	0002      	movs	r2, r0
    8bf0:	1dfb      	adds	r3, r7, #7
    8bf2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8bf4:	4b06      	ldr	r3, [pc, #24]	; (8c10 <system_interrupt_enable+0x28>)
    8bf6:	1dfa      	adds	r2, r7, #7
    8bf8:	7812      	ldrb	r2, [r2, #0]
    8bfa:	0011      	movs	r1, r2
    8bfc:	221f      	movs	r2, #31
    8bfe:	400a      	ands	r2, r1
    8c00:	2101      	movs	r1, #1
    8c02:	4091      	lsls	r1, r2
    8c04:	000a      	movs	r2, r1
    8c06:	601a      	str	r2, [r3, #0]
}
    8c08:	46c0      	nop			; (mov r8, r8)
    8c0a:	46bd      	mov	sp, r7
    8c0c:	b002      	add	sp, #8
    8c0e:	bd80      	pop	{r7, pc}
    8c10:	e000e100 	.word	0xe000e100

00008c14 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    8c14:	b580      	push	{r7, lr}
    8c16:	b082      	sub	sp, #8
    8c18:	af00      	add	r7, sp, #0
    8c1a:	0002      	movs	r2, r0
    8c1c:	1dfb      	adds	r3, r7, #7
    8c1e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8c20:	4a07      	ldr	r2, [pc, #28]	; (8c40 <system_interrupt_disable+0x2c>)
    8c22:	1dfb      	adds	r3, r7, #7
    8c24:	781b      	ldrb	r3, [r3, #0]
    8c26:	0019      	movs	r1, r3
    8c28:	231f      	movs	r3, #31
    8c2a:	400b      	ands	r3, r1
    8c2c:	2101      	movs	r1, #1
    8c2e:	4099      	lsls	r1, r3
    8c30:	000b      	movs	r3, r1
    8c32:	0019      	movs	r1, r3
    8c34:	2380      	movs	r3, #128	; 0x80
    8c36:	50d1      	str	r1, [r2, r3]
}
    8c38:	46c0      	nop			; (mov r8, r8)
    8c3a:	46bd      	mov	sp, r7
    8c3c:	b002      	add	sp, #8
    8c3e:	bd80      	pop	{r7, pc}
    8c40:	e000e100 	.word	0xe000e100

00008c44 <i2c_master_is_syncing>:
{
    8c44:	b580      	push	{r7, lr}
    8c46:	b084      	sub	sp, #16
    8c48:	af00      	add	r7, sp, #0
    8c4a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    8c4c:	687b      	ldr	r3, [r7, #4]
    8c4e:	681b      	ldr	r3, [r3, #0]
    8c50:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    8c52:	68fb      	ldr	r3, [r7, #12]
    8c54:	69db      	ldr	r3, [r3, #28]
    8c56:	2207      	movs	r2, #7
    8c58:	4013      	ands	r3, r2
    8c5a:	1e5a      	subs	r2, r3, #1
    8c5c:	4193      	sbcs	r3, r2
    8c5e:	b2db      	uxtb	r3, r3
}
    8c60:	0018      	movs	r0, r3
    8c62:	46bd      	mov	sp, r7
    8c64:	b004      	add	sp, #16
    8c66:	bd80      	pop	{r7, pc}

00008c68 <_i2c_master_wait_for_sync>:
{
    8c68:	b580      	push	{r7, lr}
    8c6a:	b082      	sub	sp, #8
    8c6c:	af00      	add	r7, sp, #0
    8c6e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    8c70:	46c0      	nop			; (mov r8, r8)
    8c72:	687b      	ldr	r3, [r7, #4]
    8c74:	0018      	movs	r0, r3
    8c76:	4b04      	ldr	r3, [pc, #16]	; (8c88 <_i2c_master_wait_for_sync+0x20>)
    8c78:	4798      	blx	r3
    8c7a:	1e03      	subs	r3, r0, #0
    8c7c:	d1f9      	bne.n	8c72 <_i2c_master_wait_for_sync+0xa>
}
    8c7e:	46c0      	nop			; (mov r8, r8)
    8c80:	46bd      	mov	sp, r7
    8c82:	b002      	add	sp, #8
    8c84:	bd80      	pop	{r7, pc}
    8c86:	46c0      	nop			; (mov r8, r8)
    8c88:	00008c45 	.word	0x00008c45

00008c8c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    8c8c:	b580      	push	{r7, lr}
    8c8e:	b082      	sub	sp, #8
    8c90:	af00      	add	r7, sp, #0
    8c92:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    8c94:	687b      	ldr	r3, [r7, #4]
    8c96:	2264      	movs	r2, #100	; 0x64
    8c98:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    8c9a:	687b      	ldr	r3, [r7, #4]
    8c9c:	4a1b      	ldr	r2, [pc, #108]	; (8d0c <i2c_master_get_config_defaults+0x80>)
    8c9e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    8ca0:	687b      	ldr	r3, [r7, #4]
    8ca2:	2200      	movs	r2, #0
    8ca4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    8ca6:	687b      	ldr	r3, [r7, #4]
    8ca8:	2200      	movs	r2, #0
    8caa:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	2200      	movs	r2, #0
    8cb0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    8cb2:	687b      	ldr	r3, [r7, #4]
    8cb4:	2280      	movs	r2, #128	; 0x80
    8cb6:	0392      	lsls	r2, r2, #14
    8cb8:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    8cba:	687b      	ldr	r3, [r7, #4]
    8cbc:	2201      	movs	r2, #1
    8cbe:	4252      	negs	r2, r2
    8cc0:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	2201      	movs	r2, #1
    8cc6:	4252      	negs	r2, r2
    8cc8:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    8cca:	687b      	ldr	r3, [r7, #4]
    8ccc:	2200      	movs	r2, #0
    8cce:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    8cd0:	687b      	ldr	r3, [r7, #4]
    8cd2:	2200      	movs	r2, #0
    8cd4:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    8cd6:	687b      	ldr	r3, [r7, #4]
    8cd8:	2224      	movs	r2, #36	; 0x24
    8cda:	2100      	movs	r1, #0
    8cdc:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    8cde:	687b      	ldr	r3, [r7, #4]
    8ce0:	2200      	movs	r2, #0
    8ce2:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    8ce4:	687b      	ldr	r3, [r7, #4]
    8ce6:	222c      	movs	r2, #44	; 0x2c
    8ce8:	2100      	movs	r1, #0
    8cea:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    8cec:	687b      	ldr	r3, [r7, #4]
    8cee:	222d      	movs	r2, #45	; 0x2d
    8cf0:	2100      	movs	r1, #0
    8cf2:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	222e      	movs	r2, #46	; 0x2e
    8cf8:	2100      	movs	r1, #0
    8cfa:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    8cfc:	687b      	ldr	r3, [r7, #4]
    8cfe:	22d7      	movs	r2, #215	; 0xd7
    8d00:	861a      	strh	r2, [r3, #48]	; 0x30
}
    8d02:	46c0      	nop			; (mov r8, r8)
    8d04:	46bd      	mov	sp, r7
    8d06:	b002      	add	sp, #8
    8d08:	bd80      	pop	{r7, pc}
    8d0a:	46c0      	nop			; (mov r8, r8)
    8d0c:	00000d48 	.word	0x00000d48

00008d10 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    8d10:	b580      	push	{r7, lr}
    8d12:	b084      	sub	sp, #16
    8d14:	af00      	add	r7, sp, #0
    8d16:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    8d18:	687b      	ldr	r3, [r7, #4]
    8d1a:	681b      	ldr	r3, [r3, #0]
    8d1c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    8d1e:	2300      	movs	r3, #0
    8d20:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    8d22:	687b      	ldr	r3, [r7, #4]
    8d24:	0018      	movs	r0, r3
    8d26:	4b14      	ldr	r3, [pc, #80]	; (8d78 <i2c_master_enable+0x68>)
    8d28:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    8d2a:	68bb      	ldr	r3, [r7, #8]
    8d2c:	681b      	ldr	r3, [r3, #0]
    8d2e:	2202      	movs	r2, #2
    8d30:	431a      	orrs	r2, r3
    8d32:	68bb      	ldr	r3, [r7, #8]
    8d34:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8d36:	687b      	ldr	r3, [r7, #4]
    8d38:	681b      	ldr	r3, [r3, #0]
    8d3a:	0018      	movs	r0, r3
    8d3c:	4b0f      	ldr	r3, [pc, #60]	; (8d7c <i2c_master_enable+0x6c>)
    8d3e:	4798      	blx	r3
    8d40:	0003      	movs	r3, r0
    8d42:	0018      	movs	r0, r3
    8d44:	4b0e      	ldr	r3, [pc, #56]	; (8d80 <i2c_master_enable+0x70>)
    8d46:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    8d48:	e00c      	b.n	8d64 <i2c_master_enable+0x54>
		timeout_counter++;
    8d4a:	68fb      	ldr	r3, [r7, #12]
    8d4c:	3301      	adds	r3, #1
    8d4e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    8d50:	687b      	ldr	r3, [r7, #4]
    8d52:	88db      	ldrh	r3, [r3, #6]
    8d54:	001a      	movs	r2, r3
    8d56:	68fb      	ldr	r3, [r7, #12]
    8d58:	429a      	cmp	r2, r3
    8d5a:	d803      	bhi.n	8d64 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    8d5c:	68bb      	ldr	r3, [r7, #8]
    8d5e:	2210      	movs	r2, #16
    8d60:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    8d62:	e006      	b.n	8d72 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    8d64:	68bb      	ldr	r3, [r7, #8]
    8d66:	8b5b      	ldrh	r3, [r3, #26]
    8d68:	b29b      	uxth	r3, r3
    8d6a:	001a      	movs	r2, r3
    8d6c:	2310      	movs	r3, #16
    8d6e:	4013      	ands	r3, r2
    8d70:	d0eb      	beq.n	8d4a <i2c_master_enable+0x3a>
		}
	}
}
    8d72:	46bd      	mov	sp, r7
    8d74:	b004      	add	sp, #16
    8d76:	bd80      	pop	{r7, pc}
    8d78:	00008c69 	.word	0x00008c69
    8d7c:	00007015 	.word	0x00007015
    8d80:	00008be9 	.word	0x00008be9

00008d84 <i2c_slave_is_syncing>:
{
    8d84:	b580      	push	{r7, lr}
    8d86:	b084      	sub	sp, #16
    8d88:	af00      	add	r7, sp, #0
    8d8a:	6078      	str	r0, [r7, #4]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    8d8c:	687b      	ldr	r3, [r7, #4]
    8d8e:	681b      	ldr	r3, [r3, #0]
    8d90:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    8d92:	68fb      	ldr	r3, [r7, #12]
    8d94:	69db      	ldr	r3, [r3, #28]
    8d96:	2203      	movs	r2, #3
    8d98:	4013      	ands	r3, r2
    8d9a:	1e5a      	subs	r2, r3, #1
    8d9c:	4193      	sbcs	r3, r2
    8d9e:	b2db      	uxtb	r3, r3
}
    8da0:	0018      	movs	r0, r3
    8da2:	46bd      	mov	sp, r7
    8da4:	b004      	add	sp, #16
    8da6:	bd80      	pop	{r7, pc}

00008da8 <_i2c_slave_wait_for_sync>:
{
    8da8:	b580      	push	{r7, lr}
    8daa:	b082      	sub	sp, #8
    8dac:	af00      	add	r7, sp, #0
    8dae:	6078      	str	r0, [r7, #4]
	while (i2c_slave_is_syncing(module)) {
    8db0:	46c0      	nop			; (mov r8, r8)
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	0018      	movs	r0, r3
    8db6:	4b04      	ldr	r3, [pc, #16]	; (8dc8 <_i2c_slave_wait_for_sync+0x20>)
    8db8:	4798      	blx	r3
    8dba:	1e03      	subs	r3, r0, #0
    8dbc:	d1f9      	bne.n	8db2 <_i2c_slave_wait_for_sync+0xa>
}
    8dbe:	46c0      	nop			; (mov r8, r8)
    8dc0:	46bd      	mov	sp, r7
    8dc2:	b002      	add	sp, #8
    8dc4:	bd80      	pop	{r7, pc}
    8dc6:	46c0      	nop			; (mov r8, r8)
    8dc8:	00008d85 	.word	0x00008d85

00008dcc <i2c_slave_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initialized
 */
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
    8dcc:	b580      	push	{r7, lr}
    8dce:	b082      	sub	sp, #8
    8dd0:	af00      	add	r7, sp, #0
    8dd2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    8dd4:	687b      	ldr	r3, [r7, #4]
    8dd6:	2200      	movs	r2, #0
    8dd8:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    8dda:	687b      	ldr	r3, [r7, #4]
    8ddc:	2280      	movs	r2, #128	; 0x80
    8dde:	0392      	lsls	r2, r2, #14
    8de0:	605a      	str	r2, [r3, #4]
	config->buffer_timeout = 65535;
    8de2:	687b      	ldr	r3, [r7, #4]
    8de4:	2201      	movs	r2, #1
    8de6:	4252      	negs	r2, r2
    8de8:	811a      	strh	r2, [r3, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    8dea:	687b      	ldr	r3, [r7, #4]
    8dec:	2200      	movs	r2, #0
    8dee:	815a      	strh	r2, [r3, #10]
	config->address = 0;
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	2200      	movs	r2, #0
    8df4:	819a      	strh	r2, [r3, #12]
	config->address_mask = 0;
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	2200      	movs	r2, #0
    8dfa:	81da      	strh	r2, [r3, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    8dfc:	687b      	ldr	r3, [r7, #4]
    8dfe:	2200      	movs	r2, #0
    8e00:	741a      	strb	r2, [r3, #16]
#endif
	config->enable_general_call_address = false;
    8e02:	687b      	ldr	r3, [r7, #4]
    8e04:	2200      	movs	r2, #0
    8e06:	745a      	strb	r2, [r3, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    8e08:	687b      	ldr	r3, [r7, #4]
    8e0a:	2200      	movs	r2, #0
    8e0c:	615a      	str	r2, [r3, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    8e0e:	687b      	ldr	r3, [r7, #4]
    8e10:	2200      	movs	r2, #0
    8e12:	761a      	strb	r2, [r3, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    8e14:	687b      	ldr	r3, [r7, #4]
    8e16:	2200      	movs	r2, #0
    8e18:	765a      	strb	r2, [r3, #25]
	config->run_in_standby = false;
    8e1a:	687b      	ldr	r3, [r7, #4]
    8e1c:	2200      	movs	r2, #0
    8e1e:	769a      	strb	r2, [r3, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    8e20:	687b      	ldr	r3, [r7, #4]
    8e22:	2200      	movs	r2, #0
    8e24:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1 = PINMUX_DEFAULT;
    8e26:	687b      	ldr	r3, [r7, #4]
    8e28:	2200      	movs	r2, #0
    8e2a:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	2224      	movs	r2, #36	; 0x24
    8e30:	2100      	movs	r1, #0
    8e32:	5499      	strb	r1, [r3, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    8e34:	687b      	ldr	r3, [r7, #4]
    8e36:	2225      	movs	r2, #37	; 0x25
    8e38:	2100      	movs	r1, #0
    8e3a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    8e3c:	687b      	ldr	r3, [r7, #4]
    8e3e:	2226      	movs	r2, #38	; 0x26
    8e40:	2100      	movs	r1, #0
    8e42:	5499      	strb	r1, [r3, r2]
#endif
}
    8e44:	46c0      	nop			; (mov r8, r8)
    8e46:	46bd      	mov	sp, r7
    8e48:	b002      	add	sp, #8
    8e4a:	bd80      	pop	{r7, pc}

00008e4c <i2c_slave_enable>:
 *
 * \param[in]  module Pointer to the software module struct
 */
static inline void i2c_slave_enable(
		const struct i2c_slave_module *const module)
{
    8e4c:	b580      	push	{r7, lr}
    8e4e:	b084      	sub	sp, #16
    8e50:	af00      	add	r7, sp, #0
    8e52:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    8e54:	687b      	ldr	r3, [r7, #4]
    8e56:	681b      	ldr	r3, [r3, #0]
    8e58:	60fb      	str	r3, [r7, #12]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8e5a:	687b      	ldr	r3, [r7, #4]
    8e5c:	681b      	ldr	r3, [r3, #0]
    8e5e:	0018      	movs	r0, r3
    8e60:	4b09      	ldr	r3, [pc, #36]	; (8e88 <i2c_slave_enable+0x3c>)
    8e62:	4798      	blx	r3
    8e64:	0003      	movs	r3, r0
    8e66:	0018      	movs	r0, r3
    8e68:	4b08      	ldr	r3, [pc, #32]	; (8e8c <i2c_slave_enable+0x40>)
    8e6a:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);
    8e6c:	687b      	ldr	r3, [r7, #4]
    8e6e:	0018      	movs	r0, r3
    8e70:	4b07      	ldr	r3, [pc, #28]	; (8e90 <i2c_slave_enable+0x44>)
    8e72:	4798      	blx	r3

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    8e74:	68fb      	ldr	r3, [r7, #12]
    8e76:	681b      	ldr	r3, [r3, #0]
    8e78:	2202      	movs	r2, #2
    8e7a:	431a      	orrs	r2, r3
    8e7c:	68fb      	ldr	r3, [r7, #12]
    8e7e:	601a      	str	r2, [r3, #0]
}
    8e80:	46c0      	nop			; (mov r8, r8)
    8e82:	46bd      	mov	sp, r7
    8e84:	b004      	add	sp, #16
    8e86:	bd80      	pop	{r7, pc}
    8e88:	00007015 	.word	0x00007015
    8e8c:	00008be9 	.word	0x00008be9
    8e90:	00008da9 	.word	0x00008da9

00008e94 <i2c_slave_enable_callback>:
 * \param[in]      callback_type  Callback type to enable
 */
static inline void i2c_slave_enable_callback(
		struct i2c_slave_module *const module,
		enum i2c_slave_callback callback_type)
{
    8e94:	b580      	push	{r7, lr}
    8e96:	b084      	sub	sp, #16
    8e98:	af00      	add	r7, sp, #0
    8e9a:	6078      	str	r0, [r7, #4]
    8e9c:	000a      	movs	r2, r1
    8e9e:	1cfb      	adds	r3, r7, #3
    8ea0:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    8ea2:	687b      	ldr	r3, [r7, #4]
    8ea4:	2225      	movs	r2, #37	; 0x25
    8ea6:	5c9b      	ldrb	r3, [r3, r2]
    8ea8:	b2db      	uxtb	r3, r3
    8eaa:	b25a      	sxtb	r2, r3
    8eac:	1cfb      	adds	r3, r7, #3
    8eae:	781b      	ldrb	r3, [r3, #0]
    8eb0:	2101      	movs	r1, #1
    8eb2:	4099      	lsls	r1, r3
    8eb4:	000b      	movs	r3, r1
    8eb6:	b25b      	sxtb	r3, r3
    8eb8:	4313      	orrs	r3, r2
    8eba:	b25b      	sxtb	r3, r3
    8ebc:	b2d9      	uxtb	r1, r3
    8ebe:	687b      	ldr	r3, [r7, #4]
    8ec0:	2225      	movs	r2, #37	; 0x25
    8ec2:	5499      	strb	r1, [r3, r2]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    8ec4:	687b      	ldr	r3, [r7, #4]
    8ec6:	681b      	ldr	r3, [r3, #0]
    8ec8:	60fb      	str	r3, [r7, #12]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
    8eca:	1cfb      	adds	r3, r7, #3
    8ecc:	781b      	ldrb	r3, [r3, #0]
    8ece:	2b02      	cmp	r3, #2
    8ed0:	d003      	beq.n	8eda <i2c_slave_enable_callback+0x46>
    8ed2:	1cfb      	adds	r3, r7, #3
    8ed4:	781b      	ldrb	r3, [r3, #0]
    8ed6:	2b03      	cmp	r3, #3
    8ed8:	d102      	bne.n	8ee0 <i2c_slave_enable_callback+0x4c>
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    8eda:	68fb      	ldr	r3, [r7, #12]
    8edc:	2202      	movs	r2, #2
    8ede:	759a      	strb	r2, [r3, #22]
	}
}
    8ee0:	46c0      	nop			; (mov r8, r8)
    8ee2:	46bd      	mov	sp, r7
    8ee4:	b004      	add	sp, #16
    8ee6:	bd80      	pop	{r7, pc}

00008ee8 <usart_is_syncing>:
{
    8ee8:	b580      	push	{r7, lr}
    8eea:	b084      	sub	sp, #16
    8eec:	af00      	add	r7, sp, #0
    8eee:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8ef0:	687b      	ldr	r3, [r7, #4]
    8ef2:	681b      	ldr	r3, [r3, #0]
    8ef4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    8ef6:	68fb      	ldr	r3, [r7, #12]
    8ef8:	69db      	ldr	r3, [r3, #28]
    8efa:	1e5a      	subs	r2, r3, #1
    8efc:	4193      	sbcs	r3, r2
    8efe:	b2db      	uxtb	r3, r3
}
    8f00:	0018      	movs	r0, r3
    8f02:	46bd      	mov	sp, r7
    8f04:	b004      	add	sp, #16
    8f06:	bd80      	pop	{r7, pc}

00008f08 <_usart_wait_for_sync>:
{
    8f08:	b580      	push	{r7, lr}
    8f0a:	b082      	sub	sp, #8
    8f0c:	af00      	add	r7, sp, #0
    8f0e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    8f10:	46c0      	nop			; (mov r8, r8)
    8f12:	687b      	ldr	r3, [r7, #4]
    8f14:	0018      	movs	r0, r3
    8f16:	4b04      	ldr	r3, [pc, #16]	; (8f28 <_usart_wait_for_sync+0x20>)
    8f18:	4798      	blx	r3
    8f1a:	1e03      	subs	r3, r0, #0
    8f1c:	d1f9      	bne.n	8f12 <_usart_wait_for_sync+0xa>
}
    8f1e:	46c0      	nop			; (mov r8, r8)
    8f20:	46bd      	mov	sp, r7
    8f22:	b002      	add	sp, #8
    8f24:	bd80      	pop	{r7, pc}
    8f26:	46c0      	nop			; (mov r8, r8)
    8f28:	00008ee9 	.word	0x00008ee9

00008f2c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    8f2c:	b580      	push	{r7, lr}
    8f2e:	b082      	sub	sp, #8
    8f30:	af00      	add	r7, sp, #0
    8f32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	2280      	movs	r2, #128	; 0x80
    8f38:	05d2      	lsls	r2, r2, #23
    8f3a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    8f3c:	687b      	ldr	r3, [r7, #4]
    8f3e:	2200      	movs	r2, #0
    8f40:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    8f42:	687b      	ldr	r3, [r7, #4]
    8f44:	22ff      	movs	r2, #255	; 0xff
    8f46:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	2200      	movs	r2, #0
    8f4c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	2200      	movs	r2, #0
    8f52:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    8f54:	687b      	ldr	r3, [r7, #4]
    8f56:	2296      	movs	r2, #150	; 0x96
    8f58:	0192      	lsls	r2, r2, #6
    8f5a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    8f5c:	687b      	ldr	r3, [r7, #4]
    8f5e:	2224      	movs	r2, #36	; 0x24
    8f60:	2101      	movs	r1, #1
    8f62:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    8f64:	687b      	ldr	r3, [r7, #4]
    8f66:	2225      	movs	r2, #37	; 0x25
    8f68:	2101      	movs	r1, #1
    8f6a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    8f6c:	687b      	ldr	r3, [r7, #4]
    8f6e:	2226      	movs	r2, #38	; 0x26
    8f70:	2100      	movs	r1, #0
    8f72:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	2227      	movs	r2, #39	; 0x27
    8f78:	2100      	movs	r1, #0
    8f7a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    8f7c:	687b      	ldr	r3, [r7, #4]
    8f7e:	2200      	movs	r2, #0
    8f80:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    8f82:	687b      	ldr	r3, [r7, #4]
    8f84:	2288      	movs	r2, #136	; 0x88
    8f86:	0352      	lsls	r2, r2, #13
    8f88:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    8f8a:	687b      	ldr	r3, [r7, #4]
    8f8c:	222c      	movs	r2, #44	; 0x2c
    8f8e:	2100      	movs	r1, #0
    8f90:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    8f92:	687b      	ldr	r3, [r7, #4]
    8f94:	222d      	movs	r2, #45	; 0x2d
    8f96:	2100      	movs	r1, #0
    8f98:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    8f9a:	687b      	ldr	r3, [r7, #4]
    8f9c:	2200      	movs	r2, #0
    8f9e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    8fa0:	687b      	ldr	r3, [r7, #4]
    8fa2:	2200      	movs	r2, #0
    8fa4:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    8fa6:	687b      	ldr	r3, [r7, #4]
    8fa8:	2200      	movs	r2, #0
    8faa:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	2200      	movs	r2, #0
    8fb0:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    8fb2:	687b      	ldr	r3, [r7, #4]
    8fb4:	2200      	movs	r2, #0
    8fb6:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    8fb8:	687b      	ldr	r3, [r7, #4]
    8fba:	2200      	movs	r2, #0
    8fbc:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    8fbe:	687b      	ldr	r3, [r7, #4]
    8fc0:	2200      	movs	r2, #0
    8fc2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    8fc4:	687b      	ldr	r3, [r7, #4]
    8fc6:	2200      	movs	r2, #0
    8fc8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    8fca:	687b      	ldr	r3, [r7, #4]
    8fcc:	2200      	movs	r2, #0
    8fce:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	2200      	movs	r2, #0
    8fd4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    8fd6:	687b      	ldr	r3, [r7, #4]
    8fd8:	2213      	movs	r2, #19
    8fda:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	2200      	movs	r2, #0
    8fe0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    8fe2:	46c0      	nop			; (mov r8, r8)
    8fe4:	46bd      	mov	sp, r7
    8fe6:	b002      	add	sp, #8
    8fe8:	bd80      	pop	{r7, pc}
	...

00008fec <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    8fec:	b580      	push	{r7, lr}
    8fee:	b084      	sub	sp, #16
    8ff0:	af00      	add	r7, sp, #0
    8ff2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8ff4:	687b      	ldr	r3, [r7, #4]
    8ff6:	681b      	ldr	r3, [r3, #0]
    8ff8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8ffa:	687b      	ldr	r3, [r7, #4]
    8ffc:	681b      	ldr	r3, [r3, #0]
    8ffe:	0018      	movs	r0, r3
    9000:	4b09      	ldr	r3, [pc, #36]	; (9028 <usart_enable+0x3c>)
    9002:	4798      	blx	r3
    9004:	0003      	movs	r3, r0
    9006:	0018      	movs	r0, r3
    9008:	4b08      	ldr	r3, [pc, #32]	; (902c <usart_enable+0x40>)
    900a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    900c:	687b      	ldr	r3, [r7, #4]
    900e:	0018      	movs	r0, r3
    9010:	4b07      	ldr	r3, [pc, #28]	; (9030 <usart_enable+0x44>)
    9012:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9014:	68fb      	ldr	r3, [r7, #12]
    9016:	681b      	ldr	r3, [r3, #0]
    9018:	2202      	movs	r2, #2
    901a:	431a      	orrs	r2, r3
    901c:	68fb      	ldr	r3, [r7, #12]
    901e:	601a      	str	r2, [r3, #0]
}
    9020:	46c0      	nop			; (mov r8, r8)
    9022:	46bd      	mov	sp, r7
    9024:	b004      	add	sp, #16
    9026:	bd80      	pop	{r7, pc}
    9028:	00007015 	.word	0x00007015
    902c:	00008be9 	.word	0x00008be9
    9030:	00008f09 	.word	0x00008f09

00009034 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    9034:	b580      	push	{r7, lr}
    9036:	b084      	sub	sp, #16
    9038:	af00      	add	r7, sp, #0
    903a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    903c:	687b      	ldr	r3, [r7, #4]
    903e:	681b      	ldr	r3, [r3, #0]
    9040:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    9042:	687b      	ldr	r3, [r7, #4]
    9044:	681b      	ldr	r3, [r3, #0]
    9046:	0018      	movs	r0, r3
    9048:	4b0a      	ldr	r3, [pc, #40]	; (9074 <usart_disable+0x40>)
    904a:	4798      	blx	r3
    904c:	0003      	movs	r3, r0
    904e:	0018      	movs	r0, r3
    9050:	4b09      	ldr	r3, [pc, #36]	; (9078 <usart_disable+0x44>)
    9052:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9054:	687b      	ldr	r3, [r7, #4]
    9056:	0018      	movs	r0, r3
    9058:	4b08      	ldr	r3, [pc, #32]	; (907c <usart_disable+0x48>)
    905a:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    905c:	68fb      	ldr	r3, [r7, #12]
    905e:	681b      	ldr	r3, [r3, #0]
    9060:	2202      	movs	r2, #2
    9062:	4393      	bics	r3, r2
    9064:	001a      	movs	r2, r3
    9066:	68fb      	ldr	r3, [r7, #12]
    9068:	601a      	str	r2, [r3, #0]
}
    906a:	46c0      	nop			; (mov r8, r8)
    906c:	46bd      	mov	sp, r7
    906e:	b004      	add	sp, #16
    9070:	bd80      	pop	{r7, pc}
    9072:	46c0      	nop			; (mov r8, r8)
    9074:	00007015 	.word	0x00007015
    9078:	00008c15 	.word	0x00008c15
    907c:	00008f09 	.word	0x00008f09

00009080 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    9080:	b580      	push	{r7, lr}
    9082:	b082      	sub	sp, #8
    9084:	af00      	add	r7, sp, #0
    9086:	6078      	str	r0, [r7, #4]
    9088:	000a      	movs	r2, r1
    908a:	1cfb      	adds	r3, r7, #3
    908c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    908e:	687b      	ldr	r3, [r7, #4]
    9090:	2231      	movs	r2, #49	; 0x31
    9092:	5c9b      	ldrb	r3, [r3, r2]
    9094:	b25a      	sxtb	r2, r3
    9096:	1cfb      	adds	r3, r7, #3
    9098:	781b      	ldrb	r3, [r3, #0]
    909a:	2101      	movs	r1, #1
    909c:	4099      	lsls	r1, r3
    909e:	000b      	movs	r3, r1
    90a0:	b25b      	sxtb	r3, r3
    90a2:	4313      	orrs	r3, r2
    90a4:	b25b      	sxtb	r3, r3
    90a6:	b2d9      	uxtb	r1, r3
    90a8:	687b      	ldr	r3, [r7, #4]
    90aa:	2231      	movs	r2, #49	; 0x31
    90ac:	5499      	strb	r1, [r3, r2]

}
    90ae:	46c0      	nop			; (mov r8, r8)
    90b0:	46bd      	mov	sp, r7
    90b2:	b002      	add	sp, #8
    90b4:	bd80      	pop	{r7, pc}

000090b6 <tc_is_syncing>:
{
    90b6:	b580      	push	{r7, lr}
    90b8:	b084      	sub	sp, #16
    90ba:	af00      	add	r7, sp, #0
    90bc:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    90be:	687b      	ldr	r3, [r7, #4]
    90c0:	681b      	ldr	r3, [r3, #0]
    90c2:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    90c4:	68fb      	ldr	r3, [r7, #12]
    90c6:	7bdb      	ldrb	r3, [r3, #15]
    90c8:	b2db      	uxtb	r3, r3
    90ca:	001a      	movs	r2, r3
    90cc:	2380      	movs	r3, #128	; 0x80
    90ce:	4013      	ands	r3, r2
    90d0:	1e5a      	subs	r2, r3, #1
    90d2:	4193      	sbcs	r3, r2
    90d4:	b2db      	uxtb	r3, r3
}
    90d6:	0018      	movs	r0, r3
    90d8:	46bd      	mov	sp, r7
    90da:	b004      	add	sp, #16
    90dc:	bd80      	pop	{r7, pc}

000090de <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    90de:	b580      	push	{r7, lr}
    90e0:	b082      	sub	sp, #8
    90e2:	af00      	add	r7, sp, #0
    90e4:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    90e6:	687b      	ldr	r3, [r7, #4]
    90e8:	2200      	movs	r2, #0
    90ea:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    90ec:	687b      	ldr	r3, [r7, #4]
    90ee:	2200      	movs	r2, #0
    90f0:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    90f2:	687b      	ldr	r3, [r7, #4]
    90f4:	2200      	movs	r2, #0
    90f6:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    90f8:	687b      	ldr	r3, [r7, #4]
    90fa:	2200      	movs	r2, #0
    90fc:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    90fe:	687b      	ldr	r3, [r7, #4]
    9100:	2200      	movs	r2, #0
    9102:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    9104:	687b      	ldr	r3, [r7, #4]
    9106:	2200      	movs	r2, #0
    9108:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    910a:	687b      	ldr	r3, [r7, #4]
    910c:	2200      	movs	r2, #0
    910e:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    9110:	687b      	ldr	r3, [r7, #4]
    9112:	2200      	movs	r2, #0
    9114:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    9116:	687b      	ldr	r3, [r7, #4]
    9118:	2200      	movs	r2, #0
    911a:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    911c:	687b      	ldr	r3, [r7, #4]
    911e:	2200      	movs	r2, #0
    9120:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    9122:	687b      	ldr	r3, [r7, #4]
    9124:	2200      	movs	r2, #0
    9126:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    9128:	687b      	ldr	r3, [r7, #4]
    912a:	2200      	movs	r2, #0
    912c:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    912e:	687b      	ldr	r3, [r7, #4]
    9130:	2200      	movs	r2, #0
    9132:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    9134:	687b      	ldr	r3, [r7, #4]
    9136:	2200      	movs	r2, #0
    9138:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    913a:	687b      	ldr	r3, [r7, #4]
    913c:	2200      	movs	r2, #0
    913e:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    9140:	687b      	ldr	r3, [r7, #4]
    9142:	2200      	movs	r2, #0
    9144:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    9146:	687b      	ldr	r3, [r7, #4]
    9148:	2200      	movs	r2, #0
    914a:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	2200      	movs	r2, #0
    9150:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    9152:	687b      	ldr	r3, [r7, #4]
    9154:	2200      	movs	r2, #0
    9156:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    9158:	687b      	ldr	r3, [r7, #4]
    915a:	2200      	movs	r2, #0
    915c:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    915e:	46c0      	nop			; (mov r8, r8)
    9160:	46bd      	mov	sp, r7
    9162:	b002      	add	sp, #8
    9164:	bd80      	pop	{r7, pc}
	...

00009168 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    9168:	b580      	push	{r7, lr}
    916a:	b084      	sub	sp, #16
    916c:	af00      	add	r7, sp, #0
    916e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    9170:	687b      	ldr	r3, [r7, #4]
    9172:	681b      	ldr	r3, [r3, #0]
    9174:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    9176:	46c0      	nop			; (mov r8, r8)
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	0018      	movs	r0, r3
    917c:	4b07      	ldr	r3, [pc, #28]	; (919c <tc_enable+0x34>)
    917e:	4798      	blx	r3
    9180:	1e03      	subs	r3, r0, #0
    9182:	d1f9      	bne.n	9178 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    9184:	68fb      	ldr	r3, [r7, #12]
    9186:	881b      	ldrh	r3, [r3, #0]
    9188:	b29b      	uxth	r3, r3
    918a:	2202      	movs	r2, #2
    918c:	4313      	orrs	r3, r2
    918e:	b29a      	uxth	r2, r3
    9190:	68fb      	ldr	r3, [r7, #12]
    9192:	801a      	strh	r2, [r3, #0]
}
    9194:	46c0      	nop			; (mov r8, r8)
    9196:	46bd      	mov	sp, r7
    9198:	b004      	add	sp, #16
    919a:	bd80      	pop	{r7, pc}
    919c:	000090b7 	.word	0x000090b7

000091a0 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    91a0:	b580      	push	{r7, lr}
    91a2:	b084      	sub	sp, #16
    91a4:	af00      	add	r7, sp, #0
    91a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	681b      	ldr	r3, [r3, #0]
    91ac:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    91ae:	46c0      	nop			; (mov r8, r8)
    91b0:	68fb      	ldr	r3, [r7, #12]
    91b2:	689b      	ldr	r3, [r3, #8]
    91b4:	2202      	movs	r2, #2
    91b6:	4013      	ands	r3, r2
    91b8:	d1fa      	bne.n	91b0 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    91ba:	68fb      	ldr	r3, [r7, #12]
    91bc:	681b      	ldr	r3, [r3, #0]
    91be:	2202      	movs	r2, #2
    91c0:	431a      	orrs	r2, r3
    91c2:	68fb      	ldr	r3, [r7, #12]
    91c4:	601a      	str	r2, [r3, #0]
}
    91c6:	46c0      	nop			; (mov r8, r8)
    91c8:	46bd      	mov	sp, r7
    91ca:	b004      	add	sp, #16
    91cc:	bd80      	pop	{r7, pc}
	...

000091d0 <initIMU>:


float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

void initIMU()
{
    91d0:	b580      	push	{r7, lr}
    91d2:	b082      	sub	sp, #8
    91d4:	af00      	add	r7, sp, #0
	settings.device.agAddress = LSM9DS1_AG_ADDR;
    91d6:	4b4f      	ldr	r3, [pc, #316]	; (9314 <initIMU+0x144>)
    91d8:	226b      	movs	r2, #107	; 0x6b
    91da:	705a      	strb	r2, [r3, #1]
	settings.device.mAddress = LSM9DS1_M_ADDR;
    91dc:	4b4d      	ldr	r3, [pc, #308]	; (9314 <initIMU+0x144>)
    91de:	221e      	movs	r2, #30
    91e0:	709a      	strb	r2, [r3, #2]

	settings.gyro.enabled = true;
    91e2:	4b4c      	ldr	r3, [pc, #304]	; (9314 <initIMU+0x144>)
    91e4:	2201      	movs	r2, #1
    91e6:	711a      	strb	r2, [r3, #4]
	settings.gyro.enableX = true;
    91e8:	4b4a      	ldr	r3, [pc, #296]	; (9314 <initIMU+0x144>)
    91ea:	2201      	movs	r2, #1
    91ec:	745a      	strb	r2, [r3, #17]
	settings.gyro.enableY = true;
    91ee:	4b49      	ldr	r3, [pc, #292]	; (9314 <initIMU+0x144>)
    91f0:	2201      	movs	r2, #1
    91f2:	749a      	strb	r2, [r3, #18]
	settings.gyro.enableZ = true;
    91f4:	4b47      	ldr	r3, [pc, #284]	; (9314 <initIMU+0x144>)
    91f6:	2201      	movs	r2, #1
    91f8:	74da      	strb	r2, [r3, #19]
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;//245
    91fa:	4b46      	ldr	r3, [pc, #280]	; (9314 <initIMU+0x144>)
    91fc:	22f5      	movs	r2, #245	; 0xf5
    91fe:	80da      	strh	r2, [r3, #6]
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
    9200:	4b44      	ldr	r3, [pc, #272]	; (9314 <initIMU+0x144>)
    9202:	2206      	movs	r2, #6
    9204:	721a      	strb	r2, [r3, #8]
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
    9206:	4b43      	ldr	r3, [pc, #268]	; (9314 <initIMU+0x144>)
    9208:	2200      	movs	r2, #0
    920a:	725a      	strb	r2, [r3, #9]
	settings.gyro.lowPowerEnable = false;
    920c:	4b41      	ldr	r3, [pc, #260]	; (9314 <initIMU+0x144>)
    920e:	2200      	movs	r2, #0
    9210:	729a      	strb	r2, [r3, #10]
	settings.gyro.HPFEnable = false;
    9212:	4b40      	ldr	r3, [pc, #256]	; (9314 <initIMU+0x144>)
    9214:	2200      	movs	r2, #0
    9216:	72da      	strb	r2, [r3, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
    9218:	4b3e      	ldr	r3, [pc, #248]	; (9314 <initIMU+0x144>)
    921a:	2200      	movs	r2, #0
    921c:	731a      	strb	r2, [r3, #12]
	settings.gyro.flipX = false;
    921e:	4b3d      	ldr	r3, [pc, #244]	; (9314 <initIMU+0x144>)
    9220:	2200      	movs	r2, #0
    9222:	735a      	strb	r2, [r3, #13]
	settings.gyro.flipY = false;
    9224:	4b3b      	ldr	r3, [pc, #236]	; (9314 <initIMU+0x144>)
    9226:	2200      	movs	r2, #0
    9228:	739a      	strb	r2, [r3, #14]
	settings.gyro.flipZ = false;
    922a:	4b3a      	ldr	r3, [pc, #232]	; (9314 <initIMU+0x144>)
    922c:	2200      	movs	r2, #0
    922e:	73da      	strb	r2, [r3, #15]
	settings.gyro.orientation = 0;
    9230:	4b38      	ldr	r3, [pc, #224]	; (9314 <initIMU+0x144>)
    9232:	2200      	movs	r2, #0
    9234:	741a      	strb	r2, [r3, #16]
	settings.gyro.latchInterrupt = true;
    9236:	4b37      	ldr	r3, [pc, #220]	; (9314 <initIMU+0x144>)
    9238:	2201      	movs	r2, #1
    923a:	751a      	strb	r2, [r3, #20]

	settings.accel.enabled = true;
    923c:	4b35      	ldr	r3, [pc, #212]	; (9314 <initIMU+0x144>)
    923e:	2201      	movs	r2, #1
    9240:	759a      	strb	r2, [r3, #22]
	settings.accel.enableX = true;
    9242:	4b34      	ldr	r3, [pc, #208]	; (9314 <initIMU+0x144>)
    9244:	2201      	movs	r2, #1
    9246:	765a      	strb	r2, [r3, #25]
	settings.accel.enableY = true;
    9248:	4b32      	ldr	r3, [pc, #200]	; (9314 <initIMU+0x144>)
    924a:	2201      	movs	r2, #1
    924c:	769a      	strb	r2, [r3, #26]
	settings.accel.enableZ = true;
    924e:	4b31      	ldr	r3, [pc, #196]	; (9314 <initIMU+0x144>)
    9250:	2201      	movs	r2, #1
    9252:	76da      	strb	r2, [r3, #27]
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 16;//8
    9254:	4b2f      	ldr	r3, [pc, #188]	; (9314 <initIMU+0x144>)
    9256:	2210      	movs	r2, #16
    9258:	75da      	strb	r2, [r3, #23]
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
    925a:	4b2e      	ldr	r3, [pc, #184]	; (9314 <initIMU+0x144>)
    925c:	2206      	movs	r2, #6
    925e:	761a      	strb	r2, [r3, #24]
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = -1;
    9260:	4b2c      	ldr	r3, [pc, #176]	; (9314 <initIMU+0x144>)
    9262:	22ff      	movs	r2, #255	; 0xff
    9264:	771a      	strb	r2, [r3, #28]
	settings.accel.highResEnable = false;
    9266:	4b2b      	ldr	r3, [pc, #172]	; (9314 <initIMU+0x144>)
    9268:	2200      	movs	r2, #0
    926a:	775a      	strb	r2, [r3, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
    926c:	4b29      	ldr	r3, [pc, #164]	; (9314 <initIMU+0x144>)
    926e:	2200      	movs	r2, #0
    9270:	779a      	strb	r2, [r3, #30]

	settings.mag.enabled = true;
    9272:	4b28      	ldr	r3, [pc, #160]	; (9314 <initIMU+0x144>)
    9274:	2201      	movs	r2, #1
    9276:	77da      	strb	r2, [r3, #31]
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 8;
    9278:	4b26      	ldr	r3, [pc, #152]	; (9314 <initIMU+0x144>)
    927a:	2220      	movs	r2, #32
    927c:	2108      	movs	r1, #8
    927e:	5499      	strb	r1, [r3, r2]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
    9280:	4b24      	ldr	r3, [pc, #144]	; (9314 <initIMU+0x144>)
    9282:	2221      	movs	r2, #33	; 0x21
    9284:	2107      	movs	r1, #7
    9286:	5499      	strb	r1, [r3, r2]
	settings.mag.tempCompensationEnable = true;
    9288:	4b22      	ldr	r3, [pc, #136]	; (9314 <initIMU+0x144>)
    928a:	2222      	movs	r2, #34	; 0x22
    928c:	2101      	movs	r1, #1
    928e:	5499      	strb	r1, [r3, r2]
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 1;
    9290:	4b20      	ldr	r3, [pc, #128]	; (9314 <initIMU+0x144>)
    9292:	2223      	movs	r2, #35	; 0x23
    9294:	2101      	movs	r1, #1
    9296:	5499      	strb	r1, [r3, r2]
	settings.mag.ZPerformance = 1;
    9298:	4b1e      	ldr	r3, [pc, #120]	; (9314 <initIMU+0x144>)
    929a:	2224      	movs	r2, #36	; 0x24
    929c:	2101      	movs	r1, #1
    929e:	5499      	strb	r1, [r3, r2]
	settings.mag.lowPowerEnable = false;
    92a0:	4b1c      	ldr	r3, [pc, #112]	; (9314 <initIMU+0x144>)
    92a2:	2225      	movs	r2, #37	; 0x25
    92a4:	2100      	movs	r1, #0
    92a6:	5499      	strb	r1, [r3, r2]
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
    92a8:	4b1a      	ldr	r3, [pc, #104]	; (9314 <initIMU+0x144>)
    92aa:	2226      	movs	r2, #38	; 0x26
    92ac:	2100      	movs	r1, #0
    92ae:	5499      	strb	r1, [r3, r2]

	settings.temp.enabled = true;
    92b0:	4b18      	ldr	r3, [pc, #96]	; (9314 <initIMU+0x144>)
    92b2:	2227      	movs	r2, #39	; 0x27
    92b4:	2101      	movs	r1, #1
    92b6:	5499      	strb	r1, [r3, r2]
	for (int i=0; i<3; i++)
    92b8:	2300      	movs	r3, #0
    92ba:	607b      	str	r3, [r7, #4]
    92bc:	e020      	b.n	9300 <initIMU+0x130>
	{
		gBias[i] = 0;
    92be:	4b16      	ldr	r3, [pc, #88]	; (9318 <initIMU+0x148>)
    92c0:	687a      	ldr	r2, [r7, #4]
    92c2:	0092      	lsls	r2, r2, #2
    92c4:	2100      	movs	r1, #0
    92c6:	50d1      	str	r1, [r2, r3]
		aBias[i] = 0;
    92c8:	4b14      	ldr	r3, [pc, #80]	; (931c <initIMU+0x14c>)
    92ca:	687a      	ldr	r2, [r7, #4]
    92cc:	0092      	lsls	r2, r2, #2
    92ce:	2100      	movs	r1, #0
    92d0:	50d1      	str	r1, [r2, r3]
		mBias[i] = 0;
    92d2:	4b13      	ldr	r3, [pc, #76]	; (9320 <initIMU+0x150>)
    92d4:	687a      	ldr	r2, [r7, #4]
    92d6:	0092      	lsls	r2, r2, #2
    92d8:	2100      	movs	r1, #0
    92da:	50d1      	str	r1, [r2, r3]
		gBiasRaw[i] = 0;
    92dc:	4b11      	ldr	r3, [pc, #68]	; (9324 <initIMU+0x154>)
    92de:	687a      	ldr	r2, [r7, #4]
    92e0:	0052      	lsls	r2, r2, #1
    92e2:	2100      	movs	r1, #0
    92e4:	52d1      	strh	r1, [r2, r3]
		aBiasRaw[i] = 0;
    92e6:	4b10      	ldr	r3, [pc, #64]	; (9328 <initIMU+0x158>)
    92e8:	687a      	ldr	r2, [r7, #4]
    92ea:	0052      	lsls	r2, r2, #1
    92ec:	2100      	movs	r1, #0
    92ee:	52d1      	strh	r1, [r2, r3]
		mBiasRaw[i] = 0;
    92f0:	4b0e      	ldr	r3, [pc, #56]	; (932c <initIMU+0x15c>)
    92f2:	687a      	ldr	r2, [r7, #4]
    92f4:	0052      	lsls	r2, r2, #1
    92f6:	2100      	movs	r1, #0
    92f8:	52d1      	strh	r1, [r2, r3]
	for (int i=0; i<3; i++)
    92fa:	687b      	ldr	r3, [r7, #4]
    92fc:	3301      	adds	r3, #1
    92fe:	607b      	str	r3, [r7, #4]
    9300:	687b      	ldr	r3, [r7, #4]
    9302:	2b02      	cmp	r3, #2
    9304:	dddb      	ble.n	92be <initIMU+0xee>
	}
	_autoCalc = false;
    9306:	4b0a      	ldr	r3, [pc, #40]	; (9330 <initIMU+0x160>)
    9308:	2200      	movs	r2, #0
    930a:	701a      	strb	r2, [r3, #0]
}
    930c:	46c0      	nop			; (mov r8, r8)
    930e:	46bd      	mov	sp, r7
    9310:	b002      	add	sp, #8
    9312:	bd80      	pop	{r7, pc}
    9314:	200004d4 	.word	0x200004d4
    9318:	20000d7c 	.word	0x20000d7c
    931c:	20000480 	.word	0x20000480
    9320:	20000e40 	.word	0x20000e40
    9324:	20000a80 	.word	0x20000a80
    9328:	20000a88 	.word	0x20000a88
    932c:	20000498 	.word	0x20000498
    9330:	200008f0 	.word	0x200008f0

00009334 <beginIMU>:


uint16_t beginIMU()
{
    9334:	b590      	push	{r4, r7, lr}
    9336:	b083      	sub	sp, #12
    9338:	af00      	add	r7, sp, #0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
    933a:	4b1e      	ldr	r3, [pc, #120]	; (93b4 <beginIMU+0x80>)
    933c:	785a      	ldrb	r2, [r3, #1]
    933e:	4b1e      	ldr	r3, [pc, #120]	; (93b8 <beginIMU+0x84>)
    9340:	701a      	strb	r2, [r3, #0]
	_mAddress = settings.device.mAddress;
    9342:	4b1c      	ldr	r3, [pc, #112]	; (93b4 <beginIMU+0x80>)
    9344:	789a      	ldrb	r2, [r3, #2]
    9346:	4b1d      	ldr	r3, [pc, #116]	; (93bc <beginIMU+0x88>)
    9348:	701a      	strb	r2, [r3, #0]
	
	constrainScales();
    934a:	4b1d      	ldr	r3, [pc, #116]	; (93c0 <beginIMU+0x8c>)
    934c:	4798      	blx	r3
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
    934e:	4b1d      	ldr	r3, [pc, #116]	; (93c4 <beginIMU+0x90>)
    9350:	4798      	blx	r3
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
    9352:	4b1d      	ldr	r3, [pc, #116]	; (93c8 <beginIMU+0x94>)
    9354:	4798      	blx	r3
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
    9356:	4b1d      	ldr	r3, [pc, #116]	; (93cc <beginIMU+0x98>)
    9358:	4798      	blx	r3
	
	initI2C();	// Initialize I2C
    935a:	4b1d      	ldr	r3, [pc, #116]	; (93d0 <beginIMU+0x9c>)
    935c:	4798      	blx	r3
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
    935e:	1dfc      	adds	r4, r7, #7
    9360:	200f      	movs	r0, #15
    9362:	4b1c      	ldr	r3, [pc, #112]	; (93d4 <beginIMU+0xa0>)
    9364:	4798      	blx	r3
    9366:	0003      	movs	r3, r0
    9368:	7023      	strb	r3, [r4, #0]
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
    936a:	1dbc      	adds	r4, r7, #6
    936c:	200f      	movs	r0, #15
    936e:	4b1a      	ldr	r3, [pc, #104]	; (93d8 <beginIMU+0xa4>)
    9370:	4798      	blx	r3
    9372:	0003      	movs	r3, r0
    9374:	7023      	strb	r3, [r4, #0]
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
    9376:	1dbb      	adds	r3, r7, #6
    9378:	781b      	ldrb	r3, [r3, #0]
    937a:	021b      	lsls	r3, r3, #8
    937c:	b21a      	sxth	r2, r3
    937e:	1dfb      	adds	r3, r7, #7
    9380:	781b      	ldrb	r3, [r3, #0]
    9382:	b21b      	sxth	r3, r3
    9384:	4313      	orrs	r3, r2
    9386:	b21a      	sxth	r2, r3
    9388:	1d3b      	adds	r3, r7, #4
    938a:	801a      	strh	r2, [r3, #0]
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
    938c:	1d3b      	adds	r3, r7, #4
    938e:	881b      	ldrh	r3, [r3, #0]
    9390:	4a12      	ldr	r2, [pc, #72]	; (93dc <beginIMU+0xa8>)
    9392:	4293      	cmp	r3, r2
    9394:	d001      	beq.n	939a <beginIMU+0x66>
		return 0;
    9396:	2300      	movs	r3, #0
    9398:	e007      	b.n	93aa <beginIMU+0x76>
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
    939a:	4b11      	ldr	r3, [pc, #68]	; (93e0 <beginIMU+0xac>)
    939c:	4798      	blx	r3
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
    939e:	4b11      	ldr	r3, [pc, #68]	; (93e4 <beginIMU+0xb0>)
    93a0:	4798      	blx	r3
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
    93a2:	4b11      	ldr	r3, [pc, #68]	; (93e8 <beginIMU+0xb4>)
    93a4:	4798      	blx	r3

	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
    93a6:	1d3b      	adds	r3, r7, #4
    93a8:	881b      	ldrh	r3, [r3, #0]
}
    93aa:	0018      	movs	r0, r3
    93ac:	46bd      	mov	sp, r7
    93ae:	b003      	add	sp, #12
    93b0:	bd90      	pop	{r4, r7, pc}
    93b2:	46c0      	nop			; (mov r8, r8)
    93b4:	200004d4 	.word	0x200004d4
    93b8:	20000a22 	.word	0x20000a22
    93bc:	200009a8 	.word	0x200009a8
    93c0:	00009e31 	.word	0x00009e31
    93c4:	00009cad 	.word	0x00009cad
    93c8:	00009d1d 	.word	0x00009d1d
    93cc:	00009ce5 	.word	0x00009ce5
    93d0:	00009ffd 	.word	0x00009ffd
    93d4:	00009f91 	.word	0x00009f91
    93d8:	00009f25 	.word	0x00009f25
    93dc:	0000683d 	.word	0x0000683d
    93e0:	000093ed 	.word	0x000093ed
    93e4:	0000956d 	.word	0x0000956d
    93e8:	000098f5 	.word	0x000098f5

000093ec <initGyro>:

void initGyro()
{
    93ec:	b580      	push	{r7, lr}
    93ee:	b082      	sub	sp, #8
    93f0:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
    93f2:	1dfb      	adds	r3, r7, #7
    93f4:	2200      	movs	r2, #0
    93f6:	701a      	strb	r2, [r3, #0]
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
    93f8:	4b5a      	ldr	r3, [pc, #360]	; (9564 <initGyro+0x178>)
    93fa:	791b      	ldrb	r3, [r3, #4]
    93fc:	2b00      	cmp	r3, #0
    93fe:	d004      	beq.n	940a <initGyro+0x1e>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
    9400:	4b58      	ldr	r3, [pc, #352]	; (9564 <initGyro+0x178>)
    9402:	7a1b      	ldrb	r3, [r3, #8]
    9404:	015a      	lsls	r2, r3, #5
    9406:	1dfb      	adds	r3, r7, #7
    9408:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.gyro.scale)
    940a:	4b56      	ldr	r3, [pc, #344]	; (9564 <initGyro+0x178>)
    940c:	88db      	ldrh	r3, [r3, #6]
    940e:	22fa      	movs	r2, #250	; 0xfa
    9410:	0052      	lsls	r2, r2, #1
    9412:	4293      	cmp	r3, r2
    9414:	d004      	beq.n	9420 <initGyro+0x34>
    9416:	22fa      	movs	r2, #250	; 0xfa
    9418:	00d2      	lsls	r2, r2, #3
    941a:	4293      	cmp	r3, r2
    941c:	d007      	beq.n	942e <initGyro+0x42>
    941e:	e00d      	b.n	943c <initGyro+0x50>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
    9420:	1dfb      	adds	r3, r7, #7
    9422:	1dfa      	adds	r2, r7, #7
    9424:	7812      	ldrb	r2, [r2, #0]
    9426:	2108      	movs	r1, #8
    9428:	430a      	orrs	r2, r1
    942a:	701a      	strb	r2, [r3, #0]
			break;
    942c:	e006      	b.n	943c <initGyro+0x50>
		case 2000:
			tempRegValue |= (0x3 << 3);
    942e:	1dfb      	adds	r3, r7, #7
    9430:	1dfa      	adds	r2, r7, #7
    9432:	7812      	ldrb	r2, [r2, #0]
    9434:	2118      	movs	r1, #24
    9436:	430a      	orrs	r2, r1
    9438:	701a      	strb	r2, [r3, #0]
			break;
    943a:	46c0      	nop			; (mov r8, r8)
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
    943c:	4b49      	ldr	r3, [pc, #292]	; (9564 <initGyro+0x178>)
    943e:	7a5b      	ldrb	r3, [r3, #9]
    9440:	b25b      	sxtb	r3, r3
    9442:	2203      	movs	r2, #3
    9444:	4013      	ands	r3, r2
    9446:	b25a      	sxtb	r2, r3
    9448:	1dfb      	adds	r3, r7, #7
    944a:	781b      	ldrb	r3, [r3, #0]
    944c:	b25b      	sxtb	r3, r3
    944e:	4313      	orrs	r3, r2
    9450:	b25a      	sxtb	r2, r3
    9452:	1dfb      	adds	r3, r7, #7
    9454:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
    9456:	1dfb      	adds	r3, r7, #7
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	0019      	movs	r1, r3
    945c:	2010      	movs	r0, #16
    945e:	4b42      	ldr	r3, [pc, #264]	; (9568 <initGyro+0x17c>)
    9460:	4798      	blx	r3
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
    9462:	2100      	movs	r1, #0
    9464:	2011      	movs	r0, #17
    9466:	4b40      	ldr	r3, [pc, #256]	; (9568 <initGyro+0x17c>)
    9468:	4798      	blx	r3
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
    946a:	4b3e      	ldr	r3, [pc, #248]	; (9564 <initGyro+0x178>)
    946c:	7a9b      	ldrb	r3, [r3, #10]
    946e:	2b00      	cmp	r3, #0
    9470:	d001      	beq.n	9476 <initGyro+0x8a>
    9472:	2280      	movs	r2, #128	; 0x80
    9474:	e000      	b.n	9478 <initGyro+0x8c>
    9476:	2200      	movs	r2, #0
    9478:	1dfb      	adds	r3, r7, #7
    947a:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.HPFEnable)
    947c:	4b39      	ldr	r3, [pc, #228]	; (9564 <initGyro+0x178>)
    947e:	7adb      	ldrb	r3, [r3, #11]
    9480:	2b00      	cmp	r3, #0
    9482:	d00c      	beq.n	949e <initGyro+0xb2>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
    9484:	4b37      	ldr	r3, [pc, #220]	; (9564 <initGyro+0x178>)
    9486:	7b1b      	ldrb	r3, [r3, #12]
    9488:	220f      	movs	r2, #15
    948a:	4013      	ands	r3, r2
    948c:	b2da      	uxtb	r2, r3
    948e:	1dfb      	adds	r3, r7, #7
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	4313      	orrs	r3, r2
    9494:	b2da      	uxtb	r2, r3
    9496:	1dfb      	adds	r3, r7, #7
    9498:	2140      	movs	r1, #64	; 0x40
    949a:	430a      	orrs	r2, r1
    949c:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
    949e:	1dfb      	adds	r3, r7, #7
    94a0:	781b      	ldrb	r3, [r3, #0]
    94a2:	0019      	movs	r1, r3
    94a4:	2012      	movs	r0, #18
    94a6:	4b30      	ldr	r3, [pc, #192]	; (9568 <initGyro+0x17c>)
    94a8:	4798      	blx	r3
	// Zen_G - Z-axis output enable (0:disable, 1:enable)
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
    94aa:	1dfb      	adds	r3, r7, #7
    94ac:	2200      	movs	r2, #0
    94ae:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
    94b0:	4b2c      	ldr	r3, [pc, #176]	; (9564 <initGyro+0x178>)
    94b2:	7cdb      	ldrb	r3, [r3, #19]
    94b4:	2b00      	cmp	r3, #0
    94b6:	d005      	beq.n	94c4 <initGyro+0xd8>
    94b8:	1dfb      	adds	r3, r7, #7
    94ba:	1dfa      	adds	r2, r7, #7
    94bc:	7812      	ldrb	r2, [r2, #0]
    94be:	2120      	movs	r1, #32
    94c0:	430a      	orrs	r2, r1
    94c2:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
    94c4:	4b27      	ldr	r3, [pc, #156]	; (9564 <initGyro+0x178>)
    94c6:	7c9b      	ldrb	r3, [r3, #18]
    94c8:	2b00      	cmp	r3, #0
    94ca:	d005      	beq.n	94d8 <initGyro+0xec>
    94cc:	1dfb      	adds	r3, r7, #7
    94ce:	1dfa      	adds	r2, r7, #7
    94d0:	7812      	ldrb	r2, [r2, #0]
    94d2:	2110      	movs	r1, #16
    94d4:	430a      	orrs	r2, r1
    94d6:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
    94d8:	4b22      	ldr	r3, [pc, #136]	; (9564 <initGyro+0x178>)
    94da:	7c5b      	ldrb	r3, [r3, #17]
    94dc:	2b00      	cmp	r3, #0
    94de:	d005      	beq.n	94ec <initGyro+0x100>
    94e0:	1dfb      	adds	r3, r7, #7
    94e2:	1dfa      	adds	r2, r7, #7
    94e4:	7812      	ldrb	r2, [r2, #0]
    94e6:	2108      	movs	r1, #8
    94e8:	430a      	orrs	r2, r1
    94ea:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
    94ec:	4b1d      	ldr	r3, [pc, #116]	; (9564 <initGyro+0x178>)
    94ee:	7d1b      	ldrb	r3, [r3, #20]
    94f0:	2b00      	cmp	r3, #0
    94f2:	d005      	beq.n	9500 <initGyro+0x114>
    94f4:	1dfb      	adds	r3, r7, #7
    94f6:	1dfa      	adds	r2, r7, #7
    94f8:	7812      	ldrb	r2, [r2, #0]
    94fa:	2102      	movs	r1, #2
    94fc:	430a      	orrs	r2, r1
    94fe:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG4, tempRegValue);
    9500:	1dfb      	adds	r3, r7, #7
    9502:	781b      	ldrb	r3, [r3, #0]
    9504:	0019      	movs	r1, r3
    9506:	201e      	movs	r0, #30
    9508:	4b17      	ldr	r3, [pc, #92]	; (9568 <initGyro+0x17c>)
    950a:	4798      	blx	r3
	
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
    950c:	1dfb      	adds	r3, r7, #7
    950e:	2200      	movs	r2, #0
    9510:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
    9512:	4b14      	ldr	r3, [pc, #80]	; (9564 <initGyro+0x178>)
    9514:	7b5b      	ldrb	r3, [r3, #13]
    9516:	2b00      	cmp	r3, #0
    9518:	d005      	beq.n	9526 <initGyro+0x13a>
    951a:	1dfb      	adds	r3, r7, #7
    951c:	1dfa      	adds	r2, r7, #7
    951e:	7812      	ldrb	r2, [r2, #0]
    9520:	2120      	movs	r1, #32
    9522:	430a      	orrs	r2, r1
    9524:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
    9526:	4b0f      	ldr	r3, [pc, #60]	; (9564 <initGyro+0x178>)
    9528:	7b9b      	ldrb	r3, [r3, #14]
    952a:	2b00      	cmp	r3, #0
    952c:	d005      	beq.n	953a <initGyro+0x14e>
    952e:	1dfb      	adds	r3, r7, #7
    9530:	1dfa      	adds	r2, r7, #7
    9532:	7812      	ldrb	r2, [r2, #0]
    9534:	2110      	movs	r1, #16
    9536:	430a      	orrs	r2, r1
    9538:	701a      	strb	r2, [r3, #0]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
    953a:	4b0a      	ldr	r3, [pc, #40]	; (9564 <initGyro+0x178>)
    953c:	7bdb      	ldrb	r3, [r3, #15]
    953e:	2b00      	cmp	r3, #0
    9540:	d005      	beq.n	954e <initGyro+0x162>
    9542:	1dfb      	adds	r3, r7, #7
    9544:	1dfa      	adds	r2, r7, #7
    9546:	7812      	ldrb	r2, [r2, #0]
    9548:	2108      	movs	r1, #8
    954a:	430a      	orrs	r2, r1
    954c:	701a      	strb	r2, [r3, #0]
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
    954e:	1dfb      	adds	r3, r7, #7
    9550:	781b      	ldrb	r3, [r3, #0]
    9552:	0019      	movs	r1, r3
    9554:	2013      	movs	r0, #19
    9556:	4b04      	ldr	r3, [pc, #16]	; (9568 <initGyro+0x17c>)
    9558:	4798      	blx	r3
}
    955a:	46c0      	nop			; (mov r8, r8)
    955c:	46bd      	mov	sp, r7
    955e:	b002      	add	sp, #8
    9560:	bd80      	pop	{r7, pc}
    9562:	46c0      	nop			; (mov r8, r8)
    9564:	200004d4 	.word	0x200004d4
    9568:	00009ebd 	.word	0x00009ebd

0000956c <initAccel>:

void initAccel()
{
    956c:	b580      	push	{r7, lr}
    956e:	b082      	sub	sp, #8
    9570:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
    9572:	1dfb      	adds	r3, r7, #7
    9574:	2200      	movs	r2, #0
    9576:	701a      	strb	r2, [r3, #0]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
    9578:	4b4b      	ldr	r3, [pc, #300]	; (96a8 <initAccel+0x13c>)
    957a:	7edb      	ldrb	r3, [r3, #27]
    957c:	2b00      	cmp	r3, #0
    957e:	d005      	beq.n	958c <initAccel+0x20>
    9580:	1dfb      	adds	r3, r7, #7
    9582:	1dfa      	adds	r2, r7, #7
    9584:	7812      	ldrb	r2, [r2, #0]
    9586:	2120      	movs	r1, #32
    9588:	430a      	orrs	r2, r1
    958a:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableY) tempRegValue |= (1<<4);
    958c:	4b46      	ldr	r3, [pc, #280]	; (96a8 <initAccel+0x13c>)
    958e:	7e9b      	ldrb	r3, [r3, #26]
    9590:	2b00      	cmp	r3, #0
    9592:	d005      	beq.n	95a0 <initAccel+0x34>
    9594:	1dfb      	adds	r3, r7, #7
    9596:	1dfa      	adds	r2, r7, #7
    9598:	7812      	ldrb	r2, [r2, #0]
    959a:	2110      	movs	r1, #16
    959c:	430a      	orrs	r2, r1
    959e:	701a      	strb	r2, [r3, #0]
	if (settings.accel.enableX) tempRegValue |= (1<<3);
    95a0:	4b41      	ldr	r3, [pc, #260]	; (96a8 <initAccel+0x13c>)
    95a2:	7e5b      	ldrb	r3, [r3, #25]
    95a4:	2b00      	cmp	r3, #0
    95a6:	d005      	beq.n	95b4 <initAccel+0x48>
    95a8:	1dfb      	adds	r3, r7, #7
    95aa:	1dfa      	adds	r2, r7, #7
    95ac:	7812      	ldrb	r2, [r2, #0]
    95ae:	2108      	movs	r1, #8
    95b0:	430a      	orrs	r2, r1
    95b2:	701a      	strb	r2, [r3, #0]
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
    95b4:	1dfb      	adds	r3, r7, #7
    95b6:	781b      	ldrb	r3, [r3, #0]
    95b8:	0019      	movs	r1, r3
    95ba:	201f      	movs	r0, #31
    95bc:	4b3b      	ldr	r3, [pc, #236]	; (96ac <initAccel+0x140>)
    95be:	4798      	blx	r3
	// [ODR_XL2][ODR_XL1][ODR_XL0][FS1_XL][FS0_XL][BW_SCAL_ODR][BW_XL1][BW_XL0]
	// ODR_XL[2:0] - Output data rate & power mode selection
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
    95c0:	1dfb      	adds	r3, r7, #7
    95c2:	2200      	movs	r2, #0
    95c4:	701a      	strb	r2, [r3, #0]
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
    95c6:	4b38      	ldr	r3, [pc, #224]	; (96a8 <initAccel+0x13c>)
    95c8:	7d9b      	ldrb	r3, [r3, #22]
    95ca:	2b00      	cmp	r3, #0
    95cc:	d00a      	beq.n	95e4 <initAccel+0x78>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
    95ce:	4b36      	ldr	r3, [pc, #216]	; (96a8 <initAccel+0x13c>)
    95d0:	7e1b      	ldrb	r3, [r3, #24]
    95d2:	015b      	lsls	r3, r3, #5
    95d4:	b25a      	sxtb	r2, r3
    95d6:	1dfb      	adds	r3, r7, #7
    95d8:	781b      	ldrb	r3, [r3, #0]
    95da:	b25b      	sxtb	r3, r3
    95dc:	4313      	orrs	r3, r2
    95de:	b25a      	sxtb	r2, r3
    95e0:	1dfb      	adds	r3, r7, #7
    95e2:	701a      	strb	r2, [r3, #0]
	}
	switch (settings.accel.scale)
    95e4:	4b30      	ldr	r3, [pc, #192]	; (96a8 <initAccel+0x13c>)
    95e6:	7ddb      	ldrb	r3, [r3, #23]
    95e8:	2b08      	cmp	r3, #8
    95ea:	d00a      	beq.n	9602 <initAccel+0x96>
    95ec:	2b10      	cmp	r3, #16
    95ee:	d00f      	beq.n	9610 <initAccel+0xa4>
    95f0:	2b04      	cmp	r3, #4
    95f2:	d114      	bne.n	961e <initAccel+0xb2>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
    95f4:	1dfb      	adds	r3, r7, #7
    95f6:	1dfa      	adds	r2, r7, #7
    95f8:	7812      	ldrb	r2, [r2, #0]
    95fa:	2110      	movs	r1, #16
    95fc:	430a      	orrs	r2, r1
    95fe:	701a      	strb	r2, [r3, #0]
			break;
    9600:	e00d      	b.n	961e <initAccel+0xb2>
		case 8:
			tempRegValue |= (0x3 << 3);
    9602:	1dfb      	adds	r3, r7, #7
    9604:	1dfa      	adds	r2, r7, #7
    9606:	7812      	ldrb	r2, [r2, #0]
    9608:	2118      	movs	r1, #24
    960a:	430a      	orrs	r2, r1
    960c:	701a      	strb	r2, [r3, #0]
			break;
    960e:	e006      	b.n	961e <initAccel+0xb2>
		case 16:
			tempRegValue |= (0x1 << 3);
    9610:	1dfb      	adds	r3, r7, #7
    9612:	1dfa      	adds	r2, r7, #7
    9614:	7812      	ldrb	r2, [r2, #0]
    9616:	2108      	movs	r1, #8
    9618:	430a      	orrs	r2, r1
    961a:	701a      	strb	r2, [r3, #0]
			break;
    961c:	46c0      	nop			; (mov r8, r8)
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
    961e:	4b22      	ldr	r3, [pc, #136]	; (96a8 <initAccel+0x13c>)
    9620:	7f1b      	ldrb	r3, [r3, #28]
    9622:	b25b      	sxtb	r3, r3
    9624:	2b00      	cmp	r3, #0
    9626:	db12      	blt.n	964e <initAccel+0xe2>
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
    9628:	1dfb      	adds	r3, r7, #7
    962a:	1dfa      	adds	r2, r7, #7
    962c:	7812      	ldrb	r2, [r2, #0]
    962e:	2104      	movs	r1, #4
    9630:	430a      	orrs	r2, r1
    9632:	701a      	strb	r2, [r3, #0]
		tempRegValue |= (settings.accel.bandwidth & 0x03);
    9634:	4b1c      	ldr	r3, [pc, #112]	; (96a8 <initAccel+0x13c>)
    9636:	7f1b      	ldrb	r3, [r3, #28]
    9638:	b25b      	sxtb	r3, r3
    963a:	2203      	movs	r2, #3
    963c:	4013      	ands	r3, r2
    963e:	b25a      	sxtb	r2, r3
    9640:	1dfb      	adds	r3, r7, #7
    9642:	781b      	ldrb	r3, [r3, #0]
    9644:	b25b      	sxtb	r3, r3
    9646:	4313      	orrs	r3, r2
    9648:	b25a      	sxtb	r2, r3
    964a:	1dfb      	adds	r3, r7, #7
    964c:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
    964e:	1dfb      	adds	r3, r7, #7
    9650:	781b      	ldrb	r3, [r3, #0]
    9652:	0019      	movs	r1, r3
    9654:	2020      	movs	r0, #32
    9656:	4b15      	ldr	r3, [pc, #84]	; (96ac <initAccel+0x140>)
    9658:	4798      	blx	r3
	// [HR][DCF1][DCF0][0][0][FDS][0][HPIS1]
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
    965a:	1dfb      	adds	r3, r7, #7
    965c:	2200      	movs	r2, #0
    965e:	701a      	strb	r2, [r3, #0]
	if (settings.accel.highResEnable)
    9660:	4b11      	ldr	r3, [pc, #68]	; (96a8 <initAccel+0x13c>)
    9662:	7f5b      	ldrb	r3, [r3, #29]
    9664:	2b00      	cmp	r3, #0
    9666:	d014      	beq.n	9692 <initAccel+0x126>
	{
		tempRegValue |= (1<<7); // Set HR bit
    9668:	1dfb      	adds	r3, r7, #7
    966a:	1dfa      	adds	r2, r7, #7
    966c:	7812      	ldrb	r2, [r2, #0]
    966e:	2180      	movs	r1, #128	; 0x80
    9670:	4249      	negs	r1, r1
    9672:	430a      	orrs	r2, r1
    9674:	701a      	strb	r2, [r3, #0]
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
    9676:	4b0c      	ldr	r3, [pc, #48]	; (96a8 <initAccel+0x13c>)
    9678:	7f9b      	ldrb	r3, [r3, #30]
    967a:	015b      	lsls	r3, r3, #5
    967c:	b25b      	sxtb	r3, r3
    967e:	2260      	movs	r2, #96	; 0x60
    9680:	4013      	ands	r3, r2
    9682:	b25a      	sxtb	r2, r3
    9684:	1dfb      	adds	r3, r7, #7
    9686:	781b      	ldrb	r3, [r3, #0]
    9688:	b25b      	sxtb	r3, r3
    968a:	4313      	orrs	r3, r2
    968c:	b25a      	sxtb	r2, r3
    968e:	1dfb      	adds	r3, r7, #7
    9690:	701a      	strb	r2, [r3, #0]
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
    9692:	1dfb      	adds	r3, r7, #7
    9694:	781b      	ldrb	r3, [r3, #0]
    9696:	0019      	movs	r1, r3
    9698:	2021      	movs	r0, #33	; 0x21
    969a:	4b04      	ldr	r3, [pc, #16]	; (96ac <initAccel+0x140>)
    969c:	4798      	blx	r3
}
    969e:	46c0      	nop			; (mov r8, r8)
    96a0:	46bd      	mov	sp, r7
    96a2:	b002      	add	sp, #8
    96a4:	bd80      	pop	{r7, pc}
    96a6:	46c0      	nop			; (mov r8, r8)
    96a8:	200004d4 	.word	0x200004d4
    96ac:	00009ebd 	.word	0x00009ebd

000096b0 <calibrate>:
// the data as there are in the ADXL345, a precursor to the LSM9DS0, or the MPU-9150, so we have to
// subtract the biases ourselves. This results in a more accurate measurement in general and can
// remove errors due to imprecise or varying initial placement. Calibration of sensor data in this manner
// is good practice.
void calibrate(bool autoCalc)
{  
    96b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    96b2:	b08b      	sub	sp, #44	; 0x2c
    96b4:	af00      	add	r7, sp, #0
    96b6:	0002      	movs	r2, r0
    96b8:	1dfb      	adds	r3, r7, #7
    96ba:	701a      	strb	r2, [r3, #0]
	//uint8_t data[6] = {0, 0, 0, 0, 0, 0};
	uint8_t samples = 0;
    96bc:	2327      	movs	r3, #39	; 0x27
    96be:	18fb      	adds	r3, r7, r3
    96c0:	2200      	movs	r2, #0
    96c2:	701a      	strb	r2, [r3, #0]
	int ii;
	int32_t aBiasRawTemp[3] = {0, 0, 0};
    96c4:	2314      	movs	r3, #20
    96c6:	18fb      	adds	r3, r7, r3
    96c8:	2200      	movs	r2, #0
    96ca:	601a      	str	r2, [r3, #0]
    96cc:	2314      	movs	r3, #20
    96ce:	18fb      	adds	r3, r7, r3
    96d0:	2200      	movs	r2, #0
    96d2:	605a      	str	r2, [r3, #4]
    96d4:	2314      	movs	r3, #20
    96d6:	18fb      	adds	r3, r7, r3
    96d8:	2200      	movs	r2, #0
    96da:	609a      	str	r2, [r3, #8]
	int32_t gBiasRawTemp[3] = {0, 0, 0};
    96dc:	2308      	movs	r3, #8
    96de:	18fb      	adds	r3, r7, r3
    96e0:	2200      	movs	r2, #0
    96e2:	601a      	str	r2, [r3, #0]
    96e4:	2308      	movs	r3, #8
    96e6:	18fb      	adds	r3, r7, r3
    96e8:	2200      	movs	r2, #0
    96ea:	605a      	str	r2, [r3, #4]
    96ec:	2308      	movs	r3, #8
    96ee:	18fb      	adds	r3, r7, r3
    96f0:	2200      	movs	r2, #0
    96f2:	609a      	str	r2, [r3, #8]
	
	// Turn on FIFO and set threshold to 32 samples
	enableFIFO(true);
    96f4:	2001      	movs	r0, #1
    96f6:	4b67      	ldr	r3, [pc, #412]	; (9894 <calibrate+0x1e4>)
    96f8:	4798      	blx	r3
	setFIFO(FIFO_THS, 0x1F);
    96fa:	211f      	movs	r1, #31
    96fc:	2001      	movs	r0, #1
    96fe:	4b66      	ldr	r3, [pc, #408]	; (9898 <calibrate+0x1e8>)
    9700:	4798      	blx	r3
	while (samples < 0x1F)
    9702:	e009      	b.n	9718 <calibrate+0x68>
	{
		samples = (xgReadByte(FIFO_SRC) & 0x3F); // Read number of stored samples
    9704:	202f      	movs	r0, #47	; 0x2f
    9706:	4b65      	ldr	r3, [pc, #404]	; (989c <calibrate+0x1ec>)
    9708:	4798      	blx	r3
    970a:	0003      	movs	r3, r0
    970c:	0019      	movs	r1, r3
    970e:	2327      	movs	r3, #39	; 0x27
    9710:	18fb      	adds	r3, r7, r3
    9712:	223f      	movs	r2, #63	; 0x3f
    9714:	400a      	ands	r2, r1
    9716:	701a      	strb	r2, [r3, #0]
	while (samples < 0x1F)
    9718:	2327      	movs	r3, #39	; 0x27
    971a:	18fb      	adds	r3, r7, r3
    971c:	781b      	ldrb	r3, [r3, #0]
    971e:	2b1e      	cmp	r3, #30
    9720:	d9f0      	bls.n	9704 <calibrate+0x54>
	}
	for(ii = 0; ii < samples ; ii++) 
    9722:	2300      	movs	r3, #0
    9724:	623b      	str	r3, [r7, #32]
    9726:	e059      	b.n	97dc <calibrate+0x12c>
	{	// Read the gyro data stored in the FIFO
		readGyro();
    9728:	4b5d      	ldr	r3, [pc, #372]	; (98a0 <calibrate+0x1f0>)
    972a:	4798      	blx	r3
		gBiasRawTemp[0] += gx;
    972c:	2308      	movs	r3, #8
    972e:	18fb      	adds	r3, r7, r3
    9730:	681b      	ldr	r3, [r3, #0]
    9732:	4a5c      	ldr	r2, [pc, #368]	; (98a4 <calibrate+0x1f4>)
    9734:	2100      	movs	r1, #0
    9736:	5e52      	ldrsh	r2, [r2, r1]
    9738:	189a      	adds	r2, r3, r2
    973a:	2308      	movs	r3, #8
    973c:	18fb      	adds	r3, r7, r3
    973e:	601a      	str	r2, [r3, #0]
		gBiasRawTemp[1] += gy;
    9740:	2308      	movs	r3, #8
    9742:	18fb      	adds	r3, r7, r3
    9744:	685b      	ldr	r3, [r3, #4]
    9746:	4a58      	ldr	r2, [pc, #352]	; (98a8 <calibrate+0x1f8>)
    9748:	2100      	movs	r1, #0
    974a:	5e52      	ldrsh	r2, [r2, r1]
    974c:	189a      	adds	r2, r3, r2
    974e:	2308      	movs	r3, #8
    9750:	18fb      	adds	r3, r7, r3
    9752:	605a      	str	r2, [r3, #4]
		gBiasRawTemp[2] += gz;
    9754:	2308      	movs	r3, #8
    9756:	18fb      	adds	r3, r7, r3
    9758:	689b      	ldr	r3, [r3, #8]
    975a:	4a54      	ldr	r2, [pc, #336]	; (98ac <calibrate+0x1fc>)
    975c:	2100      	movs	r1, #0
    975e:	5e52      	ldrsh	r2, [r2, r1]
    9760:	189a      	adds	r2, r3, r2
    9762:	2308      	movs	r3, #8
    9764:	18fb      	adds	r3, r7, r3
    9766:	609a      	str	r2, [r3, #8]
		readAccel();
    9768:	4b51      	ldr	r3, [pc, #324]	; (98b0 <calibrate+0x200>)
    976a:	4798      	blx	r3
		aBiasRawTemp[0] += ax;
    976c:	2314      	movs	r3, #20
    976e:	18fb      	adds	r3, r7, r3
    9770:	681b      	ldr	r3, [r3, #0]
    9772:	4a50      	ldr	r2, [pc, #320]	; (98b4 <calibrate+0x204>)
    9774:	2100      	movs	r1, #0
    9776:	5e52      	ldrsh	r2, [r2, r1]
    9778:	189a      	adds	r2, r3, r2
    977a:	2314      	movs	r3, #20
    977c:	18fb      	adds	r3, r7, r3
    977e:	601a      	str	r2, [r3, #0]
		aBiasRawTemp[1] += ay;
    9780:	2314      	movs	r3, #20
    9782:	18fb      	adds	r3, r7, r3
    9784:	685b      	ldr	r3, [r3, #4]
    9786:	4a4c      	ldr	r2, [pc, #304]	; (98b8 <calibrate+0x208>)
    9788:	2100      	movs	r1, #0
    978a:	5e52      	ldrsh	r2, [r2, r1]
    978c:	189a      	adds	r2, r3, r2
    978e:	2314      	movs	r3, #20
    9790:	18fb      	adds	r3, r7, r3
    9792:	605a      	str	r2, [r3, #4]
		aBiasRawTemp[2] += az - (int16_t)(1./aRes); // Assumes sensor facing up!
    9794:	2314      	movs	r3, #20
    9796:	18fb      	adds	r3, r7, r3
    9798:	689c      	ldr	r4, [r3, #8]
    979a:	4b48      	ldr	r3, [pc, #288]	; (98bc <calibrate+0x20c>)
    979c:	2200      	movs	r2, #0
    979e:	5e9b      	ldrsh	r3, [r3, r2]
    97a0:	001e      	movs	r6, r3
    97a2:	4b47      	ldr	r3, [pc, #284]	; (98c0 <calibrate+0x210>)
    97a4:	681a      	ldr	r2, [r3, #0]
    97a6:	4b47      	ldr	r3, [pc, #284]	; (98c4 <calibrate+0x214>)
    97a8:	1c10      	adds	r0, r2, #0
    97aa:	4798      	blx	r3
    97ac:	0002      	movs	r2, r0
    97ae:	000b      	movs	r3, r1
    97b0:	4d45      	ldr	r5, [pc, #276]	; (98c8 <calibrate+0x218>)
    97b2:	2000      	movs	r0, #0
    97b4:	4945      	ldr	r1, [pc, #276]	; (98cc <calibrate+0x21c>)
    97b6:	47a8      	blx	r5
    97b8:	0002      	movs	r2, r0
    97ba:	000b      	movs	r3, r1
    97bc:	0011      	movs	r1, r2
    97be:	001a      	movs	r2, r3
    97c0:	4b43      	ldr	r3, [pc, #268]	; (98d0 <calibrate+0x220>)
    97c2:	0008      	movs	r0, r1
    97c4:	0011      	movs	r1, r2
    97c6:	4798      	blx	r3
    97c8:	0003      	movs	r3, r0
    97ca:	b21b      	sxth	r3, r3
    97cc:	1af3      	subs	r3, r6, r3
    97ce:	18e2      	adds	r2, r4, r3
    97d0:	2314      	movs	r3, #20
    97d2:	18fb      	adds	r3, r7, r3
    97d4:	609a      	str	r2, [r3, #8]
	for(ii = 0; ii < samples ; ii++) 
    97d6:	6a3b      	ldr	r3, [r7, #32]
    97d8:	3301      	adds	r3, #1
    97da:	623b      	str	r3, [r7, #32]
    97dc:	2327      	movs	r3, #39	; 0x27
    97de:	18fb      	adds	r3, r7, r3
    97e0:	781a      	ldrb	r2, [r3, #0]
    97e2:	6a3b      	ldr	r3, [r7, #32]
    97e4:	429a      	cmp	r2, r3
    97e6:	dc9f      	bgt.n	9728 <calibrate+0x78>
	}  
	for (ii = 0; ii < 3; ii++)
    97e8:	2300      	movs	r3, #0
    97ea:	623b      	str	r3, [r7, #32]
    97ec:	e03c      	b.n	9868 <calibrate+0x1b8>
	{
		gBiasRaw[ii] = gBiasRawTemp[ii] / samples;
    97ee:	2308      	movs	r3, #8
    97f0:	18fb      	adds	r3, r7, r3
    97f2:	6a3a      	ldr	r2, [r7, #32]
    97f4:	0092      	lsls	r2, r2, #2
    97f6:	58d2      	ldr	r2, [r2, r3]
    97f8:	2327      	movs	r3, #39	; 0x27
    97fa:	18fb      	adds	r3, r7, r3
    97fc:	7819      	ldrb	r1, [r3, #0]
    97fe:	4b35      	ldr	r3, [pc, #212]	; (98d4 <calibrate+0x224>)
    9800:	0010      	movs	r0, r2
    9802:	4798      	blx	r3
    9804:	0003      	movs	r3, r0
    9806:	b219      	sxth	r1, r3
    9808:	4b33      	ldr	r3, [pc, #204]	; (98d8 <calibrate+0x228>)
    980a:	6a3a      	ldr	r2, [r7, #32]
    980c:	0052      	lsls	r2, r2, #1
    980e:	52d1      	strh	r1, [r2, r3]
		gBias[ii] = calcGyro(gBiasRaw[ii]);
    9810:	4b31      	ldr	r3, [pc, #196]	; (98d8 <calibrate+0x228>)
    9812:	6a3a      	ldr	r2, [r7, #32]
    9814:	0052      	lsls	r2, r2, #1
    9816:	5ed3      	ldrsh	r3, [r2, r3]
    9818:	0018      	movs	r0, r3
    981a:	4b30      	ldr	r3, [pc, #192]	; (98dc <calibrate+0x22c>)
    981c:	4798      	blx	r3
    981e:	1c01      	adds	r1, r0, #0
    9820:	4b2f      	ldr	r3, [pc, #188]	; (98e0 <calibrate+0x230>)
    9822:	6a3a      	ldr	r2, [r7, #32]
    9824:	0092      	lsls	r2, r2, #2
    9826:	50d1      	str	r1, [r2, r3]
		aBiasRaw[ii] = aBiasRawTemp[ii] / samples;
    9828:	2314      	movs	r3, #20
    982a:	18fb      	adds	r3, r7, r3
    982c:	6a3a      	ldr	r2, [r7, #32]
    982e:	0092      	lsls	r2, r2, #2
    9830:	58d2      	ldr	r2, [r2, r3]
    9832:	2327      	movs	r3, #39	; 0x27
    9834:	18fb      	adds	r3, r7, r3
    9836:	7819      	ldrb	r1, [r3, #0]
    9838:	4b26      	ldr	r3, [pc, #152]	; (98d4 <calibrate+0x224>)
    983a:	0010      	movs	r0, r2
    983c:	4798      	blx	r3
    983e:	0003      	movs	r3, r0
    9840:	b219      	sxth	r1, r3
    9842:	4b28      	ldr	r3, [pc, #160]	; (98e4 <calibrate+0x234>)
    9844:	6a3a      	ldr	r2, [r7, #32]
    9846:	0052      	lsls	r2, r2, #1
    9848:	52d1      	strh	r1, [r2, r3]
		aBias[ii] = calcAccel(aBiasRaw[ii]);
    984a:	4b26      	ldr	r3, [pc, #152]	; (98e4 <calibrate+0x234>)
    984c:	6a3a      	ldr	r2, [r7, #32]
    984e:	0052      	lsls	r2, r2, #1
    9850:	5ed3      	ldrsh	r3, [r2, r3]
    9852:	0018      	movs	r0, r3
    9854:	4b24      	ldr	r3, [pc, #144]	; (98e8 <calibrate+0x238>)
    9856:	4798      	blx	r3
    9858:	1c01      	adds	r1, r0, #0
    985a:	4b24      	ldr	r3, [pc, #144]	; (98ec <calibrate+0x23c>)
    985c:	6a3a      	ldr	r2, [r7, #32]
    985e:	0092      	lsls	r2, r2, #2
    9860:	50d1      	str	r1, [r2, r3]
	for (ii = 0; ii < 3; ii++)
    9862:	6a3b      	ldr	r3, [r7, #32]
    9864:	3301      	adds	r3, #1
    9866:	623b      	str	r3, [r7, #32]
    9868:	6a3b      	ldr	r3, [r7, #32]
    986a:	2b02      	cmp	r3, #2
    986c:	ddbf      	ble.n	97ee <calibrate+0x13e>
	}
	
	enableFIFO(false);
    986e:	2000      	movs	r0, #0
    9870:	4b08      	ldr	r3, [pc, #32]	; (9894 <calibrate+0x1e4>)
    9872:	4798      	blx	r3
	setFIFO(FIFO_OFF, 0x00);
    9874:	2100      	movs	r1, #0
    9876:	2000      	movs	r0, #0
    9878:	4b07      	ldr	r3, [pc, #28]	; (9898 <calibrate+0x1e8>)
    987a:	4798      	blx	r3
	
	if (autoCalc) _autoCalc = true;
    987c:	1dfb      	adds	r3, r7, #7
    987e:	781b      	ldrb	r3, [r3, #0]
    9880:	2b00      	cmp	r3, #0
    9882:	d002      	beq.n	988a <calibrate+0x1da>
    9884:	4b1a      	ldr	r3, [pc, #104]	; (98f0 <calibrate+0x240>)
    9886:	2201      	movs	r2, #1
    9888:	701a      	strb	r2, [r3, #0]
}
    988a:	46c0      	nop			; (mov r8, r8)
    988c:	46bd      	mov	sp, r7
    988e:	b00b      	add	sp, #44	; 0x2c
    9890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9892:	46c0      	nop			; (mov r8, r8)
    9894:	00009d79 	.word	0x00009d79
    9898:	00009ddd 	.word	0x00009ddd
    989c:	00009f25 	.word	0x00009f25
    98a0:	00009b71 	.word	0x00009b71
    98a4:	200002e4 	.word	0x200002e4
    98a8:	200002e6 	.word	0x200002e6
    98ac:	200002e8 	.word	0x200002e8
    98b0:	00009a39 	.word	0x00009a39
    98b4:	200002ea 	.word	0x200002ea
    98b8:	200002ec 	.word	0x200002ec
    98bc:	200002ee 	.word	0x200002ee
    98c0:	200009a4 	.word	0x200009a4
    98c4:	00016a85 	.word	0x00016a85
    98c8:	00015595 	.word	0x00015595
    98cc:	3ff00000 	.word	0x3ff00000
    98d0:	00016929 	.word	0x00016929
    98d4:	00013e05 	.word	0x00013e05
    98d8:	20000a80 	.word	0x20000a80
    98dc:	00009c3d 	.word	0x00009c3d
    98e0:	20000d7c 	.word	0x20000d7c
    98e4:	20000a88 	.word	0x20000a88
    98e8:	00009c75 	.word	0x00009c75
    98ec:	20000480 	.word	0x20000480
    98f0:	200008f0 	.word	0x200008f0

000098f4 <initMag>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void initMag()
{
    98f4:	b580      	push	{r7, lr}
    98f6:	b082      	sub	sp, #8
    98f8:	af00      	add	r7, sp, #0
	uint8_t tempRegValue = 0;
    98fa:	1dfb      	adds	r3, r7, #7
    98fc:	2200      	movs	r2, #0
    98fe:	701a      	strb	r2, [r3, #0]
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
    9900:	4b4b      	ldr	r3, [pc, #300]	; (9a30 <initMag+0x13c>)
    9902:	2222      	movs	r2, #34	; 0x22
    9904:	5c9b      	ldrb	r3, [r3, r2]
    9906:	2b00      	cmp	r3, #0
    9908:	d006      	beq.n	9918 <initMag+0x24>
    990a:	1dfb      	adds	r3, r7, #7
    990c:	1dfa      	adds	r2, r7, #7
    990e:	7812      	ldrb	r2, [r2, #0]
    9910:	2180      	movs	r1, #128	; 0x80
    9912:	4249      	negs	r1, r1
    9914:	430a      	orrs	r2, r1
    9916:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
    9918:	4b45      	ldr	r3, [pc, #276]	; (9a30 <initMag+0x13c>)
    991a:	2223      	movs	r2, #35	; 0x23
    991c:	5c9b      	ldrb	r3, [r3, r2]
    991e:	015b      	lsls	r3, r3, #5
    9920:	b25b      	sxtb	r3, r3
    9922:	2260      	movs	r2, #96	; 0x60
    9924:	4013      	ands	r3, r2
    9926:	b25a      	sxtb	r2, r3
    9928:	1dfb      	adds	r3, r7, #7
    992a:	781b      	ldrb	r3, [r3, #0]
    992c:	b25b      	sxtb	r3, r3
    992e:	4313      	orrs	r3, r2
    9930:	b25a      	sxtb	r2, r3
    9932:	1dfb      	adds	r3, r7, #7
    9934:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
    9936:	4b3e      	ldr	r3, [pc, #248]	; (9a30 <initMag+0x13c>)
    9938:	2221      	movs	r2, #33	; 0x21
    993a:	5c9b      	ldrb	r3, [r3, r2]
    993c:	009b      	lsls	r3, r3, #2
    993e:	b25b      	sxtb	r3, r3
    9940:	221c      	movs	r2, #28
    9942:	4013      	ands	r3, r2
    9944:	b25a      	sxtb	r2, r3
    9946:	1dfb      	adds	r3, r7, #7
    9948:	781b      	ldrb	r3, [r3, #0]
    994a:	b25b      	sxtb	r3, r3
    994c:	4313      	orrs	r3, r2
    994e:	b25a      	sxtb	r2, r3
    9950:	1dfb      	adds	r3, r7, #7
    9952:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG1_M, tempRegValue);
    9954:	1dfb      	adds	r3, r7, #7
    9956:	781b      	ldrb	r3, [r3, #0]
    9958:	0019      	movs	r1, r3
    995a:	2020      	movs	r0, #32
    995c:	4b35      	ldr	r3, [pc, #212]	; (9a34 <initMag+0x140>)
    995e:	4798      	blx	r3
	// CTRL_REG2_M (Default value 0x00)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
    9960:	1dfb      	adds	r3, r7, #7
    9962:	2200      	movs	r2, #0
    9964:	701a      	strb	r2, [r3, #0]
	switch (settings.mag.scale)
    9966:	4b32      	ldr	r3, [pc, #200]	; (9a30 <initMag+0x13c>)
    9968:	2220      	movs	r2, #32
    996a:	5c9b      	ldrb	r3, [r3, r2]
    996c:	2b0c      	cmp	r3, #12
    996e:	d00a      	beq.n	9986 <initMag+0x92>
    9970:	2b10      	cmp	r3, #16
    9972:	d00f      	beq.n	9994 <initMag+0xa0>
    9974:	2b08      	cmp	r3, #8
    9976:	d114      	bne.n	99a2 <initMag+0xae>
	{
	case 8:
		tempRegValue |= (0x1 << 5);
    9978:	1dfb      	adds	r3, r7, #7
    997a:	1dfa      	adds	r2, r7, #7
    997c:	7812      	ldrb	r2, [r2, #0]
    997e:	2120      	movs	r1, #32
    9980:	430a      	orrs	r2, r1
    9982:	701a      	strb	r2, [r3, #0]
		break;
    9984:	e00d      	b.n	99a2 <initMag+0xae>
	case 12:
		tempRegValue |= (0x2 << 5);
    9986:	1dfb      	adds	r3, r7, #7
    9988:	1dfa      	adds	r2, r7, #7
    998a:	7812      	ldrb	r2, [r2, #0]
    998c:	2140      	movs	r1, #64	; 0x40
    998e:	430a      	orrs	r2, r1
    9990:	701a      	strb	r2, [r3, #0]
		break;
    9992:	e006      	b.n	99a2 <initMag+0xae>
	case 16:
		tempRegValue |= (0x3 << 5);
    9994:	1dfb      	adds	r3, r7, #7
    9996:	1dfa      	adds	r2, r7, #7
    9998:	7812      	ldrb	r2, [r2, #0]
    999a:	2160      	movs	r1, #96	; 0x60
    999c:	430a      	orrs	r2, r1
    999e:	701a      	strb	r2, [r3, #0]
		break;
    99a0:	46c0      	nop			; (mov r8, r8)
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
    99a2:	1dfb      	adds	r3, r7, #7
    99a4:	781b      	ldrb	r3, [r3, #0]
    99a6:	0019      	movs	r1, r3
    99a8:	2021      	movs	r0, #33	; 0x21
    99aa:	4b22      	ldr	r3, [pc, #136]	; (9a34 <initMag+0x140>)
    99ac:	4798      	blx	r3
	// LP - Low-power mode cofiguration (1:enable)
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
    99ae:	1dfb      	adds	r3, r7, #7
    99b0:	2200      	movs	r2, #0
    99b2:	701a      	strb	r2, [r3, #0]
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
    99b4:	4b1e      	ldr	r3, [pc, #120]	; (9a30 <initMag+0x13c>)
    99b6:	2225      	movs	r2, #37	; 0x25
    99b8:	5c9b      	ldrb	r3, [r3, r2]
    99ba:	2b00      	cmp	r3, #0
    99bc:	d005      	beq.n	99ca <initMag+0xd6>
    99be:	1dfb      	adds	r3, r7, #7
    99c0:	1dfa      	adds	r2, r7, #7
    99c2:	7812      	ldrb	r2, [r2, #0]
    99c4:	2120      	movs	r1, #32
    99c6:	430a      	orrs	r2, r1
    99c8:	701a      	strb	r2, [r3, #0]
	tempRegValue |= (settings.mag.operatingMode & 0x3);
    99ca:	4b19      	ldr	r3, [pc, #100]	; (9a30 <initMag+0x13c>)
    99cc:	2226      	movs	r2, #38	; 0x26
    99ce:	5c9b      	ldrb	r3, [r3, r2]
    99d0:	b25b      	sxtb	r3, r3
    99d2:	2203      	movs	r2, #3
    99d4:	4013      	ands	r3, r2
    99d6:	b25a      	sxtb	r2, r3
    99d8:	1dfb      	adds	r3, r7, #7
    99da:	781b      	ldrb	r3, [r3, #0]
    99dc:	b25b      	sxtb	r3, r3
    99de:	4313      	orrs	r3, r2
    99e0:	b25a      	sxtb	r2, r3
    99e2:	1dfb      	adds	r3, r7, #7
    99e4:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
    99e6:	1dfb      	adds	r3, r7, #7
    99e8:	781b      	ldrb	r3, [r3, #0]
    99ea:	0019      	movs	r1, r3
    99ec:	2022      	movs	r0, #34	; 0x22
    99ee:	4b11      	ldr	r3, [pc, #68]	; (9a34 <initMag+0x140>)
    99f0:	4798      	blx	r3
	// [0][0][0][0][OMZ1][OMZ0][BLE][0]
	// OMZ[1:0] - Z-axis operative mode selection
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
    99f2:	1dfb      	adds	r3, r7, #7
    99f4:	2200      	movs	r2, #0
    99f6:	701a      	strb	r2, [r3, #0]
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
    99f8:	4b0d      	ldr	r3, [pc, #52]	; (9a30 <initMag+0x13c>)
    99fa:	2224      	movs	r2, #36	; 0x24
    99fc:	5c9b      	ldrb	r3, [r3, r2]
    99fe:	009b      	lsls	r3, r3, #2
    9a00:	b2da      	uxtb	r2, r3
    9a02:	1dfb      	adds	r3, r7, #7
    9a04:	210c      	movs	r1, #12
    9a06:	400a      	ands	r2, r1
    9a08:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG4_M, tempRegValue);
    9a0a:	1dfb      	adds	r3, r7, #7
    9a0c:	781b      	ldrb	r3, [r3, #0]
    9a0e:	0019      	movs	r1, r3
    9a10:	2023      	movs	r0, #35	; 0x23
    9a12:	4b08      	ldr	r3, [pc, #32]	; (9a34 <initMag+0x140>)
    9a14:	4798      	blx	r3
	
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
    9a16:	1dfb      	adds	r3, r7, #7
    9a18:	2200      	movs	r2, #0
    9a1a:	701a      	strb	r2, [r3, #0]
	mWriteByte(CTRL_REG5_M, tempRegValue);
    9a1c:	1dfb      	adds	r3, r7, #7
    9a1e:	781b      	ldrb	r3, [r3, #0]
    9a20:	0019      	movs	r1, r3
    9a22:	2024      	movs	r0, #36	; 0x24
    9a24:	4b03      	ldr	r3, [pc, #12]	; (9a34 <initMag+0x140>)
    9a26:	4798      	blx	r3
}
    9a28:	46c0      	nop			; (mov r8, r8)
    9a2a:	46bd      	mov	sp, r7
    9a2c:	b002      	add	sp, #8
    9a2e:	bd80      	pop	{r7, pc}
    9a30:	200004d4 	.word	0x200004d4
    9a34:	00009ef1 	.word	0x00009ef1

00009a38 <readAccel>:
	
	return ((status & (1<<axis)) >> axis);
}

void readAccel()
{
    9a38:	b580      	push	{r7, lr}
    9a3a:	b082      	sub	sp, #8
    9a3c:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
    9a3e:	003b      	movs	r3, r7
    9a40:	2206      	movs	r2, #6
    9a42:	0019      	movs	r1, r3
    9a44:	2028      	movs	r0, #40	; 0x28
    9a46:	4b29      	ldr	r3, [pc, #164]	; (9aec <readAccel+0xb4>)
    9a48:	4798      	blx	r3
	ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
    9a4a:	003b      	movs	r3, r7
    9a4c:	785b      	ldrb	r3, [r3, #1]
    9a4e:	021b      	lsls	r3, r3, #8
    9a50:	b21a      	sxth	r2, r3
    9a52:	003b      	movs	r3, r7
    9a54:	781b      	ldrb	r3, [r3, #0]
    9a56:	b21b      	sxth	r3, r3
    9a58:	4313      	orrs	r3, r2
    9a5a:	b21a      	sxth	r2, r3
    9a5c:	4b24      	ldr	r3, [pc, #144]	; (9af0 <readAccel+0xb8>)
    9a5e:	801a      	strh	r2, [r3, #0]
	ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
    9a60:	003b      	movs	r3, r7
    9a62:	78db      	ldrb	r3, [r3, #3]
    9a64:	021b      	lsls	r3, r3, #8
    9a66:	b21a      	sxth	r2, r3
    9a68:	003b      	movs	r3, r7
    9a6a:	789b      	ldrb	r3, [r3, #2]
    9a6c:	b21b      	sxth	r3, r3
    9a6e:	4313      	orrs	r3, r2
    9a70:	b21a      	sxth	r2, r3
    9a72:	4b20      	ldr	r3, [pc, #128]	; (9af4 <readAccel+0xbc>)
    9a74:	801a      	strh	r2, [r3, #0]
	az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
    9a76:	003b      	movs	r3, r7
    9a78:	795b      	ldrb	r3, [r3, #5]
    9a7a:	021b      	lsls	r3, r3, #8
    9a7c:	b21a      	sxth	r2, r3
    9a7e:	003b      	movs	r3, r7
    9a80:	791b      	ldrb	r3, [r3, #4]
    9a82:	b21b      	sxth	r3, r3
    9a84:	4313      	orrs	r3, r2
    9a86:	b21a      	sxth	r2, r3
    9a88:	4b1b      	ldr	r3, [pc, #108]	; (9af8 <readAccel+0xc0>)
    9a8a:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    9a8c:	4b1b      	ldr	r3, [pc, #108]	; (9afc <readAccel+0xc4>)
    9a8e:	781b      	ldrb	r3, [r3, #0]
    9a90:	2b00      	cmp	r3, #0
    9a92:	d026      	beq.n	9ae2 <readAccel+0xaa>
	{
		ax -= aBiasRaw[X_AXIS];
    9a94:	4b16      	ldr	r3, [pc, #88]	; (9af0 <readAccel+0xb8>)
    9a96:	2200      	movs	r2, #0
    9a98:	5e9b      	ldrsh	r3, [r3, r2]
    9a9a:	b29a      	uxth	r2, r3
    9a9c:	4b18      	ldr	r3, [pc, #96]	; (9b00 <readAccel+0xc8>)
    9a9e:	2100      	movs	r1, #0
    9aa0:	5e5b      	ldrsh	r3, [r3, r1]
    9aa2:	b29b      	uxth	r3, r3
    9aa4:	1ad3      	subs	r3, r2, r3
    9aa6:	b29b      	uxth	r3, r3
    9aa8:	b21a      	sxth	r2, r3
    9aaa:	4b11      	ldr	r3, [pc, #68]	; (9af0 <readAccel+0xb8>)
    9aac:	801a      	strh	r2, [r3, #0]
		ay -= aBiasRaw[Y_AXIS];
    9aae:	4b11      	ldr	r3, [pc, #68]	; (9af4 <readAccel+0xbc>)
    9ab0:	2200      	movs	r2, #0
    9ab2:	5e9b      	ldrsh	r3, [r3, r2]
    9ab4:	b29a      	uxth	r2, r3
    9ab6:	4b12      	ldr	r3, [pc, #72]	; (9b00 <readAccel+0xc8>)
    9ab8:	2102      	movs	r1, #2
    9aba:	5e5b      	ldrsh	r3, [r3, r1]
    9abc:	b29b      	uxth	r3, r3
    9abe:	1ad3      	subs	r3, r2, r3
    9ac0:	b29b      	uxth	r3, r3
    9ac2:	b21a      	sxth	r2, r3
    9ac4:	4b0b      	ldr	r3, [pc, #44]	; (9af4 <readAccel+0xbc>)
    9ac6:	801a      	strh	r2, [r3, #0]
		az -= aBiasRaw[Z_AXIS];
    9ac8:	4b0b      	ldr	r3, [pc, #44]	; (9af8 <readAccel+0xc0>)
    9aca:	2200      	movs	r2, #0
    9acc:	5e9b      	ldrsh	r3, [r3, r2]
    9ace:	b29a      	uxth	r2, r3
    9ad0:	4b0b      	ldr	r3, [pc, #44]	; (9b00 <readAccel+0xc8>)
    9ad2:	2104      	movs	r1, #4
    9ad4:	5e5b      	ldrsh	r3, [r3, r1]
    9ad6:	b29b      	uxth	r3, r3
    9ad8:	1ad3      	subs	r3, r2, r3
    9ada:	b29b      	uxth	r3, r3
    9adc:	b21a      	sxth	r2, r3
    9ade:	4b06      	ldr	r3, [pc, #24]	; (9af8 <readAccel+0xc0>)
    9ae0:	801a      	strh	r2, [r3, #0]
	}
}
    9ae2:	46c0      	nop			; (mov r8, r8)
    9ae4:	46bd      	mov	sp, r7
    9ae6:	b002      	add	sp, #8
    9ae8:	bd80      	pop	{r7, pc}
    9aea:	46c0      	nop			; (mov r8, r8)
    9aec:	00009f55 	.word	0x00009f55
    9af0:	200002ea 	.word	0x200002ea
    9af4:	200002ec 	.word	0x200002ec
    9af8:	200002ee 	.word	0x200002ee
    9afc:	200008f0 	.word	0x200008f0
    9b00:	20000a88 	.word	0x20000a88

00009b04 <readMag>:
	
	return value;
}

void readMag()
{
    9b04:	b580      	push	{r7, lr}
    9b06:	b082      	sub	sp, #8
    9b08:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
    9b0a:	003b      	movs	r3, r7
    9b0c:	2206      	movs	r2, #6
    9b0e:	0019      	movs	r1, r3
    9b10:	2028      	movs	r0, #40	; 0x28
    9b12:	4b13      	ldr	r3, [pc, #76]	; (9b60 <readMag+0x5c>)
    9b14:	4798      	blx	r3
	mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
    9b16:	003b      	movs	r3, r7
    9b18:	785b      	ldrb	r3, [r3, #1]
    9b1a:	021b      	lsls	r3, r3, #8
    9b1c:	b21a      	sxth	r2, r3
    9b1e:	003b      	movs	r3, r7
    9b20:	781b      	ldrb	r3, [r3, #0]
    9b22:	b21b      	sxth	r3, r3
    9b24:	4313      	orrs	r3, r2
    9b26:	b21a      	sxth	r2, r3
    9b28:	4b0e      	ldr	r3, [pc, #56]	; (9b64 <readMag+0x60>)
    9b2a:	801a      	strh	r2, [r3, #0]
	my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
    9b2c:	003b      	movs	r3, r7
    9b2e:	78db      	ldrb	r3, [r3, #3]
    9b30:	021b      	lsls	r3, r3, #8
    9b32:	b21a      	sxth	r2, r3
    9b34:	003b      	movs	r3, r7
    9b36:	789b      	ldrb	r3, [r3, #2]
    9b38:	b21b      	sxth	r3, r3
    9b3a:	4313      	orrs	r3, r2
    9b3c:	b21a      	sxth	r2, r3
    9b3e:	4b0a      	ldr	r3, [pc, #40]	; (9b68 <readMag+0x64>)
    9b40:	801a      	strh	r2, [r3, #0]
	mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
    9b42:	003b      	movs	r3, r7
    9b44:	795b      	ldrb	r3, [r3, #5]
    9b46:	021b      	lsls	r3, r3, #8
    9b48:	b21a      	sxth	r2, r3
    9b4a:	003b      	movs	r3, r7
    9b4c:	791b      	ldrb	r3, [r3, #4]
    9b4e:	b21b      	sxth	r3, r3
    9b50:	4313      	orrs	r3, r2
    9b52:	b21a      	sxth	r2, r3
    9b54:	4b05      	ldr	r3, [pc, #20]	; (9b6c <readMag+0x68>)
    9b56:	801a      	strh	r2, [r3, #0]
}
    9b58:	46c0      	nop			; (mov r8, r8)
    9b5a:	46bd      	mov	sp, r7
    9b5c:	b002      	add	sp, #8
    9b5e:	bd80      	pop	{r7, pc}
    9b60:	00009fc1 	.word	0x00009fc1
    9b64:	200002f0 	.word	0x200002f0
    9b68:	200002f2 	.word	0x200002f2
    9b6c:	200002f4 	.word	0x200002f4

00009b70 <readGyro>:
	xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
	temperature = ((int16_t)temp[1] << 8) | temp[0];
}

void readGyro()
{
    9b70:	b580      	push	{r7, lr}
    9b72:	b082      	sub	sp, #8
    9b74:	af00      	add	r7, sp, #0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
    9b76:	003b      	movs	r3, r7
    9b78:	2206      	movs	r2, #6
    9b7a:	0019      	movs	r1, r3
    9b7c:	2018      	movs	r0, #24
    9b7e:	4b29      	ldr	r3, [pc, #164]	; (9c24 <readGyro+0xb4>)
    9b80:	4798      	blx	r3
	gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
    9b82:	003b      	movs	r3, r7
    9b84:	785b      	ldrb	r3, [r3, #1]
    9b86:	021b      	lsls	r3, r3, #8
    9b88:	b21a      	sxth	r2, r3
    9b8a:	003b      	movs	r3, r7
    9b8c:	781b      	ldrb	r3, [r3, #0]
    9b8e:	b21b      	sxth	r3, r3
    9b90:	4313      	orrs	r3, r2
    9b92:	b21a      	sxth	r2, r3
    9b94:	4b24      	ldr	r3, [pc, #144]	; (9c28 <readGyro+0xb8>)
    9b96:	801a      	strh	r2, [r3, #0]
	gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
    9b98:	003b      	movs	r3, r7
    9b9a:	78db      	ldrb	r3, [r3, #3]
    9b9c:	021b      	lsls	r3, r3, #8
    9b9e:	b21a      	sxth	r2, r3
    9ba0:	003b      	movs	r3, r7
    9ba2:	789b      	ldrb	r3, [r3, #2]
    9ba4:	b21b      	sxth	r3, r3
    9ba6:	4313      	orrs	r3, r2
    9ba8:	b21a      	sxth	r2, r3
    9baa:	4b20      	ldr	r3, [pc, #128]	; (9c2c <readGyro+0xbc>)
    9bac:	801a      	strh	r2, [r3, #0]
	gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
    9bae:	003b      	movs	r3, r7
    9bb0:	795b      	ldrb	r3, [r3, #5]
    9bb2:	021b      	lsls	r3, r3, #8
    9bb4:	b21a      	sxth	r2, r3
    9bb6:	003b      	movs	r3, r7
    9bb8:	791b      	ldrb	r3, [r3, #4]
    9bba:	b21b      	sxth	r3, r3
    9bbc:	4313      	orrs	r3, r2
    9bbe:	b21a      	sxth	r2, r3
    9bc0:	4b1b      	ldr	r3, [pc, #108]	; (9c30 <readGyro+0xc0>)
    9bc2:	801a      	strh	r2, [r3, #0]
	if (_autoCalc)
    9bc4:	4b1b      	ldr	r3, [pc, #108]	; (9c34 <readGyro+0xc4>)
    9bc6:	781b      	ldrb	r3, [r3, #0]
    9bc8:	2b00      	cmp	r3, #0
    9bca:	d026      	beq.n	9c1a <readGyro+0xaa>
	{
		gx -= gBiasRaw[X_AXIS];
    9bcc:	4b16      	ldr	r3, [pc, #88]	; (9c28 <readGyro+0xb8>)
    9bce:	2200      	movs	r2, #0
    9bd0:	5e9b      	ldrsh	r3, [r3, r2]
    9bd2:	b29a      	uxth	r2, r3
    9bd4:	4b18      	ldr	r3, [pc, #96]	; (9c38 <readGyro+0xc8>)
    9bd6:	2100      	movs	r1, #0
    9bd8:	5e5b      	ldrsh	r3, [r3, r1]
    9bda:	b29b      	uxth	r3, r3
    9bdc:	1ad3      	subs	r3, r2, r3
    9bde:	b29b      	uxth	r3, r3
    9be0:	b21a      	sxth	r2, r3
    9be2:	4b11      	ldr	r3, [pc, #68]	; (9c28 <readGyro+0xb8>)
    9be4:	801a      	strh	r2, [r3, #0]
		gy -= gBiasRaw[Y_AXIS];
    9be6:	4b11      	ldr	r3, [pc, #68]	; (9c2c <readGyro+0xbc>)
    9be8:	2200      	movs	r2, #0
    9bea:	5e9b      	ldrsh	r3, [r3, r2]
    9bec:	b29a      	uxth	r2, r3
    9bee:	4b12      	ldr	r3, [pc, #72]	; (9c38 <readGyro+0xc8>)
    9bf0:	2102      	movs	r1, #2
    9bf2:	5e5b      	ldrsh	r3, [r3, r1]
    9bf4:	b29b      	uxth	r3, r3
    9bf6:	1ad3      	subs	r3, r2, r3
    9bf8:	b29b      	uxth	r3, r3
    9bfa:	b21a      	sxth	r2, r3
    9bfc:	4b0b      	ldr	r3, [pc, #44]	; (9c2c <readGyro+0xbc>)
    9bfe:	801a      	strh	r2, [r3, #0]
		gz -= gBiasRaw[Z_AXIS];
    9c00:	4b0b      	ldr	r3, [pc, #44]	; (9c30 <readGyro+0xc0>)
    9c02:	2200      	movs	r2, #0
    9c04:	5e9b      	ldrsh	r3, [r3, r2]
    9c06:	b29a      	uxth	r2, r3
    9c08:	4b0b      	ldr	r3, [pc, #44]	; (9c38 <readGyro+0xc8>)
    9c0a:	2104      	movs	r1, #4
    9c0c:	5e5b      	ldrsh	r3, [r3, r1]
    9c0e:	b29b      	uxth	r3, r3
    9c10:	1ad3      	subs	r3, r2, r3
    9c12:	b29b      	uxth	r3, r3
    9c14:	b21a      	sxth	r2, r3
    9c16:	4b06      	ldr	r3, [pc, #24]	; (9c30 <readGyro+0xc0>)
    9c18:	801a      	strh	r2, [r3, #0]
	}
}
    9c1a:	46c0      	nop			; (mov r8, r8)
    9c1c:	46bd      	mov	sp, r7
    9c1e:	b002      	add	sp, #8
    9c20:	bd80      	pop	{r7, pc}
    9c22:	46c0      	nop			; (mov r8, r8)
    9c24:	00009f55 	.word	0x00009f55
    9c28:	200002e4 	.word	0x200002e4
    9c2c:	200002e6 	.word	0x200002e6
    9c30:	200002e8 	.word	0x200002e8
    9c34:	200008f0 	.word	0x200008f0
    9c38:	20000a80 	.word	0x20000a80

00009c3c <calcGyro>:
	
	return value;
}

float calcGyro(int16_t gyro)
{
    9c3c:	b580      	push	{r7, lr}
    9c3e:	b082      	sub	sp, #8
    9c40:	af00      	add	r7, sp, #0
    9c42:	0002      	movs	r2, r0
    9c44:	1dbb      	adds	r3, r7, #6
    9c46:	801a      	strh	r2, [r3, #0]
	// Return the gyro raw reading times our pre-calculated DPS / (ADC tick):
	return gRes * gyro; 
    9c48:	1dbb      	adds	r3, r7, #6
    9c4a:	2200      	movs	r2, #0
    9c4c:	5e9a      	ldrsh	r2, [r3, r2]
    9c4e:	4b06      	ldr	r3, [pc, #24]	; (9c68 <calcGyro+0x2c>)
    9c50:	0010      	movs	r0, r2
    9c52:	4798      	blx	r3
    9c54:	4b05      	ldr	r3, [pc, #20]	; (9c6c <calcGyro+0x30>)
    9c56:	681a      	ldr	r2, [r3, #0]
    9c58:	4b05      	ldr	r3, [pc, #20]	; (9c70 <calcGyro+0x34>)
    9c5a:	1c11      	adds	r1, r2, #0
    9c5c:	4798      	blx	r3
    9c5e:	1c03      	adds	r3, r0, #0
}
    9c60:	1c18      	adds	r0, r3, #0
    9c62:	46bd      	mov	sp, r7
    9c64:	b002      	add	sp, #8
    9c66:	bd80      	pop	{r7, pc}
    9c68:	00014e49 	.word	0x00014e49
    9c6c:	20000ce8 	.word	0x20000ce8
    9c70:	00014891 	.word	0x00014891

00009c74 <calcAccel>:

float calcAccel(int16_t accel)
{
    9c74:	b580      	push	{r7, lr}
    9c76:	b082      	sub	sp, #8
    9c78:	af00      	add	r7, sp, #0
    9c7a:	0002      	movs	r2, r0
    9c7c:	1dbb      	adds	r3, r7, #6
    9c7e:	801a      	strh	r2, [r3, #0]
	// Return the accel raw reading times our pre-calculated g's / (ADC tick):
	return aRes * accel;
    9c80:	1dbb      	adds	r3, r7, #6
    9c82:	2200      	movs	r2, #0
    9c84:	5e9a      	ldrsh	r2, [r3, r2]
    9c86:	4b06      	ldr	r3, [pc, #24]	; (9ca0 <calcAccel+0x2c>)
    9c88:	0010      	movs	r0, r2
    9c8a:	4798      	blx	r3
    9c8c:	4b05      	ldr	r3, [pc, #20]	; (9ca4 <calcAccel+0x30>)
    9c8e:	681a      	ldr	r2, [r3, #0]
    9c90:	4b05      	ldr	r3, [pc, #20]	; (9ca8 <calcAccel+0x34>)
    9c92:	1c11      	adds	r1, r2, #0
    9c94:	4798      	blx	r3
    9c96:	1c03      	adds	r3, r0, #0
}
    9c98:	1c18      	adds	r0, r3, #0
    9c9a:	46bd      	mov	sp, r7
    9c9c:	b002      	add	sp, #8
    9c9e:	bd80      	pop	{r7, pc}
    9ca0:	00014e49 	.word	0x00014e49
    9ca4:	200009a4 	.word	0x200009a4
    9ca8:	00014891 	.word	0x00014891

00009cac <calcgRes>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void calcgRes()
{
    9cac:	b580      	push	{r7, lr}
    9cae:	af00      	add	r7, sp, #0
	gRes = ((float) settings.gyro.scale) / 32768.0;
    9cb0:	4b08      	ldr	r3, [pc, #32]	; (9cd4 <calcgRes+0x28>)
    9cb2:	88da      	ldrh	r2, [r3, #6]
    9cb4:	4b08      	ldr	r3, [pc, #32]	; (9cd8 <calcgRes+0x2c>)
    9cb6:	0010      	movs	r0, r2
    9cb8:	4798      	blx	r3
    9cba:	1c02      	adds	r2, r0, #0
    9cbc:	4b07      	ldr	r3, [pc, #28]	; (9cdc <calcgRes+0x30>)
    9cbe:	218e      	movs	r1, #142	; 0x8e
    9cc0:	05c9      	lsls	r1, r1, #23
    9cc2:	1c10      	adds	r0, r2, #0
    9cc4:	4798      	blx	r3
    9cc6:	1c03      	adds	r3, r0, #0
    9cc8:	1c1a      	adds	r2, r3, #0
    9cca:	4b05      	ldr	r3, [pc, #20]	; (9ce0 <calcgRes+0x34>)
    9ccc:	601a      	str	r2, [r3, #0]
}
    9cce:	46c0      	nop			; (mov r8, r8)
    9cd0:	46bd      	mov	sp, r7
    9cd2:	bd80      	pop	{r7, pc}
    9cd4:	200004d4 	.word	0x200004d4
    9cd8:	00014ee9 	.word	0x00014ee9
    9cdc:	000144b1 	.word	0x000144b1
    9ce0:	20000ce8 	.word	0x20000ce8

00009ce4 <calcaRes>:

void calcaRes()
{
    9ce4:	b580      	push	{r7, lr}
    9ce6:	af00      	add	r7, sp, #0
	aRes = ((float) settings.accel.scale) / 32768.0;
    9ce8:	4b08      	ldr	r3, [pc, #32]	; (9d0c <calcaRes+0x28>)
    9cea:	7dda      	ldrb	r2, [r3, #23]
    9cec:	4b08      	ldr	r3, [pc, #32]	; (9d10 <calcaRes+0x2c>)
    9cee:	0010      	movs	r0, r2
    9cf0:	4798      	blx	r3
    9cf2:	1c02      	adds	r2, r0, #0
    9cf4:	4b07      	ldr	r3, [pc, #28]	; (9d14 <calcaRes+0x30>)
    9cf6:	218e      	movs	r1, #142	; 0x8e
    9cf8:	05c9      	lsls	r1, r1, #23
    9cfa:	1c10      	adds	r0, r2, #0
    9cfc:	4798      	blx	r3
    9cfe:	1c03      	adds	r3, r0, #0
    9d00:	1c1a      	adds	r2, r3, #0
    9d02:	4b05      	ldr	r3, [pc, #20]	; (9d18 <calcaRes+0x34>)
    9d04:	601a      	str	r2, [r3, #0]
}
    9d06:	46c0      	nop			; (mov r8, r8)
    9d08:	46bd      	mov	sp, r7
    9d0a:	bd80      	pop	{r7, pc}
    9d0c:	200004d4 	.word	0x200004d4
    9d10:	00014ee9 	.word	0x00014ee9
    9d14:	000144b1 	.word	0x000144b1
    9d18:	200009a4 	.word	0x200009a4

00009d1c <calcmRes>:

void calcmRes()
{
    9d1c:	b580      	push	{r7, lr}
    9d1e:	af00      	add	r7, sp, #0
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
    9d20:	4b12      	ldr	r3, [pc, #72]	; (9d6c <calcmRes+0x50>)
    9d22:	2220      	movs	r2, #32
    9d24:	5c9b      	ldrb	r3, [r3, r2]
    9d26:	2b08      	cmp	r3, #8
    9d28:	d00d      	beq.n	9d46 <calcmRes+0x2a>
    9d2a:	dc02      	bgt.n	9d32 <calcmRes+0x16>
    9d2c:	2b04      	cmp	r3, #4
    9d2e:	d005      	beq.n	9d3c <calcmRes+0x20>
	case 16:
		mRes = magSensitivity[3];
		break;
	}
	
}
    9d30:	e018      	b.n	9d64 <calcmRes+0x48>
	switch (settings.mag.scale)
    9d32:	2b0c      	cmp	r3, #12
    9d34:	d00c      	beq.n	9d50 <calcmRes+0x34>
    9d36:	2b10      	cmp	r3, #16
    9d38:	d00f      	beq.n	9d5a <calcmRes+0x3e>
}
    9d3a:	e013      	b.n	9d64 <calcmRes+0x48>
		mRes = magSensitivity[0];
    9d3c:	4b0c      	ldr	r3, [pc, #48]	; (9d70 <calcmRes+0x54>)
    9d3e:	681a      	ldr	r2, [r3, #0]
    9d40:	4b0c      	ldr	r3, [pc, #48]	; (9d74 <calcmRes+0x58>)
    9d42:	601a      	str	r2, [r3, #0]
		break;
    9d44:	e00e      	b.n	9d64 <calcmRes+0x48>
		mRes = magSensitivity[1];
    9d46:	4b0a      	ldr	r3, [pc, #40]	; (9d70 <calcmRes+0x54>)
    9d48:	685a      	ldr	r2, [r3, #4]
    9d4a:	4b0a      	ldr	r3, [pc, #40]	; (9d74 <calcmRes+0x58>)
    9d4c:	601a      	str	r2, [r3, #0]
		break;
    9d4e:	e009      	b.n	9d64 <calcmRes+0x48>
		mRes = magSensitivity[2];
    9d50:	4b07      	ldr	r3, [pc, #28]	; (9d70 <calcmRes+0x54>)
    9d52:	689a      	ldr	r2, [r3, #8]
    9d54:	4b07      	ldr	r3, [pc, #28]	; (9d74 <calcmRes+0x58>)
    9d56:	601a      	str	r2, [r3, #0]
		break;
    9d58:	e004      	b.n	9d64 <calcmRes+0x48>
		mRes = magSensitivity[3];
    9d5a:	4b05      	ldr	r3, [pc, #20]	; (9d70 <calcmRes+0x54>)
    9d5c:	68da      	ldr	r2, [r3, #12]
    9d5e:	4b05      	ldr	r3, [pc, #20]	; (9d74 <calcmRes+0x58>)
    9d60:	601a      	str	r2, [r3, #0]
		break;
    9d62:	46c0      	nop			; (mov r8, r8)
}
    9d64:	46c0      	nop			; (mov r8, r8)
    9d66:	46bd      	mov	sp, r7
    9d68:	bd80      	pop	{r7, pc}
    9d6a:	46c0      	nop			; (mov r8, r8)
    9d6c:	200004d4 	.word	0x200004d4
    9d70:	20000008 	.word	0x20000008
    9d74:	20000d88 	.word	0x20000d88

00009d78 <enableFIFO>:
	else temp &= ~(1<<6);
	xgWriteByte(CTRL_REG9, temp);
}

void enableFIFO(bool enable)
{
    9d78:	b590      	push	{r4, r7, lr}
    9d7a:	b085      	sub	sp, #20
    9d7c:	af00      	add	r7, sp, #0
    9d7e:	0002      	movs	r2, r0
    9d80:	1dfb      	adds	r3, r7, #7
    9d82:	701a      	strb	r2, [r3, #0]
	uint8_t temp = xgReadByte(CTRL_REG9);
    9d84:	230f      	movs	r3, #15
    9d86:	18fc      	adds	r4, r7, r3
    9d88:	2023      	movs	r0, #35	; 0x23
    9d8a:	4b12      	ldr	r3, [pc, #72]	; (9dd4 <enableFIFO+0x5c>)
    9d8c:	4798      	blx	r3
    9d8e:	0003      	movs	r3, r0
    9d90:	7023      	strb	r3, [r4, #0]
	if (enable) temp |= (1<<1);
    9d92:	1dfb      	adds	r3, r7, #7
    9d94:	781b      	ldrb	r3, [r3, #0]
    9d96:	2b00      	cmp	r3, #0
    9d98:	d008      	beq.n	9dac <enableFIFO+0x34>
    9d9a:	230f      	movs	r3, #15
    9d9c:	18fb      	adds	r3, r7, r3
    9d9e:	220f      	movs	r2, #15
    9da0:	18ba      	adds	r2, r7, r2
    9da2:	7812      	ldrb	r2, [r2, #0]
    9da4:	2102      	movs	r1, #2
    9da6:	430a      	orrs	r2, r1
    9da8:	701a      	strb	r2, [r3, #0]
    9daa:	e007      	b.n	9dbc <enableFIFO+0x44>
	else temp &= ~(1<<1);
    9dac:	230f      	movs	r3, #15
    9dae:	18fb      	adds	r3, r7, r3
    9db0:	220f      	movs	r2, #15
    9db2:	18ba      	adds	r2, r7, r2
    9db4:	7812      	ldrb	r2, [r2, #0]
    9db6:	2102      	movs	r1, #2
    9db8:	438a      	bics	r2, r1
    9dba:	701a      	strb	r2, [r3, #0]
	xgWriteByte(CTRL_REG9, temp);
    9dbc:	230f      	movs	r3, #15
    9dbe:	18fb      	adds	r3, r7, r3
    9dc0:	781b      	ldrb	r3, [r3, #0]
    9dc2:	0019      	movs	r1, r3
    9dc4:	2023      	movs	r0, #35	; 0x23
    9dc6:	4b04      	ldr	r3, [pc, #16]	; (9dd8 <enableFIFO+0x60>)
    9dc8:	4798      	blx	r3
}
    9dca:	46c0      	nop			; (mov r8, r8)
    9dcc:	46bd      	mov	sp, r7
    9dce:	b005      	add	sp, #20
    9dd0:	bd90      	pop	{r4, r7, pc}
    9dd2:	46c0      	nop			; (mov r8, r8)
    9dd4:	00009f25 	.word	0x00009f25
    9dd8:	00009ebd 	.word	0x00009ebd

00009ddc <setFIFO>:

void setFIFO(enum fifoMode_type fifoMode, uint8_t fifoThs)
{
    9ddc:	b580      	push	{r7, lr}
    9dde:	b084      	sub	sp, #16
    9de0:	af00      	add	r7, sp, #0
    9de2:	0002      	movs	r2, r0
    9de4:	1dfb      	adds	r3, r7, #7
    9de6:	701a      	strb	r2, [r3, #0]
    9de8:	1dbb      	adds	r3, r7, #6
    9dea:	1c0a      	adds	r2, r1, #0
    9dec:	701a      	strb	r2, [r3, #0]
	// Limit threshold - 0x1F (31) is the maximum. If more than that was asked
	// limit it to the maximum.
	uint8_t threshold = fifoThs <= 0x1F ? fifoThs : 0x1F;
    9dee:	230f      	movs	r3, #15
    9df0:	18fa      	adds	r2, r7, r3
    9df2:	1dbb      	adds	r3, r7, #6
    9df4:	781b      	ldrb	r3, [r3, #0]
    9df6:	b2d9      	uxtb	r1, r3
    9df8:	291f      	cmp	r1, #31
    9dfa:	d900      	bls.n	9dfe <setFIFO+0x22>
    9dfc:	231f      	movs	r3, #31
    9dfe:	7013      	strb	r3, [r2, #0]
	xgWriteByte(FIFO_CTRL, ((fifoMode & 0x7) << 5) | (threshold & 0x1F));
    9e00:	1dfb      	adds	r3, r7, #7
    9e02:	781b      	ldrb	r3, [r3, #0]
    9e04:	015b      	lsls	r3, r3, #5
    9e06:	b25a      	sxtb	r2, r3
    9e08:	230f      	movs	r3, #15
    9e0a:	18fb      	adds	r3, r7, r3
    9e0c:	781b      	ldrb	r3, [r3, #0]
    9e0e:	b25b      	sxtb	r3, r3
    9e10:	211f      	movs	r1, #31
    9e12:	400b      	ands	r3, r1
    9e14:	b25b      	sxtb	r3, r3
    9e16:	4313      	orrs	r3, r2
    9e18:	b25b      	sxtb	r3, r3
    9e1a:	b2db      	uxtb	r3, r3
    9e1c:	0019      	movs	r1, r3
    9e1e:	202e      	movs	r0, #46	; 0x2e
    9e20:	4b02      	ldr	r3, [pc, #8]	; (9e2c <setFIFO+0x50>)
    9e22:	4798      	blx	r3
}
    9e24:	46c0      	nop			; (mov r8, r8)
    9e26:	46bd      	mov	sp, r7
    9e28:	b004      	add	sp, #16
    9e2a:	bd80      	pop	{r7, pc}
    9e2c:	00009ebd 	.word	0x00009ebd

00009e30 <constrainScales>:
{
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void constrainScales()
{
    9e30:	b580      	push	{r7, lr}
    9e32:	af00      	add	r7, sp, #0
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    9e34:	4b20      	ldr	r3, [pc, #128]	; (9eb8 <constrainScales+0x88>)
    9e36:	88db      	ldrh	r3, [r3, #6]
    9e38:	2bf5      	cmp	r3, #245	; 0xf5
    9e3a:	d00e      	beq.n	9e5a <constrainScales+0x2a>
    9e3c:	4b1e      	ldr	r3, [pc, #120]	; (9eb8 <constrainScales+0x88>)
    9e3e:	88da      	ldrh	r2, [r3, #6]
    9e40:	23fa      	movs	r3, #250	; 0xfa
    9e42:	005b      	lsls	r3, r3, #1
    9e44:	429a      	cmp	r2, r3
    9e46:	d008      	beq.n	9e5a <constrainScales+0x2a>
		(settings.gyro.scale != 2000))
    9e48:	4b1b      	ldr	r3, [pc, #108]	; (9eb8 <constrainScales+0x88>)
    9e4a:	88da      	ldrh	r2, [r3, #6]
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
    9e4c:	23fa      	movs	r3, #250	; 0xfa
    9e4e:	00db      	lsls	r3, r3, #3
    9e50:	429a      	cmp	r2, r3
    9e52:	d002      	beq.n	9e5a <constrainScales+0x2a>
	{
		settings.gyro.scale = 245;
    9e54:	4b18      	ldr	r3, [pc, #96]	; (9eb8 <constrainScales+0x88>)
    9e56:	22f5      	movs	r2, #245	; 0xf5
    9e58:	80da      	strh	r2, [r3, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    9e5a:	4b17      	ldr	r3, [pc, #92]	; (9eb8 <constrainScales+0x88>)
    9e5c:	7ddb      	ldrb	r3, [r3, #23]
    9e5e:	2b02      	cmp	r3, #2
    9e60:	d00e      	beq.n	9e80 <constrainScales+0x50>
    9e62:	4b15      	ldr	r3, [pc, #84]	; (9eb8 <constrainScales+0x88>)
    9e64:	7ddb      	ldrb	r3, [r3, #23]
    9e66:	2b04      	cmp	r3, #4
    9e68:	d00a      	beq.n	9e80 <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    9e6a:	4b13      	ldr	r3, [pc, #76]	; (9eb8 <constrainScales+0x88>)
    9e6c:	7ddb      	ldrb	r3, [r3, #23]
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
    9e6e:	2b08      	cmp	r3, #8
    9e70:	d006      	beq.n	9e80 <constrainScales+0x50>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
    9e72:	4b11      	ldr	r3, [pc, #68]	; (9eb8 <constrainScales+0x88>)
    9e74:	7ddb      	ldrb	r3, [r3, #23]
    9e76:	2b10      	cmp	r3, #16
    9e78:	d002      	beq.n	9e80 <constrainScales+0x50>
	{
		settings.accel.scale = 2;
    9e7a:	4b0f      	ldr	r3, [pc, #60]	; (9eb8 <constrainScales+0x88>)
    9e7c:	2202      	movs	r2, #2
    9e7e:	75da      	strb	r2, [r3, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    9e80:	4b0d      	ldr	r3, [pc, #52]	; (9eb8 <constrainScales+0x88>)
    9e82:	2220      	movs	r2, #32
    9e84:	5c9b      	ldrb	r3, [r3, r2]
    9e86:	2b04      	cmp	r3, #4
    9e88:	d012      	beq.n	9eb0 <constrainScales+0x80>
    9e8a:	4b0b      	ldr	r3, [pc, #44]	; (9eb8 <constrainScales+0x88>)
    9e8c:	2220      	movs	r2, #32
    9e8e:	5c9b      	ldrb	r3, [r3, r2]
    9e90:	2b08      	cmp	r3, #8
    9e92:	d00d      	beq.n	9eb0 <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    9e94:	4b08      	ldr	r3, [pc, #32]	; (9eb8 <constrainScales+0x88>)
    9e96:	2220      	movs	r2, #32
    9e98:	5c9b      	ldrb	r3, [r3, r2]
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
    9e9a:	2b0c      	cmp	r3, #12
    9e9c:	d008      	beq.n	9eb0 <constrainScales+0x80>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
    9e9e:	4b06      	ldr	r3, [pc, #24]	; (9eb8 <constrainScales+0x88>)
    9ea0:	2220      	movs	r2, #32
    9ea2:	5c9b      	ldrb	r3, [r3, r2]
    9ea4:	2b10      	cmp	r3, #16
    9ea6:	d003      	beq.n	9eb0 <constrainScales+0x80>
	{
		settings.mag.scale = 4;
    9ea8:	4b03      	ldr	r3, [pc, #12]	; (9eb8 <constrainScales+0x88>)
    9eaa:	2220      	movs	r2, #32
    9eac:	2104      	movs	r1, #4
    9eae:	5499      	strb	r1, [r3, r2]
	}
}
    9eb0:	46c0      	nop			; (mov r8, r8)
    9eb2:	46bd      	mov	sp, r7
    9eb4:	bd80      	pop	{r7, pc}
    9eb6:	46c0      	nop			; (mov r8, r8)
    9eb8:	200004d4 	.word	0x200004d4

00009ebc <xgWriteByte>:

void xgWriteByte(uint8_t subAddress, uint8_t data)
{
    9ebc:	b580      	push	{r7, lr}
    9ebe:	b082      	sub	sp, #8
    9ec0:	af00      	add	r7, sp, #0
    9ec2:	0002      	movs	r2, r0
    9ec4:	1dfb      	adds	r3, r7, #7
    9ec6:	701a      	strb	r2, [r3, #0]
    9ec8:	1dbb      	adds	r3, r7, #6
    9eca:	1c0a      	adds	r2, r1, #0
    9ecc:	701a      	strb	r2, [r3, #0]
		writeByte(_xgAddress, subAddress, data);
    9ece:	4b06      	ldr	r3, [pc, #24]	; (9ee8 <xgWriteByte+0x2c>)
    9ed0:	7818      	ldrb	r0, [r3, #0]
    9ed2:	1dbb      	adds	r3, r7, #6
    9ed4:	781a      	ldrb	r2, [r3, #0]
    9ed6:	1dfb      	adds	r3, r7, #7
    9ed8:	781b      	ldrb	r3, [r3, #0]
    9eda:	0019      	movs	r1, r3
    9edc:	4b03      	ldr	r3, [pc, #12]	; (9eec <xgWriteByte+0x30>)
    9ede:	4798      	blx	r3
}
    9ee0:	46c0      	nop			; (mov r8, r8)
    9ee2:	46bd      	mov	sp, r7
    9ee4:	b002      	add	sp, #8
    9ee6:	bd80      	pop	{r7, pc}
    9ee8:	20000a22 	.word	0x20000a22
    9eec:	0000a055 	.word	0x0000a055

00009ef0 <mWriteByte>:

void mWriteByte(uint8_t subAddress, uint8_t data)
{
    9ef0:	b580      	push	{r7, lr}
    9ef2:	b082      	sub	sp, #8
    9ef4:	af00      	add	r7, sp, #0
    9ef6:	0002      	movs	r2, r0
    9ef8:	1dfb      	adds	r3, r7, #7
    9efa:	701a      	strb	r2, [r3, #0]
    9efc:	1dbb      	adds	r3, r7, #6
    9efe:	1c0a      	adds	r2, r1, #0
    9f00:	701a      	strb	r2, [r3, #0]
		return writeByte(_mAddress, subAddress, data);
    9f02:	4b06      	ldr	r3, [pc, #24]	; (9f1c <mWriteByte+0x2c>)
    9f04:	7818      	ldrb	r0, [r3, #0]
    9f06:	1dbb      	adds	r3, r7, #6
    9f08:	781a      	ldrb	r2, [r3, #0]
    9f0a:	1dfb      	adds	r3, r7, #7
    9f0c:	781b      	ldrb	r3, [r3, #0]
    9f0e:	0019      	movs	r1, r3
    9f10:	4b03      	ldr	r3, [pc, #12]	; (9f20 <mWriteByte+0x30>)
    9f12:	4798      	blx	r3
}
    9f14:	46bd      	mov	sp, r7
    9f16:	b002      	add	sp, #8
    9f18:	bd80      	pop	{r7, pc}
    9f1a:	46c0      	nop			; (mov r8, r8)
    9f1c:	200009a8 	.word	0x200009a8
    9f20:	0000a055 	.word	0x0000a055

00009f24 <xgReadByte>:

uint8_t xgReadByte(uint8_t subAddress)
{
    9f24:	b580      	push	{r7, lr}
    9f26:	b082      	sub	sp, #8
    9f28:	af00      	add	r7, sp, #0
    9f2a:	0002      	movs	r2, r0
    9f2c:	1dfb      	adds	r3, r7, #7
    9f2e:	701a      	strb	r2, [r3, #0]
		return readByte(_xgAddress, subAddress);
    9f30:	4b06      	ldr	r3, [pc, #24]	; (9f4c <xgReadByte+0x28>)
    9f32:	781a      	ldrb	r2, [r3, #0]
    9f34:	1dfb      	adds	r3, r7, #7
    9f36:	781b      	ldrb	r3, [r3, #0]
    9f38:	0019      	movs	r1, r3
    9f3a:	0010      	movs	r0, r2
    9f3c:	4b04      	ldr	r3, [pc, #16]	; (9f50 <xgReadByte+0x2c>)
    9f3e:	4798      	blx	r3
    9f40:	0003      	movs	r3, r0
}
    9f42:	0018      	movs	r0, r3
    9f44:	46bd      	mov	sp, r7
    9f46:	b002      	add	sp, #8
    9f48:	bd80      	pop	{r7, pc}
    9f4a:	46c0      	nop			; (mov r8, r8)
    9f4c:	20000a22 	.word	0x20000a22
    9f50:	0000a0fd 	.word	0x0000a0fd

00009f54 <xgReadBytes>:

void xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    9f54:	b590      	push	{r4, r7, lr}
    9f56:	b083      	sub	sp, #12
    9f58:	af00      	add	r7, sp, #0
    9f5a:	6039      	str	r1, [r7, #0]
    9f5c:	0011      	movs	r1, r2
    9f5e:	1dfb      	adds	r3, r7, #7
    9f60:	1c02      	adds	r2, r0, #0
    9f62:	701a      	strb	r2, [r3, #0]
    9f64:	1dbb      	adds	r3, r7, #6
    9f66:	1c0a      	adds	r2, r1, #0
    9f68:	701a      	strb	r2, [r3, #0]
		readBytes(_xgAddress, subAddress, dest, count);
    9f6a:	4b07      	ldr	r3, [pc, #28]	; (9f88 <xgReadBytes+0x34>)
    9f6c:	7818      	ldrb	r0, [r3, #0]
    9f6e:	1dbb      	adds	r3, r7, #6
    9f70:	781c      	ldrb	r4, [r3, #0]
    9f72:	683a      	ldr	r2, [r7, #0]
    9f74:	1dfb      	adds	r3, r7, #7
    9f76:	7819      	ldrb	r1, [r3, #0]
    9f78:	0023      	movs	r3, r4
    9f7a:	4c04      	ldr	r4, [pc, #16]	; (9f8c <xgReadBytes+0x38>)
    9f7c:	47a0      	blx	r4
}
    9f7e:	46c0      	nop			; (mov r8, r8)
    9f80:	46bd      	mov	sp, r7
    9f82:	b003      	add	sp, #12
    9f84:	bd90      	pop	{r4, r7, pc}
    9f86:	46c0      	nop			; (mov r8, r8)
    9f88:	20000a22 	.word	0x20000a22
    9f8c:	0000a1cd 	.word	0x0000a1cd

00009f90 <mReadByte>:

uint8_t mReadByte(uint8_t subAddress)
{
    9f90:	b580      	push	{r7, lr}
    9f92:	b082      	sub	sp, #8
    9f94:	af00      	add	r7, sp, #0
    9f96:	0002      	movs	r2, r0
    9f98:	1dfb      	adds	r3, r7, #7
    9f9a:	701a      	strb	r2, [r3, #0]
		return readByte(_mAddress, subAddress);
    9f9c:	4b06      	ldr	r3, [pc, #24]	; (9fb8 <mReadByte+0x28>)
    9f9e:	781a      	ldrb	r2, [r3, #0]
    9fa0:	1dfb      	adds	r3, r7, #7
    9fa2:	781b      	ldrb	r3, [r3, #0]
    9fa4:	0019      	movs	r1, r3
    9fa6:	0010      	movs	r0, r2
    9fa8:	4b04      	ldr	r3, [pc, #16]	; (9fbc <mReadByte+0x2c>)
    9faa:	4798      	blx	r3
    9fac:	0003      	movs	r3, r0
}
    9fae:	0018      	movs	r0, r3
    9fb0:	46bd      	mov	sp, r7
    9fb2:	b002      	add	sp, #8
    9fb4:	bd80      	pop	{r7, pc}
    9fb6:	46c0      	nop			; (mov r8, r8)
    9fb8:	200009a8 	.word	0x200009a8
    9fbc:	0000a0fd 	.word	0x0000a0fd

00009fc0 <mReadBytes>:

void mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
    9fc0:	b590      	push	{r4, r7, lr}
    9fc2:	b083      	sub	sp, #12
    9fc4:	af00      	add	r7, sp, #0
    9fc6:	6039      	str	r1, [r7, #0]
    9fc8:	0011      	movs	r1, r2
    9fca:	1dfb      	adds	r3, r7, #7
    9fcc:	1c02      	adds	r2, r0, #0
    9fce:	701a      	strb	r2, [r3, #0]
    9fd0:	1dbb      	adds	r3, r7, #6
    9fd2:	1c0a      	adds	r2, r1, #0
    9fd4:	701a      	strb	r2, [r3, #0]
		readBytes(_mAddress, subAddress, dest, count);
    9fd6:	4b07      	ldr	r3, [pc, #28]	; (9ff4 <mReadBytes+0x34>)
    9fd8:	7818      	ldrb	r0, [r3, #0]
    9fda:	1dbb      	adds	r3, r7, #6
    9fdc:	781c      	ldrb	r4, [r3, #0]
    9fde:	683a      	ldr	r2, [r7, #0]
    9fe0:	1dfb      	adds	r3, r7, #7
    9fe2:	7819      	ldrb	r1, [r3, #0]
    9fe4:	0023      	movs	r3, r4
    9fe6:	4c04      	ldr	r4, [pc, #16]	; (9ff8 <mReadBytes+0x38>)
    9fe8:	47a0      	blx	r4
}
    9fea:	46c0      	nop			; (mov r8, r8)
    9fec:	46bd      	mov	sp, r7
    9fee:	b003      	add	sp, #12
    9ff0:	bd90      	pop	{r4, r7, pc}
    9ff2:	46c0      	nop			; (mov r8, r8)
    9ff4:	200009a8 	.word	0x200009a8
    9ff8:	0000a1cd 	.word	0x0000a1cd

00009ffc <initI2C>:

// Configure SERCOM channel 3 as I2C master for IMU communication
void initI2C()
{
    9ffc:	b580      	push	{r7, lr}
    9ffe:	b08e      	sub	sp, #56	; 0x38
    a000:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    a002:	1d3b      	adds	r3, r7, #4
    a004:	0018      	movs	r0, r3
    a006:	4b0c      	ldr	r3, [pc, #48]	; (a038 <initI2C+0x3c>)
    a008:	4798      	blx	r3
	config_i2c_master.buffer_timeout = MASTER_TIMEOUT;
    a00a:	1d3b      	adds	r3, r7, #4
    a00c:	22fa      	movs	r2, #250	; 0xfa
    a00e:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    a010:	1d3b      	adds	r3, r7, #4
    a012:	4a0a      	ldr	r2, [pc, #40]	; (a03c <initI2C+0x40>)
    a014:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    a016:	1d3b      	adds	r3, r7, #4
    a018:	4a09      	ldr	r2, [pc, #36]	; (a040 <initI2C+0x44>)
    a01a:	621a      	str	r2, [r3, #32]
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
    a01c:	1d3a      	adds	r2, r7, #4
    a01e:	4909      	ldr	r1, [pc, #36]	; (a044 <initI2C+0x48>)
    a020:	4b09      	ldr	r3, [pc, #36]	; (a048 <initI2C+0x4c>)
    a022:	0018      	movs	r0, r3
    a024:	4b09      	ldr	r3, [pc, #36]	; (a04c <initI2C+0x50>)
    a026:	4798      	blx	r3
	i2c_master_enable(&i2c_master_instance);
    a028:	4b07      	ldr	r3, [pc, #28]	; (a048 <initI2C+0x4c>)
    a02a:	0018      	movs	r0, r3
    a02c:	4b08      	ldr	r3, [pc, #32]	; (a050 <initI2C+0x54>)
    a02e:	4798      	blx	r3
}
    a030:	46c0      	nop			; (mov r8, r8)
    a032:	46bd      	mov	sp, r7
    a034:	b00e      	add	sp, #56	; 0x38
    a036:	bd80      	pop	{r7, pc}
    a038:	00008c8d 	.word	0x00008c8d
    a03c:	00160002 	.word	0x00160002
    a040:	00170002 	.word	0x00170002
    a044:	42001400 	.word	0x42001400
    a048:	20000a90 	.word	0x20000a90
    a04c:	00003701 	.word	0x00003701
    a050:	00008d11 	.word	0x00008d11

0000a054 <writeByte>:

// Wire.h read and write protocols
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
    a054:	b590      	push	{r4, r7, lr}
    a056:	b087      	sub	sp, #28
    a058:	af00      	add	r7, sp, #0
    a05a:	0004      	movs	r4, r0
    a05c:	0008      	movs	r0, r1
    a05e:	0011      	movs	r1, r2
    a060:	1dfb      	adds	r3, r7, #7
    a062:	1c22      	adds	r2, r4, #0
    a064:	701a      	strb	r2, [r3, #0]
    a066:	1dbb      	adds	r3, r7, #6
    a068:	1c02      	adds	r2, r0, #0
    a06a:	701a      	strb	r2, [r3, #0]
    a06c:	1d7b      	adds	r3, r7, #5
    a06e:	1c0a      	adds	r2, r1, #0
    a070:	701a      	strb	r2, [r3, #0]
	/* Timeout counter. */
	uint16_t timeout = 0;
    a072:	2316      	movs	r3, #22
    a074:	18fb      	adds	r3, r7, r3
    a076:	2200      	movs	r2, #0
    a078:	801a      	strh	r2, [r3, #0]
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
    a07a:	4b1d      	ldr	r3, [pc, #116]	; (a0f0 <writeByte+0x9c>)
    a07c:	1dba      	adds	r2, r7, #6
    a07e:	7812      	ldrb	r2, [r2, #0]
    a080:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = data;
    a082:	4b1b      	ldr	r3, [pc, #108]	; (a0f0 <writeByte+0x9c>)
    a084:	1d7a      	adds	r2, r7, #5
    a086:	7812      	ldrb	r2, [r2, #0]
    a088:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
    a08a:	1dfb      	adds	r3, r7, #7
    a08c:	781b      	ldrb	r3, [r3, #0]
    a08e:	b29a      	uxth	r2, r3
    a090:	2308      	movs	r3, #8
    a092:	18fb      	adds	r3, r7, r3
    a094:	801a      	strh	r2, [r3, #0]
    a096:	2308      	movs	r3, #8
    a098:	18fb      	adds	r3, r7, r3
    a09a:	2202      	movs	r2, #2
    a09c:	805a      	strh	r2, [r3, #2]
    a09e:	2308      	movs	r3, #8
    a0a0:	18fb      	adds	r3, r7, r3
    a0a2:	4a13      	ldr	r2, [pc, #76]	; (a0f0 <writeByte+0x9c>)
    a0a4:	605a      	str	r2, [r3, #4]
    a0a6:	2308      	movs	r3, #8
    a0a8:	18fb      	adds	r3, r7, r3
    a0aa:	2200      	movs	r2, #0
    a0ac:	721a      	strb	r2, [r3, #8]
    a0ae:	2308      	movs	r3, #8
    a0b0:	18fb      	adds	r3, r7, r3
    a0b2:	2200      	movs	r2, #0
    a0b4:	725a      	strb	r2, [r3, #9]
    a0b6:	2308      	movs	r3, #8
    a0b8:	18fb      	adds	r3, r7, r3
    a0ba:	2200      	movs	r2, #0
    a0bc:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

    /* Write buffer to slave until success. */
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a0be:	e008      	b.n	a0d2 <writeByte+0x7e>
    STATUS_OK) {
	    /* Increment timeout counter and check if timed out. */
	    if (timeout++ == MASTER_TIMEOUT) {
    a0c0:	2316      	movs	r3, #22
    a0c2:	18fb      	adds	r3, r7, r3
    a0c4:	881b      	ldrh	r3, [r3, #0]
    a0c6:	2216      	movs	r2, #22
    a0c8:	18ba      	adds	r2, r7, r2
    a0ca:	1c59      	adds	r1, r3, #1
    a0cc:	8011      	strh	r1, [r2, #0]
    a0ce:	2bfa      	cmp	r3, #250	; 0xfa
    a0d0:	d009      	beq.n	a0e6 <writeByte+0x92>
    while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a0d2:	2308      	movs	r3, #8
    a0d4:	18fa      	adds	r2, r7, r3
    a0d6:	4b07      	ldr	r3, [pc, #28]	; (a0f4 <writeByte+0xa0>)
    a0d8:	0011      	movs	r1, r2
    a0da:	0018      	movs	r0, r3
    a0dc:	4b06      	ldr	r3, [pc, #24]	; (a0f8 <writeByte+0xa4>)
    a0de:	4798      	blx	r3
    a0e0:	1e03      	subs	r3, r0, #0
    a0e2:	d1ed      	bne.n	a0c0 <writeByte+0x6c>
		    break;
	    }
    }
}
    a0e4:	e000      	b.n	a0e8 <writeByte+0x94>
		    break;
    a0e6:	46c0      	nop			; (mov r8, r8)
}
    a0e8:	46c0      	nop			; (mov r8, r8)
    a0ea:	46bd      	mov	sp, r7
    a0ec:	b007      	add	sp, #28
    a0ee:	bd90      	pop	{r4, r7, pc}
    a0f0:	20000d8c 	.word	0x20000d8c
    a0f4:	20000a90 	.word	0x20000a90
    a0f8:	00003d71 	.word	0x00003d71

0000a0fc <readByte>:

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
    a0fc:	b580      	push	{r7, lr}
    a0fe:	b088      	sub	sp, #32
    a100:	af00      	add	r7, sp, #0
    a102:	0002      	movs	r2, r0
    a104:	1dfb      	adds	r3, r7, #7
    a106:	701a      	strb	r2, [r3, #0]
    a108:	1dbb      	adds	r3, r7, #6
    a10a:	1c0a      	adds	r2, r1, #0
    a10c:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
    a10e:	2300      	movs	r3, #0
    a110:	61fb      	str	r3, [r7, #28]
	uint8_t data; // `data` will store the register data	
	
	/* Init i2c packet. */
	write_buffer[0] = subAddress;
    a112:	4b29      	ldr	r3, [pc, #164]	; (a1b8 <readByte+0xbc>)
    a114:	1dba      	adds	r2, r7, #6
    a116:	7812      	ldrb	r2, [r2, #0]
    a118:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    a11a:	1dfb      	adds	r3, r7, #7
    a11c:	781b      	ldrb	r3, [r3, #0]
    a11e:	b29a      	uxth	r2, r3
    a120:	230c      	movs	r3, #12
    a122:	18fb      	adds	r3, r7, r3
    a124:	801a      	strh	r2, [r3, #0]
    a126:	230c      	movs	r3, #12
    a128:	18fb      	adds	r3, r7, r3
    a12a:	2201      	movs	r2, #1
    a12c:	805a      	strh	r2, [r3, #2]
    a12e:	230c      	movs	r3, #12
    a130:	18fb      	adds	r3, r7, r3
    a132:	4a21      	ldr	r2, [pc, #132]	; (a1b8 <readByte+0xbc>)
    a134:	605a      	str	r2, [r3, #4]
    a136:	230c      	movs	r3, #12
    a138:	18fb      	adds	r3, r7, r3
    a13a:	2200      	movs	r2, #0
    a13c:	721a      	strb	r2, [r3, #8]
    a13e:	230c      	movs	r3, #12
    a140:	18fb      	adds	r3, r7, r3
    a142:	2200      	movs	r2, #0
    a144:	725a      	strb	r2, [r3, #9]
    a146:	230c      	movs	r3, #12
    a148:	18fb      	adds	r3, r7, r3
    a14a:	2200      	movs	r2, #0
    a14c:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a14e:	e004      	b.n	a15a <readByte+0x5e>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a150:	69fb      	ldr	r3, [r7, #28]
    a152:	1c5a      	adds	r2, r3, #1
    a154:	61fa      	str	r2, [r7, #28]
    a156:	2bfa      	cmp	r3, #250	; 0xfa
    a158:	d009      	beq.n	a16e <readByte+0x72>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a15a:	230c      	movs	r3, #12
    a15c:	18fa      	adds	r2, r7, r3
    a15e:	4b17      	ldr	r3, [pc, #92]	; (a1bc <readByte+0xc0>)
    a160:	0011      	movs	r1, r2
    a162:	0018      	movs	r0, r3
    a164:	4b16      	ldr	r3, [pc, #88]	; (a1c0 <readByte+0xc4>)
    a166:	4798      	blx	r3
    a168:	1e03      	subs	r3, r0, #0
    a16a:	d1f1      	bne.n	a150 <readByte+0x54>
    a16c:	e000      	b.n	a170 <readByte+0x74>
			break;
    a16e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
    a170:	2300      	movs	r3, #0
    a172:	61fb      	str	r3, [r7, #28]
	packet.data = read_buffer;
    a174:	230c      	movs	r3, #12
    a176:	18fb      	adds	r3, r7, r3
    a178:	4a12      	ldr	r2, [pc, #72]	; (a1c4 <readByte+0xc8>)
    a17a:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a17c:	e004      	b.n	a188 <readByte+0x8c>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a17e:	69fb      	ldr	r3, [r7, #28]
    a180:	1c5a      	adds	r2, r3, #1
    a182:	61fa      	str	r2, [r7, #28]
    a184:	2bfa      	cmp	r3, #250	; 0xfa
    a186:	d009      	beq.n	a19c <readByte+0xa0>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a188:	230c      	movs	r3, #12
    a18a:	18fa      	adds	r2, r7, r3
    a18c:	4b0b      	ldr	r3, [pc, #44]	; (a1bc <readByte+0xc0>)
    a18e:	0011      	movs	r1, r2
    a190:	0018      	movs	r0, r3
    a192:	4b0d      	ldr	r3, [pc, #52]	; (a1c8 <readByte+0xcc>)
    a194:	4798      	blx	r3
    a196:	1e03      	subs	r3, r0, #0
    a198:	d1f1      	bne.n	a17e <readByte+0x82>
    a19a:	e000      	b.n	a19e <readByte+0xa2>
			break;
    a19c:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	data = read_buffer[0];                      // Fill Rx buffer with result
    a19e:	231b      	movs	r3, #27
    a1a0:	18fb      	adds	r3, r7, r3
    a1a2:	4a08      	ldr	r2, [pc, #32]	; (a1c4 <readByte+0xc8>)
    a1a4:	7812      	ldrb	r2, [r2, #0]
    a1a6:	701a      	strb	r2, [r3, #0]
	return data;                             // Return data read from slave register
    a1a8:	231b      	movs	r3, #27
    a1aa:	18fb      	adds	r3, r7, r3
    a1ac:	781b      	ldrb	r3, [r3, #0]
}
    a1ae:	0018      	movs	r0, r3
    a1b0:	46bd      	mov	sp, r7
    a1b2:	b008      	add	sp, #32
    a1b4:	bd80      	pop	{r7, pc}
    a1b6:	46c0      	nop			; (mov r8, r8)
    a1b8:	20000d8c 	.word	0x20000d8c
    a1bc:	20000a90 	.word	0x20000a90
    a1c0:	00003d71 	.word	0x00003d71
    a1c4:	20000ab8 	.word	0x20000ab8
    a1c8:	00003bb9 	.word	0x00003bb9

0000a1cc <readBytes>:

uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
    a1cc:	b590      	push	{r4, r7, lr}
    a1ce:	b089      	sub	sp, #36	; 0x24
    a1d0:	af00      	add	r7, sp, #0
    a1d2:	0004      	movs	r4, r0
    a1d4:	0008      	movs	r0, r1
    a1d6:	603a      	str	r2, [r7, #0]
    a1d8:	0019      	movs	r1, r3
    a1da:	1dfb      	adds	r3, r7, #7
    a1dc:	1c22      	adds	r2, r4, #0
    a1de:	701a      	strb	r2, [r3, #0]
    a1e0:	1dbb      	adds	r3, r7, #6
    a1e2:	1c02      	adds	r2, r0, #0
    a1e4:	701a      	strb	r2, [r3, #0]
    a1e6:	1d7b      	adds	r3, r7, #5
    a1e8:	1c0a      	adds	r2, r1, #0
    a1ea:	701a      	strb	r2, [r3, #0]
	int timeout = 0;
    a1ec:	2300      	movs	r3, #0
    a1ee:	61fb      	str	r3, [r7, #28]
	
	/* Init i2c packet. */
	write_buffer[0] = subAddress | 0x80;
    a1f0:	1dbb      	adds	r3, r7, #6
    a1f2:	781b      	ldrb	r3, [r3, #0]
    a1f4:	2280      	movs	r2, #128	; 0x80
    a1f6:	4252      	negs	r2, r2
    a1f8:	4313      	orrs	r3, r2
    a1fa:	b2da      	uxtb	r2, r3
    a1fc:	4b38      	ldr	r3, [pc, #224]	; (a2e0 <readBytes+0x114>)
    a1fe:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
    a200:	1dfb      	adds	r3, r7, #7
    a202:	781b      	ldrb	r3, [r3, #0]
    a204:	b29a      	uxth	r2, r3
    a206:	230c      	movs	r3, #12
    a208:	18fb      	adds	r3, r7, r3
    a20a:	801a      	strh	r2, [r3, #0]
    a20c:	230c      	movs	r3, #12
    a20e:	18fb      	adds	r3, r7, r3
    a210:	2201      	movs	r2, #1
    a212:	805a      	strh	r2, [r3, #2]
    a214:	230c      	movs	r3, #12
    a216:	18fb      	adds	r3, r7, r3
    a218:	4a31      	ldr	r2, [pc, #196]	; (a2e0 <readBytes+0x114>)
    a21a:	605a      	str	r2, [r3, #4]
    a21c:	230c      	movs	r3, #12
    a21e:	18fb      	adds	r3, r7, r3
    a220:	2200      	movs	r2, #0
    a222:	721a      	strb	r2, [r3, #8]
    a224:	230c      	movs	r3, #12
    a226:	18fb      	adds	r3, r7, r3
    a228:	2200      	movs	r2, #0
    a22a:	725a      	strb	r2, [r3, #9]
    a22c:	230c      	movs	r3, #12
    a22e:	18fb      	adds	r3, r7, r3
    a230:	2200      	movs	r2, #0
    a232:	729a      	strb	r2, [r3, #10]
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};

	/* Write buffer to slave until success. */
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a234:	e004      	b.n	a240 <readBytes+0x74>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a236:	69fb      	ldr	r3, [r7, #28]
    a238:	1c5a      	adds	r2, r3, #1
    a23a:	61fa      	str	r2, [r7, #28]
    a23c:	2bfa      	cmp	r3, #250	; 0xfa
    a23e:	d009      	beq.n	a254 <readBytes+0x88>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
    a240:	230c      	movs	r3, #12
    a242:	18fa      	adds	r2, r7, r3
    a244:	4b27      	ldr	r3, [pc, #156]	; (a2e4 <readBytes+0x118>)
    a246:	0011      	movs	r1, r2
    a248:	0018      	movs	r0, r3
    a24a:	4b27      	ldr	r3, [pc, #156]	; (a2e8 <readBytes+0x11c>)
    a24c:	4798      	blx	r3
    a24e:	1e03      	subs	r3, r0, #0
    a250:	d1f1      	bne.n	a236 <readBytes+0x6a>
    a252:	e000      	b.n	a256 <readBytes+0x8a>
			break;
    a254:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Read from slave until success. */
	timeout = 0;
    a256:	2300      	movs	r3, #0
    a258:	61fb      	str	r3, [r7, #28]
	packet.data_length = count;
    a25a:	1d7b      	adds	r3, r7, #5
    a25c:	781b      	ldrb	r3, [r3, #0]
    a25e:	b29a      	uxth	r2, r3
    a260:	230c      	movs	r3, #12
    a262:	18fb      	adds	r3, r7, r3
    a264:	805a      	strh	r2, [r3, #2]
	packet.data = read_buffer;
    a266:	230c      	movs	r3, #12
    a268:	18fb      	adds	r3, r7, r3
    a26a:	4a20      	ldr	r2, [pc, #128]	; (a2ec <readBytes+0x120>)
    a26c:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a26e:	e004      	b.n	a27a <readBytes+0xae>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == MASTER_TIMEOUT) {
    a270:	69fb      	ldr	r3, [r7, #28]
    a272:	1c5a      	adds	r2, r3, #1
    a274:	61fa      	str	r2, [r7, #28]
    a276:	2bfa      	cmp	r3, #250	; 0xfa
    a278:	d009      	beq.n	a28e <readBytes+0xc2>
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
    a27a:	230c      	movs	r3, #12
    a27c:	18fa      	adds	r2, r7, r3
    a27e:	4b19      	ldr	r3, [pc, #100]	; (a2e4 <readBytes+0x118>)
    a280:	0011      	movs	r1, r2
    a282:	0018      	movs	r0, r3
    a284:	4b1a      	ldr	r3, [pc, #104]	; (a2f0 <readBytes+0x124>)
    a286:	4798      	blx	r3
    a288:	1e03      	subs	r3, r0, #0
    a28a:	d1f1      	bne.n	a270 <readBytes+0xa4>
    a28c:	e000      	b.n	a290 <readBytes+0xc4>
			break;
    a28e:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	uint8_t i = 0;
    a290:	231b      	movs	r3, #27
    a292:	18fb      	adds	r3, r7, r3
    a294:	2200      	movs	r2, #0
    a296:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
    a298:	231b      	movs	r3, #27
    a29a:	18fb      	adds	r3, r7, r3
    a29c:	2200      	movs	r2, #0
    a29e:	701a      	strb	r2, [r3, #0]
    a2a0:	e011      	b.n	a2c6 <readBytes+0xfa>
	{
		dest[i] = read_buffer[i];
    a2a2:	231b      	movs	r3, #27
    a2a4:	18fb      	adds	r3, r7, r3
    a2a6:	781b      	ldrb	r3, [r3, #0]
    a2a8:	683a      	ldr	r2, [r7, #0]
    a2aa:	18d3      	adds	r3, r2, r3
    a2ac:	221b      	movs	r2, #27
    a2ae:	18ba      	adds	r2, r7, r2
    a2b0:	7812      	ldrb	r2, [r2, #0]
    a2b2:	490e      	ldr	r1, [pc, #56]	; (a2ec <readBytes+0x120>)
    a2b4:	5c8a      	ldrb	r2, [r1, r2]
    a2b6:	701a      	strb	r2, [r3, #0]
	for (i=0; i<count; i++)
    a2b8:	231b      	movs	r3, #27
    a2ba:	18fb      	adds	r3, r7, r3
    a2bc:	781a      	ldrb	r2, [r3, #0]
    a2be:	231b      	movs	r3, #27
    a2c0:	18fb      	adds	r3, r7, r3
    a2c2:	3201      	adds	r2, #1
    a2c4:	701a      	strb	r2, [r3, #0]
    a2c6:	231b      	movs	r3, #27
    a2c8:	18fa      	adds	r2, r7, r3
    a2ca:	1d7b      	adds	r3, r7, #5
    a2cc:	7812      	ldrb	r2, [r2, #0]
    a2ce:	781b      	ldrb	r3, [r3, #0]
    a2d0:	429a      	cmp	r2, r3
    a2d2:	d3e6      	bcc.n	a2a2 <readBytes+0xd6>
	}
	return count;
    a2d4:	1d7b      	adds	r3, r7, #5
    a2d6:	781b      	ldrb	r3, [r3, #0]
}
    a2d8:	0018      	movs	r0, r3
    a2da:	46bd      	mov	sp, r7
    a2dc:	b009      	add	sp, #36	; 0x24
    a2de:	bd90      	pop	{r4, r7, pc}
    a2e0:	20000d8c 	.word	0x20000d8c
    a2e4:	20000a90 	.word	0x20000a90
    a2e8:	00003d71 	.word	0x00003d71
    a2ec:	20000ab8 	.word	0x20000ab8
    a2f0:	00003bb9 	.word	0x00003bb9

0000a2f4 <CorrectIMUvalues>:

void CorrectIMUvalues(uint8_t connector_orient, uint8_t power_orient){
    a2f4:	b580      	push	{r7, lr}
    a2f6:	b082      	sub	sp, #8
    a2f8:	af00      	add	r7, sp, #0
    a2fa:	0002      	movs	r2, r0
    a2fc:	1dfb      	adds	r3, r7, #7
    a2fe:	701a      	strb	r2, [r3, #0]
    a300:	1dbb      	adds	r3, r7, #6
    a302:	1c0a      	adds	r2, r1, #0
    a304:	701a      	strb	r2, [r3, #0]
	if((connector_orient == 0 || power_orient == 0)||(connector_orient > 6 || power_orient > 6)){
    a306:	1dfb      	adds	r3, r7, #7
    a308:	781b      	ldrb	r3, [r3, #0]
    a30a:	2b00      	cmp	r3, #0
    a30c:	d00b      	beq.n	a326 <CorrectIMUvalues+0x32>
    a30e:	1dbb      	adds	r3, r7, #6
    a310:	781b      	ldrb	r3, [r3, #0]
    a312:	2b00      	cmp	r3, #0
    a314:	d007      	beq.n	a326 <CorrectIMUvalues+0x32>
    a316:	1dfb      	adds	r3, r7, #7
    a318:	781b      	ldrb	r3, [r3, #0]
    a31a:	2b06      	cmp	r3, #6
    a31c:	d803      	bhi.n	a326 <CorrectIMUvalues+0x32>
    a31e:	1dbb      	adds	r3, r7, #6
    a320:	781b      	ldrb	r3, [r3, #0]
    a322:	2b06      	cmp	r3, #6
    a324:	d92e      	bls.n	a384 <CorrectIMUvalues+0x90>
		caz = az;
    a326:	4bf3      	ldr	r3, [pc, #972]	; (a6f4 <CorrectIMUvalues+0x400>)
    a328:	2200      	movs	r2, #0
    a32a:	5e9a      	ldrsh	r2, [r3, r2]
    a32c:	4bf2      	ldr	r3, [pc, #968]	; (a6f8 <CorrectIMUvalues+0x404>)
    a32e:	801a      	strh	r2, [r3, #0]
		cgz = gz;
    a330:	4bf2      	ldr	r3, [pc, #968]	; (a6fc <CorrectIMUvalues+0x408>)
    a332:	2200      	movs	r2, #0
    a334:	5e9a      	ldrsh	r2, [r3, r2]
    a336:	4bf2      	ldr	r3, [pc, #968]	; (a700 <CorrectIMUvalues+0x40c>)
    a338:	801a      	strh	r2, [r3, #0]
		cmz = mz;
    a33a:	4bf2      	ldr	r3, [pc, #968]	; (a704 <CorrectIMUvalues+0x410>)
    a33c:	2200      	movs	r2, #0
    a33e:	5e9a      	ldrsh	r2, [r3, r2]
    a340:	4bf1      	ldr	r3, [pc, #964]	; (a708 <CorrectIMUvalues+0x414>)
    a342:	801a      	strh	r2, [r3, #0]
		cax = ax;
    a344:	4bf1      	ldr	r3, [pc, #964]	; (a70c <CorrectIMUvalues+0x418>)
    a346:	2200      	movs	r2, #0
    a348:	5e9a      	ldrsh	r2, [r3, r2]
    a34a:	4bf1      	ldr	r3, [pc, #964]	; (a710 <CorrectIMUvalues+0x41c>)
    a34c:	801a      	strh	r2, [r3, #0]
		cay = ay;
    a34e:	4bf1      	ldr	r3, [pc, #964]	; (a714 <CorrectIMUvalues+0x420>)
    a350:	2200      	movs	r2, #0
    a352:	5e9a      	ldrsh	r2, [r3, r2]
    a354:	4bf0      	ldr	r3, [pc, #960]	; (a718 <CorrectIMUvalues+0x424>)
    a356:	801a      	strh	r2, [r3, #0]
		cgx = gx;
    a358:	4bf0      	ldr	r3, [pc, #960]	; (a71c <CorrectIMUvalues+0x428>)
    a35a:	2200      	movs	r2, #0
    a35c:	5e9a      	ldrsh	r2, [r3, r2]
    a35e:	4bf0      	ldr	r3, [pc, #960]	; (a720 <CorrectIMUvalues+0x42c>)
    a360:	801a      	strh	r2, [r3, #0]
		cgy = gy;
    a362:	4bf0      	ldr	r3, [pc, #960]	; (a724 <CorrectIMUvalues+0x430>)
    a364:	2200      	movs	r2, #0
    a366:	5e9a      	ldrsh	r2, [r3, r2]
    a368:	4bef      	ldr	r3, [pc, #956]	; (a728 <CorrectIMUvalues+0x434>)
    a36a:	801a      	strh	r2, [r3, #0]
		cmx = mx;
    a36c:	4bef      	ldr	r3, [pc, #956]	; (a72c <CorrectIMUvalues+0x438>)
    a36e:	2200      	movs	r2, #0
    a370:	5e9a      	ldrsh	r2, [r3, r2]
    a372:	4bef      	ldr	r3, [pc, #956]	; (a730 <CorrectIMUvalues+0x43c>)
    a374:	801a      	strh	r2, [r3, #0]
		cmy = my;
    a376:	4bef      	ldr	r3, [pc, #956]	; (a734 <CorrectIMUvalues+0x440>)
    a378:	2200      	movs	r2, #0
    a37a:	5e9a      	ldrsh	r2, [r3, r2]
    a37c:	4bee      	ldr	r3, [pc, #952]	; (a738 <CorrectIMUvalues+0x444>)
    a37e:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
			cmx = mz;
			cmy = mx;
		}
	}
}
    a380:	f000 fd5a 	bl	ae38 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_UP){ // Connectors Up
    a384:	1dfb      	adds	r3, r7, #7
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	2b01      	cmp	r3, #1
    a38a:	d000      	beq.n	a38e <CorrectIMUvalues+0x9a>
    a38c:	e0d0      	b.n	a530 <CorrectIMUvalues+0x23c>
		caz = az;
    a38e:	4bd9      	ldr	r3, [pc, #868]	; (a6f4 <CorrectIMUvalues+0x400>)
    a390:	2200      	movs	r2, #0
    a392:	5e9a      	ldrsh	r2, [r3, r2]
    a394:	4bd8      	ldr	r3, [pc, #864]	; (a6f8 <CorrectIMUvalues+0x404>)
    a396:	801a      	strh	r2, [r3, #0]
		cgz = gz;
    a398:	4bd8      	ldr	r3, [pc, #864]	; (a6fc <CorrectIMUvalues+0x408>)
    a39a:	2200      	movs	r2, #0
    a39c:	5e9a      	ldrsh	r2, [r3, r2]
    a39e:	4bd8      	ldr	r3, [pc, #864]	; (a700 <CorrectIMUvalues+0x40c>)
    a3a0:	801a      	strh	r2, [r3, #0]
		cmz = mz;
    a3a2:	4bd8      	ldr	r3, [pc, #864]	; (a704 <CorrectIMUvalues+0x410>)
    a3a4:	2200      	movs	r2, #0
    a3a6:	5e9a      	ldrsh	r2, [r3, r2]
    a3a8:	4bd7      	ldr	r3, [pc, #860]	; (a708 <CorrectIMUvalues+0x414>)
    a3aa:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
    a3ac:	1dbb      	adds	r3, r7, #6
    a3ae:	781b      	ldrb	r3, [r3, #0]
    a3b0:	2b03      	cmp	r3, #3
    a3b2:	d12b      	bne.n	a40c <CorrectIMUvalues+0x118>
			cax = -ay;
    a3b4:	4bd7      	ldr	r3, [pc, #860]	; (a714 <CorrectIMUvalues+0x420>)
    a3b6:	2200      	movs	r2, #0
    a3b8:	5e9b      	ldrsh	r3, [r3, r2]
    a3ba:	b29b      	uxth	r3, r3
    a3bc:	425b      	negs	r3, r3
    a3be:	b29b      	uxth	r3, r3
    a3c0:	b21a      	sxth	r2, r3
    a3c2:	4bd3      	ldr	r3, [pc, #844]	; (a710 <CorrectIMUvalues+0x41c>)
    a3c4:	801a      	strh	r2, [r3, #0]
			cay = ax;
    a3c6:	4bd1      	ldr	r3, [pc, #836]	; (a70c <CorrectIMUvalues+0x418>)
    a3c8:	2200      	movs	r2, #0
    a3ca:	5e9a      	ldrsh	r2, [r3, r2]
    a3cc:	4bd2      	ldr	r3, [pc, #840]	; (a718 <CorrectIMUvalues+0x424>)
    a3ce:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    a3d0:	4bd4      	ldr	r3, [pc, #848]	; (a724 <CorrectIMUvalues+0x430>)
    a3d2:	2200      	movs	r2, #0
    a3d4:	5e9b      	ldrsh	r3, [r3, r2]
    a3d6:	b29b      	uxth	r3, r3
    a3d8:	425b      	negs	r3, r3
    a3da:	b29b      	uxth	r3, r3
    a3dc:	b21a      	sxth	r2, r3
    a3de:	4bd0      	ldr	r3, [pc, #832]	; (a720 <CorrectIMUvalues+0x42c>)
    a3e0:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    a3e2:	4bce      	ldr	r3, [pc, #824]	; (a71c <CorrectIMUvalues+0x428>)
    a3e4:	2200      	movs	r2, #0
    a3e6:	5e9a      	ldrsh	r2, [r3, r2]
    a3e8:	4bcf      	ldr	r3, [pc, #828]	; (a728 <CorrectIMUvalues+0x434>)
    a3ea:	801a      	strh	r2, [r3, #0]
			cmx = my;
    a3ec:	4bd1      	ldr	r3, [pc, #836]	; (a734 <CorrectIMUvalues+0x440>)
    a3ee:	2200      	movs	r2, #0
    a3f0:	5e9a      	ldrsh	r2, [r3, r2]
    a3f2:	4bcf      	ldr	r3, [pc, #828]	; (a730 <CorrectIMUvalues+0x43c>)
    a3f4:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    a3f6:	4bcd      	ldr	r3, [pc, #820]	; (a72c <CorrectIMUvalues+0x438>)
    a3f8:	2200      	movs	r2, #0
    a3fa:	5e9b      	ldrsh	r3, [r3, r2]
    a3fc:	b29b      	uxth	r3, r3
    a3fe:	425b      	negs	r3, r3
    a400:	b29b      	uxth	r3, r3
    a402:	b21a      	sxth	r2, r3
    a404:	4bcc      	ldr	r3, [pc, #816]	; (a738 <CorrectIMUvalues+0x444>)
    a406:	801a      	strh	r2, [r3, #0]
}
    a408:	f000 fd16 	bl	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    a40c:	1dbb      	adds	r3, r7, #6
    a40e:	781b      	ldrb	r3, [r3, #0]
    a410:	2b04      	cmp	r3, #4
    a412:	d12b      	bne.n	a46c <CorrectIMUvalues+0x178>
			cax = ay;
    a414:	4bbf      	ldr	r3, [pc, #764]	; (a714 <CorrectIMUvalues+0x420>)
    a416:	2200      	movs	r2, #0
    a418:	5e9a      	ldrsh	r2, [r3, r2]
    a41a:	4bbd      	ldr	r3, [pc, #756]	; (a710 <CorrectIMUvalues+0x41c>)
    a41c:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    a41e:	4bbb      	ldr	r3, [pc, #748]	; (a70c <CorrectIMUvalues+0x418>)
    a420:	2200      	movs	r2, #0
    a422:	5e9b      	ldrsh	r3, [r3, r2]
    a424:	b29b      	uxth	r3, r3
    a426:	425b      	negs	r3, r3
    a428:	b29b      	uxth	r3, r3
    a42a:	b21a      	sxth	r2, r3
    a42c:	4bba      	ldr	r3, [pc, #744]	; (a718 <CorrectIMUvalues+0x424>)
    a42e:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a430:	4bbc      	ldr	r3, [pc, #752]	; (a724 <CorrectIMUvalues+0x430>)
    a432:	2200      	movs	r2, #0
    a434:	5e9a      	ldrsh	r2, [r3, r2]
    a436:	4bba      	ldr	r3, [pc, #744]	; (a720 <CorrectIMUvalues+0x42c>)
    a438:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    a43a:	4bb8      	ldr	r3, [pc, #736]	; (a71c <CorrectIMUvalues+0x428>)
    a43c:	2200      	movs	r2, #0
    a43e:	5e9b      	ldrsh	r3, [r3, r2]
    a440:	b29b      	uxth	r3, r3
    a442:	425b      	negs	r3, r3
    a444:	b29b      	uxth	r3, r3
    a446:	b21a      	sxth	r2, r3
    a448:	4bb7      	ldr	r3, [pc, #732]	; (a728 <CorrectIMUvalues+0x434>)
    a44a:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a44c:	4bb9      	ldr	r3, [pc, #740]	; (a734 <CorrectIMUvalues+0x440>)
    a44e:	2200      	movs	r2, #0
    a450:	5e9b      	ldrsh	r3, [r3, r2]
    a452:	b29b      	uxth	r3, r3
    a454:	425b      	negs	r3, r3
    a456:	b29b      	uxth	r3, r3
    a458:	b21a      	sxth	r2, r3
    a45a:	4bb5      	ldr	r3, [pc, #724]	; (a730 <CorrectIMUvalues+0x43c>)
    a45c:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    a45e:	4bb3      	ldr	r3, [pc, #716]	; (a72c <CorrectIMUvalues+0x438>)
    a460:	2200      	movs	r2, #0
    a462:	5e9a      	ldrsh	r2, [r3, r2]
    a464:	4bb4      	ldr	r3, [pc, #720]	; (a738 <CorrectIMUvalues+0x444>)
    a466:	801a      	strh	r2, [r3, #0]
}
    a468:	f000 fce6 	bl	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    a46c:	1dbb      	adds	r3, r7, #6
    a46e:	781b      	ldrb	r3, [r3, #0]
    a470:	2b05      	cmp	r3, #5
    a472:	d137      	bne.n	a4e4 <CorrectIMUvalues+0x1f0>
			cax = -ax;
    a474:	4ba5      	ldr	r3, [pc, #660]	; (a70c <CorrectIMUvalues+0x418>)
    a476:	2200      	movs	r2, #0
    a478:	5e9b      	ldrsh	r3, [r3, r2]
    a47a:	b29b      	uxth	r3, r3
    a47c:	425b      	negs	r3, r3
    a47e:	b29b      	uxth	r3, r3
    a480:	b21a      	sxth	r2, r3
    a482:	4ba3      	ldr	r3, [pc, #652]	; (a710 <CorrectIMUvalues+0x41c>)
    a484:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    a486:	4ba3      	ldr	r3, [pc, #652]	; (a714 <CorrectIMUvalues+0x420>)
    a488:	2200      	movs	r2, #0
    a48a:	5e9b      	ldrsh	r3, [r3, r2]
    a48c:	b29b      	uxth	r3, r3
    a48e:	425b      	negs	r3, r3
    a490:	b29b      	uxth	r3, r3
    a492:	b21a      	sxth	r2, r3
    a494:	4ba0      	ldr	r3, [pc, #640]	; (a718 <CorrectIMUvalues+0x424>)
    a496:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    a498:	4ba0      	ldr	r3, [pc, #640]	; (a71c <CorrectIMUvalues+0x428>)
    a49a:	2200      	movs	r2, #0
    a49c:	5e9b      	ldrsh	r3, [r3, r2]
    a49e:	b29b      	uxth	r3, r3
    a4a0:	425b      	negs	r3, r3
    a4a2:	b29b      	uxth	r3, r3
    a4a4:	b21a      	sxth	r2, r3
    a4a6:	4b9e      	ldr	r3, [pc, #632]	; (a720 <CorrectIMUvalues+0x42c>)
    a4a8:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    a4aa:	4b9e      	ldr	r3, [pc, #632]	; (a724 <CorrectIMUvalues+0x430>)
    a4ac:	2200      	movs	r2, #0
    a4ae:	5e9b      	ldrsh	r3, [r3, r2]
    a4b0:	b29b      	uxth	r3, r3
    a4b2:	425b      	negs	r3, r3
    a4b4:	b29b      	uxth	r3, r3
    a4b6:	b21a      	sxth	r2, r3
    a4b8:	4b9b      	ldr	r3, [pc, #620]	; (a728 <CorrectIMUvalues+0x434>)
    a4ba:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    a4bc:	4b9b      	ldr	r3, [pc, #620]	; (a72c <CorrectIMUvalues+0x438>)
    a4be:	2200      	movs	r2, #0
    a4c0:	5e9b      	ldrsh	r3, [r3, r2]
    a4c2:	b29b      	uxth	r3, r3
    a4c4:	425b      	negs	r3, r3
    a4c6:	b29b      	uxth	r3, r3
    a4c8:	b21a      	sxth	r2, r3
    a4ca:	4b99      	ldr	r3, [pc, #612]	; (a730 <CorrectIMUvalues+0x43c>)
    a4cc:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    a4ce:	4b99      	ldr	r3, [pc, #612]	; (a734 <CorrectIMUvalues+0x440>)
    a4d0:	2200      	movs	r2, #0
    a4d2:	5e9b      	ldrsh	r3, [r3, r2]
    a4d4:	b29b      	uxth	r3, r3
    a4d6:	425b      	negs	r3, r3
    a4d8:	b29b      	uxth	r3, r3
    a4da:	b21a      	sxth	r2, r3
    a4dc:	4b96      	ldr	r3, [pc, #600]	; (a738 <CorrectIMUvalues+0x444>)
    a4de:	801a      	strh	r2, [r3, #0]
}
    a4e0:	f000 fcaa 	bl	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    a4e4:	1dbb      	adds	r3, r7, #6
    a4e6:	781b      	ldrb	r3, [r3, #0]
    a4e8:	2b06      	cmp	r3, #6
    a4ea:	d001      	beq.n	a4f0 <CorrectIMUvalues+0x1fc>
    a4ec:	f000 fca4 	bl	ae38 <CorrectIMUvalues+0xb44>
			cax = ax;
    a4f0:	4b86      	ldr	r3, [pc, #536]	; (a70c <CorrectIMUvalues+0x418>)
    a4f2:	2200      	movs	r2, #0
    a4f4:	5e9a      	ldrsh	r2, [r3, r2]
    a4f6:	4b86      	ldr	r3, [pc, #536]	; (a710 <CorrectIMUvalues+0x41c>)
    a4f8:	801a      	strh	r2, [r3, #0]
			cay = ay;
    a4fa:	4b86      	ldr	r3, [pc, #536]	; (a714 <CorrectIMUvalues+0x420>)
    a4fc:	2200      	movs	r2, #0
    a4fe:	5e9a      	ldrsh	r2, [r3, r2]
    a500:	4b85      	ldr	r3, [pc, #532]	; (a718 <CorrectIMUvalues+0x424>)
    a502:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    a504:	4b85      	ldr	r3, [pc, #532]	; (a71c <CorrectIMUvalues+0x428>)
    a506:	2200      	movs	r2, #0
    a508:	5e9a      	ldrsh	r2, [r3, r2]
    a50a:	4b85      	ldr	r3, [pc, #532]	; (a720 <CorrectIMUvalues+0x42c>)
    a50c:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    a50e:	4b85      	ldr	r3, [pc, #532]	; (a724 <CorrectIMUvalues+0x430>)
    a510:	2200      	movs	r2, #0
    a512:	5e9a      	ldrsh	r2, [r3, r2]
    a514:	4b84      	ldr	r3, [pc, #528]	; (a728 <CorrectIMUvalues+0x434>)
    a516:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    a518:	4b84      	ldr	r3, [pc, #528]	; (a72c <CorrectIMUvalues+0x438>)
    a51a:	2200      	movs	r2, #0
    a51c:	5e9a      	ldrsh	r2, [r3, r2]
    a51e:	4b84      	ldr	r3, [pc, #528]	; (a730 <CorrectIMUvalues+0x43c>)
    a520:	801a      	strh	r2, [r3, #0]
			cmy = my;
    a522:	4b84      	ldr	r3, [pc, #528]	; (a734 <CorrectIMUvalues+0x440>)
    a524:	2200      	movs	r2, #0
    a526:	5e9a      	ldrsh	r2, [r3, r2]
    a528:	4b83      	ldr	r3, [pc, #524]	; (a738 <CorrectIMUvalues+0x444>)
    a52a:	801a      	strh	r2, [r3, #0]
}
    a52c:	f000 fc84 	bl	ae38 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_DOWN){ // Connectors Down
    a530:	1dfb      	adds	r3, r7, #7
    a532:	781b      	ldrb	r3, [r3, #0]
    a534:	2b02      	cmp	r3, #2
    a536:	d000      	beq.n	a53a <CorrectIMUvalues+0x246>
    a538:	e100      	b.n	a73c <CorrectIMUvalues+0x448>
		caz = -az;
    a53a:	4b6e      	ldr	r3, [pc, #440]	; (a6f4 <CorrectIMUvalues+0x400>)
    a53c:	2200      	movs	r2, #0
    a53e:	5e9b      	ldrsh	r3, [r3, r2]
    a540:	b29b      	uxth	r3, r3
    a542:	425b      	negs	r3, r3
    a544:	b29b      	uxth	r3, r3
    a546:	b21a      	sxth	r2, r3
    a548:	4b6b      	ldr	r3, [pc, #428]	; (a6f8 <CorrectIMUvalues+0x404>)
    a54a:	801a      	strh	r2, [r3, #0]
		cgz = -gz;
    a54c:	4b6b      	ldr	r3, [pc, #428]	; (a6fc <CorrectIMUvalues+0x408>)
    a54e:	2200      	movs	r2, #0
    a550:	5e9b      	ldrsh	r3, [r3, r2]
    a552:	b29b      	uxth	r3, r3
    a554:	425b      	negs	r3, r3
    a556:	b29b      	uxth	r3, r3
    a558:	b21a      	sxth	r2, r3
    a55a:	4b69      	ldr	r3, [pc, #420]	; (a700 <CorrectIMUvalues+0x40c>)
    a55c:	801a      	strh	r2, [r3, #0]
		cmz = -mz;
    a55e:	4b69      	ldr	r3, [pc, #420]	; (a704 <CorrectIMUvalues+0x410>)
    a560:	2200      	movs	r2, #0
    a562:	5e9b      	ldrsh	r3, [r3, r2]
    a564:	b29b      	uxth	r3, r3
    a566:	425b      	negs	r3, r3
    a568:	b29b      	uxth	r3, r3
    a56a:	b21a      	sxth	r2, r3
    a56c:	4b66      	ldr	r3, [pc, #408]	; (a708 <CorrectIMUvalues+0x414>)
    a56e:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_LEFT){ // Power Left
    a570:	1dbb      	adds	r3, r7, #6
    a572:	781b      	ldrb	r3, [r3, #0]
    a574:	2b03      	cmp	r3, #3
    a576:	d127      	bne.n	a5c8 <CorrectIMUvalues+0x2d4>
			cax = ay;
    a578:	4b66      	ldr	r3, [pc, #408]	; (a714 <CorrectIMUvalues+0x420>)
    a57a:	2200      	movs	r2, #0
    a57c:	5e9a      	ldrsh	r2, [r3, r2]
    a57e:	4b64      	ldr	r3, [pc, #400]	; (a710 <CorrectIMUvalues+0x41c>)
    a580:	801a      	strh	r2, [r3, #0]
			cay = ax;
    a582:	4b62      	ldr	r3, [pc, #392]	; (a70c <CorrectIMUvalues+0x418>)
    a584:	2200      	movs	r2, #0
    a586:	5e9a      	ldrsh	r2, [r3, r2]
    a588:	4b63      	ldr	r3, [pc, #396]	; (a718 <CorrectIMUvalues+0x424>)
    a58a:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a58c:	4b65      	ldr	r3, [pc, #404]	; (a724 <CorrectIMUvalues+0x430>)
    a58e:	2200      	movs	r2, #0
    a590:	5e9a      	ldrsh	r2, [r3, r2]
    a592:	4b63      	ldr	r3, [pc, #396]	; (a720 <CorrectIMUvalues+0x42c>)
    a594:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    a596:	4b61      	ldr	r3, [pc, #388]	; (a71c <CorrectIMUvalues+0x428>)
    a598:	2200      	movs	r2, #0
    a59a:	5e9a      	ldrsh	r2, [r3, r2]
    a59c:	4b62      	ldr	r3, [pc, #392]	; (a728 <CorrectIMUvalues+0x434>)
    a59e:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a5a0:	4b64      	ldr	r3, [pc, #400]	; (a734 <CorrectIMUvalues+0x440>)
    a5a2:	2200      	movs	r2, #0
    a5a4:	5e9b      	ldrsh	r3, [r3, r2]
    a5a6:	b29b      	uxth	r3, r3
    a5a8:	425b      	negs	r3, r3
    a5aa:	b29b      	uxth	r3, r3
    a5ac:	b21a      	sxth	r2, r3
    a5ae:	4b60      	ldr	r3, [pc, #384]	; (a730 <CorrectIMUvalues+0x43c>)
    a5b0:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    a5b2:	4b5e      	ldr	r3, [pc, #376]	; (a72c <CorrectIMUvalues+0x438>)
    a5b4:	2200      	movs	r2, #0
    a5b6:	5e9b      	ldrsh	r3, [r3, r2]
    a5b8:	b29b      	uxth	r3, r3
    a5ba:	425b      	negs	r3, r3
    a5bc:	b29b      	uxth	r3, r3
    a5be:	b21a      	sxth	r2, r3
    a5c0:	4b5d      	ldr	r3, [pc, #372]	; (a738 <CorrectIMUvalues+0x444>)
    a5c2:	801a      	strh	r2, [r3, #0]
}
    a5c4:	f000 fc38 	bl	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    a5c8:	1dbb      	adds	r3, r7, #6
    a5ca:	781b      	ldrb	r3, [r3, #0]
    a5cc:	2b04      	cmp	r3, #4
    a5ce:	d12f      	bne.n	a630 <CorrectIMUvalues+0x33c>
			cax = -ay;
    a5d0:	4b50      	ldr	r3, [pc, #320]	; (a714 <CorrectIMUvalues+0x420>)
    a5d2:	2200      	movs	r2, #0
    a5d4:	5e9b      	ldrsh	r3, [r3, r2]
    a5d6:	b29b      	uxth	r3, r3
    a5d8:	425b      	negs	r3, r3
    a5da:	b29b      	uxth	r3, r3
    a5dc:	b21a      	sxth	r2, r3
    a5de:	4b4c      	ldr	r3, [pc, #304]	; (a710 <CorrectIMUvalues+0x41c>)
    a5e0:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    a5e2:	4b4a      	ldr	r3, [pc, #296]	; (a70c <CorrectIMUvalues+0x418>)
    a5e4:	2200      	movs	r2, #0
    a5e6:	5e9b      	ldrsh	r3, [r3, r2]
    a5e8:	b29b      	uxth	r3, r3
    a5ea:	425b      	negs	r3, r3
    a5ec:	b29b      	uxth	r3, r3
    a5ee:	b21a      	sxth	r2, r3
    a5f0:	4b49      	ldr	r3, [pc, #292]	; (a718 <CorrectIMUvalues+0x424>)
    a5f2:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    a5f4:	4b4b      	ldr	r3, [pc, #300]	; (a724 <CorrectIMUvalues+0x430>)
    a5f6:	2200      	movs	r2, #0
    a5f8:	5e9b      	ldrsh	r3, [r3, r2]
    a5fa:	b29b      	uxth	r3, r3
    a5fc:	425b      	negs	r3, r3
    a5fe:	b29b      	uxth	r3, r3
    a600:	b21a      	sxth	r2, r3
    a602:	4b47      	ldr	r3, [pc, #284]	; (a720 <CorrectIMUvalues+0x42c>)
    a604:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    a606:	4b45      	ldr	r3, [pc, #276]	; (a71c <CorrectIMUvalues+0x428>)
    a608:	2200      	movs	r2, #0
    a60a:	5e9b      	ldrsh	r3, [r3, r2]
    a60c:	b29b      	uxth	r3, r3
    a60e:	425b      	negs	r3, r3
    a610:	b29b      	uxth	r3, r3
    a612:	b21a      	sxth	r2, r3
    a614:	4b44      	ldr	r3, [pc, #272]	; (a728 <CorrectIMUvalues+0x434>)
    a616:	801a      	strh	r2, [r3, #0]
			cmx = my;
    a618:	4b46      	ldr	r3, [pc, #280]	; (a734 <CorrectIMUvalues+0x440>)
    a61a:	2200      	movs	r2, #0
    a61c:	5e9a      	ldrsh	r2, [r3, r2]
    a61e:	4b44      	ldr	r3, [pc, #272]	; (a730 <CorrectIMUvalues+0x43c>)
    a620:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    a622:	4b42      	ldr	r3, [pc, #264]	; (a72c <CorrectIMUvalues+0x438>)
    a624:	2200      	movs	r2, #0
    a626:	5e9a      	ldrsh	r2, [r3, r2]
    a628:	4b43      	ldr	r3, [pc, #268]	; (a738 <CorrectIMUvalues+0x444>)
    a62a:	801a      	strh	r2, [r3, #0]
}
    a62c:	f000 fc04 	bl	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    a630:	1dbb      	adds	r3, r7, #6
    a632:	781b      	ldrb	r3, [r3, #0]
    a634:	2b05      	cmp	r3, #5
    a636:	d12b      	bne.n	a690 <CorrectIMUvalues+0x39c>
			cax = ax;
    a638:	4b34      	ldr	r3, [pc, #208]	; (a70c <CorrectIMUvalues+0x418>)
    a63a:	2200      	movs	r2, #0
    a63c:	5e9a      	ldrsh	r2, [r3, r2]
    a63e:	4b34      	ldr	r3, [pc, #208]	; (a710 <CorrectIMUvalues+0x41c>)
    a640:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    a642:	4b34      	ldr	r3, [pc, #208]	; (a714 <CorrectIMUvalues+0x420>)
    a644:	2200      	movs	r2, #0
    a646:	5e9b      	ldrsh	r3, [r3, r2]
    a648:	b29b      	uxth	r3, r3
    a64a:	425b      	negs	r3, r3
    a64c:	b29b      	uxth	r3, r3
    a64e:	b21a      	sxth	r2, r3
    a650:	4b31      	ldr	r3, [pc, #196]	; (a718 <CorrectIMUvalues+0x424>)
    a652:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    a654:	4b31      	ldr	r3, [pc, #196]	; (a71c <CorrectIMUvalues+0x428>)
    a656:	2200      	movs	r2, #0
    a658:	5e9a      	ldrsh	r2, [r3, r2]
    a65a:	4b31      	ldr	r3, [pc, #196]	; (a720 <CorrectIMUvalues+0x42c>)
    a65c:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    a65e:	4b31      	ldr	r3, [pc, #196]	; (a724 <CorrectIMUvalues+0x430>)
    a660:	2200      	movs	r2, #0
    a662:	5e9b      	ldrsh	r3, [r3, r2]
    a664:	b29b      	uxth	r3, r3
    a666:	425b      	negs	r3, r3
    a668:	b29b      	uxth	r3, r3
    a66a:	b21a      	sxth	r2, r3
    a66c:	4b2e      	ldr	r3, [pc, #184]	; (a728 <CorrectIMUvalues+0x434>)
    a66e:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    a670:	4b2e      	ldr	r3, [pc, #184]	; (a72c <CorrectIMUvalues+0x438>)
    a672:	2200      	movs	r2, #0
    a674:	5e9a      	ldrsh	r2, [r3, r2]
    a676:	4b2e      	ldr	r3, [pc, #184]	; (a730 <CorrectIMUvalues+0x43c>)
    a678:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    a67a:	4b2e      	ldr	r3, [pc, #184]	; (a734 <CorrectIMUvalues+0x440>)
    a67c:	2200      	movs	r2, #0
    a67e:	5e9b      	ldrsh	r3, [r3, r2]
    a680:	b29b      	uxth	r3, r3
    a682:	425b      	negs	r3, r3
    a684:	b29b      	uxth	r3, r3
    a686:	b21a      	sxth	r2, r3
    a688:	4b2b      	ldr	r3, [pc, #172]	; (a738 <CorrectIMUvalues+0x444>)
    a68a:	801a      	strh	r2, [r3, #0]
}
    a68c:	f000 fbd4 	bl	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    a690:	1dbb      	adds	r3, r7, #6
    a692:	781b      	ldrb	r3, [r3, #0]
    a694:	2b06      	cmp	r3, #6
    a696:	d001      	beq.n	a69c <CorrectIMUvalues+0x3a8>
    a698:	f000 fbce 	bl	ae38 <CorrectIMUvalues+0xb44>
			cax = -ax;
    a69c:	4b1b      	ldr	r3, [pc, #108]	; (a70c <CorrectIMUvalues+0x418>)
    a69e:	2200      	movs	r2, #0
    a6a0:	5e9b      	ldrsh	r3, [r3, r2]
    a6a2:	b29b      	uxth	r3, r3
    a6a4:	425b      	negs	r3, r3
    a6a6:	b29b      	uxth	r3, r3
    a6a8:	b21a      	sxth	r2, r3
    a6aa:	4b19      	ldr	r3, [pc, #100]	; (a710 <CorrectIMUvalues+0x41c>)
    a6ac:	801a      	strh	r2, [r3, #0]
			cay = ay;
    a6ae:	4b19      	ldr	r3, [pc, #100]	; (a714 <CorrectIMUvalues+0x420>)
    a6b0:	2200      	movs	r2, #0
    a6b2:	5e9a      	ldrsh	r2, [r3, r2]
    a6b4:	4b18      	ldr	r3, [pc, #96]	; (a718 <CorrectIMUvalues+0x424>)
    a6b6:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    a6b8:	4b18      	ldr	r3, [pc, #96]	; (a71c <CorrectIMUvalues+0x428>)
    a6ba:	2200      	movs	r2, #0
    a6bc:	5e9b      	ldrsh	r3, [r3, r2]
    a6be:	b29b      	uxth	r3, r3
    a6c0:	425b      	negs	r3, r3
    a6c2:	b29b      	uxth	r3, r3
    a6c4:	b21a      	sxth	r2, r3
    a6c6:	4b16      	ldr	r3, [pc, #88]	; (a720 <CorrectIMUvalues+0x42c>)
    a6c8:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    a6ca:	4b16      	ldr	r3, [pc, #88]	; (a724 <CorrectIMUvalues+0x430>)
    a6cc:	2200      	movs	r2, #0
    a6ce:	5e9a      	ldrsh	r2, [r3, r2]
    a6d0:	4b15      	ldr	r3, [pc, #84]	; (a728 <CorrectIMUvalues+0x434>)
    a6d2:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    a6d4:	4b15      	ldr	r3, [pc, #84]	; (a72c <CorrectIMUvalues+0x438>)
    a6d6:	2200      	movs	r2, #0
    a6d8:	5e9b      	ldrsh	r3, [r3, r2]
    a6da:	b29b      	uxth	r3, r3
    a6dc:	425b      	negs	r3, r3
    a6de:	b29b      	uxth	r3, r3
    a6e0:	b21a      	sxth	r2, r3
    a6e2:	4b13      	ldr	r3, [pc, #76]	; (a730 <CorrectIMUvalues+0x43c>)
    a6e4:	801a      	strh	r2, [r3, #0]
			cmy = my;
    a6e6:	4b13      	ldr	r3, [pc, #76]	; (a734 <CorrectIMUvalues+0x440>)
    a6e8:	2200      	movs	r2, #0
    a6ea:	5e9a      	ldrsh	r2, [r3, r2]
    a6ec:	4b12      	ldr	r3, [pc, #72]	; (a738 <CorrectIMUvalues+0x444>)
    a6ee:	801a      	strh	r2, [r3, #0]
}
    a6f0:	e3a2      	b.n	ae38 <CorrectIMUvalues+0xb44>
    a6f2:	46c0      	nop			; (mov r8, r8)
    a6f4:	200002ee 	.word	0x200002ee
    a6f8:	20000300 	.word	0x20000300
    a6fc:	200002e8 	.word	0x200002e8
    a700:	200002fa 	.word	0x200002fa
    a704:	200002f4 	.word	0x200002f4
    a708:	20000306 	.word	0x20000306
    a70c:	200002ea 	.word	0x200002ea
    a710:	200002fc 	.word	0x200002fc
    a714:	200002ec 	.word	0x200002ec
    a718:	200002fe 	.word	0x200002fe
    a71c:	200002e4 	.word	0x200002e4
    a720:	200002f6 	.word	0x200002f6
    a724:	200002e6 	.word	0x200002e6
    a728:	200002f8 	.word	0x200002f8
    a72c:	200002f0 	.word	0x200002f0
    a730:	20000302 	.word	0x20000302
    a734:	200002f2 	.word	0x200002f2
    a738:	20000304 	.word	0x20000304
	} else if(connector_orient == ORIENT_LEFT){ // Connectors Left
    a73c:	1dfb      	adds	r3, r7, #7
    a73e:	781b      	ldrb	r3, [r3, #0]
    a740:	2b03      	cmp	r3, #3
    a742:	d000      	beq.n	a746 <CorrectIMUvalues+0x452>
    a744:	e0cf      	b.n	a8e6 <CorrectIMUvalues+0x5f2>
		caz = ax;
    a746:	4bd4      	ldr	r3, [pc, #848]	; (aa98 <CorrectIMUvalues+0x7a4>)
    a748:	2200      	movs	r2, #0
    a74a:	5e9a      	ldrsh	r2, [r3, r2]
    a74c:	4bd3      	ldr	r3, [pc, #844]	; (aa9c <CorrectIMUvalues+0x7a8>)
    a74e:	801a      	strh	r2, [r3, #0]
		cgz = gx;
    a750:	4bd3      	ldr	r3, [pc, #844]	; (aaa0 <CorrectIMUvalues+0x7ac>)
    a752:	2200      	movs	r2, #0
    a754:	5e9a      	ldrsh	r2, [r3, r2]
    a756:	4bd3      	ldr	r3, [pc, #844]	; (aaa4 <CorrectIMUvalues+0x7b0>)
    a758:	801a      	strh	r2, [r3, #0]
		cmz = -mx;
    a75a:	4bd3      	ldr	r3, [pc, #844]	; (aaa8 <CorrectIMUvalues+0x7b4>)
    a75c:	2200      	movs	r2, #0
    a75e:	5e9b      	ldrsh	r3, [r3, r2]
    a760:	b29b      	uxth	r3, r3
    a762:	425b      	negs	r3, r3
    a764:	b29b      	uxth	r3, r3
    a766:	b21a      	sxth	r2, r3
    a768:	4bd0      	ldr	r3, [pc, #832]	; (aaac <CorrectIMUvalues+0x7b8>)
    a76a:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    a76c:	1dbb      	adds	r3, r7, #6
    a76e:	781b      	ldrb	r3, [r3, #0]
    a770:	2b01      	cmp	r3, #1
    a772:	d122      	bne.n	a7ba <CorrectIMUvalues+0x4c6>
			cax = ay;
    a774:	4bce      	ldr	r3, [pc, #824]	; (aab0 <CorrectIMUvalues+0x7bc>)
    a776:	2200      	movs	r2, #0
    a778:	5e9a      	ldrsh	r2, [r3, r2]
    a77a:	4bce      	ldr	r3, [pc, #824]	; (aab4 <CorrectIMUvalues+0x7c0>)
    a77c:	801a      	strh	r2, [r3, #0]
			cay = az;
    a77e:	4bce      	ldr	r3, [pc, #824]	; (aab8 <CorrectIMUvalues+0x7c4>)
    a780:	2200      	movs	r2, #0
    a782:	5e9a      	ldrsh	r2, [r3, r2]
    a784:	4bcd      	ldr	r3, [pc, #820]	; (aabc <CorrectIMUvalues+0x7c8>)
    a786:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a788:	4bcd      	ldr	r3, [pc, #820]	; (aac0 <CorrectIMUvalues+0x7cc>)
    a78a:	2200      	movs	r2, #0
    a78c:	5e9a      	ldrsh	r2, [r3, r2]
    a78e:	4bcd      	ldr	r3, [pc, #820]	; (aac4 <CorrectIMUvalues+0x7d0>)
    a790:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    a792:	4bcd      	ldr	r3, [pc, #820]	; (aac8 <CorrectIMUvalues+0x7d4>)
    a794:	2200      	movs	r2, #0
    a796:	5e9a      	ldrsh	r2, [r3, r2]
    a798:	4bcc      	ldr	r3, [pc, #816]	; (aacc <CorrectIMUvalues+0x7d8>)
    a79a:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a79c:	4bcc      	ldr	r3, [pc, #816]	; (aad0 <CorrectIMUvalues+0x7dc>)
    a79e:	2200      	movs	r2, #0
    a7a0:	5e9b      	ldrsh	r3, [r3, r2]
    a7a2:	b29b      	uxth	r3, r3
    a7a4:	425b      	negs	r3, r3
    a7a6:	b29b      	uxth	r3, r3
    a7a8:	b21a      	sxth	r2, r3
    a7aa:	4bca      	ldr	r3, [pc, #808]	; (aad4 <CorrectIMUvalues+0x7e0>)
    a7ac:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    a7ae:	4bca      	ldr	r3, [pc, #808]	; (aad8 <CorrectIMUvalues+0x7e4>)
    a7b0:	2200      	movs	r2, #0
    a7b2:	5e9a      	ldrsh	r2, [r3, r2]
    a7b4:	4bc9      	ldr	r3, [pc, #804]	; (aadc <CorrectIMUvalues+0x7e8>)
    a7b6:	801a      	strh	r2, [r3, #0]
}
    a7b8:	e33e      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    a7ba:	1dbb      	adds	r3, r7, #6
    a7bc:	781b      	ldrb	r3, [r3, #0]
    a7be:	2b02      	cmp	r3, #2
    a7c0:	d132      	bne.n	a828 <CorrectIMUvalues+0x534>
			cax = -ay;
    a7c2:	4bbb      	ldr	r3, [pc, #748]	; (aab0 <CorrectIMUvalues+0x7bc>)
    a7c4:	2200      	movs	r2, #0
    a7c6:	5e9b      	ldrsh	r3, [r3, r2]
    a7c8:	b29b      	uxth	r3, r3
    a7ca:	425b      	negs	r3, r3
    a7cc:	b29b      	uxth	r3, r3
    a7ce:	b21a      	sxth	r2, r3
    a7d0:	4bb8      	ldr	r3, [pc, #736]	; (aab4 <CorrectIMUvalues+0x7c0>)
    a7d2:	801a      	strh	r2, [r3, #0]
			cay = -az;
    a7d4:	4bb8      	ldr	r3, [pc, #736]	; (aab8 <CorrectIMUvalues+0x7c4>)
    a7d6:	2200      	movs	r2, #0
    a7d8:	5e9b      	ldrsh	r3, [r3, r2]
    a7da:	b29b      	uxth	r3, r3
    a7dc:	425b      	negs	r3, r3
    a7de:	b29b      	uxth	r3, r3
    a7e0:	b21a      	sxth	r2, r3
    a7e2:	4bb6      	ldr	r3, [pc, #728]	; (aabc <CorrectIMUvalues+0x7c8>)
    a7e4:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    a7e6:	4bb6      	ldr	r3, [pc, #728]	; (aac0 <CorrectIMUvalues+0x7cc>)
    a7e8:	2200      	movs	r2, #0
    a7ea:	5e9b      	ldrsh	r3, [r3, r2]
    a7ec:	b29b      	uxth	r3, r3
    a7ee:	425b      	negs	r3, r3
    a7f0:	b29b      	uxth	r3, r3
    a7f2:	b21a      	sxth	r2, r3
    a7f4:	4bb3      	ldr	r3, [pc, #716]	; (aac4 <CorrectIMUvalues+0x7d0>)
    a7f6:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    a7f8:	4bb3      	ldr	r3, [pc, #716]	; (aac8 <CorrectIMUvalues+0x7d4>)
    a7fa:	2200      	movs	r2, #0
    a7fc:	5e9b      	ldrsh	r3, [r3, r2]
    a7fe:	b29b      	uxth	r3, r3
    a800:	425b      	negs	r3, r3
    a802:	b29b      	uxth	r3, r3
    a804:	b21a      	sxth	r2, r3
    a806:	4bb1      	ldr	r3, [pc, #708]	; (aacc <CorrectIMUvalues+0x7d8>)
    a808:	801a      	strh	r2, [r3, #0]
			cmx = my;
    a80a:	4bb1      	ldr	r3, [pc, #708]	; (aad0 <CorrectIMUvalues+0x7dc>)
    a80c:	2200      	movs	r2, #0
    a80e:	5e9a      	ldrsh	r2, [r3, r2]
    a810:	4bb0      	ldr	r3, [pc, #704]	; (aad4 <CorrectIMUvalues+0x7e0>)
    a812:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    a814:	4bb0      	ldr	r3, [pc, #704]	; (aad8 <CorrectIMUvalues+0x7e4>)
    a816:	2200      	movs	r2, #0
    a818:	5e9b      	ldrsh	r3, [r3, r2]
    a81a:	b29b      	uxth	r3, r3
    a81c:	425b      	negs	r3, r3
    a81e:	b29b      	uxth	r3, r3
    a820:	b21a      	sxth	r2, r3
    a822:	4bae      	ldr	r3, [pc, #696]	; (aadc <CorrectIMUvalues+0x7e8>)
    a824:	801a      	strh	r2, [r3, #0]
}
    a826:	e307      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    a828:	1dbb      	adds	r3, r7, #6
    a82a:	781b      	ldrb	r3, [r3, #0]
    a82c:	2b05      	cmp	r3, #5
    a82e:	d12e      	bne.n	a88e <CorrectIMUvalues+0x59a>
			cax = az;
    a830:	4ba1      	ldr	r3, [pc, #644]	; (aab8 <CorrectIMUvalues+0x7c4>)
    a832:	2200      	movs	r2, #0
    a834:	5e9a      	ldrsh	r2, [r3, r2]
    a836:	4b9f      	ldr	r3, [pc, #636]	; (aab4 <CorrectIMUvalues+0x7c0>)
    a838:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    a83a:	4b9d      	ldr	r3, [pc, #628]	; (aab0 <CorrectIMUvalues+0x7bc>)
    a83c:	2200      	movs	r2, #0
    a83e:	5e9b      	ldrsh	r3, [r3, r2]
    a840:	b29b      	uxth	r3, r3
    a842:	425b      	negs	r3, r3
    a844:	b29b      	uxth	r3, r3
    a846:	b21a      	sxth	r2, r3
    a848:	4b9c      	ldr	r3, [pc, #624]	; (aabc <CorrectIMUvalues+0x7c8>)
    a84a:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    a84c:	4b9e      	ldr	r3, [pc, #632]	; (aac8 <CorrectIMUvalues+0x7d4>)
    a84e:	2200      	movs	r2, #0
    a850:	5e9a      	ldrsh	r2, [r3, r2]
    a852:	4b9c      	ldr	r3, [pc, #624]	; (aac4 <CorrectIMUvalues+0x7d0>)
    a854:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    a856:	4b9a      	ldr	r3, [pc, #616]	; (aac0 <CorrectIMUvalues+0x7cc>)
    a858:	2200      	movs	r2, #0
    a85a:	5e9b      	ldrsh	r3, [r3, r2]
    a85c:	b29b      	uxth	r3, r3
    a85e:	425b      	negs	r3, r3
    a860:	b29b      	uxth	r3, r3
    a862:	b21a      	sxth	r2, r3
    a864:	4b99      	ldr	r3, [pc, #612]	; (aacc <CorrectIMUvalues+0x7d8>)
    a866:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    a868:	4b9b      	ldr	r3, [pc, #620]	; (aad8 <CorrectIMUvalues+0x7e4>)
    a86a:	2200      	movs	r2, #0
    a86c:	5e9b      	ldrsh	r3, [r3, r2]
    a86e:	b29b      	uxth	r3, r3
    a870:	425b      	negs	r3, r3
    a872:	b29b      	uxth	r3, r3
    a874:	b21a      	sxth	r2, r3
    a876:	4b97      	ldr	r3, [pc, #604]	; (aad4 <CorrectIMUvalues+0x7e0>)
    a878:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    a87a:	4b95      	ldr	r3, [pc, #596]	; (aad0 <CorrectIMUvalues+0x7dc>)
    a87c:	2200      	movs	r2, #0
    a87e:	5e9b      	ldrsh	r3, [r3, r2]
    a880:	b29b      	uxth	r3, r3
    a882:	425b      	negs	r3, r3
    a884:	b29b      	uxth	r3, r3
    a886:	b21a      	sxth	r2, r3
    a888:	4b94      	ldr	r3, [pc, #592]	; (aadc <CorrectIMUvalues+0x7e8>)
    a88a:	801a      	strh	r2, [r3, #0]
}
    a88c:	e2d4      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    a88e:	1dbb      	adds	r3, r7, #6
    a890:	781b      	ldrb	r3, [r3, #0]
    a892:	2b06      	cmp	r3, #6
    a894:	d000      	beq.n	a898 <CorrectIMUvalues+0x5a4>
    a896:	e2cf      	b.n	ae38 <CorrectIMUvalues+0xb44>
			cax = -az;
    a898:	4b87      	ldr	r3, [pc, #540]	; (aab8 <CorrectIMUvalues+0x7c4>)
    a89a:	2200      	movs	r2, #0
    a89c:	5e9b      	ldrsh	r3, [r3, r2]
    a89e:	b29b      	uxth	r3, r3
    a8a0:	425b      	negs	r3, r3
    a8a2:	b29b      	uxth	r3, r3
    a8a4:	b21a      	sxth	r2, r3
    a8a6:	4b83      	ldr	r3, [pc, #524]	; (aab4 <CorrectIMUvalues+0x7c0>)
    a8a8:	801a      	strh	r2, [r3, #0]
			cay = ay;
    a8aa:	4b81      	ldr	r3, [pc, #516]	; (aab0 <CorrectIMUvalues+0x7bc>)
    a8ac:	2200      	movs	r2, #0
    a8ae:	5e9a      	ldrsh	r2, [r3, r2]
    a8b0:	4b82      	ldr	r3, [pc, #520]	; (aabc <CorrectIMUvalues+0x7c8>)
    a8b2:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    a8b4:	4b84      	ldr	r3, [pc, #528]	; (aac8 <CorrectIMUvalues+0x7d4>)
    a8b6:	2200      	movs	r2, #0
    a8b8:	5e9b      	ldrsh	r3, [r3, r2]
    a8ba:	b29b      	uxth	r3, r3
    a8bc:	425b      	negs	r3, r3
    a8be:	b29b      	uxth	r3, r3
    a8c0:	b21a      	sxth	r2, r3
    a8c2:	4b80      	ldr	r3, [pc, #512]	; (aac4 <CorrectIMUvalues+0x7d0>)
    a8c4:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    a8c6:	4b7e      	ldr	r3, [pc, #504]	; (aac0 <CorrectIMUvalues+0x7cc>)
    a8c8:	2200      	movs	r2, #0
    a8ca:	5e9a      	ldrsh	r2, [r3, r2]
    a8cc:	4b7f      	ldr	r3, [pc, #508]	; (aacc <CorrectIMUvalues+0x7d8>)
    a8ce:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    a8d0:	4b81      	ldr	r3, [pc, #516]	; (aad8 <CorrectIMUvalues+0x7e4>)
    a8d2:	2200      	movs	r2, #0
    a8d4:	5e9a      	ldrsh	r2, [r3, r2]
    a8d6:	4b7f      	ldr	r3, [pc, #508]	; (aad4 <CorrectIMUvalues+0x7e0>)
    a8d8:	801a      	strh	r2, [r3, #0]
			cmy = my;
    a8da:	4b7d      	ldr	r3, [pc, #500]	; (aad0 <CorrectIMUvalues+0x7dc>)
    a8dc:	2200      	movs	r2, #0
    a8de:	5e9a      	ldrsh	r2, [r3, r2]
    a8e0:	4b7e      	ldr	r3, [pc, #504]	; (aadc <CorrectIMUvalues+0x7e8>)
    a8e2:	801a      	strh	r2, [r3, #0]
}
    a8e4:	e2a8      	b.n	ae38 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_RIGHT){ // Connectors Right
    a8e6:	1dfb      	adds	r3, r7, #7
    a8e8:	781b      	ldrb	r3, [r3, #0]
    a8ea:	2b04      	cmp	r3, #4
    a8ec:	d000      	beq.n	a8f0 <CorrectIMUvalues+0x5fc>
    a8ee:	e0f7      	b.n	aae0 <CorrectIMUvalues+0x7ec>
		caz = -ax;
    a8f0:	4b69      	ldr	r3, [pc, #420]	; (aa98 <CorrectIMUvalues+0x7a4>)
    a8f2:	2200      	movs	r2, #0
    a8f4:	5e9b      	ldrsh	r3, [r3, r2]
    a8f6:	b29b      	uxth	r3, r3
    a8f8:	425b      	negs	r3, r3
    a8fa:	b29b      	uxth	r3, r3
    a8fc:	b21a      	sxth	r2, r3
    a8fe:	4b67      	ldr	r3, [pc, #412]	; (aa9c <CorrectIMUvalues+0x7a8>)
    a900:	801a      	strh	r2, [r3, #0]
		cgz = -gx;
    a902:	4b67      	ldr	r3, [pc, #412]	; (aaa0 <CorrectIMUvalues+0x7ac>)
    a904:	2200      	movs	r2, #0
    a906:	5e9b      	ldrsh	r3, [r3, r2]
    a908:	b29b      	uxth	r3, r3
    a90a:	425b      	negs	r3, r3
    a90c:	b29b      	uxth	r3, r3
    a90e:	b21a      	sxth	r2, r3
    a910:	4b64      	ldr	r3, [pc, #400]	; (aaa4 <CorrectIMUvalues+0x7b0>)
    a912:	801a      	strh	r2, [r3, #0]
		cmz = mx;
    a914:	4b64      	ldr	r3, [pc, #400]	; (aaa8 <CorrectIMUvalues+0x7b4>)
    a916:	2200      	movs	r2, #0
    a918:	5e9a      	ldrsh	r2, [r3, r2]
    a91a:	4b64      	ldr	r3, [pc, #400]	; (aaac <CorrectIMUvalues+0x7b8>)
    a91c:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    a91e:	1dbb      	adds	r3, r7, #6
    a920:	781b      	ldrb	r3, [r3, #0]
    a922:	2b01      	cmp	r3, #1
    a924:	d126      	bne.n	a974 <CorrectIMUvalues+0x680>
			cax = -ay;
    a926:	4b62      	ldr	r3, [pc, #392]	; (aab0 <CorrectIMUvalues+0x7bc>)
    a928:	2200      	movs	r2, #0
    a92a:	5e9b      	ldrsh	r3, [r3, r2]
    a92c:	b29b      	uxth	r3, r3
    a92e:	425b      	negs	r3, r3
    a930:	b29b      	uxth	r3, r3
    a932:	b21a      	sxth	r2, r3
    a934:	4b5f      	ldr	r3, [pc, #380]	; (aab4 <CorrectIMUvalues+0x7c0>)
    a936:	801a      	strh	r2, [r3, #0]
			cay = az;
    a938:	4b5f      	ldr	r3, [pc, #380]	; (aab8 <CorrectIMUvalues+0x7c4>)
    a93a:	2200      	movs	r2, #0
    a93c:	5e9a      	ldrsh	r2, [r3, r2]
    a93e:	4b5f      	ldr	r3, [pc, #380]	; (aabc <CorrectIMUvalues+0x7c8>)
    a940:	801a      	strh	r2, [r3, #0]
			cgx = -gy;
    a942:	4b5f      	ldr	r3, [pc, #380]	; (aac0 <CorrectIMUvalues+0x7cc>)
    a944:	2200      	movs	r2, #0
    a946:	5e9b      	ldrsh	r3, [r3, r2]
    a948:	b29b      	uxth	r3, r3
    a94a:	425b      	negs	r3, r3
    a94c:	b29b      	uxth	r3, r3
    a94e:	b21a      	sxth	r2, r3
    a950:	4b5c      	ldr	r3, [pc, #368]	; (aac4 <CorrectIMUvalues+0x7d0>)
    a952:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    a954:	4b5c      	ldr	r3, [pc, #368]	; (aac8 <CorrectIMUvalues+0x7d4>)
    a956:	2200      	movs	r2, #0
    a958:	5e9a      	ldrsh	r2, [r3, r2]
    a95a:	4b5c      	ldr	r3, [pc, #368]	; (aacc <CorrectIMUvalues+0x7d8>)
    a95c:	801a      	strh	r2, [r3, #0]
			cmx = my;
    a95e:	4b5c      	ldr	r3, [pc, #368]	; (aad0 <CorrectIMUvalues+0x7dc>)
    a960:	2200      	movs	r2, #0
    a962:	5e9a      	ldrsh	r2, [r3, r2]
    a964:	4b5b      	ldr	r3, [pc, #364]	; (aad4 <CorrectIMUvalues+0x7e0>)
    a966:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    a968:	4b5b      	ldr	r3, [pc, #364]	; (aad8 <CorrectIMUvalues+0x7e4>)
    a96a:	2200      	movs	r2, #0
    a96c:	5e9a      	ldrsh	r2, [r3, r2]
    a96e:	4b5b      	ldr	r3, [pc, #364]	; (aadc <CorrectIMUvalues+0x7e8>)
    a970:	801a      	strh	r2, [r3, #0]
}
    a972:	e261      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    a974:	1dbb      	adds	r3, r7, #6
    a976:	781b      	ldrb	r3, [r3, #0]
    a978:	2b02      	cmp	r3, #2
    a97a:	d12e      	bne.n	a9da <CorrectIMUvalues+0x6e6>
			cax = ay;
    a97c:	4b4c      	ldr	r3, [pc, #304]	; (aab0 <CorrectIMUvalues+0x7bc>)
    a97e:	2200      	movs	r2, #0
    a980:	5e9a      	ldrsh	r2, [r3, r2]
    a982:	4b4c      	ldr	r3, [pc, #304]	; (aab4 <CorrectIMUvalues+0x7c0>)
    a984:	801a      	strh	r2, [r3, #0]
			cay = -az;
    a986:	4b4c      	ldr	r3, [pc, #304]	; (aab8 <CorrectIMUvalues+0x7c4>)
    a988:	2200      	movs	r2, #0
    a98a:	5e9b      	ldrsh	r3, [r3, r2]
    a98c:	b29b      	uxth	r3, r3
    a98e:	425b      	negs	r3, r3
    a990:	b29b      	uxth	r3, r3
    a992:	b21a      	sxth	r2, r3
    a994:	4b49      	ldr	r3, [pc, #292]	; (aabc <CorrectIMUvalues+0x7c8>)
    a996:	801a      	strh	r2, [r3, #0]
			cgx = gy;
    a998:	4b49      	ldr	r3, [pc, #292]	; (aac0 <CorrectIMUvalues+0x7cc>)
    a99a:	2200      	movs	r2, #0
    a99c:	5e9a      	ldrsh	r2, [r3, r2]
    a99e:	4b49      	ldr	r3, [pc, #292]	; (aac4 <CorrectIMUvalues+0x7d0>)
    a9a0:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    a9a2:	4b49      	ldr	r3, [pc, #292]	; (aac8 <CorrectIMUvalues+0x7d4>)
    a9a4:	2200      	movs	r2, #0
    a9a6:	5e9b      	ldrsh	r3, [r3, r2]
    a9a8:	b29b      	uxth	r3, r3
    a9aa:	425b      	negs	r3, r3
    a9ac:	b29b      	uxth	r3, r3
    a9ae:	b21a      	sxth	r2, r3
    a9b0:	4b46      	ldr	r3, [pc, #280]	; (aacc <CorrectIMUvalues+0x7d8>)
    a9b2:	801a      	strh	r2, [r3, #0]
			cmx = -my;
    a9b4:	4b46      	ldr	r3, [pc, #280]	; (aad0 <CorrectIMUvalues+0x7dc>)
    a9b6:	2200      	movs	r2, #0
    a9b8:	5e9b      	ldrsh	r3, [r3, r2]
    a9ba:	b29b      	uxth	r3, r3
    a9bc:	425b      	negs	r3, r3
    a9be:	b29b      	uxth	r3, r3
    a9c0:	b21a      	sxth	r2, r3
    a9c2:	4b44      	ldr	r3, [pc, #272]	; (aad4 <CorrectIMUvalues+0x7e0>)
    a9c4:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    a9c6:	4b44      	ldr	r3, [pc, #272]	; (aad8 <CorrectIMUvalues+0x7e4>)
    a9c8:	2200      	movs	r2, #0
    a9ca:	5e9b      	ldrsh	r3, [r3, r2]
    a9cc:	b29b      	uxth	r3, r3
    a9ce:	425b      	negs	r3, r3
    a9d0:	b29b      	uxth	r3, r3
    a9d2:	b21a      	sxth	r2, r3
    a9d4:	4b41      	ldr	r3, [pc, #260]	; (aadc <CorrectIMUvalues+0x7e8>)
    a9d6:	801a      	strh	r2, [r3, #0]
}
    a9d8:	e22e      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_REAR){ // Power Rear
    a9da:	1dbb      	adds	r3, r7, #6
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	2b05      	cmp	r3, #5
    a9e0:	d132      	bne.n	aa48 <CorrectIMUvalues+0x754>
			cax = -az;
    a9e2:	4b35      	ldr	r3, [pc, #212]	; (aab8 <CorrectIMUvalues+0x7c4>)
    a9e4:	2200      	movs	r2, #0
    a9e6:	5e9b      	ldrsh	r3, [r3, r2]
    a9e8:	b29b      	uxth	r3, r3
    a9ea:	425b      	negs	r3, r3
    a9ec:	b29b      	uxth	r3, r3
    a9ee:	b21a      	sxth	r2, r3
    a9f0:	4b30      	ldr	r3, [pc, #192]	; (aab4 <CorrectIMUvalues+0x7c0>)
    a9f2:	801a      	strh	r2, [r3, #0]
			cay = -ay;
    a9f4:	4b2e      	ldr	r3, [pc, #184]	; (aab0 <CorrectIMUvalues+0x7bc>)
    a9f6:	2200      	movs	r2, #0
    a9f8:	5e9b      	ldrsh	r3, [r3, r2]
    a9fa:	b29b      	uxth	r3, r3
    a9fc:	425b      	negs	r3, r3
    a9fe:	b29b      	uxth	r3, r3
    aa00:	b21a      	sxth	r2, r3
    aa02:	4b2e      	ldr	r3, [pc, #184]	; (aabc <CorrectIMUvalues+0x7c8>)
    aa04:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    aa06:	4b30      	ldr	r3, [pc, #192]	; (aac8 <CorrectIMUvalues+0x7d4>)
    aa08:	2200      	movs	r2, #0
    aa0a:	5e9b      	ldrsh	r3, [r3, r2]
    aa0c:	b29b      	uxth	r3, r3
    aa0e:	425b      	negs	r3, r3
    aa10:	b29b      	uxth	r3, r3
    aa12:	b21a      	sxth	r2, r3
    aa14:	4b2b      	ldr	r3, [pc, #172]	; (aac4 <CorrectIMUvalues+0x7d0>)
    aa16:	801a      	strh	r2, [r3, #0]
			cgy = -gy;
    aa18:	4b29      	ldr	r3, [pc, #164]	; (aac0 <CorrectIMUvalues+0x7cc>)
    aa1a:	2200      	movs	r2, #0
    aa1c:	5e9b      	ldrsh	r3, [r3, r2]
    aa1e:	b29b      	uxth	r3, r3
    aa20:	425b      	negs	r3, r3
    aa22:	b29b      	uxth	r3, r3
    aa24:	b21a      	sxth	r2, r3
    aa26:	4b29      	ldr	r3, [pc, #164]	; (aacc <CorrectIMUvalues+0x7d8>)
    aa28:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    aa2a:	4b2b      	ldr	r3, [pc, #172]	; (aad8 <CorrectIMUvalues+0x7e4>)
    aa2c:	2200      	movs	r2, #0
    aa2e:	5e9a      	ldrsh	r2, [r3, r2]
    aa30:	4b28      	ldr	r3, [pc, #160]	; (aad4 <CorrectIMUvalues+0x7e0>)
    aa32:	801a      	strh	r2, [r3, #0]
			cmy = -my;
    aa34:	4b26      	ldr	r3, [pc, #152]	; (aad0 <CorrectIMUvalues+0x7dc>)
    aa36:	2200      	movs	r2, #0
    aa38:	5e9b      	ldrsh	r3, [r3, r2]
    aa3a:	b29b      	uxth	r3, r3
    aa3c:	425b      	negs	r3, r3
    aa3e:	b29b      	uxth	r3, r3
    aa40:	b21a      	sxth	r2, r3
    aa42:	4b26      	ldr	r3, [pc, #152]	; (aadc <CorrectIMUvalues+0x7e8>)
    aa44:	801a      	strh	r2, [r3, #0]
}
    aa46:	e1f7      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_FRONT){ // Power Front
    aa48:	1dbb      	adds	r3, r7, #6
    aa4a:	781b      	ldrb	r3, [r3, #0]
    aa4c:	2b06      	cmp	r3, #6
    aa4e:	d000      	beq.n	aa52 <CorrectIMUvalues+0x75e>
    aa50:	e1f2      	b.n	ae38 <CorrectIMUvalues+0xb44>
			cax = az;
    aa52:	4b19      	ldr	r3, [pc, #100]	; (aab8 <CorrectIMUvalues+0x7c4>)
    aa54:	2200      	movs	r2, #0
    aa56:	5e9a      	ldrsh	r2, [r3, r2]
    aa58:	4b16      	ldr	r3, [pc, #88]	; (aab4 <CorrectIMUvalues+0x7c0>)
    aa5a:	801a      	strh	r2, [r3, #0]
			cay = ay;
    aa5c:	4b14      	ldr	r3, [pc, #80]	; (aab0 <CorrectIMUvalues+0x7bc>)
    aa5e:	2200      	movs	r2, #0
    aa60:	5e9a      	ldrsh	r2, [r3, r2]
    aa62:	4b16      	ldr	r3, [pc, #88]	; (aabc <CorrectIMUvalues+0x7c8>)
    aa64:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    aa66:	4b18      	ldr	r3, [pc, #96]	; (aac8 <CorrectIMUvalues+0x7d4>)
    aa68:	2200      	movs	r2, #0
    aa6a:	5e9a      	ldrsh	r2, [r3, r2]
    aa6c:	4b15      	ldr	r3, [pc, #84]	; (aac4 <CorrectIMUvalues+0x7d0>)
    aa6e:	801a      	strh	r2, [r3, #0]
			cgy = gy;
    aa70:	4b13      	ldr	r3, [pc, #76]	; (aac0 <CorrectIMUvalues+0x7cc>)
    aa72:	2200      	movs	r2, #0
    aa74:	5e9a      	ldrsh	r2, [r3, r2]
    aa76:	4b15      	ldr	r3, [pc, #84]	; (aacc <CorrectIMUvalues+0x7d8>)
    aa78:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    aa7a:	4b17      	ldr	r3, [pc, #92]	; (aad8 <CorrectIMUvalues+0x7e4>)
    aa7c:	2200      	movs	r2, #0
    aa7e:	5e9b      	ldrsh	r3, [r3, r2]
    aa80:	b29b      	uxth	r3, r3
    aa82:	425b      	negs	r3, r3
    aa84:	b29b      	uxth	r3, r3
    aa86:	b21a      	sxth	r2, r3
    aa88:	4b12      	ldr	r3, [pc, #72]	; (aad4 <CorrectIMUvalues+0x7e0>)
    aa8a:	801a      	strh	r2, [r3, #0]
			cmy = my;
    aa8c:	4b10      	ldr	r3, [pc, #64]	; (aad0 <CorrectIMUvalues+0x7dc>)
    aa8e:	2200      	movs	r2, #0
    aa90:	5e9a      	ldrsh	r2, [r3, r2]
    aa92:	4b12      	ldr	r3, [pc, #72]	; (aadc <CorrectIMUvalues+0x7e8>)
    aa94:	801a      	strh	r2, [r3, #0]
}
    aa96:	e1cf      	b.n	ae38 <CorrectIMUvalues+0xb44>
    aa98:	200002ea 	.word	0x200002ea
    aa9c:	20000300 	.word	0x20000300
    aaa0:	200002e4 	.word	0x200002e4
    aaa4:	200002fa 	.word	0x200002fa
    aaa8:	200002f0 	.word	0x200002f0
    aaac:	20000306 	.word	0x20000306
    aab0:	200002ec 	.word	0x200002ec
    aab4:	200002fc 	.word	0x200002fc
    aab8:	200002ee 	.word	0x200002ee
    aabc:	200002fe 	.word	0x200002fe
    aac0:	200002e6 	.word	0x200002e6
    aac4:	200002f6 	.word	0x200002f6
    aac8:	200002e8 	.word	0x200002e8
    aacc:	200002f8 	.word	0x200002f8
    aad0:	200002f2 	.word	0x200002f2
    aad4:	20000302 	.word	0x20000302
    aad8:	200002f4 	.word	0x200002f4
    aadc:	20000304 	.word	0x20000304
	} else if(connector_orient == ORIENT_REAR){ // Connectors Rear
    aae0:	1dfb      	adds	r3, r7, #7
    aae2:	781b      	ldrb	r3, [r3, #0]
    aae4:	2b05      	cmp	r3, #5
    aae6:	d000      	beq.n	aaea <CorrectIMUvalues+0x7f6>
    aae8:	e0d7      	b.n	ac9a <CorrectIMUvalues+0x9a6>
		caz = -ay;
    aaea:	4bd5      	ldr	r3, [pc, #852]	; (ae40 <CorrectIMUvalues+0xb4c>)
    aaec:	2200      	movs	r2, #0
    aaee:	5e9b      	ldrsh	r3, [r3, r2]
    aaf0:	b29b      	uxth	r3, r3
    aaf2:	425b      	negs	r3, r3
    aaf4:	b29b      	uxth	r3, r3
    aaf6:	b21a      	sxth	r2, r3
    aaf8:	4bd2      	ldr	r3, [pc, #840]	; (ae44 <CorrectIMUvalues+0xb50>)
    aafa:	801a      	strh	r2, [r3, #0]
		cgz = -gy;
    aafc:	4bd2      	ldr	r3, [pc, #840]	; (ae48 <CorrectIMUvalues+0xb54>)
    aafe:	2200      	movs	r2, #0
    ab00:	5e9b      	ldrsh	r3, [r3, r2]
    ab02:	b29b      	uxth	r3, r3
    ab04:	425b      	negs	r3, r3
    ab06:	b29b      	uxth	r3, r3
    ab08:	b21a      	sxth	r2, r3
    ab0a:	4bd0      	ldr	r3, [pc, #832]	; (ae4c <CorrectIMUvalues+0xb58>)
    ab0c:	801a      	strh	r2, [r3, #0]
		cmz = -my;
    ab0e:	4bd0      	ldr	r3, [pc, #832]	; (ae50 <CorrectIMUvalues+0xb5c>)
    ab10:	2200      	movs	r2, #0
    ab12:	5e9b      	ldrsh	r3, [r3, r2]
    ab14:	b29b      	uxth	r3, r3
    ab16:	425b      	negs	r3, r3
    ab18:	b29b      	uxth	r3, r3
    ab1a:	b21a      	sxth	r2, r3
    ab1c:	4bcd      	ldr	r3, [pc, #820]	; (ae54 <CorrectIMUvalues+0xb60>)
    ab1e:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    ab20:	1dbb      	adds	r3, r7, #6
    ab22:	781b      	ldrb	r3, [r3, #0]
    ab24:	2b01      	cmp	r3, #1
    ab26:	d11e      	bne.n	ab66 <CorrectIMUvalues+0x872>
			cax = ax;
    ab28:	4bcb      	ldr	r3, [pc, #812]	; (ae58 <CorrectIMUvalues+0xb64>)
    ab2a:	2200      	movs	r2, #0
    ab2c:	5e9a      	ldrsh	r2, [r3, r2]
    ab2e:	4bcb      	ldr	r3, [pc, #812]	; (ae5c <CorrectIMUvalues+0xb68>)
    ab30:	801a      	strh	r2, [r3, #0]
			cay = az;
    ab32:	4bcb      	ldr	r3, [pc, #812]	; (ae60 <CorrectIMUvalues+0xb6c>)
    ab34:	2200      	movs	r2, #0
    ab36:	5e9a      	ldrsh	r2, [r3, r2]
    ab38:	4bca      	ldr	r3, [pc, #808]	; (ae64 <CorrectIMUvalues+0xb70>)
    ab3a:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    ab3c:	4bca      	ldr	r3, [pc, #808]	; (ae68 <CorrectIMUvalues+0xb74>)
    ab3e:	2200      	movs	r2, #0
    ab40:	5e9a      	ldrsh	r2, [r3, r2]
    ab42:	4bca      	ldr	r3, [pc, #808]	; (ae6c <CorrectIMUvalues+0xb78>)
    ab44:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    ab46:	4bca      	ldr	r3, [pc, #808]	; (ae70 <CorrectIMUvalues+0xb7c>)
    ab48:	2200      	movs	r2, #0
    ab4a:	5e9a      	ldrsh	r2, [r3, r2]
    ab4c:	4bc9      	ldr	r3, [pc, #804]	; (ae74 <CorrectIMUvalues+0xb80>)
    ab4e:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    ab50:	4bc9      	ldr	r3, [pc, #804]	; (ae78 <CorrectIMUvalues+0xb84>)
    ab52:	2200      	movs	r2, #0
    ab54:	5e9a      	ldrsh	r2, [r3, r2]
    ab56:	4bc9      	ldr	r3, [pc, #804]	; (ae7c <CorrectIMUvalues+0xb88>)
    ab58:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    ab5a:	4bc9      	ldr	r3, [pc, #804]	; (ae80 <CorrectIMUvalues+0xb8c>)
    ab5c:	2200      	movs	r2, #0
    ab5e:	5e9a      	ldrsh	r2, [r3, r2]
    ab60:	4bc8      	ldr	r3, [pc, #800]	; (ae84 <CorrectIMUvalues+0xb90>)
    ab62:	801a      	strh	r2, [r3, #0]
}
    ab64:	e168      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    ab66:	1dbb      	adds	r3, r7, #6
    ab68:	781b      	ldrb	r3, [r3, #0]
    ab6a:	2b02      	cmp	r3, #2
    ab6c:	d136      	bne.n	abdc <CorrectIMUvalues+0x8e8>
			cax = -ax;
    ab6e:	4bba      	ldr	r3, [pc, #744]	; (ae58 <CorrectIMUvalues+0xb64>)
    ab70:	2200      	movs	r2, #0
    ab72:	5e9b      	ldrsh	r3, [r3, r2]
    ab74:	b29b      	uxth	r3, r3
    ab76:	425b      	negs	r3, r3
    ab78:	b29b      	uxth	r3, r3
    ab7a:	b21a      	sxth	r2, r3
    ab7c:	4bb7      	ldr	r3, [pc, #732]	; (ae5c <CorrectIMUvalues+0xb68>)
    ab7e:	801a      	strh	r2, [r3, #0]
			cay = -az;
    ab80:	4bb7      	ldr	r3, [pc, #732]	; (ae60 <CorrectIMUvalues+0xb6c>)
    ab82:	2200      	movs	r2, #0
    ab84:	5e9b      	ldrsh	r3, [r3, r2]
    ab86:	b29b      	uxth	r3, r3
    ab88:	425b      	negs	r3, r3
    ab8a:	b29b      	uxth	r3, r3
    ab8c:	b21a      	sxth	r2, r3
    ab8e:	4bb5      	ldr	r3, [pc, #724]	; (ae64 <CorrectIMUvalues+0xb70>)
    ab90:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    ab92:	4bb5      	ldr	r3, [pc, #724]	; (ae68 <CorrectIMUvalues+0xb74>)
    ab94:	2200      	movs	r2, #0
    ab96:	5e9b      	ldrsh	r3, [r3, r2]
    ab98:	b29b      	uxth	r3, r3
    ab9a:	425b      	negs	r3, r3
    ab9c:	b29b      	uxth	r3, r3
    ab9e:	b21a      	sxth	r2, r3
    aba0:	4bb2      	ldr	r3, [pc, #712]	; (ae6c <CorrectIMUvalues+0xb78>)
    aba2:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    aba4:	4bb2      	ldr	r3, [pc, #712]	; (ae70 <CorrectIMUvalues+0xb7c>)
    aba6:	2200      	movs	r2, #0
    aba8:	5e9b      	ldrsh	r3, [r3, r2]
    abaa:	b29b      	uxth	r3, r3
    abac:	425b      	negs	r3, r3
    abae:	b29b      	uxth	r3, r3
    abb0:	b21a      	sxth	r2, r3
    abb2:	4bb0      	ldr	r3, [pc, #704]	; (ae74 <CorrectIMUvalues+0xb80>)
    abb4:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    abb6:	4bb0      	ldr	r3, [pc, #704]	; (ae78 <CorrectIMUvalues+0xb84>)
    abb8:	2200      	movs	r2, #0
    abba:	5e9b      	ldrsh	r3, [r3, r2]
    abbc:	b29b      	uxth	r3, r3
    abbe:	425b      	negs	r3, r3
    abc0:	b29b      	uxth	r3, r3
    abc2:	b21a      	sxth	r2, r3
    abc4:	4bad      	ldr	r3, [pc, #692]	; (ae7c <CorrectIMUvalues+0xb88>)
    abc6:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    abc8:	4bad      	ldr	r3, [pc, #692]	; (ae80 <CorrectIMUvalues+0xb8c>)
    abca:	2200      	movs	r2, #0
    abcc:	5e9b      	ldrsh	r3, [r3, r2]
    abce:	b29b      	uxth	r3, r3
    abd0:	425b      	negs	r3, r3
    abd2:	b29b      	uxth	r3, r3
    abd4:	b21a      	sxth	r2, r3
    abd6:	4bab      	ldr	r3, [pc, #684]	; (ae84 <CorrectIMUvalues+0xb90>)
    abd8:	801a      	strh	r2, [r3, #0]
}
    abda:	e12d      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
    abdc:	1dbb      	adds	r3, r7, #6
    abde:	781b      	ldrb	r3, [r3, #0]
    abe0:	2b03      	cmp	r3, #3
    abe2:	d12a      	bne.n	ac3a <CorrectIMUvalues+0x946>
			cax = -az;
    abe4:	4b9e      	ldr	r3, [pc, #632]	; (ae60 <CorrectIMUvalues+0xb6c>)
    abe6:	2200      	movs	r2, #0
    abe8:	5e9b      	ldrsh	r3, [r3, r2]
    abea:	b29b      	uxth	r3, r3
    abec:	425b      	negs	r3, r3
    abee:	b29b      	uxth	r3, r3
    abf0:	b21a      	sxth	r2, r3
    abf2:	4b9a      	ldr	r3, [pc, #616]	; (ae5c <CorrectIMUvalues+0xb68>)
    abf4:	801a      	strh	r2, [r3, #0]
			cay = ax;
    abf6:	4b98      	ldr	r3, [pc, #608]	; (ae58 <CorrectIMUvalues+0xb64>)
    abf8:	2200      	movs	r2, #0
    abfa:	5e9a      	ldrsh	r2, [r3, r2]
    abfc:	4b99      	ldr	r3, [pc, #612]	; (ae64 <CorrectIMUvalues+0xb70>)
    abfe:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    ac00:	4b9b      	ldr	r3, [pc, #620]	; (ae70 <CorrectIMUvalues+0xb7c>)
    ac02:	2200      	movs	r2, #0
    ac04:	5e9b      	ldrsh	r3, [r3, r2]
    ac06:	b29b      	uxth	r3, r3
    ac08:	425b      	negs	r3, r3
    ac0a:	b29b      	uxth	r3, r3
    ac0c:	b21a      	sxth	r2, r3
    ac0e:	4b97      	ldr	r3, [pc, #604]	; (ae6c <CorrectIMUvalues+0xb78>)
    ac10:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    ac12:	4b95      	ldr	r3, [pc, #596]	; (ae68 <CorrectIMUvalues+0xb74>)
    ac14:	2200      	movs	r2, #0
    ac16:	5e9a      	ldrsh	r2, [r3, r2]
    ac18:	4b96      	ldr	r3, [pc, #600]	; (ae74 <CorrectIMUvalues+0xb80>)
    ac1a:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    ac1c:	4b98      	ldr	r3, [pc, #608]	; (ae80 <CorrectIMUvalues+0xb8c>)
    ac1e:	2200      	movs	r2, #0
    ac20:	5e9a      	ldrsh	r2, [r3, r2]
    ac22:	4b96      	ldr	r3, [pc, #600]	; (ae7c <CorrectIMUvalues+0xb88>)
    ac24:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    ac26:	4b94      	ldr	r3, [pc, #592]	; (ae78 <CorrectIMUvalues+0xb84>)
    ac28:	2200      	movs	r2, #0
    ac2a:	5e9b      	ldrsh	r3, [r3, r2]
    ac2c:	b29b      	uxth	r3, r3
    ac2e:	425b      	negs	r3, r3
    ac30:	b29b      	uxth	r3, r3
    ac32:	b21a      	sxth	r2, r3
    ac34:	4b93      	ldr	r3, [pc, #588]	; (ae84 <CorrectIMUvalues+0xb90>)
    ac36:	801a      	strh	r2, [r3, #0]
}
    ac38:	e0fe      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    ac3a:	1dbb      	adds	r3, r7, #6
    ac3c:	781b      	ldrb	r3, [r3, #0]
    ac3e:	2b04      	cmp	r3, #4
    ac40:	d000      	beq.n	ac44 <CorrectIMUvalues+0x950>
    ac42:	e0f9      	b.n	ae38 <CorrectIMUvalues+0xb44>
			cax = az;
    ac44:	4b86      	ldr	r3, [pc, #536]	; (ae60 <CorrectIMUvalues+0xb6c>)
    ac46:	2200      	movs	r2, #0
    ac48:	5e9a      	ldrsh	r2, [r3, r2]
    ac4a:	4b84      	ldr	r3, [pc, #528]	; (ae5c <CorrectIMUvalues+0xb68>)
    ac4c:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    ac4e:	4b82      	ldr	r3, [pc, #520]	; (ae58 <CorrectIMUvalues+0xb64>)
    ac50:	2200      	movs	r2, #0
    ac52:	5e9b      	ldrsh	r3, [r3, r2]
    ac54:	b29b      	uxth	r3, r3
    ac56:	425b      	negs	r3, r3
    ac58:	b29b      	uxth	r3, r3
    ac5a:	b21a      	sxth	r2, r3
    ac5c:	4b81      	ldr	r3, [pc, #516]	; (ae64 <CorrectIMUvalues+0xb70>)
    ac5e:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    ac60:	4b83      	ldr	r3, [pc, #524]	; (ae70 <CorrectIMUvalues+0xb7c>)
    ac62:	2200      	movs	r2, #0
    ac64:	5e9a      	ldrsh	r2, [r3, r2]
    ac66:	4b81      	ldr	r3, [pc, #516]	; (ae6c <CorrectIMUvalues+0xb78>)
    ac68:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    ac6a:	4b7f      	ldr	r3, [pc, #508]	; (ae68 <CorrectIMUvalues+0xb74>)
    ac6c:	2200      	movs	r2, #0
    ac6e:	5e9b      	ldrsh	r3, [r3, r2]
    ac70:	b29b      	uxth	r3, r3
    ac72:	425b      	negs	r3, r3
    ac74:	b29b      	uxth	r3, r3
    ac76:	b21a      	sxth	r2, r3
    ac78:	4b7e      	ldr	r3, [pc, #504]	; (ae74 <CorrectIMUvalues+0xb80>)
    ac7a:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    ac7c:	4b80      	ldr	r3, [pc, #512]	; (ae80 <CorrectIMUvalues+0xb8c>)
    ac7e:	2200      	movs	r2, #0
    ac80:	5e9b      	ldrsh	r3, [r3, r2]
    ac82:	b29b      	uxth	r3, r3
    ac84:	425b      	negs	r3, r3
    ac86:	b29b      	uxth	r3, r3
    ac88:	b21a      	sxth	r2, r3
    ac8a:	4b7c      	ldr	r3, [pc, #496]	; (ae7c <CorrectIMUvalues+0xb88>)
    ac8c:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    ac8e:	4b7a      	ldr	r3, [pc, #488]	; (ae78 <CorrectIMUvalues+0xb84>)
    ac90:	2200      	movs	r2, #0
    ac92:	5e9a      	ldrsh	r2, [r3, r2]
    ac94:	4b7b      	ldr	r3, [pc, #492]	; (ae84 <CorrectIMUvalues+0xb90>)
    ac96:	801a      	strh	r2, [r3, #0]
}
    ac98:	e0ce      	b.n	ae38 <CorrectIMUvalues+0xb44>
	} else if(connector_orient == ORIENT_FRONT){ // Connectors Front
    ac9a:	1dfb      	adds	r3, r7, #7
    ac9c:	781b      	ldrb	r3, [r3, #0]
    ac9e:	2b06      	cmp	r3, #6
    aca0:	d000      	beq.n	aca4 <CorrectIMUvalues+0x9b0>
    aca2:	e0c9      	b.n	ae38 <CorrectIMUvalues+0xb44>
		caz = ay;
    aca4:	4b66      	ldr	r3, [pc, #408]	; (ae40 <CorrectIMUvalues+0xb4c>)
    aca6:	2200      	movs	r2, #0
    aca8:	5e9a      	ldrsh	r2, [r3, r2]
    acaa:	4b66      	ldr	r3, [pc, #408]	; (ae44 <CorrectIMUvalues+0xb50>)
    acac:	801a      	strh	r2, [r3, #0]
		cgz = gy;
    acae:	4b66      	ldr	r3, [pc, #408]	; (ae48 <CorrectIMUvalues+0xb54>)
    acb0:	2200      	movs	r2, #0
    acb2:	5e9a      	ldrsh	r2, [r3, r2]
    acb4:	4b65      	ldr	r3, [pc, #404]	; (ae4c <CorrectIMUvalues+0xb58>)
    acb6:	801a      	strh	r2, [r3, #0]
		cgz = my;
    acb8:	4b65      	ldr	r3, [pc, #404]	; (ae50 <CorrectIMUvalues+0xb5c>)
    acba:	2200      	movs	r2, #0
    acbc:	5e9a      	ldrsh	r2, [r3, r2]
    acbe:	4b63      	ldr	r3, [pc, #396]	; (ae4c <CorrectIMUvalues+0xb58>)
    acc0:	801a      	strh	r2, [r3, #0]
		if(power_orient == ORIENT_UP){ // Power Up
    acc2:	1dbb      	adds	r3, r7, #6
    acc4:	781b      	ldrb	r3, [r3, #0]
    acc6:	2b01      	cmp	r3, #1
    acc8:	d12a      	bne.n	ad20 <CorrectIMUvalues+0xa2c>
			cax = -ax;
    acca:	4b63      	ldr	r3, [pc, #396]	; (ae58 <CorrectIMUvalues+0xb64>)
    accc:	2200      	movs	r2, #0
    acce:	5e9b      	ldrsh	r3, [r3, r2]
    acd0:	b29b      	uxth	r3, r3
    acd2:	425b      	negs	r3, r3
    acd4:	b29b      	uxth	r3, r3
    acd6:	b21a      	sxth	r2, r3
    acd8:	4b60      	ldr	r3, [pc, #384]	; (ae5c <CorrectIMUvalues+0xb68>)
    acda:	801a      	strh	r2, [r3, #0]
			cay = az;
    acdc:	4b60      	ldr	r3, [pc, #384]	; (ae60 <CorrectIMUvalues+0xb6c>)
    acde:	2200      	movs	r2, #0
    ace0:	5e9a      	ldrsh	r2, [r3, r2]
    ace2:	4b60      	ldr	r3, [pc, #384]	; (ae64 <CorrectIMUvalues+0xb70>)
    ace4:	801a      	strh	r2, [r3, #0]
			cgx = -gx;
    ace6:	4b60      	ldr	r3, [pc, #384]	; (ae68 <CorrectIMUvalues+0xb74>)
    ace8:	2200      	movs	r2, #0
    acea:	5e9b      	ldrsh	r3, [r3, r2]
    acec:	b29b      	uxth	r3, r3
    acee:	425b      	negs	r3, r3
    acf0:	b29b      	uxth	r3, r3
    acf2:	b21a      	sxth	r2, r3
    acf4:	4b5d      	ldr	r3, [pc, #372]	; (ae6c <CorrectIMUvalues+0xb78>)
    acf6:	801a      	strh	r2, [r3, #0]
			cgy = gz;
    acf8:	4b5d      	ldr	r3, [pc, #372]	; (ae70 <CorrectIMUvalues+0xb7c>)
    acfa:	2200      	movs	r2, #0
    acfc:	5e9a      	ldrsh	r2, [r3, r2]
    acfe:	4b5d      	ldr	r3, [pc, #372]	; (ae74 <CorrectIMUvalues+0xb80>)
    ad00:	801a      	strh	r2, [r3, #0]
			cmx = -mx;
    ad02:	4b5d      	ldr	r3, [pc, #372]	; (ae78 <CorrectIMUvalues+0xb84>)
    ad04:	2200      	movs	r2, #0
    ad06:	5e9b      	ldrsh	r3, [r3, r2]
    ad08:	b29b      	uxth	r3, r3
    ad0a:	425b      	negs	r3, r3
    ad0c:	b29b      	uxth	r3, r3
    ad0e:	b21a      	sxth	r2, r3
    ad10:	4b5a      	ldr	r3, [pc, #360]	; (ae7c <CorrectIMUvalues+0xb88>)
    ad12:	801a      	strh	r2, [r3, #0]
			cmy = mz;
    ad14:	4b5a      	ldr	r3, [pc, #360]	; (ae80 <CorrectIMUvalues+0xb8c>)
    ad16:	2200      	movs	r2, #0
    ad18:	5e9a      	ldrsh	r2, [r3, r2]
    ad1a:	4b5a      	ldr	r3, [pc, #360]	; (ae84 <CorrectIMUvalues+0xb90>)
    ad1c:	801a      	strh	r2, [r3, #0]
}
    ad1e:	e08b      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_DOWN){ // Power Down
    ad20:	1dbb      	adds	r3, r7, #6
    ad22:	781b      	ldrb	r3, [r3, #0]
    ad24:	2b02      	cmp	r3, #2
    ad26:	d12a      	bne.n	ad7e <CorrectIMUvalues+0xa8a>
			cax = ax;
    ad28:	4b4b      	ldr	r3, [pc, #300]	; (ae58 <CorrectIMUvalues+0xb64>)
    ad2a:	2200      	movs	r2, #0
    ad2c:	5e9a      	ldrsh	r2, [r3, r2]
    ad2e:	4b4b      	ldr	r3, [pc, #300]	; (ae5c <CorrectIMUvalues+0xb68>)
    ad30:	801a      	strh	r2, [r3, #0]
			cay = -az;
    ad32:	4b4b      	ldr	r3, [pc, #300]	; (ae60 <CorrectIMUvalues+0xb6c>)
    ad34:	2200      	movs	r2, #0
    ad36:	5e9b      	ldrsh	r3, [r3, r2]
    ad38:	b29b      	uxth	r3, r3
    ad3a:	425b      	negs	r3, r3
    ad3c:	b29b      	uxth	r3, r3
    ad3e:	b21a      	sxth	r2, r3
    ad40:	4b48      	ldr	r3, [pc, #288]	; (ae64 <CorrectIMUvalues+0xb70>)
    ad42:	801a      	strh	r2, [r3, #0]
			cgx = gx;
    ad44:	4b48      	ldr	r3, [pc, #288]	; (ae68 <CorrectIMUvalues+0xb74>)
    ad46:	2200      	movs	r2, #0
    ad48:	5e9a      	ldrsh	r2, [r3, r2]
    ad4a:	4b48      	ldr	r3, [pc, #288]	; (ae6c <CorrectIMUvalues+0xb78>)
    ad4c:	801a      	strh	r2, [r3, #0]
			cgy = -gz;
    ad4e:	4b48      	ldr	r3, [pc, #288]	; (ae70 <CorrectIMUvalues+0xb7c>)
    ad50:	2200      	movs	r2, #0
    ad52:	5e9b      	ldrsh	r3, [r3, r2]
    ad54:	b29b      	uxth	r3, r3
    ad56:	425b      	negs	r3, r3
    ad58:	b29b      	uxth	r3, r3
    ad5a:	b21a      	sxth	r2, r3
    ad5c:	4b45      	ldr	r3, [pc, #276]	; (ae74 <CorrectIMUvalues+0xb80>)
    ad5e:	801a      	strh	r2, [r3, #0]
			cmx = mx;
    ad60:	4b45      	ldr	r3, [pc, #276]	; (ae78 <CorrectIMUvalues+0xb84>)
    ad62:	2200      	movs	r2, #0
    ad64:	5e9a      	ldrsh	r2, [r3, r2]
    ad66:	4b45      	ldr	r3, [pc, #276]	; (ae7c <CorrectIMUvalues+0xb88>)
    ad68:	801a      	strh	r2, [r3, #0]
			cmy = -mz;
    ad6a:	4b45      	ldr	r3, [pc, #276]	; (ae80 <CorrectIMUvalues+0xb8c>)
    ad6c:	2200      	movs	r2, #0
    ad6e:	5e9b      	ldrsh	r3, [r3, r2]
    ad70:	b29b      	uxth	r3, r3
    ad72:	425b      	negs	r3, r3
    ad74:	b29b      	uxth	r3, r3
    ad76:	b21a      	sxth	r2, r3
    ad78:	4b42      	ldr	r3, [pc, #264]	; (ae84 <CorrectIMUvalues+0xb90>)
    ad7a:	801a      	strh	r2, [r3, #0]
}
    ad7c:	e05c      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_LEFT){ // Power Left
    ad7e:	1dbb      	adds	r3, r7, #6
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	2b03      	cmp	r3, #3
    ad84:	d126      	bne.n	add4 <CorrectIMUvalues+0xae0>
			cax = az;
    ad86:	4b36      	ldr	r3, [pc, #216]	; (ae60 <CorrectIMUvalues+0xb6c>)
    ad88:	2200      	movs	r2, #0
    ad8a:	5e9a      	ldrsh	r2, [r3, r2]
    ad8c:	4b33      	ldr	r3, [pc, #204]	; (ae5c <CorrectIMUvalues+0xb68>)
    ad8e:	801a      	strh	r2, [r3, #0]
			cay = ax;
    ad90:	4b31      	ldr	r3, [pc, #196]	; (ae58 <CorrectIMUvalues+0xb64>)
    ad92:	2200      	movs	r2, #0
    ad94:	5e9a      	ldrsh	r2, [r3, r2]
    ad96:	4b33      	ldr	r3, [pc, #204]	; (ae64 <CorrectIMUvalues+0xb70>)
    ad98:	801a      	strh	r2, [r3, #0]
			cgx = gz;
    ad9a:	4b35      	ldr	r3, [pc, #212]	; (ae70 <CorrectIMUvalues+0xb7c>)
    ad9c:	2200      	movs	r2, #0
    ad9e:	5e9a      	ldrsh	r2, [r3, r2]
    ada0:	4b32      	ldr	r3, [pc, #200]	; (ae6c <CorrectIMUvalues+0xb78>)
    ada2:	801a      	strh	r2, [r3, #0]
			cgy = gx;
    ada4:	4b30      	ldr	r3, [pc, #192]	; (ae68 <CorrectIMUvalues+0xb74>)
    ada6:	2200      	movs	r2, #0
    ada8:	5e9a      	ldrsh	r2, [r3, r2]
    adaa:	4b32      	ldr	r3, [pc, #200]	; (ae74 <CorrectIMUvalues+0xb80>)
    adac:	801a      	strh	r2, [r3, #0]
			cmx = -mz;
    adae:	4b34      	ldr	r3, [pc, #208]	; (ae80 <CorrectIMUvalues+0xb8c>)
    adb0:	2200      	movs	r2, #0
    adb2:	5e9b      	ldrsh	r3, [r3, r2]
    adb4:	b29b      	uxth	r3, r3
    adb6:	425b      	negs	r3, r3
    adb8:	b29b      	uxth	r3, r3
    adba:	b21a      	sxth	r2, r3
    adbc:	4b2f      	ldr	r3, [pc, #188]	; (ae7c <CorrectIMUvalues+0xb88>)
    adbe:	801a      	strh	r2, [r3, #0]
			cmy = -mx;
    adc0:	4b2d      	ldr	r3, [pc, #180]	; (ae78 <CorrectIMUvalues+0xb84>)
    adc2:	2200      	movs	r2, #0
    adc4:	5e9b      	ldrsh	r3, [r3, r2]
    adc6:	b29b      	uxth	r3, r3
    adc8:	425b      	negs	r3, r3
    adca:	b29b      	uxth	r3, r3
    adcc:	b21a      	sxth	r2, r3
    adce:	4b2d      	ldr	r3, [pc, #180]	; (ae84 <CorrectIMUvalues+0xb90>)
    add0:	801a      	strh	r2, [r3, #0]
}
    add2:	e031      	b.n	ae38 <CorrectIMUvalues+0xb44>
		}else if(power_orient == ORIENT_RIGHT){ // Power Right
    add4:	1dbb      	adds	r3, r7, #6
    add6:	781b      	ldrb	r3, [r3, #0]
    add8:	2b04      	cmp	r3, #4
    adda:	d12d      	bne.n	ae38 <CorrectIMUvalues+0xb44>
			cax = -az;
    addc:	4b20      	ldr	r3, [pc, #128]	; (ae60 <CorrectIMUvalues+0xb6c>)
    adde:	2200      	movs	r2, #0
    ade0:	5e9b      	ldrsh	r3, [r3, r2]
    ade2:	b29b      	uxth	r3, r3
    ade4:	425b      	negs	r3, r3
    ade6:	b29b      	uxth	r3, r3
    ade8:	b21a      	sxth	r2, r3
    adea:	4b1c      	ldr	r3, [pc, #112]	; (ae5c <CorrectIMUvalues+0xb68>)
    adec:	801a      	strh	r2, [r3, #0]
			cay = -ax;
    adee:	4b1a      	ldr	r3, [pc, #104]	; (ae58 <CorrectIMUvalues+0xb64>)
    adf0:	2200      	movs	r2, #0
    adf2:	5e9b      	ldrsh	r3, [r3, r2]
    adf4:	b29b      	uxth	r3, r3
    adf6:	425b      	negs	r3, r3
    adf8:	b29b      	uxth	r3, r3
    adfa:	b21a      	sxth	r2, r3
    adfc:	4b19      	ldr	r3, [pc, #100]	; (ae64 <CorrectIMUvalues+0xb70>)
    adfe:	801a      	strh	r2, [r3, #0]
			cgx = -gz;
    ae00:	4b1b      	ldr	r3, [pc, #108]	; (ae70 <CorrectIMUvalues+0xb7c>)
    ae02:	2200      	movs	r2, #0
    ae04:	5e9b      	ldrsh	r3, [r3, r2]
    ae06:	b29b      	uxth	r3, r3
    ae08:	425b      	negs	r3, r3
    ae0a:	b29b      	uxth	r3, r3
    ae0c:	b21a      	sxth	r2, r3
    ae0e:	4b17      	ldr	r3, [pc, #92]	; (ae6c <CorrectIMUvalues+0xb78>)
    ae10:	801a      	strh	r2, [r3, #0]
			cgy = -gx;
    ae12:	4b15      	ldr	r3, [pc, #84]	; (ae68 <CorrectIMUvalues+0xb74>)
    ae14:	2200      	movs	r2, #0
    ae16:	5e9b      	ldrsh	r3, [r3, r2]
    ae18:	b29b      	uxth	r3, r3
    ae1a:	425b      	negs	r3, r3
    ae1c:	b29b      	uxth	r3, r3
    ae1e:	b21a      	sxth	r2, r3
    ae20:	4b14      	ldr	r3, [pc, #80]	; (ae74 <CorrectIMUvalues+0xb80>)
    ae22:	801a      	strh	r2, [r3, #0]
			cmx = mz;
    ae24:	4b16      	ldr	r3, [pc, #88]	; (ae80 <CorrectIMUvalues+0xb8c>)
    ae26:	2200      	movs	r2, #0
    ae28:	5e9a      	ldrsh	r2, [r3, r2]
    ae2a:	4b14      	ldr	r3, [pc, #80]	; (ae7c <CorrectIMUvalues+0xb88>)
    ae2c:	801a      	strh	r2, [r3, #0]
			cmy = mx;
    ae2e:	4b12      	ldr	r3, [pc, #72]	; (ae78 <CorrectIMUvalues+0xb84>)
    ae30:	2200      	movs	r2, #0
    ae32:	5e9a      	ldrsh	r2, [r3, r2]
    ae34:	4b13      	ldr	r3, [pc, #76]	; (ae84 <CorrectIMUvalues+0xb90>)
    ae36:	801a      	strh	r2, [r3, #0]
}
    ae38:	46c0      	nop			; (mov r8, r8)
    ae3a:	46bd      	mov	sp, r7
    ae3c:	b002      	add	sp, #8
    ae3e:	bd80      	pop	{r7, pc}
    ae40:	200002ec 	.word	0x200002ec
    ae44:	20000300 	.word	0x20000300
    ae48:	200002e6 	.word	0x200002e6
    ae4c:	200002fa 	.word	0x200002fa
    ae50:	200002f2 	.word	0x200002f2
    ae54:	20000306 	.word	0x20000306
    ae58:	200002ea 	.word	0x200002ea
    ae5c:	200002fc 	.word	0x200002fc
    ae60:	200002ee 	.word	0x200002ee
    ae64:	200002fe 	.word	0x200002fe
    ae68:	200002e4 	.word	0x200002e4
    ae6c:	200002f6 	.word	0x200002f6
    ae70:	200002e8 	.word	0x200002e8
    ae74:	200002f8 	.word	0x200002f8
    ae78:	200002f0 	.word	0x200002f0
    ae7c:	20000302 	.word	0x20000302
    ae80:	200002f4 	.word	0x200002f4
    ae84:	20000304 	.word	0x20000304

0000ae88 <configure_tc>:
uint32_t millis(void);
void configure_tc(void);
void check_time(uint32_t* time_var);

void configure_tc(void)
{
    ae88:	b580      	push	{r7, lr}
    ae8a:	b08e      	sub	sp, #56	; 0x38
    ae8c:	af00      	add	r7, sp, #0
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
    ae8e:	1d3b      	adds	r3, r7, #4
    ae90:	0018      	movs	r0, r3
    ae92:	4b0e      	ldr	r3, [pc, #56]	; (aecc <configure_tc+0x44>)
    ae94:	4798      	blx	r3
	
	config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    ae96:	1d3b      	adds	r3, r7, #4
    ae98:	2208      	movs	r2, #8
    ae9a:	709a      	strb	r2, [r3, #2]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
    ae9c:	1d3b      	adds	r3, r7, #4
    ae9e:	2200      	movs	r2, #0
    aea0:	739a      	strb	r2, [r3, #14]
	config_tc.clock_source =  GCLK_CLKCTRL_GEN_GCLK0;
    aea2:	1d3b      	adds	r3, r7, #4
    aea4:	2200      	movs	r2, #0
    aea6:	701a      	strb	r2, [r3, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
    aea8:	1d3b      	adds	r3, r7, #4
    aeaa:	2200      	movs	r2, #0
    aeac:	809a      	strh	r2, [r3, #4]

	tc_init(&tc0, TC4, &config_tc);
    aeae:	1d3a      	adds	r2, r7, #4
    aeb0:	4907      	ldr	r1, [pc, #28]	; (aed0 <configure_tc+0x48>)
    aeb2:	4b08      	ldr	r3, [pc, #32]	; (aed4 <configure_tc+0x4c>)
    aeb4:	0018      	movs	r0, r3
    aeb6:	4b08      	ldr	r3, [pc, #32]	; (aed8 <configure_tc+0x50>)
    aeb8:	4798      	blx	r3
	tc_enable(&tc0);
    aeba:	4b06      	ldr	r3, [pc, #24]	; (aed4 <configure_tc+0x4c>)
    aebc:	0018      	movs	r0, r3
    aebe:	4b07      	ldr	r3, [pc, #28]	; (aedc <configure_tc+0x54>)
    aec0:	4798      	blx	r3
}
    aec2:	46c0      	nop			; (mov r8, r8)
    aec4:	46bd      	mov	sp, r7
    aec6:	b00e      	add	sp, #56	; 0x38
    aec8:	bd80      	pop	{r7, pc}
    aeca:	46c0      	nop			; (mov r8, r8)
    aecc:	000090df 	.word	0x000090df
    aed0:	42003000 	.word	0x42003000
    aed4:	20000778 	.word	0x20000778
    aed8:	00005871 	.word	0x00005871
    aedc:	00009169 	.word	0x00009169

0000aee0 <millis>:



uint32_t millis()
{
    aee0:	b580      	push	{r7, lr}
    aee2:	af00      	add	r7, sp, #0
	return (tc_get_count_value(&tc0)/7500);
    aee4:	4b06      	ldr	r3, [pc, #24]	; (af00 <millis+0x20>)
    aee6:	0018      	movs	r0, r3
    aee8:	4b06      	ldr	r3, [pc, #24]	; (af04 <millis+0x24>)
    aeea:	4798      	blx	r3
    aeec:	0002      	movs	r2, r0
    aeee:	4b06      	ldr	r3, [pc, #24]	; (af08 <millis+0x28>)
    aef0:	4906      	ldr	r1, [pc, #24]	; (af0c <millis+0x2c>)
    aef2:	0010      	movs	r0, r2
    aef4:	4798      	blx	r3
    aef6:	0003      	movs	r3, r0
}
    aef8:	0018      	movs	r0, r3
    aefa:	46bd      	mov	sp, r7
    aefc:	bd80      	pop	{r7, pc}
    aefe:	46c0      	nop			; (mov r8, r8)
    af00:	20000778 	.word	0x20000778
    af04:	00005cc1 	.word	0x00005cc1
    af08:	00013cf1 	.word	0x00013cf1
    af0c:	00001d4c 	.word	0x00001d4c

0000af10 <check_time>:

void check_time(uint32_t* time_var){
    af10:	b590      	push	{r4, r7, lr}
    af12:	b083      	sub	sp, #12
    af14:	af00      	add	r7, sp, #0
    af16:	6078      	str	r0, [r7, #4]
	if(*time_var > millis())
    af18:	687b      	ldr	r3, [r7, #4]
    af1a:	681c      	ldr	r4, [r3, #0]
    af1c:	4b05      	ldr	r3, [pc, #20]	; (af34 <check_time+0x24>)
    af1e:	4798      	blx	r3
    af20:	0003      	movs	r3, r0
    af22:	429c      	cmp	r4, r3
    af24:	d902      	bls.n	af2c <check_time+0x1c>
		*time_var = 0;
    af26:	687b      	ldr	r3, [r7, #4]
    af28:	2200      	movs	r2, #0
    af2a:	601a      	str	r2, [r3, #0]
}
    af2c:	46c0      	nop			; (mov r8, r8)
    af2e:	46bd      	mov	sp, r7
    af30:	b003      	add	sp, #12
    af32:	bd90      	pop	{r4, r7, pc}
    af34:	0000aee1 	.word	0x0000aee1

0000af38 <configure_LED_PWM>:



// Configure all of the LED ports as PWM outputs
void configure_LED_PWM(void)
{
    af38:	b580      	push	{r7, lr}
    af3a:	b0aa      	sub	sp, #168	; 0xa8
    af3c:	af00      	add	r7, sp, #0
struct tcc_config config_tcc;
tcc_get_config_defaults(&config_tcc, TCC0);
    af3e:	4a58      	ldr	r2, [pc, #352]	; (b0a0 <configure_LED_PWM+0x168>)
    af40:	1d3b      	adds	r3, r7, #4
    af42:	0011      	movs	r1, r2
    af44:	0018      	movs	r0, r3
    af46:	4b57      	ldr	r3, [pc, #348]	; (b0a4 <configure_LED_PWM+0x16c>)
    af48:	4798      	blx	r3
config_tcc.counter.period = 0xFFFF;
    af4a:	1d3b      	adds	r3, r7, #4
    af4c:	4a56      	ldr	r2, [pc, #344]	; (b0a8 <configure_LED_PWM+0x170>)
    af4e:	605a      	str	r2, [r3, #4]
config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    af50:	1d3b      	adds	r3, r7, #4
    af52:	2202      	movs	r2, #2
    af54:	761a      	strb	r2, [r3, #24]

config_tcc.compare.match[0] = 0;
    af56:	1d3b      	adds	r3, r7, #4
    af58:	2200      	movs	r2, #0
    af5a:	61da      	str	r2, [r3, #28]
config_tcc.compare.match[1] = 0;
    af5c:	1d3b      	adds	r3, r7, #4
    af5e:	2200      	movs	r2, #0
    af60:	621a      	str	r2, [r3, #32]
config_tcc.compare.match[2] = 0;
    af62:	1d3b      	adds	r3, r7, #4
    af64:	2200      	movs	r2, #0
    af66:	625a      	str	r2, [r3, #36]	; 0x24
config_tcc.compare.match[3] = 0;
    af68:	1d3b      	adds	r3, r7, #4
    af6a:	2200      	movs	r2, #0
    af6c:	629a      	str	r2, [r3, #40]	; 0x28
config_tcc.pins.enable_wave_out_pin[0] = true;
    af6e:	1d3b      	adds	r3, r7, #4
    af70:	2298      	movs	r2, #152	; 0x98
    af72:	2101      	movs	r1, #1
    af74:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[1] = true;
    af76:	1d3b      	adds	r3, r7, #4
    af78:	2299      	movs	r2, #153	; 0x99
    af7a:	2101      	movs	r1, #1
    af7c:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[2] = true;
    af7e:	1d3b      	adds	r3, r7, #4
    af80:	229a      	movs	r2, #154	; 0x9a
    af82:	2101      	movs	r1, #1
    af84:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[3] = true;
    af86:	1d3b      	adds	r3, r7, #4
    af88:	229b      	movs	r2, #155	; 0x9b
    af8a:	2101      	movs	r1, #1
    af8c:	5499      	strb	r1, [r3, r2]
config_tcc.pins.wave_out_pin[0]        = PIN_PA14F_TCC0_WO4; 
    af8e:	1d3b      	adds	r3, r7, #4
    af90:	220e      	movs	r2, #14
    af92:	659a      	str	r2, [r3, #88]	; 0x58
config_tcc.pins.wave_out_pin[1]        = PIN_PB11F_TCC0_WO5; 
    af94:	1d3b      	adds	r3, r7, #4
    af96:	222b      	movs	r2, #43	; 0x2b
    af98:	65da      	str	r2, [r3, #92]	; 0x5c
config_tcc.pins.wave_out_pin[2]        = PIN_PA10F_TCC0_WO2; 
    af9a:	1d3b      	adds	r3, r7, #4
    af9c:	220a      	movs	r2, #10
    af9e:	661a      	str	r2, [r3, #96]	; 0x60
config_tcc.pins.wave_out_pin[3]        = PIN_PA11F_TCC0_WO3;  
    afa0:	1d3b      	adds	r3, r7, #4
    afa2:	220b      	movs	r2, #11
    afa4:	665a      	str	r2, [r3, #100]	; 0x64
config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA14F_TCC0_WO4;
    afa6:	1d3b      	adds	r3, r7, #4
    afa8:	2205      	movs	r2, #5
    afaa:	679a      	str	r2, [r3, #120]	; 0x78
config_tcc.pins.wave_out_pin_mux[1]    = MUX_PB11F_TCC0_WO5;
    afac:	1d3b      	adds	r3, r7, #4
    afae:	2205      	movs	r2, #5
    afb0:	67da      	str	r2, [r3, #124]	; 0x7c
config_tcc.pins.wave_out_pin_mux[2]    = MUX_PA10F_TCC0_WO2;
    afb2:	1d3b      	adds	r3, r7, #4
    afb4:	2280      	movs	r2, #128	; 0x80
    afb6:	2105      	movs	r1, #5
    afb8:	5099      	str	r1, [r3, r2]
config_tcc.pins.wave_out_pin_mux[3]    = MUX_PA11F_TCC0_WO3;
    afba:	1d3b      	adds	r3, r7, #4
    afbc:	2284      	movs	r2, #132	; 0x84
    afbe:	2105      	movs	r1, #5
    afc0:	5099      	str	r1, [r3, r2]


tcc_init(&tcc0, TCC0, &config_tcc);
    afc2:	1d3a      	adds	r2, r7, #4
    afc4:	4936      	ldr	r1, [pc, #216]	; (b0a0 <configure_LED_PWM+0x168>)
    afc6:	4b39      	ldr	r3, [pc, #228]	; (b0ac <configure_LED_PWM+0x174>)
    afc8:	0018      	movs	r0, r3
    afca:	4b39      	ldr	r3, [pc, #228]	; (b0b0 <configure_LED_PWM+0x178>)
    afcc:	4798      	blx	r3
tcc_enable(&tcc0);
    afce:	4b37      	ldr	r3, [pc, #220]	; (b0ac <configure_LED_PWM+0x174>)
    afd0:	0018      	movs	r0, r3
    afd2:	4b38      	ldr	r3, [pc, #224]	; (b0b4 <configure_LED_PWM+0x17c>)
    afd4:	4798      	blx	r3


tcc_get_config_defaults(&config_tcc, TCC1);
    afd6:	4a38      	ldr	r2, [pc, #224]	; (b0b8 <configure_LED_PWM+0x180>)
    afd8:	1d3b      	adds	r3, r7, #4
    afda:	0011      	movs	r1, r2
    afdc:	0018      	movs	r0, r3
    afde:	4b31      	ldr	r3, [pc, #196]	; (b0a4 <configure_LED_PWM+0x16c>)
    afe0:	4798      	blx	r3
config_tcc.counter.period = 0xFFFF;
    afe2:	1d3b      	adds	r3, r7, #4
    afe4:	4a30      	ldr	r2, [pc, #192]	; (b0a8 <configure_LED_PWM+0x170>)
    afe6:	605a      	str	r2, [r3, #4]
config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    afe8:	1d3b      	adds	r3, r7, #4
    afea:	2202      	movs	r2, #2
    afec:	761a      	strb	r2, [r3, #24]

config_tcc.compare.match[0] = 0;
    afee:	1d3b      	adds	r3, r7, #4
    aff0:	2200      	movs	r2, #0
    aff2:	61da      	str	r2, [r3, #28]
config_tcc.compare.match[1] = 0;
    aff4:	1d3b      	adds	r3, r7, #4
    aff6:	2200      	movs	r2, #0
    aff8:	621a      	str	r2, [r3, #32]
config_tcc.pins.enable_wave_out_pin[0] = true;
    affa:	1d3b      	adds	r3, r7, #4
    affc:	2298      	movs	r2, #152	; 0x98
    affe:	2101      	movs	r1, #1
    b000:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[1] = true;
    b002:	1d3b      	adds	r3, r7, #4
    b004:	2299      	movs	r2, #153	; 0x99
    b006:	2101      	movs	r1, #1
    b008:	5499      	strb	r1, [r3, r2]
config_tcc.pins.wave_out_pin[0]        = PIN_PA06E_TCC1_WO0;
    b00a:	1d3b      	adds	r3, r7, #4
    b00c:	2206      	movs	r2, #6
    b00e:	659a      	str	r2, [r3, #88]	; 0x58
config_tcc.pins.wave_out_pin[1]        = PIN_PA07E_TCC1_WO1;
    b010:	1d3b      	adds	r3, r7, #4
    b012:	2207      	movs	r2, #7
    b014:	65da      	str	r2, [r3, #92]	; 0x5c
config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA06E_TCC1_WO0;
    b016:	1d3b      	adds	r3, r7, #4
    b018:	2204      	movs	r2, #4
    b01a:	679a      	str	r2, [r3, #120]	; 0x78
config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA07E_TCC1_WO1;
    b01c:	1d3b      	adds	r3, r7, #4
    b01e:	2204      	movs	r2, #4
    b020:	67da      	str	r2, [r3, #124]	; 0x7c

tcc_init(&tcc1, TCC1, &config_tcc);
    b022:	1d3a      	adds	r2, r7, #4
    b024:	4924      	ldr	r1, [pc, #144]	; (b0b8 <configure_LED_PWM+0x180>)
    b026:	4b25      	ldr	r3, [pc, #148]	; (b0bc <configure_LED_PWM+0x184>)
    b028:	0018      	movs	r0, r3
    b02a:	4b21      	ldr	r3, [pc, #132]	; (b0b0 <configure_LED_PWM+0x178>)
    b02c:	4798      	blx	r3
tcc_enable(&tcc1);
    b02e:	4b23      	ldr	r3, [pc, #140]	; (b0bc <configure_LED_PWM+0x184>)
    b030:	0018      	movs	r0, r3
    b032:	4b20      	ldr	r3, [pc, #128]	; (b0b4 <configure_LED_PWM+0x17c>)
    b034:	4798      	blx	r3


tcc_get_config_defaults(&config_tcc, TCC2);
    b036:	4a22      	ldr	r2, [pc, #136]	; (b0c0 <configure_LED_PWM+0x188>)
    b038:	1d3b      	adds	r3, r7, #4
    b03a:	0011      	movs	r1, r2
    b03c:	0018      	movs	r0, r3
    b03e:	4b19      	ldr	r3, [pc, #100]	; (b0a4 <configure_LED_PWM+0x16c>)
    b040:	4798      	blx	r3
config_tcc.counter.period = 0xFFFF;
    b042:	1d3b      	adds	r3, r7, #4
    b044:	4a18      	ldr	r2, [pc, #96]	; (b0a8 <configure_LED_PWM+0x170>)
    b046:	605a      	str	r2, [r3, #4]
config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    b048:	1d3b      	adds	r3, r7, #4
    b04a:	2202      	movs	r2, #2
    b04c:	761a      	strb	r2, [r3, #24]

config_tcc.compare.match[0] = 0;
    b04e:	1d3b      	adds	r3, r7, #4
    b050:	2200      	movs	r2, #0
    b052:	61da      	str	r2, [r3, #28]
config_tcc.compare.match[1] = 0;
    b054:	1d3b      	adds	r3, r7, #4
    b056:	2200      	movs	r2, #0
    b058:	621a      	str	r2, [r3, #32]
config_tcc.pins.enable_wave_out_pin[0] = true;
    b05a:	1d3b      	adds	r3, r7, #4
    b05c:	2298      	movs	r2, #152	; 0x98
    b05e:	2101      	movs	r1, #1
    b060:	5499      	strb	r1, [r3, r2]
config_tcc.pins.enable_wave_out_pin[1] = true;
    b062:	1d3b      	adds	r3, r7, #4
    b064:	2299      	movs	r2, #153	; 0x99
    b066:	2101      	movs	r1, #1
    b068:	5499      	strb	r1, [r3, r2]
config_tcc.pins.wave_out_pin[0]        = PIN_PA12E_TCC2_WO0;
    b06a:	1d3b      	adds	r3, r7, #4
    b06c:	220c      	movs	r2, #12
    b06e:	659a      	str	r2, [r3, #88]	; 0x58
config_tcc.pins.wave_out_pin[1]        = PIN_PA13E_TCC2_WO1;
    b070:	1d3b      	adds	r3, r7, #4
    b072:	220d      	movs	r2, #13
    b074:	65da      	str	r2, [r3, #92]	; 0x5c
config_tcc.pins.wave_out_pin_mux[0]    = MUX_PA12E_TCC2_WO0;
    b076:	1d3b      	adds	r3, r7, #4
    b078:	2204      	movs	r2, #4
    b07a:	679a      	str	r2, [r3, #120]	; 0x78
config_tcc.pins.wave_out_pin_mux[1]    = MUX_PA13E_TCC2_WO1;
    b07c:	1d3b      	adds	r3, r7, #4
    b07e:	2204      	movs	r2, #4
    b080:	67da      	str	r2, [r3, #124]	; 0x7c

tcc_init(&tcc2, TCC2, &config_tcc);
    b082:	1d3a      	adds	r2, r7, #4
    b084:	490e      	ldr	r1, [pc, #56]	; (b0c0 <configure_LED_PWM+0x188>)
    b086:	4b0f      	ldr	r3, [pc, #60]	; (b0c4 <configure_LED_PWM+0x18c>)
    b088:	0018      	movs	r0, r3
    b08a:	4b09      	ldr	r3, [pc, #36]	; (b0b0 <configure_LED_PWM+0x178>)
    b08c:	4798      	blx	r3
tcc_enable(&tcc2);
    b08e:	4b0d      	ldr	r3, [pc, #52]	; (b0c4 <configure_LED_PWM+0x18c>)
    b090:	0018      	movs	r0, r3
    b092:	4b08      	ldr	r3, [pc, #32]	; (b0b4 <configure_LED_PWM+0x17c>)
    b094:	4798      	blx	r3
}
    b096:	46c0      	nop			; (mov r8, r8)
    b098:	46bd      	mov	sp, r7
    b09a:	b02a      	add	sp, #168	; 0xa8
    b09c:	bd80      	pop	{r7, pc}
    b09e:	46c0      	nop			; (mov r8, r8)
    b0a0:	42002000 	.word	0x42002000
    b0a4:	00004c29 	.word	0x00004c29
    b0a8:	0000ffff 	.word	0x0000ffff
    b0ac:	20000738 	.word	0x20000738
    b0b0:	00005285 	.word	0x00005285
    b0b4:	000091a1 	.word	0x000091a1
    b0b8:	42002400 	.word	0x42002400
    b0bc:	20000d3c 	.word	0x20000d3c
    b0c0:	42002800 	.word	0x42002800
    b0c4:	20000cfc 	.word	0x20000cfc

0000b0c8 <setLeftRGB>:

void setLeftRGB(uint16_t red, uint16_t green, uint16_t blue) {
    b0c8:	b590      	push	{r4, r7, lr}
    b0ca:	b083      	sub	sp, #12
    b0cc:	af00      	add	r7, sp, #0
    b0ce:	0004      	movs	r4, r0
    b0d0:	0008      	movs	r0, r1
    b0d2:	0011      	movs	r1, r2
    b0d4:	1dbb      	adds	r3, r7, #6
    b0d6:	1c22      	adds	r2, r4, #0
    b0d8:	801a      	strh	r2, [r3, #0]
    b0da:	1d3b      	adds	r3, r7, #4
    b0dc:	1c02      	adds	r2, r0, #0
    b0de:	801a      	strh	r2, [r3, #0]
    b0e0:	1cbb      	adds	r3, r7, #2
    b0e2:	1c0a      	adds	r2, r1, #0
    b0e4:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.LB = blue;
    b0e6:	4b12      	ldr	r3, [pc, #72]	; (b130 <setLeftRGB+0x68>)
    b0e8:	1cba      	adds	r2, r7, #2
    b0ea:	8812      	ldrh	r2, [r2, #0]
    b0ec:	809a      	strh	r2, [r3, #4]
	RGB_Ouptut.LG = green;
    b0ee:	4b10      	ldr	r3, [pc, #64]	; (b130 <setLeftRGB+0x68>)
    b0f0:	1d3a      	adds	r2, r7, #4
    b0f2:	8812      	ldrh	r2, [r2, #0]
    b0f4:	805a      	strh	r2, [r3, #2]
	RGB_Ouptut.LR = red;
    b0f6:	4b0e      	ldr	r3, [pc, #56]	; (b130 <setLeftRGB+0x68>)
    b0f8:	1dba      	adds	r2, r7, #6
    b0fa:	8812      	ldrh	r2, [r2, #0]
    b0fc:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (0), red);
    b0fe:	1dbb      	adds	r3, r7, #6
    b100:	881a      	ldrh	r2, [r3, #0]
    b102:	4b0c      	ldr	r3, [pc, #48]	; (b134 <setLeftRGB+0x6c>)
    b104:	2100      	movs	r1, #0
    b106:	0018      	movs	r0, r3
    b108:	4b0b      	ldr	r3, [pc, #44]	; (b138 <setLeftRGB+0x70>)
    b10a:	4798      	blx	r3
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (1), green);
    b10c:	1d3b      	adds	r3, r7, #4
    b10e:	881a      	ldrh	r2, [r3, #0]
    b110:	4b0a      	ldr	r3, [pc, #40]	; (b13c <setLeftRGB+0x74>)
    b112:	2101      	movs	r1, #1
    b114:	0018      	movs	r0, r3
    b116:	4b08      	ldr	r3, [pc, #32]	; (b138 <setLeftRGB+0x70>)
    b118:	4798      	blx	r3
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (1), blue);
    b11a:	1cbb      	adds	r3, r7, #2
    b11c:	881a      	ldrh	r2, [r3, #0]
    b11e:	4b08      	ldr	r3, [pc, #32]	; (b140 <setLeftRGB+0x78>)
    b120:	2101      	movs	r1, #1
    b122:	0018      	movs	r0, r3
    b124:	4b04      	ldr	r3, [pc, #16]	; (b138 <setLeftRGB+0x70>)
    b126:	4798      	blx	r3
}
    b128:	46c0      	nop			; (mov r8, r8)
    b12a:	46bd      	mov	sp, r7
    b12c:	b003      	add	sp, #12
    b12e:	bd90      	pop	{r4, r7, pc}
    b130:	20000314 	.word	0x20000314
    b134:	20000738 	.word	0x20000738
    b138:	0000572d 	.word	0x0000572d
    b13c:	20000cfc 	.word	0x20000cfc
    b140:	20000d3c 	.word	0x20000d3c

0000b144 <setRightRGB>:

void setRightRGB(uint16_t red, uint16_t green, uint16_t blue) {
    b144:	b590      	push	{r4, r7, lr}
    b146:	b083      	sub	sp, #12
    b148:	af00      	add	r7, sp, #0
    b14a:	0004      	movs	r4, r0
    b14c:	0008      	movs	r0, r1
    b14e:	0011      	movs	r1, r2
    b150:	1dbb      	adds	r3, r7, #6
    b152:	1c22      	adds	r2, r4, #0
    b154:	801a      	strh	r2, [r3, #0]
    b156:	1d3b      	adds	r3, r7, #4
    b158:	1c02      	adds	r2, r0, #0
    b15a:	801a      	strh	r2, [r3, #0]
    b15c:	1cbb      	adds	r3, r7, #2
    b15e:	1c0a      	adds	r2, r1, #0
    b160:	801a      	strh	r2, [r3, #0]
	RGB_Ouptut.RB = blue;
    b162:	4b12      	ldr	r3, [pc, #72]	; (b1ac <setRightRGB+0x68>)
    b164:	1cba      	adds	r2, r7, #2
    b166:	8812      	ldrh	r2, [r2, #0]
    b168:	815a      	strh	r2, [r3, #10]
	RGB_Ouptut.RG = green;
    b16a:	4b10      	ldr	r3, [pc, #64]	; (b1ac <setRightRGB+0x68>)
    b16c:	1d3a      	adds	r2, r7, #4
    b16e:	8812      	ldrh	r2, [r2, #0]
    b170:	811a      	strh	r2, [r3, #8]
	RGB_Ouptut.RR = red;
    b172:	4b0e      	ldr	r3, [pc, #56]	; (b1ac <setRightRGB+0x68>)
    b174:	1dba      	adds	r2, r7, #6
    b176:	8812      	ldrh	r2, [r2, #0]
    b178:	80da      	strh	r2, [r3, #6]
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (3), red);		
    b17a:	1dbb      	adds	r3, r7, #6
    b17c:	881a      	ldrh	r2, [r3, #0]
    b17e:	4b0c      	ldr	r3, [pc, #48]	; (b1b0 <setRightRGB+0x6c>)
    b180:	2103      	movs	r1, #3
    b182:	0018      	movs	r0, r3
    b184:	4b0b      	ldr	r3, [pc, #44]	; (b1b4 <setRightRGB+0x70>)
    b186:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (1), green);
    b188:	1d3b      	adds	r3, r7, #4
    b18a:	881a      	ldrh	r2, [r3, #0]
    b18c:	4b08      	ldr	r3, [pc, #32]	; (b1b0 <setRightRGB+0x6c>)
    b18e:	2101      	movs	r1, #1
    b190:	0018      	movs	r0, r3
    b192:	4b08      	ldr	r3, [pc, #32]	; (b1b4 <setRightRGB+0x70>)
    b194:	4798      	blx	r3
	tcc_set_compare_value(&tcc0, (enum tcc_match_capture_channel) (2), blue);
    b196:	1cbb      	adds	r3, r7, #2
    b198:	881a      	ldrh	r2, [r3, #0]
    b19a:	4b05      	ldr	r3, [pc, #20]	; (b1b0 <setRightRGB+0x6c>)
    b19c:	2102      	movs	r1, #2
    b19e:	0018      	movs	r0, r3
    b1a0:	4b04      	ldr	r3, [pc, #16]	; (b1b4 <setRightRGB+0x70>)
    b1a2:	4798      	blx	r3
}
    b1a4:	46c0      	nop			; (mov r8, r8)
    b1a6:	46bd      	mov	sp, r7
    b1a8:	b003      	add	sp, #12
    b1aa:	bd90      	pop	{r4, r7, pc}
    b1ac:	20000314 	.word	0x20000314
    b1b0:	20000738 	.word	0x20000738
    b1b4:	0000572d 	.word	0x0000572d

0000b1b8 <setWhite>:

void setWhite(uint16_t white) {
    b1b8:	b580      	push	{r7, lr}
    b1ba:	b082      	sub	sp, #8
    b1bc:	af00      	add	r7, sp, #0
    b1be:	0002      	movs	r2, r0
    b1c0:	1dbb      	adds	r3, r7, #6
    b1c2:	801a      	strh	r2, [r3, #0]
	head = white;
    b1c4:	4b07      	ldr	r3, [pc, #28]	; (b1e4 <setWhite+0x2c>)
    b1c6:	1dba      	adds	r2, r7, #6
    b1c8:	8812      	ldrh	r2, [r2, #0]
    b1ca:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc1, (enum tcc_match_capture_channel) (0), white);
    b1cc:	1dbb      	adds	r3, r7, #6
    b1ce:	881a      	ldrh	r2, [r3, #0]
    b1d0:	4b05      	ldr	r3, [pc, #20]	; (b1e8 <setWhite+0x30>)
    b1d2:	2100      	movs	r1, #0
    b1d4:	0018      	movs	r0, r3
    b1d6:	4b05      	ldr	r3, [pc, #20]	; (b1ec <setWhite+0x34>)
    b1d8:	4798      	blx	r3
}
    b1da:	46c0      	nop			; (mov r8, r8)
    b1dc:	46bd      	mov	sp, r7
    b1de:	b002      	add	sp, #8
    b1e0:	bd80      	pop	{r7, pc}
    b1e2:	46c0      	nop			; (mov r8, r8)
    b1e4:	200009aa 	.word	0x200009aa
    b1e8:	20000d3c 	.word	0x20000d3c
    b1ec:	0000572d 	.word	0x0000572d

0000b1f0 <setRed>:

void setRed(uint16_t red) {
    b1f0:	b580      	push	{r7, lr}
    b1f2:	b082      	sub	sp, #8
    b1f4:	af00      	add	r7, sp, #0
    b1f6:	0002      	movs	r2, r0
    b1f8:	1dbb      	adds	r3, r7, #6
    b1fa:	801a      	strh	r2, [r3, #0]
	brake = red;
    b1fc:	4b07      	ldr	r3, [pc, #28]	; (b21c <setRed+0x2c>)
    b1fe:	1dba      	adds	r2, r7, #6
    b200:	8812      	ldrh	r2, [r2, #0]
    b202:	801a      	strh	r2, [r3, #0]
	tcc_set_compare_value(&tcc2, (enum tcc_match_capture_channel) (0), red);
    b204:	1dbb      	adds	r3, r7, #6
    b206:	881a      	ldrh	r2, [r3, #0]
    b208:	4b05      	ldr	r3, [pc, #20]	; (b220 <setRed+0x30>)
    b20a:	2100      	movs	r1, #0
    b20c:	0018      	movs	r0, r3
    b20e:	4b05      	ldr	r3, [pc, #20]	; (b224 <setRed+0x34>)
    b210:	4798      	blx	r3
}
    b212:	46c0      	nop			; (mov r8, r8)
    b214:	46bd      	mov	sp, r7
    b216:	b002      	add	sp, #8
    b218:	bd80      	pop	{r7, pc}
    b21a:	46c0      	nop			; (mov r8, r8)
    b21c:	20000312 	.word	0x20000312
    b220:	20000cfc 	.word	0x20000cfc
    b224:	0000572d 	.word	0x0000572d

0000b228 <setAux>:

void setAux(bool aux) {
    b228:	b580      	push	{r7, lr}
    b22a:	b082      	sub	sp, #8
    b22c:	af00      	add	r7, sp, #0
    b22e:	0002      	movs	r2, r0
    b230:	1dfb      	adds	r3, r7, #7
    b232:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(AUX_PIN,aux);
    b234:	1dfb      	adds	r3, r7, #7
    b236:	781b      	ldrb	r3, [r3, #0]
    b238:	0019      	movs	r1, r3
    b23a:	2008      	movs	r0, #8
    b23c:	4b02      	ldr	r3, [pc, #8]	; (b248 <setAux+0x20>)
    b23e:	4798      	blx	r3
}
    b240:	46c0      	nop			; (mov r8, r8)
    b242:	46bd      	mov	sp, r7
    b244:	b002      	add	sp, #8
    b246:	bd80      	pop	{r7, pc}
    b248:	00008b95 	.word	0x00008b95

0000b24c <setCycleColor>:

struct RGB_Vals setCycleColor(uint16_t _upColor, uint16_t _downColor, int _cycle){
    b24c:	b580      	push	{r7, lr}
    b24e:	b088      	sub	sp, #32
    b250:	af00      	add	r7, sp, #0
    b252:	60f8      	str	r0, [r7, #12]
    b254:	0008      	movs	r0, r1
    b256:	0011      	movs	r1, r2
    b258:	607b      	str	r3, [r7, #4]
    b25a:	230a      	movs	r3, #10
    b25c:	18fb      	adds	r3, r7, r3
    b25e:	1c02      	adds	r2, r0, #0
    b260:	801a      	strh	r2, [r3, #0]
    b262:	2308      	movs	r3, #8
    b264:	18fb      	adds	r3, r7, r3
    b266:	1c0a      	adds	r2, r1, #0
    b268:	801a      	strh	r2, [r3, #0]
	struct RGB_Vals color;
	if(_cycle == 0){
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	2b00      	cmp	r3, #0
    b26e:	d11f      	bne.n	b2b0 <setCycleColor+0x64>
		color.LR=_upColor;
    b270:	2314      	movs	r3, #20
    b272:	18fb      	adds	r3, r7, r3
    b274:	220a      	movs	r2, #10
    b276:	18ba      	adds	r2, r7, r2
    b278:	8812      	ldrh	r2, [r2, #0]
    b27a:	801a      	strh	r2, [r3, #0]
		color.LG = 0;
    b27c:	2314      	movs	r3, #20
    b27e:	18fb      	adds	r3, r7, r3
    b280:	2200      	movs	r2, #0
    b282:	805a      	strh	r2, [r3, #2]
		color.LB = _downColor;
    b284:	2314      	movs	r3, #20
    b286:	18fb      	adds	r3, r7, r3
    b288:	2208      	movs	r2, #8
    b28a:	18ba      	adds	r2, r7, r2
    b28c:	8812      	ldrh	r2, [r2, #0]
    b28e:	809a      	strh	r2, [r3, #4]
		color.RR=_upColor;
    b290:	2314      	movs	r3, #20
    b292:	18fb      	adds	r3, r7, r3
    b294:	220a      	movs	r2, #10
    b296:	18ba      	adds	r2, r7, r2
    b298:	8812      	ldrh	r2, [r2, #0]
    b29a:	80da      	strh	r2, [r3, #6]
		color.RG = 0;
    b29c:	2314      	movs	r3, #20
    b29e:	18fb      	adds	r3, r7, r3
    b2a0:	2200      	movs	r2, #0
    b2a2:	811a      	strh	r2, [r3, #8]
		color.RB = _downColor;
    b2a4:	2314      	movs	r3, #20
    b2a6:	18fb      	adds	r3, r7, r3
    b2a8:	2208      	movs	r2, #8
    b2aa:	18ba      	adds	r2, r7, r2
    b2ac:	8812      	ldrh	r2, [r2, #0]
    b2ae:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 1){
    b2b0:	687b      	ldr	r3, [r7, #4]
    b2b2:	2b01      	cmp	r3, #1
    b2b4:	d11f      	bne.n	b2f6 <setCycleColor+0xaa>
		color.LR=_downColor;
    b2b6:	2314      	movs	r3, #20
    b2b8:	18fb      	adds	r3, r7, r3
    b2ba:	2208      	movs	r2, #8
    b2bc:	18ba      	adds	r2, r7, r2
    b2be:	8812      	ldrh	r2, [r2, #0]
    b2c0:	801a      	strh	r2, [r3, #0]
		color.LG = _upColor;
    b2c2:	2314      	movs	r3, #20
    b2c4:	18fb      	adds	r3, r7, r3
    b2c6:	220a      	movs	r2, #10
    b2c8:	18ba      	adds	r2, r7, r2
    b2ca:	8812      	ldrh	r2, [r2, #0]
    b2cc:	805a      	strh	r2, [r3, #2]
		color.LB = 0;
    b2ce:	2314      	movs	r3, #20
    b2d0:	18fb      	adds	r3, r7, r3
    b2d2:	2200      	movs	r2, #0
    b2d4:	809a      	strh	r2, [r3, #4]
		color.RR=_downColor;
    b2d6:	2314      	movs	r3, #20
    b2d8:	18fb      	adds	r3, r7, r3
    b2da:	2208      	movs	r2, #8
    b2dc:	18ba      	adds	r2, r7, r2
    b2de:	8812      	ldrh	r2, [r2, #0]
    b2e0:	80da      	strh	r2, [r3, #6]
		color.RG = _upColor;
    b2e2:	2314      	movs	r3, #20
    b2e4:	18fb      	adds	r3, r7, r3
    b2e6:	220a      	movs	r2, #10
    b2e8:	18ba      	adds	r2, r7, r2
    b2ea:	8812      	ldrh	r2, [r2, #0]
    b2ec:	811a      	strh	r2, [r3, #8]
		color.RB = 0;
    b2ee:	2314      	movs	r3, #20
    b2f0:	18fb      	adds	r3, r7, r3
    b2f2:	2200      	movs	r2, #0
    b2f4:	815a      	strh	r2, [r3, #10]
	}
	if(_cycle == 2){
    b2f6:	687b      	ldr	r3, [r7, #4]
    b2f8:	2b02      	cmp	r3, #2
    b2fa:	d11f      	bne.n	b33c <setCycleColor+0xf0>
		color.LR=0;
    b2fc:	2314      	movs	r3, #20
    b2fe:	18fb      	adds	r3, r7, r3
    b300:	2200      	movs	r2, #0
    b302:	801a      	strh	r2, [r3, #0]
		color.LG = _downColor;
    b304:	2314      	movs	r3, #20
    b306:	18fb      	adds	r3, r7, r3
    b308:	2208      	movs	r2, #8
    b30a:	18ba      	adds	r2, r7, r2
    b30c:	8812      	ldrh	r2, [r2, #0]
    b30e:	805a      	strh	r2, [r3, #2]
		color.LB = _upColor;
    b310:	2314      	movs	r3, #20
    b312:	18fb      	adds	r3, r7, r3
    b314:	220a      	movs	r2, #10
    b316:	18ba      	adds	r2, r7, r2
    b318:	8812      	ldrh	r2, [r2, #0]
    b31a:	809a      	strh	r2, [r3, #4]
		color.RR=0;
    b31c:	2314      	movs	r3, #20
    b31e:	18fb      	adds	r3, r7, r3
    b320:	2200      	movs	r2, #0
    b322:	80da      	strh	r2, [r3, #6]
		color.RG = _downColor;
    b324:	2314      	movs	r3, #20
    b326:	18fb      	adds	r3, r7, r3
    b328:	2208      	movs	r2, #8
    b32a:	18ba      	adds	r2, r7, r2
    b32c:	8812      	ldrh	r2, [r2, #0]
    b32e:	811a      	strh	r2, [r3, #8]
		color.RB = _upColor;
    b330:	2314      	movs	r3, #20
    b332:	18fb      	adds	r3, r7, r3
    b334:	220a      	movs	r2, #10
    b336:	18ba      	adds	r2, r7, r2
    b338:	8812      	ldrh	r2, [r2, #0]
    b33a:	815a      	strh	r2, [r3, #10]
	}
	return color;
    b33c:	68fa      	ldr	r2, [r7, #12]
    b33e:	2314      	movs	r3, #20
    b340:	18fb      	adds	r3, r7, r3
    b342:	0010      	movs	r0, r2
    b344:	0019      	movs	r1, r3
    b346:	230c      	movs	r3, #12
    b348:	001a      	movs	r2, r3
    b34a:	4b03      	ldr	r3, [pc, #12]	; (b358 <setCycleColor+0x10c>)
    b34c:	4798      	blx	r3
}
    b34e:	68f8      	ldr	r0, [r7, #12]
    b350:	46bd      	mov	sp, r7
    b352:	b008      	add	sp, #32
    b354:	bd80      	pop	{r7, pc}
    b356:	46c0      	nop			; (mov r8, r8)
    b358:	00016ccd 	.word	0x00016ccd

0000b35c <setConstBases>:

void setConstBases(){
    b35c:	b580      	push	{r7, lr}
    b35e:	af00      	add	r7, sp, #0
	ColorBase[MODE_STATIC] = COLOR_STATIC;
    b360:	4b25      	ldr	r3, [pc, #148]	; (b3f8 <setConstBases+0x9c>)
    b362:	2200      	movs	r2, #0
    b364:	701a      	strb	r2, [r3, #0]
	RateBase[MODE_STATIC] = RATE_STATIC;
    b366:	4b25      	ldr	r3, [pc, #148]	; (b3fc <setConstBases+0xa0>)
    b368:	2200      	movs	r2, #0
    b36a:	701a      	strb	r2, [r3, #0]
	BrightBase[MODE_STATIC] = BRIGHT_STATIC;
    b36c:	4b24      	ldr	r3, [pc, #144]	; (b400 <setConstBases+0xa4>)
    b36e:	2200      	movs	r2, #0
    b370:	701a      	strb	r2, [r3, #0]
	
	ColorBase[MODE_COLOR_CYCLE] = COLOR_COLOR_CYCLE;
    b372:	4b21      	ldr	r3, [pc, #132]	; (b3f8 <setConstBases+0x9c>)
    b374:	2201      	movs	r2, #1
    b376:	705a      	strb	r2, [r3, #1]
	RateBase[MODE_COLOR_CYCLE] = RATE_STATIC;
    b378:	4b20      	ldr	r3, [pc, #128]	; (b3fc <setConstBases+0xa0>)
    b37a:	2200      	movs	r2, #0
    b37c:	705a      	strb	r2, [r3, #1]
	BrightBase[MODE_COLOR_CYCLE] = BRIGHT_STATIC;
    b37e:	4b20      	ldr	r3, [pc, #128]	; (b400 <setConstBases+0xa4>)
    b380:	2200      	movs	r2, #0
    b382:	705a      	strb	r2, [r3, #1]
	
	ColorBase[MODE_COMPASS_CYCLE] = COLOR_COMPASS;
    b384:	4b1c      	ldr	r3, [pc, #112]	; (b3f8 <setConstBases+0x9c>)
    b386:	2202      	movs	r2, #2
    b388:	709a      	strb	r2, [r3, #2]
	RateBase[MODE_COMPASS_CYCLE] = RATE_STATIC;
    b38a:	4b1c      	ldr	r3, [pc, #112]	; (b3fc <setConstBases+0xa0>)
    b38c:	2200      	movs	r2, #0
    b38e:	709a      	strb	r2, [r3, #2]
	BrightBase[MODE_COMPASS_CYCLE] = BRIGHT_STATIC;
    b390:	4b1b      	ldr	r3, [pc, #108]	; (b400 <setConstBases+0xa4>)
    b392:	2200      	movs	r2, #0
    b394:	709a      	strb	r2, [r3, #2]
	
	ColorBase[MODE_THROTTLE] = COLOR_THROTTLE;
    b396:	4b18      	ldr	r3, [pc, #96]	; (b3f8 <setConstBases+0x9c>)
    b398:	2206      	movs	r2, #6
    b39a:	70da      	strb	r2, [r3, #3]
	RateBase[MODE_THROTTLE] = RATE_STATIC;
    b39c:	4b17      	ldr	r3, [pc, #92]	; (b3fc <setConstBases+0xa0>)
    b39e:	2200      	movs	r2, #0
    b3a0:	70da      	strb	r2, [r3, #3]
	BrightBase[MODE_THROTTLE] = BRIGHT_STATIC;
    b3a2:	4b17      	ldr	r3, [pc, #92]	; (b400 <setConstBases+0xa4>)
    b3a4:	2200      	movs	r2, #0
    b3a6:	70da      	strb	r2, [r3, #3]
	
	ColorBase[MODE_RPM_CYCLE] = COLOR_COLOR_CYCLE;
    b3a8:	4b13      	ldr	r3, [pc, #76]	; (b3f8 <setConstBases+0x9c>)
    b3aa:	2201      	movs	r2, #1
    b3ac:	711a      	strb	r2, [r3, #4]
	RateBase[MODE_RPM_CYCLE] = RATE_RPM;
    b3ae:	4b13      	ldr	r3, [pc, #76]	; (b3fc <setConstBases+0xa0>)
    b3b0:	2203      	movs	r2, #3
    b3b2:	711a      	strb	r2, [r3, #4]
	BrightBase[MODE_RPM_CYCLE] = BRIGHT_RPM;
    b3b4:	4b12      	ldr	r3, [pc, #72]	; (b400 <setConstBases+0xa4>)
    b3b6:	2203      	movs	r2, #3
    b3b8:	711a      	strb	r2, [r3, #4]
	
	ColorBase[MODE_RPM_THROTTLE] = COLOR_THROTTLE;
    b3ba:	4b0f      	ldr	r3, [pc, #60]	; (b3f8 <setConstBases+0x9c>)
    b3bc:	2206      	movs	r2, #6
    b3be:	715a      	strb	r2, [r3, #5]
	RateBase[MODE_RPM_THROTTLE] = RATE_STATIC;
    b3c0:	4b0e      	ldr	r3, [pc, #56]	; (b3fc <setConstBases+0xa0>)
    b3c2:	2200      	movs	r2, #0
    b3c4:	715a      	strb	r2, [r3, #5]
	BrightBase[MODE_RPM_THROTTLE] = BRIGHT_RPM;
    b3c6:	4b0e      	ldr	r3, [pc, #56]	; (b400 <setConstBases+0xa4>)
    b3c8:	2203      	movs	r2, #3
    b3ca:	715a      	strb	r2, [r3, #5]
	
	ColorBase[MODE_X_ACCEL] = COLOR_COLOR_CYCLE;
    b3cc:	4b0a      	ldr	r3, [pc, #40]	; (b3f8 <setConstBases+0x9c>)
    b3ce:	2201      	movs	r2, #1
    b3d0:	719a      	strb	r2, [r3, #6]
	RateBase[MODE_X_ACCEL] = RATE_STATIC;
    b3d2:	4b0a      	ldr	r3, [pc, #40]	; (b3fc <setConstBases+0xa0>)
    b3d4:	2200      	movs	r2, #0
    b3d6:	719a      	strb	r2, [r3, #6]
	BrightBase[MODE_X_ACCEL] = BRIGHT_X_ACCEL;
    b3d8:	4b09      	ldr	r3, [pc, #36]	; (b400 <setConstBases+0xa4>)
    b3da:	2205      	movs	r2, #5
    b3dc:	719a      	strb	r2, [r3, #6]
	
	ColorBase[MODE_Y_ACCEL] = COLOR_Y_ACCEL;
    b3de:	4b06      	ldr	r3, [pc, #24]	; (b3f8 <setConstBases+0x9c>)
    b3e0:	2209      	movs	r2, #9
    b3e2:	71da      	strb	r2, [r3, #7]
	RateBase[MODE_Y_ACCEL] = RATE_STATIC;
    b3e4:	4b05      	ldr	r3, [pc, #20]	; (b3fc <setConstBases+0xa0>)
    b3e6:	2200      	movs	r2, #0
    b3e8:	71da      	strb	r2, [r3, #7]
	BrightBase[MODE_Y_ACCEL] = BRIGHT_STATIC;
    b3ea:	4b05      	ldr	r3, [pc, #20]	; (b400 <setConstBases+0xa4>)
    b3ec:	2200      	movs	r2, #0
    b3ee:	71da      	strb	r2, [r3, #7]
}
    b3f0:	46c0      	nop			; (mov r8, r8)
    b3f2:	46bd      	mov	sp, r7
    b3f4:	bd80      	pop	{r7, pc}
    b3f6:	46c0      	nop			; (mov r8, r8)
    b3f8:	20000070 	.word	0x20000070
    b3fc:	20000088 	.word	0x20000088
    b400:	2000007c 	.word	0x2000007c

0000b404 <ERROR_LEDs>:

// Flash the side LEDs red until restart
// 0: Red, 1: Blue, 2:Green, 3: Teal, 4: Yellow, 5:Purple
void ERROR_LEDs(uint8_t error_type){
    b404:	b580      	push	{r7, lr}
    b406:	b086      	sub	sp, #24
    b408:	af00      	add	r7, sp, #0
    b40a:	0002      	movs	r2, r0
    b40c:	1dfb      	adds	r3, r7, #7
    b40e:	701a      	strb	r2, [r3, #0]
	uint32_t timer = 0;
    b410:	2300      	movs	r3, #0
    b412:	60fb      	str	r3, [r7, #12]

	uint16_t tempR = 0, tempG = 0, tempB = 0;
    b414:	2316      	movs	r3, #22
    b416:	18fb      	adds	r3, r7, r3
    b418:	2200      	movs	r2, #0
    b41a:	801a      	strh	r2, [r3, #0]
    b41c:	2314      	movs	r3, #20
    b41e:	18fb      	adds	r3, r7, r3
    b420:	2200      	movs	r2, #0
    b422:	801a      	strh	r2, [r3, #0]
    b424:	2312      	movs	r3, #18
    b426:	18fb      	adds	r3, r7, r3
    b428:	2200      	movs	r2, #0
    b42a:	801a      	strh	r2, [r3, #0]
	if(error_type == 0 || error_type == 4  || error_type == 5)
    b42c:	1dfb      	adds	r3, r7, #7
    b42e:	781b      	ldrb	r3, [r3, #0]
    b430:	2b00      	cmp	r3, #0
    b432:	d007      	beq.n	b444 <ERROR_LEDs+0x40>
    b434:	1dfb      	adds	r3, r7, #7
    b436:	781b      	ldrb	r3, [r3, #0]
    b438:	2b04      	cmp	r3, #4
    b43a:	d003      	beq.n	b444 <ERROR_LEDs+0x40>
    b43c:	1dfb      	adds	r3, r7, #7
    b43e:	781b      	ldrb	r3, [r3, #0]
    b440:	2b05      	cmp	r3, #5
    b442:	d104      	bne.n	b44e <ERROR_LEDs+0x4a>
		tempR = 0xFFFF;
    b444:	2316      	movs	r3, #22
    b446:	18fb      	adds	r3, r7, r3
    b448:	2201      	movs	r2, #1
    b44a:	4252      	negs	r2, r2
    b44c:	801a      	strh	r2, [r3, #0]
	if(error_type >= 2 && error_type <= 4)
    b44e:	1dfb      	adds	r3, r7, #7
    b450:	781b      	ldrb	r3, [r3, #0]
    b452:	2b01      	cmp	r3, #1
    b454:	d908      	bls.n	b468 <ERROR_LEDs+0x64>
    b456:	1dfb      	adds	r3, r7, #7
    b458:	781b      	ldrb	r3, [r3, #0]
    b45a:	2b04      	cmp	r3, #4
    b45c:	d804      	bhi.n	b468 <ERROR_LEDs+0x64>
		tempG = 0xFFFF;
    b45e:	2314      	movs	r3, #20
    b460:	18fb      	adds	r3, r7, r3
    b462:	2201      	movs	r2, #1
    b464:	4252      	negs	r2, r2
    b466:	801a      	strh	r2, [r3, #0]
	if(error_type == 1 || error_type == 3 || error_type == 5)
    b468:	1dfb      	adds	r3, r7, #7
    b46a:	781b      	ldrb	r3, [r3, #0]
    b46c:	2b01      	cmp	r3, #1
    b46e:	d007      	beq.n	b480 <ERROR_LEDs+0x7c>
    b470:	1dfb      	adds	r3, r7, #7
    b472:	781b      	ldrb	r3, [r3, #0]
    b474:	2b03      	cmp	r3, #3
    b476:	d003      	beq.n	b480 <ERROR_LEDs+0x7c>
    b478:	1dfb      	adds	r3, r7, #7
    b47a:	781b      	ldrb	r3, [r3, #0]
    b47c:	2b05      	cmp	r3, #5
    b47e:	d104      	bne.n	b48a <ERROR_LEDs+0x86>
		tempB = 0xFFFF;
    b480:	2312      	movs	r3, #18
    b482:	18fb      	adds	r3, r7, r3
    b484:	2201      	movs	r2, #1
    b486:	4252      	negs	r2, r2
    b488:	801a      	strh	r2, [r3, #0]

	while(1){
		setLeftRGB(0,0,0);
    b48a:	2200      	movs	r2, #0
    b48c:	2100      	movs	r1, #0
    b48e:	2000      	movs	r0, #0
    b490:	4b2e      	ldr	r3, [pc, #184]	; (b54c <ERROR_LEDs+0x148>)
    b492:	4798      	blx	r3
		setRightRGB(0,0,0);
    b494:	2200      	movs	r2, #0
    b496:	2100      	movs	r1, #0
    b498:	2000      	movs	r0, #0
    b49a:	4b2d      	ldr	r3, [pc, #180]	; (b550 <ERROR_LEDs+0x14c>)
    b49c:	4798      	blx	r3
		
		setRed(0);
    b49e:	2000      	movs	r0, #0
    b4a0:	4b2c      	ldr	r3, [pc, #176]	; (b554 <ERROR_LEDs+0x150>)
    b4a2:	4798      	blx	r3
		setWhite(0);
    b4a4:	2000      	movs	r0, #0
    b4a6:	4b2c      	ldr	r3, [pc, #176]	; (b558 <ERROR_LEDs+0x154>)
    b4a8:	4798      	blx	r3
		setAux(0);
    b4aa:	2000      	movs	r0, #0
    b4ac:	4b2b      	ldr	r3, [pc, #172]	; (b55c <ERROR_LEDs+0x158>)
    b4ae:	4798      	blx	r3

		while(millis() - timer < 1000) {
    b4b0:	e004      	b.n	b4bc <ERROR_LEDs+0xb8>
			check_time(&timer);
    b4b2:	230c      	movs	r3, #12
    b4b4:	18fb      	adds	r3, r7, r3
    b4b6:	0018      	movs	r0, r3
    b4b8:	4b29      	ldr	r3, [pc, #164]	; (b560 <ERROR_LEDs+0x15c>)
    b4ba:	4798      	blx	r3
		while(millis() - timer < 1000) {
    b4bc:	4b29      	ldr	r3, [pc, #164]	; (b564 <ERROR_LEDs+0x160>)
    b4be:	4798      	blx	r3
    b4c0:	0002      	movs	r2, r0
    b4c2:	68fb      	ldr	r3, [r7, #12]
    b4c4:	1ad3      	subs	r3, r2, r3
    b4c6:	4a28      	ldr	r2, [pc, #160]	; (b568 <ERROR_LEDs+0x164>)
    b4c8:	4293      	cmp	r3, r2
    b4ca:	d9f2      	bls.n	b4b2 <ERROR_LEDs+0xae>
		}
		timer = millis();
    b4cc:	4b25      	ldr	r3, [pc, #148]	; (b564 <ERROR_LEDs+0x160>)
    b4ce:	4798      	blx	r3
    b4d0:	0003      	movs	r3, r0
    b4d2:	60fb      	str	r3, [r7, #12]

		setLeftRGB(tempR,tempG,tempB);
    b4d4:	2312      	movs	r3, #18
    b4d6:	18fb      	adds	r3, r7, r3
    b4d8:	881a      	ldrh	r2, [r3, #0]
    b4da:	2314      	movs	r3, #20
    b4dc:	18fb      	adds	r3, r7, r3
    b4de:	8819      	ldrh	r1, [r3, #0]
    b4e0:	2316      	movs	r3, #22
    b4e2:	18fb      	adds	r3, r7, r3
    b4e4:	881b      	ldrh	r3, [r3, #0]
    b4e6:	0018      	movs	r0, r3
    b4e8:	4b18      	ldr	r3, [pc, #96]	; (b54c <ERROR_LEDs+0x148>)
    b4ea:	4798      	blx	r3
		setRightRGB(tempR,tempG,tempB);
    b4ec:	2312      	movs	r3, #18
    b4ee:	18fb      	adds	r3, r7, r3
    b4f0:	881a      	ldrh	r2, [r3, #0]
    b4f2:	2314      	movs	r3, #20
    b4f4:	18fb      	adds	r3, r7, r3
    b4f6:	8819      	ldrh	r1, [r3, #0]
    b4f8:	2316      	movs	r3, #22
    b4fa:	18fb      	adds	r3, r7, r3
    b4fc:	881b      	ldrh	r3, [r3, #0]
    b4fe:	0018      	movs	r0, r3
    b500:	4b13      	ldr	r3, [pc, #76]	; (b550 <ERROR_LEDs+0x14c>)
    b502:	4798      	blx	r3
		
		setRed(0xFFFF);
    b504:	4b19      	ldr	r3, [pc, #100]	; (b56c <ERROR_LEDs+0x168>)
    b506:	0018      	movs	r0, r3
    b508:	4b12      	ldr	r3, [pc, #72]	; (b554 <ERROR_LEDs+0x150>)
    b50a:	4798      	blx	r3
		setWhite(0xFFFF);
    b50c:	4b17      	ldr	r3, [pc, #92]	; (b56c <ERROR_LEDs+0x168>)
    b50e:	0018      	movs	r0, r3
    b510:	4b11      	ldr	r3, [pc, #68]	; (b558 <ERROR_LEDs+0x154>)
    b512:	4798      	blx	r3
		setAux(1);
    b514:	2001      	movs	r0, #1
    b516:	4b11      	ldr	r3, [pc, #68]	; (b55c <ERROR_LEDs+0x158>)
    b518:	4798      	blx	r3

		while(millis() - timer < 250) {
    b51a:	e004      	b.n	b526 <ERROR_LEDs+0x122>
			check_time(&timer);
    b51c:	230c      	movs	r3, #12
    b51e:	18fb      	adds	r3, r7, r3
    b520:	0018      	movs	r0, r3
    b522:	4b0f      	ldr	r3, [pc, #60]	; (b560 <ERROR_LEDs+0x15c>)
    b524:	4798      	blx	r3
		while(millis() - timer < 250) {
    b526:	4b0f      	ldr	r3, [pc, #60]	; (b564 <ERROR_LEDs+0x160>)
    b528:	4798      	blx	r3
    b52a:	0002      	movs	r2, r0
    b52c:	68fb      	ldr	r3, [r7, #12]
    b52e:	1ad3      	subs	r3, r2, r3
    b530:	2bf9      	cmp	r3, #249	; 0xf9
    b532:	d9f3      	bls.n	b51c <ERROR_LEDs+0x118>
		}
		timer = millis();
    b534:	4b0b      	ldr	r3, [pc, #44]	; (b564 <ERROR_LEDs+0x160>)
    b536:	4798      	blx	r3
    b538:	0003      	movs	r3, r0
    b53a:	60fb      	str	r3, [r7, #12]
    b53c:	2312      	movs	r3, #18
    b53e:	18fb      	adds	r3, r7, r3
    b540:	2212      	movs	r2, #18
    b542:	18ba      	adds	r2, r7, r2
    b544:	8812      	ldrh	r2, [r2, #0]
    b546:	801a      	strh	r2, [r3, #0]
		setLeftRGB(0,0,0);
    b548:	e79f      	b.n	b48a <ERROR_LEDs+0x86>
    b54a:	46c0      	nop			; (mov r8, r8)
    b54c:	0000b0c9 	.word	0x0000b0c9
    b550:	0000b145 	.word	0x0000b145
    b554:	0000b1f1 	.word	0x0000b1f1
    b558:	0000b1b9 	.word	0x0000b1b9
    b55c:	0000b229 	.word	0x0000b229
    b560:	0000af11 	.word	0x0000af11
    b564:	0000aee1 	.word	0x0000aee1
    b568:	000003e7 	.word	0x000003e7
    b56c:	0000ffff 	.word	0x0000ffff

0000b570 <TurnSignal>:
}

// true = left    false = right
uint32_t turnTimer = 0;
uint16_t turnOutput = 0;
void TurnSignal(bool direction){
    b570:	b580      	push	{r7, lr}
    b572:	b082      	sub	sp, #8
    b574:	af00      	add	r7, sp, #0
    b576:	0002      	movs	r2, r0
    b578:	1dfb      	adds	r3, r7, #7
    b57a:	701a      	strb	r2, [r3, #0]

	check_time(&turnTimer);
    b57c:	4b29      	ldr	r3, [pc, #164]	; (b624 <TurnSignal+0xb4>)
    b57e:	0018      	movs	r0, r3
    b580:	4b29      	ldr	r3, [pc, #164]	; (b628 <TurnSignal+0xb8>)
    b582:	4798      	blx	r3
	if(turnOutput == 0x0 && (millis() - turnTimer >= TURN_OFF_TIME)){
    b584:	4b29      	ldr	r3, [pc, #164]	; (b62c <TurnSignal+0xbc>)
    b586:	881b      	ldrh	r3, [r3, #0]
    b588:	2b00      	cmp	r3, #0
    b58a:	d113      	bne.n	b5b4 <TurnSignal+0x44>
    b58c:	4b28      	ldr	r3, [pc, #160]	; (b630 <TurnSignal+0xc0>)
    b58e:	4798      	blx	r3
    b590:	0002      	movs	r2, r0
    b592:	4b24      	ldr	r3, [pc, #144]	; (b624 <TurnSignal+0xb4>)
    b594:	681b      	ldr	r3, [r3, #0]
    b596:	1ad2      	subs	r2, r2, r3
    b598:	2390      	movs	r3, #144	; 0x90
    b59a:	33ff      	adds	r3, #255	; 0xff
    b59c:	429a      	cmp	r2, r3
    b59e:	d909      	bls.n	b5b4 <TurnSignal+0x44>
		turnOutput = 0xFFFF;
    b5a0:	4b22      	ldr	r3, [pc, #136]	; (b62c <TurnSignal+0xbc>)
    b5a2:	2201      	movs	r2, #1
    b5a4:	4252      	negs	r2, r2
    b5a6:	801a      	strh	r2, [r3, #0]
		turnTimer = millis();
    b5a8:	4b21      	ldr	r3, [pc, #132]	; (b630 <TurnSignal+0xc0>)
    b5aa:	4798      	blx	r3
    b5ac:	0002      	movs	r2, r0
    b5ae:	4b1d      	ldr	r3, [pc, #116]	; (b624 <TurnSignal+0xb4>)
    b5b0:	601a      	str	r2, [r3, #0]
    b5b2:	e014      	b.n	b5de <TurnSignal+0x6e>
	} else if(turnOutput == 0xFFFF && (millis() - turnTimer >= TURN_ON_TIME)){
    b5b4:	4b1d      	ldr	r3, [pc, #116]	; (b62c <TurnSignal+0xbc>)
    b5b6:	881b      	ldrh	r3, [r3, #0]
    b5b8:	4a1e      	ldr	r2, [pc, #120]	; (b634 <TurnSignal+0xc4>)
    b5ba:	4293      	cmp	r3, r2
    b5bc:	d10f      	bne.n	b5de <TurnSignal+0x6e>
    b5be:	4b1c      	ldr	r3, [pc, #112]	; (b630 <TurnSignal+0xc0>)
    b5c0:	4798      	blx	r3
    b5c2:	0002      	movs	r2, r0
    b5c4:	4b17      	ldr	r3, [pc, #92]	; (b624 <TurnSignal+0xb4>)
    b5c6:	681b      	ldr	r3, [r3, #0]
    b5c8:	1ad3      	subs	r3, r2, r3
    b5ca:	2bf9      	cmp	r3, #249	; 0xf9
    b5cc:	d907      	bls.n	b5de <TurnSignal+0x6e>
		turnOutput = 0;
    b5ce:	4b17      	ldr	r3, [pc, #92]	; (b62c <TurnSignal+0xbc>)
    b5d0:	2200      	movs	r2, #0
    b5d2:	801a      	strh	r2, [r3, #0]
		turnTimer = millis();
    b5d4:	4b16      	ldr	r3, [pc, #88]	; (b630 <TurnSignal+0xc0>)
    b5d6:	4798      	blx	r3
    b5d8:	0002      	movs	r2, r0
    b5da:	4b12      	ldr	r3, [pc, #72]	; (b624 <TurnSignal+0xb4>)
    b5dc:	601a      	str	r2, [r3, #0]
	}

	if(direction == true){
    b5de:	1dfb      	adds	r3, r7, #7
    b5e0:	781b      	ldrb	r3, [r3, #0]
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	d00d      	beq.n	b602 <TurnSignal+0x92>
		setLeftRGB(turnOutput,turnOutput,0);
    b5e6:	4b11      	ldr	r3, [pc, #68]	; (b62c <TurnSignal+0xbc>)
    b5e8:	8818      	ldrh	r0, [r3, #0]
    b5ea:	4b10      	ldr	r3, [pc, #64]	; (b62c <TurnSignal+0xbc>)
    b5ec:	881b      	ldrh	r3, [r3, #0]
    b5ee:	2200      	movs	r2, #0
    b5f0:	0019      	movs	r1, r3
    b5f2:	4b11      	ldr	r3, [pc, #68]	; (b638 <TurnSignal+0xc8>)
    b5f4:	4798      	blx	r3
		setRightRGB(0,0,0);
    b5f6:	2200      	movs	r2, #0
    b5f8:	2100      	movs	r1, #0
    b5fa:	2000      	movs	r0, #0
    b5fc:	4b0f      	ldr	r3, [pc, #60]	; (b63c <TurnSignal+0xcc>)
    b5fe:	4798      	blx	r3
	} else {
		setLeftRGB(0,0,0);
		setRightRGB(turnOutput,turnOutput,0);
	}
}
    b600:	e00c      	b.n	b61c <TurnSignal+0xac>
		setLeftRGB(0,0,0);
    b602:	2200      	movs	r2, #0
    b604:	2100      	movs	r1, #0
    b606:	2000      	movs	r0, #0
    b608:	4b0b      	ldr	r3, [pc, #44]	; (b638 <TurnSignal+0xc8>)
    b60a:	4798      	blx	r3
		setRightRGB(turnOutput,turnOutput,0);
    b60c:	4b07      	ldr	r3, [pc, #28]	; (b62c <TurnSignal+0xbc>)
    b60e:	8818      	ldrh	r0, [r3, #0]
    b610:	4b06      	ldr	r3, [pc, #24]	; (b62c <TurnSignal+0xbc>)
    b612:	881b      	ldrh	r3, [r3, #0]
    b614:	2200      	movs	r2, #0
    b616:	0019      	movs	r1, r3
    b618:	4b08      	ldr	r3, [pc, #32]	; (b63c <TurnSignal+0xcc>)
    b61a:	4798      	blx	r3
}
    b61c:	46c0      	nop			; (mov r8, r8)
    b61e:	46bd      	mov	sp, r7
    b620:	b002      	add	sp, #8
    b622:	bd80      	pop	{r7, pc}
    b624:	20000334 	.word	0x20000334
    b628:	0000af11 	.word	0x0000af11
    b62c:	20000338 	.word	0x20000338
    b630:	0000aee1 	.word	0x0000aee1
    b634:	0000ffff 	.word	0x0000ffff
    b638:	0000b0c9 	.word	0x0000b0c9
    b63c:	0000b145 	.word	0x0000b145

0000b640 <crc16>:
	0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
	0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
	0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

uint16_t crc16(uint8_t *buf, uint16_t len) {
    b640:	b580      	push	{r7, lr}
    b642:	b084      	sub	sp, #16
    b644:	af00      	add	r7, sp, #0
    b646:	6078      	str	r0, [r7, #4]
    b648:	000a      	movs	r2, r1
    b64a:	1cbb      	adds	r3, r7, #2
    b64c:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint16_t cksum = 0;
    b64e:	230c      	movs	r3, #12
    b650:	18fb      	adds	r3, r7, r3
    b652:	2200      	movs	r2, #0
    b654:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
    b656:	230e      	movs	r3, #14
    b658:	18fb      	adds	r3, r7, r3
    b65a:	2200      	movs	r2, #0
    b65c:	801a      	strh	r2, [r3, #0]
    b65e:	e021      	b.n	b6a4 <crc16+0x64>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
    b660:	230c      	movs	r3, #12
    b662:	18fb      	adds	r3, r7, r3
    b664:	881b      	ldrh	r3, [r3, #0]
    b666:	0a1b      	lsrs	r3, r3, #8
    b668:	b29b      	uxth	r3, r3
    b66a:	0019      	movs	r1, r3
    b66c:	687b      	ldr	r3, [r7, #4]
    b66e:	1c5a      	adds	r2, r3, #1
    b670:	607a      	str	r2, [r7, #4]
    b672:	781b      	ldrb	r3, [r3, #0]
    b674:	404b      	eors	r3, r1
    b676:	22ff      	movs	r2, #255	; 0xff
    b678:	401a      	ands	r2, r3
    b67a:	4b11      	ldr	r3, [pc, #68]	; (b6c0 <crc16+0x80>)
    b67c:	0052      	lsls	r2, r2, #1
    b67e:	5ad3      	ldrh	r3, [r2, r3]
    b680:	b21a      	sxth	r2, r3
    b682:	230c      	movs	r3, #12
    b684:	18fb      	adds	r3, r7, r3
    b686:	881b      	ldrh	r3, [r3, #0]
    b688:	021b      	lsls	r3, r3, #8
    b68a:	b21b      	sxth	r3, r3
    b68c:	4053      	eors	r3, r2
    b68e:	b21a      	sxth	r2, r3
    b690:	230c      	movs	r3, #12
    b692:	18fb      	adds	r3, r7, r3
    b694:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
    b696:	230e      	movs	r3, #14
    b698:	18fb      	adds	r3, r7, r3
    b69a:	881a      	ldrh	r2, [r3, #0]
    b69c:	230e      	movs	r3, #14
    b69e:	18fb      	adds	r3, r7, r3
    b6a0:	3201      	adds	r2, #1
    b6a2:	801a      	strh	r2, [r3, #0]
    b6a4:	230e      	movs	r3, #14
    b6a6:	18fa      	adds	r2, r7, r3
    b6a8:	1cbb      	adds	r3, r7, #2
    b6aa:	8812      	ldrh	r2, [r2, #0]
    b6ac:	881b      	ldrh	r3, [r3, #0]
    b6ae:	429a      	cmp	r2, r3
    b6b0:	d3d6      	bcc.n	b660 <crc16+0x20>
	}
	return cksum;
    b6b2:	230c      	movs	r3, #12
    b6b4:	18fb      	adds	r3, r7, r3
    b6b6:	881b      	ldrh	r3, [r3, #0]
}
    b6b8:	0018      	movs	r0, r3
    b6ba:	46bd      	mov	sp, r7
    b6bc:	b004      	add	sp, #16
    b6be:	bd80      	pop	{r7, pc}
    b6c0:	00017018 	.word	0x00017018

0000b6c4 <configure_vesc_usart>:
float buffer_get_float32_auto(uint8_t *buffer, int8_t index);


// Configure SERCOM5 as USART for VESC
void configure_vesc_usart()
{
    b6c4:	b580      	push	{r7, lr}
    b6c6:	b092      	sub	sp, #72	; 0x48
    b6c8:	af00      	add	r7, sp, #0
	uint32_t baud = 0;
    b6ca:	2300      	movs	r3, #0
    b6cc:	647b      	str	r3, [r7, #68]	; 0x44
	if(UART_baud == BAUD_9600)
    b6ce:	4b28      	ldr	r3, [pc, #160]	; (b770 <configure_vesc_usart+0xac>)
    b6d0:	781b      	ldrb	r3, [r3, #0]
    b6d2:	2b00      	cmp	r3, #0
    b6d4:	d103      	bne.n	b6de <configure_vesc_usart+0x1a>
		baud = 9600;
    b6d6:	2396      	movs	r3, #150	; 0x96
    b6d8:	019b      	lsls	r3, r3, #6
    b6da:	647b      	str	r3, [r7, #68]	; 0x44
    b6dc:	e016      	b.n	b70c <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_38400)
    b6de:	4b24      	ldr	r3, [pc, #144]	; (b770 <configure_vesc_usart+0xac>)
    b6e0:	781b      	ldrb	r3, [r3, #0]
    b6e2:	2b01      	cmp	r3, #1
    b6e4:	d103      	bne.n	b6ee <configure_vesc_usart+0x2a>
		baud = 38400;
    b6e6:	2396      	movs	r3, #150	; 0x96
    b6e8:	021b      	lsls	r3, r3, #8
    b6ea:	647b      	str	r3, [r7, #68]	; 0x44
    b6ec:	e00e      	b.n	b70c <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_57600)
    b6ee:	4b20      	ldr	r3, [pc, #128]	; (b770 <configure_vesc_usart+0xac>)
    b6f0:	781b      	ldrb	r3, [r3, #0]
    b6f2:	2b02      	cmp	r3, #2
    b6f4:	d103      	bne.n	b6fe <configure_vesc_usart+0x3a>
		baud = 57600;
    b6f6:	23e1      	movs	r3, #225	; 0xe1
    b6f8:	021b      	lsls	r3, r3, #8
    b6fa:	647b      	str	r3, [r7, #68]	; 0x44
    b6fc:	e006      	b.n	b70c <configure_vesc_usart+0x48>
	else if(UART_baud == BAUD_115200)
    b6fe:	4b1c      	ldr	r3, [pc, #112]	; (b770 <configure_vesc_usart+0xac>)
    b700:	781b      	ldrb	r3, [r3, #0]
    b702:	2b03      	cmp	r3, #3
    b704:	d102      	bne.n	b70c <configure_vesc_usart+0x48>
		baud = 115200;
    b706:	23e1      	movs	r3, #225	; 0xe1
    b708:	025b      	lsls	r3, r3, #9
    b70a:	647b      	str	r3, [r7, #68]	; 0x44

	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    b70c:	1d3b      	adds	r3, r7, #4
    b70e:	0018      	movs	r0, r3
    b710:	4b18      	ldr	r3, [pc, #96]	; (b774 <configure_vesc_usart+0xb0>)
    b712:	4798      	blx	r3
	config_usart.baudrate    = baud;
    b714:	1d3b      	adds	r3, r7, #4
    b716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    b718:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    b71a:	1d3b      	adds	r3, r7, #4
    b71c:	2280      	movs	r2, #128	; 0x80
    b71e:	0352      	lsls	r2, r2, #13
    b720:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    b722:	1d3b      	adds	r3, r7, #4
    b724:	4a14      	ldr	r2, [pc, #80]	; (b778 <configure_vesc_usart+0xb4>)
    b726:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    b728:	1d3b      	adds	r3, r7, #4
    b72a:	4a14      	ldr	r2, [pc, #80]	; (b77c <configure_vesc_usart+0xb8>)
    b72c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    b72e:	1d3b      	adds	r3, r7, #4
    b730:	2201      	movs	r2, #1
    b732:	4252      	negs	r2, r2
    b734:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    b736:	1d3b      	adds	r3, r7, #4
    b738:	2201      	movs	r2, #1
    b73a:	4252      	negs	r2, r2
    b73c:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&vesc_usart,SERCOM1, &config_usart) != STATUS_OK)
    b73e:	46c0      	nop			; (mov r8, r8)
    b740:	1d3a      	adds	r2, r7, #4
    b742:	490f      	ldr	r1, [pc, #60]	; (b780 <configure_vesc_usart+0xbc>)
    b744:	4b0f      	ldr	r3, [pc, #60]	; (b784 <configure_vesc_usart+0xc0>)
    b746:	0018      	movs	r0, r3
    b748:	4b0f      	ldr	r3, [pc, #60]	; (b788 <configure_vesc_usart+0xc4>)
    b74a:	4798      	blx	r3
    b74c:	1e03      	subs	r3, r0, #0
    b74e:	d1f7      	bne.n	b740 <configure_vesc_usart+0x7c>
	{}
	usart_enable(&vesc_usart);
    b750:	4b0c      	ldr	r3, [pc, #48]	; (b784 <configure_vesc_usart+0xc0>)
    b752:	0018      	movs	r0, r3
    b754:	4b0d      	ldr	r3, [pc, #52]	; (b78c <configure_vesc_usart+0xc8>)
    b756:	4798      	blx	r3

	latest_vesc_vals.FW_VERSION_MAJOR = 0;
    b758:	4b0d      	ldr	r3, [pc, #52]	; (b790 <configure_vesc_usart+0xcc>)
    b75a:	2234      	movs	r2, #52	; 0x34
    b75c:	2100      	movs	r1, #0
    b75e:	5499      	strb	r1, [r3, r2]
	latest_vesc_vals.FW_VERSION_MINOR = 0;
    b760:	4b0b      	ldr	r3, [pc, #44]	; (b790 <configure_vesc_usart+0xcc>)
    b762:	2235      	movs	r2, #53	; 0x35
    b764:	2100      	movs	r1, #0
    b766:	5499      	strb	r1, [r3, r2]
}
    b768:	46c0      	nop			; (mov r8, r8)
    b76a:	46bd      	mov	sp, r7
    b76c:	b012      	add	sp, #72	; 0x48
    b76e:	bd80      	pop	{r7, pc}
    b770:	20000311 	.word	0x20000311
    b774:	00008f2d 	.word	0x00008f2d
    b778:	00100002 	.word	0x00100002
    b77c:	00110002 	.word	0x00110002
    b780:	42000c00 	.word	0x42000c00
    b784:	20000704 	.word	0x20000704
    b788:	000060e5 	.word	0x000060e5
    b78c:	00008fed 	.word	0x00008fed
    b790:	20000940 	.word	0x20000940

0000b794 <vesc_usart_read_callback>:
	VESC_UART_BYTES_CRC,
	VESC_UART_BYTES_STOP,
};
// The callback routine for when a BLE message is recieved
void vesc_usart_read_callback(struct usart_module *const usart_module)
{
    b794:	b590      	push	{r4, r7, lr}
    b796:	b085      	sub	sp, #20
    b798:	af00      	add	r7, sp, #0
    b79a:	6078      	str	r0, [r7, #4]
	switch(vesc_uart_expected_bytes){
    b79c:	4b5f      	ldr	r3, [pc, #380]	; (b91c <vesc_usart_read_callback+0x188>)
    b79e:	781b      	ldrb	r3, [r3, #0]
    b7a0:	2b04      	cmp	r3, #4
    b7a2:	d900      	bls.n	b7a6 <vesc_usart_read_callback+0x12>
    b7a4:	e0b4      	b.n	b910 <vesc_usart_read_callback+0x17c>
    b7a6:	009a      	lsls	r2, r3, #2
    b7a8:	4b5d      	ldr	r3, [pc, #372]	; (b920 <vesc_usart_read_callback+0x18c>)
    b7aa:	18d3      	adds	r3, r2, r3
    b7ac:	681b      	ldr	r3, [r3, #0]
    b7ae:	469f      	mov	pc, r3
		case VESC_UART_BYTES_START:
			vesc_uart_expected_bytes = VESC_UART_BYTES_LEN;
    b7b0:	4b5a      	ldr	r3, [pc, #360]	; (b91c <vesc_usart_read_callback+0x188>)
    b7b2:	2201      	movs	r2, #1
    b7b4:	701a      	strb	r2, [r3, #0]
			if(vesc_revieve_packet.start == 0x02)
    b7b6:	4b5b      	ldr	r3, [pc, #364]	; (b924 <vesc_usart_read_callback+0x190>)
    b7b8:	781b      	ldrb	r3, [r3, #0]
    b7ba:	2b02      	cmp	r3, #2
    b7bc:	d106      	bne.n	b7cc <vesc_usart_read_callback+0x38>
				usart_read_buffer_job(&vesc_usart, vesc_revieve_packet.len, (uint16_t)1);
    b7be:	495a      	ldr	r1, [pc, #360]	; (b928 <vesc_usart_read_callback+0x194>)
    b7c0:	4b5a      	ldr	r3, [pc, #360]	; (b92c <vesc_usart_read_callback+0x198>)
    b7c2:	2201      	movs	r2, #1
    b7c4:	0018      	movs	r0, r3
    b7c6:	4b5a      	ldr	r3, [pc, #360]	; (b930 <vesc_usart_read_callback+0x19c>)
    b7c8:	4798      	blx	r3
    b7ca:	e013      	b.n	b7f4 <vesc_usart_read_callback+0x60>
			else if(vesc_revieve_packet.start == 0x03)
    b7cc:	4b55      	ldr	r3, [pc, #340]	; (b924 <vesc_usart_read_callback+0x190>)
    b7ce:	781b      	ldrb	r3, [r3, #0]
    b7d0:	2b03      	cmp	r3, #3
    b7d2:	d106      	bne.n	b7e2 <vesc_usart_read_callback+0x4e>
				usart_read_buffer_job(&vesc_usart, vesc_revieve_packet.len, (uint16_t)2);
    b7d4:	4954      	ldr	r1, [pc, #336]	; (b928 <vesc_usart_read_callback+0x194>)
    b7d6:	4b55      	ldr	r3, [pc, #340]	; (b92c <vesc_usart_read_callback+0x198>)
    b7d8:	2202      	movs	r2, #2
    b7da:	0018      	movs	r0, r3
    b7dc:	4b54      	ldr	r3, [pc, #336]	; (b930 <vesc_usart_read_callback+0x19c>)
    b7de:	4798      	blx	r3
    b7e0:	e008      	b.n	b7f4 <vesc_usart_read_callback+0x60>
			else {
				vesc_uart_expected_bytes = VESC_UART_BYTES_START;
    b7e2:	4b4e      	ldr	r3, [pc, #312]	; (b91c <vesc_usart_read_callback+0x188>)
    b7e4:	2200      	movs	r2, #0
    b7e6:	701a      	strb	r2, [r3, #0]
				usart_read_buffer_job(&vesc_usart, &vesc_revieve_packet.start, (uint16_t)1);
    b7e8:	494e      	ldr	r1, [pc, #312]	; (b924 <vesc_usart_read_callback+0x190>)
    b7ea:	4b50      	ldr	r3, [pc, #320]	; (b92c <vesc_usart_read_callback+0x198>)
    b7ec:	2201      	movs	r2, #1
    b7ee:	0018      	movs	r0, r3
    b7f0:	4b4f      	ldr	r3, [pc, #316]	; (b930 <vesc_usart_read_callback+0x19c>)
    b7f2:	4798      	blx	r3
			}

			vesc_revieve_packet.len[0] = 0;
    b7f4:	4b4b      	ldr	r3, [pc, #300]	; (b924 <vesc_usart_read_callback+0x190>)
    b7f6:	2200      	movs	r2, #0
    b7f8:	705a      	strb	r2, [r3, #1]
			vesc_revieve_packet.len[1] = 0;
    b7fa:	4b4a      	ldr	r3, [pc, #296]	; (b924 <vesc_usart_read_callback+0x190>)
    b7fc:	2200      	movs	r2, #0
    b7fe:	709a      	strb	r2, [r3, #2]
			vesc_revieve_packet.crc[0] = 0;
    b800:	4b48      	ldr	r3, [pc, #288]	; (b924 <vesc_usart_read_callback+0x190>)
    b802:	4a4c      	ldr	r2, [pc, #304]	; (b934 <vesc_usart_read_callback+0x1a0>)
    b804:	2100      	movs	r1, #0
    b806:	5499      	strb	r1, [r3, r2]
			vesc_revieve_packet.crc[1] = 0;
    b808:	4a46      	ldr	r2, [pc, #280]	; (b924 <vesc_usart_read_callback+0x190>)
    b80a:	2381      	movs	r3, #129	; 0x81
    b80c:	009b      	lsls	r3, r3, #2
    b80e:	2100      	movs	r1, #0
    b810:	54d1      	strb	r1, [r2, r3]

			len_bytes = vesc_revieve_packet.start-1;
    b812:	4b44      	ldr	r3, [pc, #272]	; (b924 <vesc_usart_read_callback+0x190>)
    b814:	781b      	ldrb	r3, [r3, #0]
    b816:	3b01      	subs	r3, #1
    b818:	b2da      	uxtb	r2, r3
    b81a:	4b47      	ldr	r3, [pc, #284]	; (b938 <vesc_usart_read_callback+0x1a4>)
    b81c:	701a      	strb	r2, [r3, #0]
			corrupted = false;
    b81e:	4b47      	ldr	r3, [pc, #284]	; (b93c <vesc_usart_read_callback+0x1a8>)
    b820:	2200      	movs	r2, #0
    b822:	701a      	strb	r2, [r3, #0]
			break;
    b824:	e075      	b.n	b912 <vesc_usart_read_callback+0x17e>
		case VESC_UART_BYTES_LEN:
			if(vesc_revieve_packet.start == 0x02)
    b826:	4b3f      	ldr	r3, [pc, #252]	; (b924 <vesc_usart_read_callback+0x190>)
    b828:	781b      	ldrb	r3, [r3, #0]
    b82a:	2b02      	cmp	r3, #2
    b82c:	d105      	bne.n	b83a <vesc_usart_read_callback+0xa6>
				packet_len = vesc_revieve_packet.len[0];
    b82e:	4b3d      	ldr	r3, [pc, #244]	; (b924 <vesc_usart_read_callback+0x190>)
    b830:	785b      	ldrb	r3, [r3, #1]
    b832:	b29a      	uxth	r2, r3
    b834:	4b42      	ldr	r3, [pc, #264]	; (b940 <vesc_usart_read_callback+0x1ac>)
    b836:	801a      	strh	r2, [r3, #0]
    b838:	e00b      	b.n	b852 <vesc_usart_read_callback+0xbe>
			else
				packet_len = ((vesc_revieve_packet.len[0]<<8)|vesc_revieve_packet.len[1]);
    b83a:	4b3a      	ldr	r3, [pc, #232]	; (b924 <vesc_usart_read_callback+0x190>)
    b83c:	785b      	ldrb	r3, [r3, #1]
    b83e:	021b      	lsls	r3, r3, #8
    b840:	b21a      	sxth	r2, r3
    b842:	4b38      	ldr	r3, [pc, #224]	; (b924 <vesc_usart_read_callback+0x190>)
    b844:	789b      	ldrb	r3, [r3, #2]
    b846:	b21b      	sxth	r3, r3
    b848:	4313      	orrs	r3, r2
    b84a:	b21b      	sxth	r3, r3
    b84c:	b29a      	uxth	r2, r3
    b84e:	4b3c      	ldr	r3, [pc, #240]	; (b940 <vesc_usart_read_callback+0x1ac>)
    b850:	801a      	strh	r2, [r3, #0]

			vesc_uart_expected_bytes = VESC_UART_BYTES_PAYLOAD;
    b852:	4b32      	ldr	r3, [pc, #200]	; (b91c <vesc_usart_read_callback+0x188>)
    b854:	2202      	movs	r2, #2
    b856:	701a      	strb	r2, [r3, #0]
			usart_read_buffer_job(&vesc_usart, vesc_revieve_packet.payload, (uint16_t)packet_len);
    b858:	4b39      	ldr	r3, [pc, #228]	; (b940 <vesc_usart_read_callback+0x1ac>)
    b85a:	881a      	ldrh	r2, [r3, #0]
    b85c:	4939      	ldr	r1, [pc, #228]	; (b944 <vesc_usart_read_callback+0x1b0>)
    b85e:	4b33      	ldr	r3, [pc, #204]	; (b92c <vesc_usart_read_callback+0x198>)
    b860:	0018      	movs	r0, r3
    b862:	4b33      	ldr	r3, [pc, #204]	; (b930 <vesc_usart_read_callback+0x19c>)
    b864:	4798      	blx	r3
			break;
    b866:	e054      	b.n	b912 <vesc_usart_read_callback+0x17e>
		case VESC_UART_BYTES_PAYLOAD:
			vesc_uart_expected_bytes = VESC_UART_BYTES_CRC;
    b868:	4b2c      	ldr	r3, [pc, #176]	; (b91c <vesc_usart_read_callback+0x188>)
    b86a:	2203      	movs	r2, #3
    b86c:	701a      	strb	r2, [r3, #0]
			usart_read_buffer_job(&vesc_usart, vesc_revieve_packet.crc, (uint16_t)2);
    b86e:	4936      	ldr	r1, [pc, #216]	; (b948 <vesc_usart_read_callback+0x1b4>)
    b870:	4b2e      	ldr	r3, [pc, #184]	; (b92c <vesc_usart_read_callback+0x198>)
    b872:	2202      	movs	r2, #2
    b874:	0018      	movs	r0, r3
    b876:	4b2e      	ldr	r3, [pc, #184]	; (b930 <vesc_usart_read_callback+0x19c>)
    b878:	4798      	blx	r3
			break;
    b87a:	e04a      	b.n	b912 <vesc_usart_read_callback+0x17e>
		case VESC_UART_BYTES_CRC:{
			uint16_t crc_check = crc16(vesc_revieve_packet.payload, packet_len);
    b87c:	4b30      	ldr	r3, [pc, #192]	; (b940 <vesc_usart_read_callback+0x1ac>)
    b87e:	881a      	ldrh	r2, [r3, #0]
    b880:	230e      	movs	r3, #14
    b882:	18fc      	adds	r4, r7, r3
    b884:	4b2f      	ldr	r3, [pc, #188]	; (b944 <vesc_usart_read_callback+0x1b0>)
    b886:	0011      	movs	r1, r2
    b888:	0018      	movs	r0, r3
    b88a:	4b30      	ldr	r3, [pc, #192]	; (b94c <vesc_usart_read_callback+0x1b8>)
    b88c:	4798      	blx	r3
    b88e:	0003      	movs	r3, r0
    b890:	8023      	strh	r3, [r4, #0]
			if(crc_check != (uint16_t)((vesc_revieve_packet.crc[0]<<8)|vesc_revieve_packet.crc[1])){
    b892:	4b24      	ldr	r3, [pc, #144]	; (b924 <vesc_usart_read_callback+0x190>)
    b894:	4a27      	ldr	r2, [pc, #156]	; (b934 <vesc_usart_read_callback+0x1a0>)
    b896:	5c9b      	ldrb	r3, [r3, r2]
    b898:	021b      	lsls	r3, r3, #8
    b89a:	b21a      	sxth	r2, r3
    b89c:	4921      	ldr	r1, [pc, #132]	; (b924 <vesc_usart_read_callback+0x190>)
    b89e:	2381      	movs	r3, #129	; 0x81
    b8a0:	009b      	lsls	r3, r3, #2
    b8a2:	5ccb      	ldrb	r3, [r1, r3]
    b8a4:	b21b      	sxth	r3, r3
    b8a6:	4313      	orrs	r3, r2
    b8a8:	b21b      	sxth	r3, r3
    b8aa:	b29b      	uxth	r3, r3
    b8ac:	220e      	movs	r2, #14
    b8ae:	18ba      	adds	r2, r7, r2
    b8b0:	8812      	ldrh	r2, [r2, #0]
    b8b2:	429a      	cmp	r2, r3
    b8b4:	d002      	beq.n	b8bc <vesc_usart_read_callback+0x128>
				corrupted = true;
    b8b6:	4b21      	ldr	r3, [pc, #132]	; (b93c <vesc_usart_read_callback+0x1a8>)
    b8b8:	2201      	movs	r2, #1
    b8ba:	701a      	strb	r2, [r3, #0]
			}
	
			vesc_uart_expected_bytes = VESC_UART_BYTES_STOP;
    b8bc:	4b17      	ldr	r3, [pc, #92]	; (b91c <vesc_usart_read_callback+0x188>)
    b8be:	2204      	movs	r2, #4
    b8c0:	701a      	strb	r2, [r3, #0]
			usart_read_buffer_job(&vesc_usart, &vesc_revieve_packet.stop, (uint16_t)1);
    b8c2:	4923      	ldr	r1, [pc, #140]	; (b950 <vesc_usart_read_callback+0x1bc>)
    b8c4:	4b19      	ldr	r3, [pc, #100]	; (b92c <vesc_usart_read_callback+0x198>)
    b8c6:	2201      	movs	r2, #1
    b8c8:	0018      	movs	r0, r3
    b8ca:	4b19      	ldr	r3, [pc, #100]	; (b930 <vesc_usart_read_callback+0x19c>)
    b8cc:	4798      	blx	r3
			break;}
    b8ce:	e020      	b.n	b912 <vesc_usart_read_callback+0x17e>
		case VESC_UART_BYTES_STOP:
			if(vesc_revieve_packet.stop == 0x03 && !corrupted) {
    b8d0:	4b14      	ldr	r3, [pc, #80]	; (b924 <vesc_usart_read_callback+0x190>)
    b8d2:	4a20      	ldr	r2, [pc, #128]	; (b954 <vesc_usart_read_callback+0x1c0>)
    b8d4:	5c9b      	ldrb	r3, [r3, r2]
    b8d6:	2b03      	cmp	r3, #3
    b8d8:	d108      	bne.n	b8ec <vesc_usart_read_callback+0x158>
    b8da:	4b18      	ldr	r3, [pc, #96]	; (b93c <vesc_usart_read_callback+0x1a8>)
    b8dc:	781b      	ldrb	r3, [r3, #0]
    b8de:	2201      	movs	r2, #1
    b8e0:	4053      	eors	r3, r2
    b8e2:	b2db      	uxtb	r3, r3
    b8e4:	2b00      	cmp	r3, #0
    b8e6:	d001      	beq.n	b8ec <vesc_usart_read_callback+0x158>
				process_recieved_packet();
    b8e8:	4b1b      	ldr	r3, [pc, #108]	; (b958 <vesc_usart_read_callback+0x1c4>)
    b8ea:	4798      	blx	r3
			}
		
			vesc_usart_time = millis();
    b8ec:	4b1b      	ldr	r3, [pc, #108]	; (b95c <vesc_usart_read_callback+0x1c8>)
    b8ee:	4798      	blx	r3
    b8f0:	0002      	movs	r2, r0
    b8f2:	4b1b      	ldr	r3, [pc, #108]	; (b960 <vesc_usart_read_callback+0x1cc>)
    b8f4:	601a      	str	r2, [r3, #0]
			HOLD_FOR_REPLY = false;
    b8f6:	4b1b      	ldr	r3, [pc, #108]	; (b964 <vesc_usart_read_callback+0x1d0>)
    b8f8:	2200      	movs	r2, #0
    b8fa:	701a      	strb	r2, [r3, #0]
		
			vesc_uart_expected_bytes = VESC_UART_BYTES_START;
    b8fc:	4b07      	ldr	r3, [pc, #28]	; (b91c <vesc_usart_read_callback+0x188>)
    b8fe:	2200      	movs	r2, #0
    b900:	701a      	strb	r2, [r3, #0]
			usart_read_buffer_job(&vesc_usart, &vesc_revieve_packet.start, (uint16_t)1);
    b902:	4908      	ldr	r1, [pc, #32]	; (b924 <vesc_usart_read_callback+0x190>)
    b904:	4b09      	ldr	r3, [pc, #36]	; (b92c <vesc_usart_read_callback+0x198>)
    b906:	2201      	movs	r2, #1
    b908:	0018      	movs	r0, r3
    b90a:	4b09      	ldr	r3, [pc, #36]	; (b930 <vesc_usart_read_callback+0x19c>)
    b90c:	4798      	blx	r3
			break;
    b90e:	e000      	b.n	b912 <vesc_usart_read_callback+0x17e>
		default:
			break;
    b910:	46c0      	nop			; (mov r8, r8)
	}
}
    b912:	46c0      	nop			; (mov r8, r8)
    b914:	46bd      	mov	sp, r7
    b916:	b005      	add	sp, #20
    b918:	bd90      	pop	{r4, r7, pc}
    b91a:	46c0      	nop			; (mov r8, r8)
    b91c:	20000371 	.word	0x20000371
    b920:	00017218 	.word	0x00017218
    b924:	20000ac4 	.word	0x20000ac4
    b928:	20000ac5 	.word	0x20000ac5
    b92c:	20000704 	.word	0x20000704
    b930:	00006615 	.word	0x00006615
    b934:	00000203 	.word	0x00000203
    b938:	2000036d 	.word	0x2000036d
    b93c:	20000370 	.word	0x20000370
    b940:	2000036e 	.word	0x2000036e
    b944:	20000ac7 	.word	0x20000ac7
    b948:	20000cc7 	.word	0x20000cc7
    b94c:	0000b641 	.word	0x0000b641
    b950:	20000cc9 	.word	0x20000cc9
    b954:	00000205 	.word	0x00000205
    b958:	0000baf5 	.word	0x0000baf5
    b95c:	0000aee1 	.word	0x0000aee1
    b960:	20000364 	.word	0x20000364
    b964:	20000368 	.word	0x20000368

0000b968 <configure_vesc_usart_callbacks>:


// Configure SERCOM callback for receiving a buffer frame
void configure_vesc_usart_callbacks(void)
{
    b968:	b580      	push	{r7, lr}
    b96a:	af00      	add	r7, sp, #0
	usart_register_callback(&vesc_usart, vesc_usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    b96c:	4906      	ldr	r1, [pc, #24]	; (b988 <configure_vesc_usart_callbacks+0x20>)
    b96e:	4b07      	ldr	r3, [pc, #28]	; (b98c <configure_vesc_usart_callbacks+0x24>)
    b970:	2201      	movs	r2, #1
    b972:	0018      	movs	r0, r3
    b974:	4b06      	ldr	r3, [pc, #24]	; (b990 <configure_vesc_usart_callbacks+0x28>)
    b976:	4798      	blx	r3
	usart_enable_callback(&vesc_usart, USART_CALLBACK_BUFFER_RECEIVED);
    b978:	4b04      	ldr	r3, [pc, #16]	; (b98c <configure_vesc_usart_callbacks+0x24>)
    b97a:	2101      	movs	r1, #1
    b97c:	0018      	movs	r0, r3
    b97e:	4b05      	ldr	r3, [pc, #20]	; (b994 <configure_vesc_usart_callbacks+0x2c>)
    b980:	4798      	blx	r3
}
    b982:	46c0      	nop			; (mov r8, r8)
    b984:	46bd      	mov	sp, r7
    b986:	bd80      	pop	{r7, pc}
    b988:	0000b795 	.word	0x0000b795
    b98c:	20000704 	.word	0x20000704
    b990:	000065cd 	.word	0x000065cd
    b994:	00009081 	.word	0x00009081

0000b998 <send_packet>:

uint8_t vesc_tx_buff[MAX_PAYLOAD_LEN+6];
void send_packet(struct uart_packet send_pak){
    b998:	b084      	sub	sp, #16
    b99a:	b590      	push	{r4, r7, lr}
    b99c:	b085      	sub	sp, #20
    b99e:	af00      	add	r7, sp, #0
    b9a0:	2420      	movs	r4, #32
    b9a2:	193c      	adds	r4, r7, r4
    b9a4:	6020      	str	r0, [r4, #0]
    b9a6:	6061      	str	r1, [r4, #4]
    b9a8:	60a2      	str	r2, [r4, #8]
    b9aa:	60e3      	str	r3, [r4, #12]
	if((millis()-vesc_usart_time) > vesc_usart_timeout)
    b9ac:	4b49      	ldr	r3, [pc, #292]	; (bad4 <send_packet+0x13c>)
    b9ae:	4798      	blx	r3
    b9b0:	0002      	movs	r2, r0
    b9b2:	4b49      	ldr	r3, [pc, #292]	; (bad8 <send_packet+0x140>)
    b9b4:	681b      	ldr	r3, [r3, #0]
    b9b6:	1ad2      	subs	r2, r2, r3
    b9b8:	4b48      	ldr	r3, [pc, #288]	; (badc <send_packet+0x144>)
    b9ba:	681b      	ldr	r3, [r3, #0]
    b9bc:	429a      	cmp	r2, r3
    b9be:	d902      	bls.n	b9c6 <send_packet+0x2e>
		HOLD_FOR_REPLY = false;
    b9c0:	4b47      	ldr	r3, [pc, #284]	; (bae0 <send_packet+0x148>)
    b9c2:	2200      	movs	r2, #0
    b9c4:	701a      	strb	r2, [r3, #0]

	send_pak.stop = 0x03;
    b9c6:	2320      	movs	r3, #32
    b9c8:	18fa      	adds	r2, r7, r3
    b9ca:	4b46      	ldr	r3, [pc, #280]	; (bae4 <send_packet+0x14c>)
    b9cc:	2103      	movs	r1, #3
    b9ce:	54d1      	strb	r1, [r2, r3]

	if(!HOLD_FOR_REPLY){
    b9d0:	4b43      	ldr	r3, [pc, #268]	; (bae0 <send_packet+0x148>)
    b9d2:	781b      	ldrb	r3, [r3, #0]
    b9d4:	2201      	movs	r2, #1
    b9d6:	4053      	eors	r3, r2
    b9d8:	b2db      	uxtb	r3, r3
    b9da:	2b00      	cmp	r3, #0
    b9dc:	d100      	bne.n	b9e0 <send_packet+0x48>
    b9de:	e071      	b.n	bac4 <send_packet+0x12c>
		uint16_t payload_len = 0;
    b9e0:	230e      	movs	r3, #14
    b9e2:	18fb      	adds	r3, r7, r3
    b9e4:	2200      	movs	r2, #0
    b9e6:	801a      	strh	r2, [r3, #0]
		if(send_pak.start == 0x03)
    b9e8:	2320      	movs	r3, #32
    b9ea:	18fb      	adds	r3, r7, r3
    b9ec:	781b      	ldrb	r3, [r3, #0]
    b9ee:	2b03      	cmp	r3, #3
    b9f0:	d10e      	bne.n	ba10 <send_packet+0x78>
			payload_len = ((send_pak.len[0]<<8)|send_pak.len[1]);
    b9f2:	2320      	movs	r3, #32
    b9f4:	18fb      	adds	r3, r7, r3
    b9f6:	785b      	ldrb	r3, [r3, #1]
    b9f8:	021b      	lsls	r3, r3, #8
    b9fa:	b21a      	sxth	r2, r3
    b9fc:	2320      	movs	r3, #32
    b9fe:	18fb      	adds	r3, r7, r3
    ba00:	789b      	ldrb	r3, [r3, #2]
    ba02:	b21b      	sxth	r3, r3
    ba04:	4313      	orrs	r3, r2
    ba06:	b21a      	sxth	r2, r3
    ba08:	230e      	movs	r3, #14
    ba0a:	18fb      	adds	r3, r7, r3
    ba0c:	801a      	strh	r2, [r3, #0]
    ba0e:	e005      	b.n	ba1c <send_packet+0x84>
		else
			payload_len = send_pak.len[0];
    ba10:	2320      	movs	r3, #32
    ba12:	18fb      	adds	r3, r7, r3
    ba14:	785a      	ldrb	r2, [r3, #1]
    ba16:	230e      	movs	r3, #14
    ba18:	18fb      	adds	r3, r7, r3
    ba1a:	801a      	strh	r2, [r3, #0]
		
		uint16_t message_len = (send_pak.start+payload_len+3);
    ba1c:	2320      	movs	r3, #32
    ba1e:	18fb      	adds	r3, r7, r3
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	b29a      	uxth	r2, r3
    ba24:	230e      	movs	r3, #14
    ba26:	18fb      	adds	r3, r7, r3
    ba28:	881b      	ldrh	r3, [r3, #0]
    ba2a:	18d3      	adds	r3, r2, r3
    ba2c:	b29a      	uxth	r2, r3
    ba2e:	1cbb      	adds	r3, r7, #2
    ba30:	3203      	adds	r2, #3
    ba32:	801a      	strh	r2, [r3, #0]
		uint8_t *send_ptr = &(send_pak.start);
    ba34:	2320      	movs	r3, #32
    ba36:	18fb      	adds	r3, r7, r3
    ba38:	60bb      	str	r3, [r7, #8]

		for(size_t i=0;i<message_len;i++){
    ba3a:	2300      	movs	r3, #0
    ba3c:	607b      	str	r3, [r7, #4]
    ba3e:	e02d      	b.n	ba9c <send_packet+0x104>
			if(send_pak.start==0x02 && i==2)
    ba40:	2320      	movs	r3, #32
    ba42:	18fb      	adds	r3, r7, r3
    ba44:	781b      	ldrb	r3, [r3, #0]
    ba46:	2b02      	cmp	r3, #2
    ba48:	d106      	bne.n	ba58 <send_packet+0xc0>
    ba4a:	687b      	ldr	r3, [r7, #4]
    ba4c:	2b02      	cmp	r3, #2
    ba4e:	d103      	bne.n	ba58 <send_packet+0xc0>
			send_ptr+=1;
    ba50:	68bb      	ldr	r3, [r7, #8]
    ba52:	3301      	adds	r3, #1
    ba54:	60bb      	str	r3, [r7, #8]
    ba56:	e014      	b.n	ba82 <send_packet+0xea>
			else if(i==payload_len+send_pak.start)
    ba58:	230e      	movs	r3, #14
    ba5a:	18fb      	adds	r3, r7, r3
    ba5c:	881b      	ldrh	r3, [r3, #0]
    ba5e:	2220      	movs	r2, #32
    ba60:	18ba      	adds	r2, r7, r2
    ba62:	7812      	ldrb	r2, [r2, #0]
    ba64:	189b      	adds	r3, r3, r2
    ba66:	001a      	movs	r2, r3
    ba68:	687b      	ldr	r3, [r7, #4]
    ba6a:	429a      	cmp	r2, r3
    ba6c:	d109      	bne.n	ba82 <send_packet+0xea>
			send_ptr+=(MAX_PAYLOAD_LEN-payload_len);
    ba6e:	230e      	movs	r3, #14
    ba70:	18fb      	adds	r3, r7, r3
    ba72:	881b      	ldrh	r3, [r3, #0]
    ba74:	2280      	movs	r2, #128	; 0x80
    ba76:	0092      	lsls	r2, r2, #2
    ba78:	1ad3      	subs	r3, r2, r3
    ba7a:	001a      	movs	r2, r3
    ba7c:	68bb      	ldr	r3, [r7, #8]
    ba7e:	189b      	adds	r3, r3, r2
    ba80:	60bb      	str	r3, [r7, #8]

			vesc_tx_buff[i] = *send_ptr;
    ba82:	68bb      	ldr	r3, [r7, #8]
    ba84:	7819      	ldrb	r1, [r3, #0]
    ba86:	4a18      	ldr	r2, [pc, #96]	; (bae8 <send_packet+0x150>)
    ba88:	687b      	ldr	r3, [r7, #4]
    ba8a:	18d3      	adds	r3, r2, r3
    ba8c:	1c0a      	adds	r2, r1, #0
    ba8e:	701a      	strb	r2, [r3, #0]

			send_ptr++;
    ba90:	68bb      	ldr	r3, [r7, #8]
    ba92:	3301      	adds	r3, #1
    ba94:	60bb      	str	r3, [r7, #8]
		for(size_t i=0;i<message_len;i++){
    ba96:	687b      	ldr	r3, [r7, #4]
    ba98:	3301      	adds	r3, #1
    ba9a:	607b      	str	r3, [r7, #4]
    ba9c:	1cbb      	adds	r3, r7, #2
    ba9e:	881a      	ldrh	r2, [r3, #0]
    baa0:	687b      	ldr	r3, [r7, #4]
    baa2:	429a      	cmp	r2, r3
    baa4:	d8cc      	bhi.n	ba40 <send_packet+0xa8>
		}
		
		HOLD_FOR_REPLY = true;
    baa6:	4b0e      	ldr	r3, [pc, #56]	; (bae0 <send_packet+0x148>)
    baa8:	2201      	movs	r2, #1
    baaa:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_wait(&vesc_usart, vesc_tx_buff, message_len);
    baac:	1cbb      	adds	r3, r7, #2
    baae:	881a      	ldrh	r2, [r3, #0]
    bab0:	490d      	ldr	r1, [pc, #52]	; (bae8 <send_packet+0x150>)
    bab2:	4b0e      	ldr	r3, [pc, #56]	; (baec <send_packet+0x154>)
    bab4:	0018      	movs	r0, r3
    bab6:	4b0e      	ldr	r3, [pc, #56]	; (baf0 <send_packet+0x158>)
    bab8:	4798      	blx	r3
		vesc_usart_time = millis();
    baba:	4b06      	ldr	r3, [pc, #24]	; (bad4 <send_packet+0x13c>)
    babc:	4798      	blx	r3
    babe:	0002      	movs	r2, r0
    bac0:	4b05      	ldr	r3, [pc, #20]	; (bad8 <send_packet+0x140>)
    bac2:	601a      	str	r2, [r3, #0]
	}
}
    bac4:	46c0      	nop			; (mov r8, r8)
    bac6:	46bd      	mov	sp, r7
    bac8:	b005      	add	sp, #20
    baca:	bc90      	pop	{r4, r7}
    bacc:	bc08      	pop	{r3}
    bace:	b004      	add	sp, #16
    bad0:	4718      	bx	r3
    bad2:	46c0      	nop			; (mov r8, r8)
    bad4:	0000aee1 	.word	0x0000aee1
    bad8:	20000364 	.word	0x20000364
    badc:	200000ac 	.word	0x200000ac
    bae0:	20000368 	.word	0x20000368
    bae4:	00000205 	.word	0x00000205
    bae8:	200004fc 	.word	0x200004fc
    baec:	20000704 	.word	0x20000704
    baf0:	000063bd 	.word	0x000063bd

0000baf4 <process_recieved_packet>:

void process_recieved_packet(){
    baf4:	b580      	push	{r7, lr}
    baf6:	b082      	sub	sp, #8
    baf8:	af00      	add	r7, sp, #0
		uint8_t packet_id = vesc_revieve_packet.payload[0];
    bafa:	1dfb      	adds	r3, r7, #7
    bafc:	4abc      	ldr	r2, [pc, #752]	; (bdf0 <process_recieved_packet+0x2fc>)
    bafe:	78d2      	ldrb	r2, [r2, #3]
    bb00:	701a      	strb	r2, [r3, #0]
		if(packet_id == COMM_FW_VERSION){ // Bytes are the same for all FW's
    bb02:	4bbc      	ldr	r3, [pc, #752]	; (bdf4 <process_recieved_packet+0x300>)
    bb04:	781b      	ldrb	r3, [r3, #0]
    bb06:	1dfa      	adds	r2, r7, #7
    bb08:	7812      	ldrb	r2, [r2, #0]
    bb0a:	429a      	cmp	r2, r3
    bb0c:	d10b      	bne.n	bb26 <process_recieved_packet+0x32>
			latest_vesc_vals.FW_VERSION_MAJOR = (uint16_t)vesc_revieve_packet.payload[1];
    bb0e:	4bb8      	ldr	r3, [pc, #736]	; (bdf0 <process_recieved_packet+0x2fc>)
    bb10:	7919      	ldrb	r1, [r3, #4]
    bb12:	4bb9      	ldr	r3, [pc, #740]	; (bdf8 <process_recieved_packet+0x304>)
    bb14:	2234      	movs	r2, #52	; 0x34
    bb16:	5499      	strb	r1, [r3, r2]
			latest_vesc_vals.FW_VERSION_MINOR = (uint16_t)vesc_revieve_packet.payload[2];
    bb18:	4bb5      	ldr	r3, [pc, #724]	; (bdf0 <process_recieved_packet+0x2fc>)
    bb1a:	7959      	ldrb	r1, [r3, #5]
    bb1c:	4bb6      	ldr	r3, [pc, #728]	; (bdf8 <process_recieved_packet+0x304>)
    bb1e:	2235      	movs	r2, #53	; 0x35
    bb20:	5499      	strb	r1, [r3, r2]
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[39] << 24) | (vesc_revieve_packet.payload[40] << 16) | (vesc_revieve_packet.payload[41] << 8) | vesc_revieve_packet.payload[42];
			latest_vesc_vals.fault = vesc_revieve_packet.payload[43];
		} else if(packet_id == COMM_GET_IMU_DATA){ 
			// TODO
	}
}
    bb22:	f000 ff52 	bl	c9ca <process_recieved_packet+0xed6>
		} else if(packet_id == COMM_GET_VALUES){
    bb26:	4bb5      	ldr	r3, [pc, #724]	; (bdfc <process_recieved_packet+0x308>)
    bb28:	781b      	ldrb	r3, [r3, #0]
    bb2a:	1dfa      	adds	r2, r7, #7
    bb2c:	7812      	ldrb	r2, [r2, #0]
    bb2e:	429a      	cmp	r2, r3
    bb30:	d000      	beq.n	bb34 <process_recieved_packet+0x40>
    bb32:	e17f      	b.n	be34 <process_recieved_packet+0x340>
			latest_vesc_vals.temp_fet_filtered = (vesc_revieve_packet.payload[GET_VALUES_FET_TEMP] << 8) | vesc_revieve_packet.payload[GET_VALUES_FET_TEMP+1];
    bb34:	4bb2      	ldr	r3, [pc, #712]	; (be00 <process_recieved_packet+0x30c>)
    bb36:	781b      	ldrb	r3, [r3, #0]
    bb38:	001a      	movs	r2, r3
    bb3a:	4bad      	ldr	r3, [pc, #692]	; (bdf0 <process_recieved_packet+0x2fc>)
    bb3c:	189b      	adds	r3, r3, r2
    bb3e:	78db      	ldrb	r3, [r3, #3]
    bb40:	021b      	lsls	r3, r3, #8
    bb42:	b21a      	sxth	r2, r3
    bb44:	4bae      	ldr	r3, [pc, #696]	; (be00 <process_recieved_packet+0x30c>)
    bb46:	781b      	ldrb	r3, [r3, #0]
    bb48:	3301      	adds	r3, #1
    bb4a:	49a9      	ldr	r1, [pc, #676]	; (bdf0 <process_recieved_packet+0x2fc>)
    bb4c:	18cb      	adds	r3, r1, r3
    bb4e:	78db      	ldrb	r3, [r3, #3]
    bb50:	b21b      	sxth	r3, r3
    bb52:	4313      	orrs	r3, r2
    bb54:	b21a      	sxth	r2, r3
    bb56:	4ba8      	ldr	r3, [pc, #672]	; (bdf8 <process_recieved_packet+0x304>)
    bb58:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.avg_motor_current = (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_MTR_CURR+3];
    bb5a:	4baa      	ldr	r3, [pc, #680]	; (be04 <process_recieved_packet+0x310>)
    bb5c:	781b      	ldrb	r3, [r3, #0]
    bb5e:	001a      	movs	r2, r3
    bb60:	4ba3      	ldr	r3, [pc, #652]	; (bdf0 <process_recieved_packet+0x2fc>)
    bb62:	189b      	adds	r3, r3, r2
    bb64:	78db      	ldrb	r3, [r3, #3]
    bb66:	061a      	lsls	r2, r3, #24
    bb68:	4ba6      	ldr	r3, [pc, #664]	; (be04 <process_recieved_packet+0x310>)
    bb6a:	781b      	ldrb	r3, [r3, #0]
    bb6c:	3301      	adds	r3, #1
    bb6e:	49a0      	ldr	r1, [pc, #640]	; (bdf0 <process_recieved_packet+0x2fc>)
    bb70:	18cb      	adds	r3, r1, r3
    bb72:	78db      	ldrb	r3, [r3, #3]
    bb74:	041b      	lsls	r3, r3, #16
    bb76:	431a      	orrs	r2, r3
    bb78:	4ba2      	ldr	r3, [pc, #648]	; (be04 <process_recieved_packet+0x310>)
    bb7a:	781b      	ldrb	r3, [r3, #0]
    bb7c:	3302      	adds	r3, #2
    bb7e:	499c      	ldr	r1, [pc, #624]	; (bdf0 <process_recieved_packet+0x2fc>)
    bb80:	18cb      	adds	r3, r1, r3
    bb82:	78db      	ldrb	r3, [r3, #3]
    bb84:	021b      	lsls	r3, r3, #8
    bb86:	4313      	orrs	r3, r2
    bb88:	4a9e      	ldr	r2, [pc, #632]	; (be04 <process_recieved_packet+0x310>)
    bb8a:	7812      	ldrb	r2, [r2, #0]
    bb8c:	3203      	adds	r2, #3
    bb8e:	4998      	ldr	r1, [pc, #608]	; (bdf0 <process_recieved_packet+0x2fc>)
    bb90:	188a      	adds	r2, r1, r2
    bb92:	78d2      	ldrb	r2, [r2, #3]
    bb94:	431a      	orrs	r2, r3
    bb96:	4b98      	ldr	r3, [pc, #608]	; (bdf8 <process_recieved_packet+0x304>)
    bb98:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_input_current = (vesc_revieve_packet.payload[GET_VALUES_IN_CURR] << 24) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_IN_CURR+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_CURR+3];
    bb9a:	4b9b      	ldr	r3, [pc, #620]	; (be08 <process_recieved_packet+0x314>)
    bb9c:	781b      	ldrb	r3, [r3, #0]
    bb9e:	001a      	movs	r2, r3
    bba0:	4b93      	ldr	r3, [pc, #588]	; (bdf0 <process_recieved_packet+0x2fc>)
    bba2:	189b      	adds	r3, r3, r2
    bba4:	78db      	ldrb	r3, [r3, #3]
    bba6:	061a      	lsls	r2, r3, #24
    bba8:	4b97      	ldr	r3, [pc, #604]	; (be08 <process_recieved_packet+0x314>)
    bbaa:	781b      	ldrb	r3, [r3, #0]
    bbac:	3301      	adds	r3, #1
    bbae:	4990      	ldr	r1, [pc, #576]	; (bdf0 <process_recieved_packet+0x2fc>)
    bbb0:	18cb      	adds	r3, r1, r3
    bbb2:	78db      	ldrb	r3, [r3, #3]
    bbb4:	041b      	lsls	r3, r3, #16
    bbb6:	431a      	orrs	r2, r3
    bbb8:	4b93      	ldr	r3, [pc, #588]	; (be08 <process_recieved_packet+0x314>)
    bbba:	781b      	ldrb	r3, [r3, #0]
    bbbc:	3302      	adds	r3, #2
    bbbe:	498c      	ldr	r1, [pc, #560]	; (bdf0 <process_recieved_packet+0x2fc>)
    bbc0:	18cb      	adds	r3, r1, r3
    bbc2:	78db      	ldrb	r3, [r3, #3]
    bbc4:	021b      	lsls	r3, r3, #8
    bbc6:	4313      	orrs	r3, r2
    bbc8:	4a8f      	ldr	r2, [pc, #572]	; (be08 <process_recieved_packet+0x314>)
    bbca:	7812      	ldrb	r2, [r2, #0]
    bbcc:	3203      	adds	r2, #3
    bbce:	4988      	ldr	r1, [pc, #544]	; (bdf0 <process_recieved_packet+0x2fc>)
    bbd0:	188a      	adds	r2, r1, r2
    bbd2:	78d2      	ldrb	r2, [r2, #3]
    bbd4:	431a      	orrs	r2, r3
    bbd6:	4b88      	ldr	r3, [pc, #544]	; (bdf8 <process_recieved_packet+0x304>)
    bbd8:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.duty_cycle = (vesc_revieve_packet.payload[GET_VALUES_DUTY] << 8) | vesc_revieve_packet.payload[GET_VALUES_DUTY+1];
    bbda:	4b8c      	ldr	r3, [pc, #560]	; (be0c <process_recieved_packet+0x318>)
    bbdc:	781b      	ldrb	r3, [r3, #0]
    bbde:	001a      	movs	r2, r3
    bbe0:	4b83      	ldr	r3, [pc, #524]	; (bdf0 <process_recieved_packet+0x2fc>)
    bbe2:	189b      	adds	r3, r3, r2
    bbe4:	78db      	ldrb	r3, [r3, #3]
    bbe6:	021b      	lsls	r3, r3, #8
    bbe8:	b21a      	sxth	r2, r3
    bbea:	4b88      	ldr	r3, [pc, #544]	; (be0c <process_recieved_packet+0x318>)
    bbec:	781b      	ldrb	r3, [r3, #0]
    bbee:	3301      	adds	r3, #1
    bbf0:	497f      	ldr	r1, [pc, #508]	; (bdf0 <process_recieved_packet+0x2fc>)
    bbf2:	18cb      	adds	r3, r1, r3
    bbf4:	78db      	ldrb	r3, [r3, #3]
    bbf6:	b21b      	sxth	r3, r3
    bbf8:	4313      	orrs	r3, r2
    bbfa:	b21a      	sxth	r2, r3
    bbfc:	4b7e      	ldr	r3, [pc, #504]	; (bdf8 <process_recieved_packet+0x304>)
    bbfe:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (vesc_revieve_packet.payload[GET_VALUES_RPM] << 24) | (vesc_revieve_packet.payload[GET_VALUES_RPM+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_RPM+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_RPM+3];
    bc00:	4b83      	ldr	r3, [pc, #524]	; (be10 <process_recieved_packet+0x31c>)
    bc02:	781b      	ldrb	r3, [r3, #0]
    bc04:	001a      	movs	r2, r3
    bc06:	4b7a      	ldr	r3, [pc, #488]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc08:	189b      	adds	r3, r3, r2
    bc0a:	78db      	ldrb	r3, [r3, #3]
    bc0c:	061a      	lsls	r2, r3, #24
    bc0e:	4b80      	ldr	r3, [pc, #512]	; (be10 <process_recieved_packet+0x31c>)
    bc10:	781b      	ldrb	r3, [r3, #0]
    bc12:	3301      	adds	r3, #1
    bc14:	4976      	ldr	r1, [pc, #472]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc16:	18cb      	adds	r3, r1, r3
    bc18:	78db      	ldrb	r3, [r3, #3]
    bc1a:	041b      	lsls	r3, r3, #16
    bc1c:	431a      	orrs	r2, r3
    bc1e:	4b7c      	ldr	r3, [pc, #496]	; (be10 <process_recieved_packet+0x31c>)
    bc20:	781b      	ldrb	r3, [r3, #0]
    bc22:	3302      	adds	r3, #2
    bc24:	4972      	ldr	r1, [pc, #456]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc26:	18cb      	adds	r3, r1, r3
    bc28:	78db      	ldrb	r3, [r3, #3]
    bc2a:	021b      	lsls	r3, r3, #8
    bc2c:	4313      	orrs	r3, r2
    bc2e:	4a78      	ldr	r2, [pc, #480]	; (be10 <process_recieved_packet+0x31c>)
    bc30:	7812      	ldrb	r2, [r2, #0]
    bc32:	3203      	adds	r2, #3
    bc34:	496e      	ldr	r1, [pc, #440]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc36:	188a      	adds	r2, r1, r2
    bc38:	78d2      	ldrb	r2, [r2, #3]
    bc3a:	431a      	orrs	r2, r3
    bc3c:	4b6e      	ldr	r3, [pc, #440]	; (bdf8 <process_recieved_packet+0x304>)
    bc3e:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.INPUT_VOLTAGE = (vesc_revieve_packet.payload[GET_VALUES_IN_VOLT] << 8) | vesc_revieve_packet.payload[GET_VALUES_IN_VOLT+1];
    bc40:	4b74      	ldr	r3, [pc, #464]	; (be14 <process_recieved_packet+0x320>)
    bc42:	781b      	ldrb	r3, [r3, #0]
    bc44:	001a      	movs	r2, r3
    bc46:	4b6a      	ldr	r3, [pc, #424]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc48:	189b      	adds	r3, r3, r2
    bc4a:	78db      	ldrb	r3, [r3, #3]
    bc4c:	021b      	lsls	r3, r3, #8
    bc4e:	b21a      	sxth	r2, r3
    bc50:	4b70      	ldr	r3, [pc, #448]	; (be14 <process_recieved_packet+0x320>)
    bc52:	781b      	ldrb	r3, [r3, #0]
    bc54:	3301      	adds	r3, #1
    bc56:	4966      	ldr	r1, [pc, #408]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc58:	18cb      	adds	r3, r1, r3
    bc5a:	78db      	ldrb	r3, [r3, #3]
    bc5c:	b21b      	sxth	r3, r3
    bc5e:	4313      	orrs	r3, r2
    bc60:	b21a      	sxth	r2, r3
    bc62:	4b65      	ldr	r3, [pc, #404]	; (bdf8 <process_recieved_packet+0x304>)
    bc64:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.amp_hours = ((vesc_revieve_packet.payload[GET_VALUES_AH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_USED+3])/100;
    bc66:	4b6c      	ldr	r3, [pc, #432]	; (be18 <process_recieved_packet+0x324>)
    bc68:	781b      	ldrb	r3, [r3, #0]
    bc6a:	001a      	movs	r2, r3
    bc6c:	4b60      	ldr	r3, [pc, #384]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc6e:	189b      	adds	r3, r3, r2
    bc70:	78db      	ldrb	r3, [r3, #3]
    bc72:	061a      	lsls	r2, r3, #24
    bc74:	4b68      	ldr	r3, [pc, #416]	; (be18 <process_recieved_packet+0x324>)
    bc76:	781b      	ldrb	r3, [r3, #0]
    bc78:	3301      	adds	r3, #1
    bc7a:	495d      	ldr	r1, [pc, #372]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc7c:	18cb      	adds	r3, r1, r3
    bc7e:	78db      	ldrb	r3, [r3, #3]
    bc80:	041b      	lsls	r3, r3, #16
    bc82:	431a      	orrs	r2, r3
    bc84:	4b64      	ldr	r3, [pc, #400]	; (be18 <process_recieved_packet+0x324>)
    bc86:	781b      	ldrb	r3, [r3, #0]
    bc88:	3302      	adds	r3, #2
    bc8a:	4959      	ldr	r1, [pc, #356]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc8c:	18cb      	adds	r3, r1, r3
    bc8e:	78db      	ldrb	r3, [r3, #3]
    bc90:	021b      	lsls	r3, r3, #8
    bc92:	4313      	orrs	r3, r2
    bc94:	4a60      	ldr	r2, [pc, #384]	; (be18 <process_recieved_packet+0x324>)
    bc96:	7812      	ldrb	r2, [r2, #0]
    bc98:	3203      	adds	r2, #3
    bc9a:	4955      	ldr	r1, [pc, #340]	; (bdf0 <process_recieved_packet+0x2fc>)
    bc9c:	188a      	adds	r2, r1, r2
    bc9e:	78d2      	ldrb	r2, [r2, #3]
    bca0:	431a      	orrs	r2, r3
    bca2:	4b5e      	ldr	r3, [pc, #376]	; (be1c <process_recieved_packet+0x328>)
    bca4:	2164      	movs	r1, #100	; 0x64
    bca6:	0010      	movs	r0, r2
    bca8:	4798      	blx	r3
    bcaa:	0003      	movs	r3, r0
    bcac:	001a      	movs	r2, r3
    bcae:	4b52      	ldr	r3, [pc, #328]	; (bdf8 <process_recieved_packet+0x304>)
    bcb0:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_AH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_AH_CHRG+3])/100;
    bcb2:	4b5b      	ldr	r3, [pc, #364]	; (be20 <process_recieved_packet+0x32c>)
    bcb4:	781b      	ldrb	r3, [r3, #0]
    bcb6:	001a      	movs	r2, r3
    bcb8:	4b4d      	ldr	r3, [pc, #308]	; (bdf0 <process_recieved_packet+0x2fc>)
    bcba:	189b      	adds	r3, r3, r2
    bcbc:	78db      	ldrb	r3, [r3, #3]
    bcbe:	061a      	lsls	r2, r3, #24
    bcc0:	4b57      	ldr	r3, [pc, #348]	; (be20 <process_recieved_packet+0x32c>)
    bcc2:	781b      	ldrb	r3, [r3, #0]
    bcc4:	3301      	adds	r3, #1
    bcc6:	494a      	ldr	r1, [pc, #296]	; (bdf0 <process_recieved_packet+0x2fc>)
    bcc8:	18cb      	adds	r3, r1, r3
    bcca:	78db      	ldrb	r3, [r3, #3]
    bccc:	041b      	lsls	r3, r3, #16
    bcce:	431a      	orrs	r2, r3
    bcd0:	4b53      	ldr	r3, [pc, #332]	; (be20 <process_recieved_packet+0x32c>)
    bcd2:	781b      	ldrb	r3, [r3, #0]
    bcd4:	3302      	adds	r3, #2
    bcd6:	4946      	ldr	r1, [pc, #280]	; (bdf0 <process_recieved_packet+0x2fc>)
    bcd8:	18cb      	adds	r3, r1, r3
    bcda:	78db      	ldrb	r3, [r3, #3]
    bcdc:	021b      	lsls	r3, r3, #8
    bcde:	4313      	orrs	r3, r2
    bce0:	4a4f      	ldr	r2, [pc, #316]	; (be20 <process_recieved_packet+0x32c>)
    bce2:	7812      	ldrb	r2, [r2, #0]
    bce4:	3203      	adds	r2, #3
    bce6:	4942      	ldr	r1, [pc, #264]	; (bdf0 <process_recieved_packet+0x2fc>)
    bce8:	188a      	adds	r2, r1, r2
    bcea:	78d2      	ldrb	r2, [r2, #3]
    bcec:	431a      	orrs	r2, r3
    bcee:	4b4b      	ldr	r3, [pc, #300]	; (be1c <process_recieved_packet+0x328>)
    bcf0:	2164      	movs	r1, #100	; 0x64
    bcf2:	0010      	movs	r0, r2
    bcf4:	4798      	blx	r3
    bcf6:	0003      	movs	r3, r0
    bcf8:	001a      	movs	r2, r3
    bcfa:	4b3f      	ldr	r3, [pc, #252]	; (bdf8 <process_recieved_packet+0x304>)
    bcfc:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = ((vesc_revieve_packet.payload[GET_VALUES_WH_USED] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_USED+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_USED+3])/100;
    bcfe:	4b49      	ldr	r3, [pc, #292]	; (be24 <process_recieved_packet+0x330>)
    bd00:	781b      	ldrb	r3, [r3, #0]
    bd02:	001a      	movs	r2, r3
    bd04:	4b3a      	ldr	r3, [pc, #232]	; (bdf0 <process_recieved_packet+0x2fc>)
    bd06:	189b      	adds	r3, r3, r2
    bd08:	78db      	ldrb	r3, [r3, #3]
    bd0a:	061a      	lsls	r2, r3, #24
    bd0c:	4b45      	ldr	r3, [pc, #276]	; (be24 <process_recieved_packet+0x330>)
    bd0e:	781b      	ldrb	r3, [r3, #0]
    bd10:	3301      	adds	r3, #1
    bd12:	4937      	ldr	r1, [pc, #220]	; (bdf0 <process_recieved_packet+0x2fc>)
    bd14:	18cb      	adds	r3, r1, r3
    bd16:	78db      	ldrb	r3, [r3, #3]
    bd18:	041b      	lsls	r3, r3, #16
    bd1a:	431a      	orrs	r2, r3
    bd1c:	4b41      	ldr	r3, [pc, #260]	; (be24 <process_recieved_packet+0x330>)
    bd1e:	781b      	ldrb	r3, [r3, #0]
    bd20:	3302      	adds	r3, #2
    bd22:	4933      	ldr	r1, [pc, #204]	; (bdf0 <process_recieved_packet+0x2fc>)
    bd24:	18cb      	adds	r3, r1, r3
    bd26:	78db      	ldrb	r3, [r3, #3]
    bd28:	021b      	lsls	r3, r3, #8
    bd2a:	4313      	orrs	r3, r2
    bd2c:	4a3d      	ldr	r2, [pc, #244]	; (be24 <process_recieved_packet+0x330>)
    bd2e:	7812      	ldrb	r2, [r2, #0]
    bd30:	3203      	adds	r2, #3
    bd32:	492f      	ldr	r1, [pc, #188]	; (bdf0 <process_recieved_packet+0x2fc>)
    bd34:	188a      	adds	r2, r1, r2
    bd36:	78d2      	ldrb	r2, [r2, #3]
    bd38:	431a      	orrs	r2, r3
    bd3a:	4b38      	ldr	r3, [pc, #224]	; (be1c <process_recieved_packet+0x328>)
    bd3c:	2164      	movs	r1, #100	; 0x64
    bd3e:	0010      	movs	r0, r2
    bd40:	4798      	blx	r3
    bd42:	0003      	movs	r3, r0
    bd44:	001a      	movs	r2, r3
    bd46:	4b2c      	ldr	r3, [pc, #176]	; (bdf8 <process_recieved_packet+0x304>)
    bd48:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = ((vesc_revieve_packet.payload[GET_VALUES_WH_CHRG] << 24) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_WH_CHRG+3])/100;
    bd4a:	4b37      	ldr	r3, [pc, #220]	; (be28 <process_recieved_packet+0x334>)
    bd4c:	781b      	ldrb	r3, [r3, #0]
    bd4e:	001a      	movs	r2, r3
    bd50:	4b27      	ldr	r3, [pc, #156]	; (bdf0 <process_recieved_packet+0x2fc>)
    bd52:	189b      	adds	r3, r3, r2
    bd54:	78db      	ldrb	r3, [r3, #3]
    bd56:	061a      	lsls	r2, r3, #24
    bd58:	4b33      	ldr	r3, [pc, #204]	; (be28 <process_recieved_packet+0x334>)
    bd5a:	781b      	ldrb	r3, [r3, #0]
    bd5c:	3301      	adds	r3, #1
    bd5e:	4924      	ldr	r1, [pc, #144]	; (bdf0 <process_recieved_packet+0x2fc>)
    bd60:	18cb      	adds	r3, r1, r3
    bd62:	78db      	ldrb	r3, [r3, #3]
    bd64:	041b      	lsls	r3, r3, #16
    bd66:	431a      	orrs	r2, r3
    bd68:	4b2f      	ldr	r3, [pc, #188]	; (be28 <process_recieved_packet+0x334>)
    bd6a:	781b      	ldrb	r3, [r3, #0]
    bd6c:	3302      	adds	r3, #2
    bd6e:	4920      	ldr	r1, [pc, #128]	; (bdf0 <process_recieved_packet+0x2fc>)
    bd70:	18cb      	adds	r3, r1, r3
    bd72:	78db      	ldrb	r3, [r3, #3]
    bd74:	021b      	lsls	r3, r3, #8
    bd76:	4313      	orrs	r3, r2
    bd78:	4a2b      	ldr	r2, [pc, #172]	; (be28 <process_recieved_packet+0x334>)
    bd7a:	7812      	ldrb	r2, [r2, #0]
    bd7c:	3203      	adds	r2, #3
    bd7e:	491c      	ldr	r1, [pc, #112]	; (bdf0 <process_recieved_packet+0x2fc>)
    bd80:	188a      	adds	r2, r1, r2
    bd82:	78d2      	ldrb	r2, [r2, #3]
    bd84:	431a      	orrs	r2, r3
    bd86:	4b25      	ldr	r3, [pc, #148]	; (be1c <process_recieved_packet+0x328>)
    bd88:	2164      	movs	r1, #100	; 0x64
    bd8a:	0010      	movs	r0, r2
    bd8c:	4798      	blx	r3
    bd8e:	0003      	movs	r3, r0
    bd90:	001a      	movs	r2, r3
    bd92:	4b19      	ldr	r3, [pc, #100]	; (bdf8 <process_recieved_packet+0x304>)
    bd94:	625a      	str	r2, [r3, #36]	; 0x24
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[GET_VALUES_TACH] << 24) | (vesc_revieve_packet.payload[GET_VALUES_TACH+1] << 16) | (vesc_revieve_packet.payload[GET_VALUES_TACH+2] << 8) | vesc_revieve_packet.payload[GET_VALUES_TACH+2];
    bd96:	4b25      	ldr	r3, [pc, #148]	; (be2c <process_recieved_packet+0x338>)
    bd98:	781b      	ldrb	r3, [r3, #0]
    bd9a:	001a      	movs	r2, r3
    bd9c:	4b14      	ldr	r3, [pc, #80]	; (bdf0 <process_recieved_packet+0x2fc>)
    bd9e:	189b      	adds	r3, r3, r2
    bda0:	78db      	ldrb	r3, [r3, #3]
    bda2:	061a      	lsls	r2, r3, #24
    bda4:	4b21      	ldr	r3, [pc, #132]	; (be2c <process_recieved_packet+0x338>)
    bda6:	781b      	ldrb	r3, [r3, #0]
    bda8:	3301      	adds	r3, #1
    bdaa:	4911      	ldr	r1, [pc, #68]	; (bdf0 <process_recieved_packet+0x2fc>)
    bdac:	18cb      	adds	r3, r1, r3
    bdae:	78db      	ldrb	r3, [r3, #3]
    bdb0:	041b      	lsls	r3, r3, #16
    bdb2:	431a      	orrs	r2, r3
    bdb4:	4b1d      	ldr	r3, [pc, #116]	; (be2c <process_recieved_packet+0x338>)
    bdb6:	781b      	ldrb	r3, [r3, #0]
    bdb8:	3302      	adds	r3, #2
    bdba:	490d      	ldr	r1, [pc, #52]	; (bdf0 <process_recieved_packet+0x2fc>)
    bdbc:	18cb      	adds	r3, r1, r3
    bdbe:	78db      	ldrb	r3, [r3, #3]
    bdc0:	021b      	lsls	r3, r3, #8
    bdc2:	4313      	orrs	r3, r2
    bdc4:	4a19      	ldr	r2, [pc, #100]	; (be2c <process_recieved_packet+0x338>)
    bdc6:	7812      	ldrb	r2, [r2, #0]
    bdc8:	3202      	adds	r2, #2
    bdca:	4909      	ldr	r1, [pc, #36]	; (bdf0 <process_recieved_packet+0x2fc>)
    bdcc:	188a      	adds	r2, r1, r2
    bdce:	78d2      	ldrb	r2, [r2, #3]
    bdd0:	431a      	orrs	r2, r3
    bdd2:	4b09      	ldr	r3, [pc, #36]	; (bdf8 <process_recieved_packet+0x304>)
    bdd4:	629a      	str	r2, [r3, #40]	; 0x28
			latest_vesc_vals.fault = vesc_revieve_packet.payload[GET_VALUES_FAULT];
    bdd6:	4b16      	ldr	r3, [pc, #88]	; (be30 <process_recieved_packet+0x33c>)
    bdd8:	781b      	ldrb	r3, [r3, #0]
    bdda:	001a      	movs	r2, r3
    bddc:	4b04      	ldr	r3, [pc, #16]	; (bdf0 <process_recieved_packet+0x2fc>)
    bdde:	189b      	adds	r3, r3, r2
    bde0:	78db      	ldrb	r3, [r3, #3]
    bde2:	b259      	sxtb	r1, r3
    bde4:	4b04      	ldr	r3, [pc, #16]	; (bdf8 <process_recieved_packet+0x304>)
    bde6:	222c      	movs	r2, #44	; 0x2c
    bde8:	5499      	strb	r1, [r3, r2]
}
    bdea:	f000 fdee 	bl	c9ca <process_recieved_packet+0xed6>
    bdee:	46c0      	nop			; (mov r8, r8)
    bdf0:	20000ac4 	.word	0x20000ac4
    bdf4:	2000033a 	.word	0x2000033a
    bdf8:	20000940 	.word	0x20000940
    bdfc:	2000033b 	.word	0x2000033b
    be00:	20000343 	.word	0x20000343
    be04:	20000344 	.word	0x20000344
    be08:	20000345 	.word	0x20000345
    be0c:	20000346 	.word	0x20000346
    be10:	20000347 	.word	0x20000347
    be14:	20000348 	.word	0x20000348
    be18:	20000349 	.word	0x20000349
    be1c:	00013e05 	.word	0x00013e05
    be20:	2000034a 	.word	0x2000034a
    be24:	2000034b 	.word	0x2000034b
    be28:	2000034c 	.word	0x2000034c
    be2c:	2000034d 	.word	0x2000034d
    be30:	2000034e 	.word	0x2000034e
		} else if(packet_id == COMM_GET_MCCONF){
    be34:	4bfd      	ldr	r3, [pc, #1012]	; (c22c <process_recieved_packet+0x738>)
    be36:	781b      	ldrb	r3, [r3, #0]
    be38:	1dfa      	adds	r2, r7, #7
    be3a:	7812      	ldrb	r2, [r2, #0]
    be3c:	429a      	cmp	r2, r3
    be3e:	d001      	beq.n	be44 <process_recieved_packet+0x350>
    be40:	f000 fc58 	bl	c6f4 <process_recieved_packet+0xc00>
			if(esc_fw == FW_2v18){
    be44:	4bfa      	ldr	r3, [pc, #1000]	; (c230 <process_recieved_packet+0x73c>)
    be46:	781b      	ldrb	r3, [r3, #0]
    be48:	2b00      	cmp	r3, #0
    be4a:	d000      	beq.n	be4e <process_recieved_packet+0x35a>
    be4c:	e32a      	b.n	c4a4 <process_recieved_packet+0x9b0>
				mcconf_limits.motor_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MAX+3])/1000;
    be4e:	4bf9      	ldr	r3, [pc, #996]	; (c234 <process_recieved_packet+0x740>)
    be50:	781b      	ldrb	r3, [r3, #0]
    be52:	001a      	movs	r2, r3
    be54:	4bf8      	ldr	r3, [pc, #992]	; (c238 <process_recieved_packet+0x744>)
    be56:	189b      	adds	r3, r3, r2
    be58:	78db      	ldrb	r3, [r3, #3]
    be5a:	061a      	lsls	r2, r3, #24
    be5c:	4bf5      	ldr	r3, [pc, #980]	; (c234 <process_recieved_packet+0x740>)
    be5e:	781b      	ldrb	r3, [r3, #0]
    be60:	3301      	adds	r3, #1
    be62:	49f5      	ldr	r1, [pc, #980]	; (c238 <process_recieved_packet+0x744>)
    be64:	18cb      	adds	r3, r1, r3
    be66:	78db      	ldrb	r3, [r3, #3]
    be68:	041b      	lsls	r3, r3, #16
    be6a:	431a      	orrs	r2, r3
    be6c:	4bf1      	ldr	r3, [pc, #964]	; (c234 <process_recieved_packet+0x740>)
    be6e:	781b      	ldrb	r3, [r3, #0]
    be70:	3302      	adds	r3, #2
    be72:	49f1      	ldr	r1, [pc, #964]	; (c238 <process_recieved_packet+0x744>)
    be74:	18cb      	adds	r3, r1, r3
    be76:	78db      	ldrb	r3, [r3, #3]
    be78:	021b      	lsls	r3, r3, #8
    be7a:	4313      	orrs	r3, r2
    be7c:	4aed      	ldr	r2, [pc, #948]	; (c234 <process_recieved_packet+0x740>)
    be7e:	7812      	ldrb	r2, [r2, #0]
    be80:	3203      	adds	r2, #3
    be82:	49ed      	ldr	r1, [pc, #948]	; (c238 <process_recieved_packet+0x744>)
    be84:	188a      	adds	r2, r1, r2
    be86:	78d2      	ldrb	r2, [r2, #3]
    be88:	4313      	orrs	r3, r2
    be8a:	0018      	movs	r0, r3
    be8c:	4beb      	ldr	r3, [pc, #940]	; (c23c <process_recieved_packet+0x748>)
    be8e:	22fa      	movs	r2, #250	; 0xfa
    be90:	0091      	lsls	r1, r2, #2
    be92:	4798      	blx	r3
    be94:	0003      	movs	r3, r0
    be96:	001a      	movs	r2, r3
    be98:	4be9      	ldr	r3, [pc, #932]	; (c240 <process_recieved_packet+0x74c>)
    be9a:	601a      	str	r2, [r3, #0]
				mcconf_limits.motor_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_MTR_CURR_MIN+3])/1000;
    be9c:	4be9      	ldr	r3, [pc, #932]	; (c244 <process_recieved_packet+0x750>)
    be9e:	781b      	ldrb	r3, [r3, #0]
    bea0:	001a      	movs	r2, r3
    bea2:	4be5      	ldr	r3, [pc, #916]	; (c238 <process_recieved_packet+0x744>)
    bea4:	189b      	adds	r3, r3, r2
    bea6:	78db      	ldrb	r3, [r3, #3]
    bea8:	061a      	lsls	r2, r3, #24
    beaa:	4be6      	ldr	r3, [pc, #920]	; (c244 <process_recieved_packet+0x750>)
    beac:	781b      	ldrb	r3, [r3, #0]
    beae:	3301      	adds	r3, #1
    beb0:	49e1      	ldr	r1, [pc, #900]	; (c238 <process_recieved_packet+0x744>)
    beb2:	18cb      	adds	r3, r1, r3
    beb4:	78db      	ldrb	r3, [r3, #3]
    beb6:	041b      	lsls	r3, r3, #16
    beb8:	431a      	orrs	r2, r3
    beba:	4be2      	ldr	r3, [pc, #904]	; (c244 <process_recieved_packet+0x750>)
    bebc:	781b      	ldrb	r3, [r3, #0]
    bebe:	3302      	adds	r3, #2
    bec0:	49dd      	ldr	r1, [pc, #884]	; (c238 <process_recieved_packet+0x744>)
    bec2:	18cb      	adds	r3, r1, r3
    bec4:	78db      	ldrb	r3, [r3, #3]
    bec6:	021b      	lsls	r3, r3, #8
    bec8:	4313      	orrs	r3, r2
    beca:	4ade      	ldr	r2, [pc, #888]	; (c244 <process_recieved_packet+0x750>)
    becc:	7812      	ldrb	r2, [r2, #0]
    bece:	3203      	adds	r2, #3
    bed0:	49d9      	ldr	r1, [pc, #868]	; (c238 <process_recieved_packet+0x744>)
    bed2:	188a      	adds	r2, r1, r2
    bed4:	78d2      	ldrb	r2, [r2, #3]
    bed6:	4313      	orrs	r3, r2
    bed8:	0018      	movs	r0, r3
    beda:	4bd8      	ldr	r3, [pc, #864]	; (c23c <process_recieved_packet+0x748>)
    bedc:	22fa      	movs	r2, #250	; 0xfa
    bede:	0091      	lsls	r1, r2, #2
    bee0:	4798      	blx	r3
    bee2:	0003      	movs	r3, r0
    bee4:	001a      	movs	r2, r3
    bee6:	4bd6      	ldr	r3, [pc, #856]	; (c240 <process_recieved_packet+0x74c>)
    bee8:	605a      	str	r2, [r3, #4]
				mcconf_limits.input_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MAX+3])/1000;
    beea:	4bd7      	ldr	r3, [pc, #860]	; (c248 <process_recieved_packet+0x754>)
    beec:	781b      	ldrb	r3, [r3, #0]
    beee:	001a      	movs	r2, r3
    bef0:	4bd1      	ldr	r3, [pc, #836]	; (c238 <process_recieved_packet+0x744>)
    bef2:	189b      	adds	r3, r3, r2
    bef4:	78db      	ldrb	r3, [r3, #3]
    bef6:	061a      	lsls	r2, r3, #24
    bef8:	4bd3      	ldr	r3, [pc, #844]	; (c248 <process_recieved_packet+0x754>)
    befa:	781b      	ldrb	r3, [r3, #0]
    befc:	3301      	adds	r3, #1
    befe:	49ce      	ldr	r1, [pc, #824]	; (c238 <process_recieved_packet+0x744>)
    bf00:	18cb      	adds	r3, r1, r3
    bf02:	78db      	ldrb	r3, [r3, #3]
    bf04:	041b      	lsls	r3, r3, #16
    bf06:	431a      	orrs	r2, r3
    bf08:	4bcf      	ldr	r3, [pc, #828]	; (c248 <process_recieved_packet+0x754>)
    bf0a:	781b      	ldrb	r3, [r3, #0]
    bf0c:	3302      	adds	r3, #2
    bf0e:	49ca      	ldr	r1, [pc, #808]	; (c238 <process_recieved_packet+0x744>)
    bf10:	18cb      	adds	r3, r1, r3
    bf12:	78db      	ldrb	r3, [r3, #3]
    bf14:	021b      	lsls	r3, r3, #8
    bf16:	4313      	orrs	r3, r2
    bf18:	4acb      	ldr	r2, [pc, #812]	; (c248 <process_recieved_packet+0x754>)
    bf1a:	7812      	ldrb	r2, [r2, #0]
    bf1c:	3203      	adds	r2, #3
    bf1e:	49c6      	ldr	r1, [pc, #792]	; (c238 <process_recieved_packet+0x744>)
    bf20:	188a      	adds	r2, r1, r2
    bf22:	78d2      	ldrb	r2, [r2, #3]
    bf24:	4313      	orrs	r3, r2
    bf26:	0018      	movs	r0, r3
    bf28:	4bc4      	ldr	r3, [pc, #784]	; (c23c <process_recieved_packet+0x748>)
    bf2a:	22fa      	movs	r2, #250	; 0xfa
    bf2c:	0091      	lsls	r1, r2, #2
    bf2e:	4798      	blx	r3
    bf30:	0003      	movs	r3, r0
    bf32:	001a      	movs	r2, r3
    bf34:	4bc2      	ldr	r3, [pc, #776]	; (c240 <process_recieved_packet+0x74c>)
    bf36:	609a      	str	r2, [r3, #8]
				mcconf_limits.input_current_min = ((vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_IN_CURR_MIN+3])/1000;
    bf38:	4bc4      	ldr	r3, [pc, #784]	; (c24c <process_recieved_packet+0x758>)
    bf3a:	781b      	ldrb	r3, [r3, #0]
    bf3c:	001a      	movs	r2, r3
    bf3e:	4bbe      	ldr	r3, [pc, #760]	; (c238 <process_recieved_packet+0x744>)
    bf40:	189b      	adds	r3, r3, r2
    bf42:	78db      	ldrb	r3, [r3, #3]
    bf44:	061a      	lsls	r2, r3, #24
    bf46:	4bc1      	ldr	r3, [pc, #772]	; (c24c <process_recieved_packet+0x758>)
    bf48:	781b      	ldrb	r3, [r3, #0]
    bf4a:	3301      	adds	r3, #1
    bf4c:	49ba      	ldr	r1, [pc, #744]	; (c238 <process_recieved_packet+0x744>)
    bf4e:	18cb      	adds	r3, r1, r3
    bf50:	78db      	ldrb	r3, [r3, #3]
    bf52:	041b      	lsls	r3, r3, #16
    bf54:	431a      	orrs	r2, r3
    bf56:	4bbd      	ldr	r3, [pc, #756]	; (c24c <process_recieved_packet+0x758>)
    bf58:	781b      	ldrb	r3, [r3, #0]
    bf5a:	3302      	adds	r3, #2
    bf5c:	49b6      	ldr	r1, [pc, #728]	; (c238 <process_recieved_packet+0x744>)
    bf5e:	18cb      	adds	r3, r1, r3
    bf60:	78db      	ldrb	r3, [r3, #3]
    bf62:	021b      	lsls	r3, r3, #8
    bf64:	4313      	orrs	r3, r2
    bf66:	4ab9      	ldr	r2, [pc, #740]	; (c24c <process_recieved_packet+0x758>)
    bf68:	7812      	ldrb	r2, [r2, #0]
    bf6a:	3203      	adds	r2, #3
    bf6c:	49b2      	ldr	r1, [pc, #712]	; (c238 <process_recieved_packet+0x744>)
    bf6e:	188a      	adds	r2, r1, r2
    bf70:	78d2      	ldrb	r2, [r2, #3]
    bf72:	4313      	orrs	r3, r2
    bf74:	0018      	movs	r0, r3
    bf76:	4bb1      	ldr	r3, [pc, #708]	; (c23c <process_recieved_packet+0x748>)
    bf78:	22fa      	movs	r2, #250	; 0xfa
    bf7a:	0091      	lsls	r1, r2, #2
    bf7c:	4798      	blx	r3
    bf7e:	0003      	movs	r3, r0
    bf80:	001a      	movs	r2, r3
    bf82:	4baf      	ldr	r3, [pc, #700]	; (c240 <process_recieved_packet+0x74c>)
    bf84:	60da      	str	r2, [r3, #12]
				mcconf_limits.abs_current_max = ((vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ABS_CURR_MAX+3])/1000;
    bf86:	4bb2      	ldr	r3, [pc, #712]	; (c250 <process_recieved_packet+0x75c>)
    bf88:	781b      	ldrb	r3, [r3, #0]
    bf8a:	001a      	movs	r2, r3
    bf8c:	4baa      	ldr	r3, [pc, #680]	; (c238 <process_recieved_packet+0x744>)
    bf8e:	189b      	adds	r3, r3, r2
    bf90:	78db      	ldrb	r3, [r3, #3]
    bf92:	061a      	lsls	r2, r3, #24
    bf94:	4bae      	ldr	r3, [pc, #696]	; (c250 <process_recieved_packet+0x75c>)
    bf96:	781b      	ldrb	r3, [r3, #0]
    bf98:	3301      	adds	r3, #1
    bf9a:	49a7      	ldr	r1, [pc, #668]	; (c238 <process_recieved_packet+0x744>)
    bf9c:	18cb      	adds	r3, r1, r3
    bf9e:	78db      	ldrb	r3, [r3, #3]
    bfa0:	041b      	lsls	r3, r3, #16
    bfa2:	431a      	orrs	r2, r3
    bfa4:	4baa      	ldr	r3, [pc, #680]	; (c250 <process_recieved_packet+0x75c>)
    bfa6:	781b      	ldrb	r3, [r3, #0]
    bfa8:	3302      	adds	r3, #2
    bfaa:	49a3      	ldr	r1, [pc, #652]	; (c238 <process_recieved_packet+0x744>)
    bfac:	18cb      	adds	r3, r1, r3
    bfae:	78db      	ldrb	r3, [r3, #3]
    bfb0:	021b      	lsls	r3, r3, #8
    bfb2:	4313      	orrs	r3, r2
    bfb4:	4aa6      	ldr	r2, [pc, #664]	; (c250 <process_recieved_packet+0x75c>)
    bfb6:	7812      	ldrb	r2, [r2, #0]
    bfb8:	3203      	adds	r2, #3
    bfba:	499f      	ldr	r1, [pc, #636]	; (c238 <process_recieved_packet+0x744>)
    bfbc:	188a      	adds	r2, r1, r2
    bfbe:	78d2      	ldrb	r2, [r2, #3]
    bfc0:	4313      	orrs	r3, r2
    bfc2:	0018      	movs	r0, r3
    bfc4:	4b9d      	ldr	r3, [pc, #628]	; (c23c <process_recieved_packet+0x748>)
    bfc6:	22fa      	movs	r2, #250	; 0xfa
    bfc8:	0091      	lsls	r1, r2, #2
    bfca:	4798      	blx	r3
    bfcc:	0003      	movs	r3, r0
    bfce:	001a      	movs	r2, r3
    bfd0:	4b9b      	ldr	r3, [pc, #620]	; (c240 <process_recieved_packet+0x74c>)
    bfd2:	611a      	str	r2, [r3, #16]
				mcconf_limits.min_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MIN+3])/1000;
    bfd4:	4b9f      	ldr	r3, [pc, #636]	; (c254 <process_recieved_packet+0x760>)
    bfd6:	781b      	ldrb	r3, [r3, #0]
    bfd8:	001a      	movs	r2, r3
    bfda:	4b97      	ldr	r3, [pc, #604]	; (c238 <process_recieved_packet+0x744>)
    bfdc:	189b      	adds	r3, r3, r2
    bfde:	78db      	ldrb	r3, [r3, #3]
    bfe0:	061a      	lsls	r2, r3, #24
    bfe2:	4b9c      	ldr	r3, [pc, #624]	; (c254 <process_recieved_packet+0x760>)
    bfe4:	781b      	ldrb	r3, [r3, #0]
    bfe6:	3301      	adds	r3, #1
    bfe8:	4993      	ldr	r1, [pc, #588]	; (c238 <process_recieved_packet+0x744>)
    bfea:	18cb      	adds	r3, r1, r3
    bfec:	78db      	ldrb	r3, [r3, #3]
    bfee:	041b      	lsls	r3, r3, #16
    bff0:	431a      	orrs	r2, r3
    bff2:	4b98      	ldr	r3, [pc, #608]	; (c254 <process_recieved_packet+0x760>)
    bff4:	781b      	ldrb	r3, [r3, #0]
    bff6:	3302      	adds	r3, #2
    bff8:	498f      	ldr	r1, [pc, #572]	; (c238 <process_recieved_packet+0x744>)
    bffa:	18cb      	adds	r3, r1, r3
    bffc:	78db      	ldrb	r3, [r3, #3]
    bffe:	021b      	lsls	r3, r3, #8
    c000:	4313      	orrs	r3, r2
    c002:	4a94      	ldr	r2, [pc, #592]	; (c254 <process_recieved_packet+0x760>)
    c004:	7812      	ldrb	r2, [r2, #0]
    c006:	3203      	adds	r2, #3
    c008:	498b      	ldr	r1, [pc, #556]	; (c238 <process_recieved_packet+0x744>)
    c00a:	188a      	adds	r2, r1, r2
    c00c:	78d2      	ldrb	r2, [r2, #3]
    c00e:	4313      	orrs	r3, r2
    c010:	0018      	movs	r0, r3
    c012:	4b8a      	ldr	r3, [pc, #552]	; (c23c <process_recieved_packet+0x748>)
    c014:	22fa      	movs	r2, #250	; 0xfa
    c016:	0091      	lsls	r1, r2, #2
    c018:	4798      	blx	r3
    c01a:	0003      	movs	r3, r0
    c01c:	001a      	movs	r2, r3
    c01e:	4b88      	ldr	r3, [pc, #544]	; (c240 <process_recieved_packet+0x74c>)
    c020:	615a      	str	r2, [r3, #20]
				mcconf_limits.max_erpm = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_MAX+3])/1000;
    c022:	4b8d      	ldr	r3, [pc, #564]	; (c258 <process_recieved_packet+0x764>)
    c024:	781b      	ldrb	r3, [r3, #0]
    c026:	001a      	movs	r2, r3
    c028:	4b83      	ldr	r3, [pc, #524]	; (c238 <process_recieved_packet+0x744>)
    c02a:	189b      	adds	r3, r3, r2
    c02c:	78db      	ldrb	r3, [r3, #3]
    c02e:	061a      	lsls	r2, r3, #24
    c030:	4b89      	ldr	r3, [pc, #548]	; (c258 <process_recieved_packet+0x764>)
    c032:	781b      	ldrb	r3, [r3, #0]
    c034:	3301      	adds	r3, #1
    c036:	4980      	ldr	r1, [pc, #512]	; (c238 <process_recieved_packet+0x744>)
    c038:	18cb      	adds	r3, r1, r3
    c03a:	78db      	ldrb	r3, [r3, #3]
    c03c:	041b      	lsls	r3, r3, #16
    c03e:	431a      	orrs	r2, r3
    c040:	4b85      	ldr	r3, [pc, #532]	; (c258 <process_recieved_packet+0x764>)
    c042:	781b      	ldrb	r3, [r3, #0]
    c044:	3302      	adds	r3, #2
    c046:	497c      	ldr	r1, [pc, #496]	; (c238 <process_recieved_packet+0x744>)
    c048:	18cb      	adds	r3, r1, r3
    c04a:	78db      	ldrb	r3, [r3, #3]
    c04c:	021b      	lsls	r3, r3, #8
    c04e:	4313      	orrs	r3, r2
    c050:	4a81      	ldr	r2, [pc, #516]	; (c258 <process_recieved_packet+0x764>)
    c052:	7812      	ldrb	r2, [r2, #0]
    c054:	3203      	adds	r2, #3
    c056:	4978      	ldr	r1, [pc, #480]	; (c238 <process_recieved_packet+0x744>)
    c058:	188a      	adds	r2, r1, r2
    c05a:	78d2      	ldrb	r2, [r2, #3]
    c05c:	4313      	orrs	r3, r2
    c05e:	0018      	movs	r0, r3
    c060:	4b76      	ldr	r3, [pc, #472]	; (c23c <process_recieved_packet+0x748>)
    c062:	22fa      	movs	r2, #250	; 0xfa
    c064:	0091      	lsls	r1, r2, #2
    c066:	4798      	blx	r3
    c068:	0003      	movs	r3, r0
    c06a:	001a      	movs	r2, r3
    c06c:	4b74      	ldr	r3, [pc, #464]	; (c240 <process_recieved_packet+0x74c>)
    c06e:	619a      	str	r2, [r3, #24]
				mcconf_limits.max_erpm_fbrake = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_MAX+3])/1000;
    c070:	4b7a      	ldr	r3, [pc, #488]	; (c25c <process_recieved_packet+0x768>)
    c072:	781b      	ldrb	r3, [r3, #0]
    c074:	001a      	movs	r2, r3
    c076:	4b70      	ldr	r3, [pc, #448]	; (c238 <process_recieved_packet+0x744>)
    c078:	189b      	adds	r3, r3, r2
    c07a:	78db      	ldrb	r3, [r3, #3]
    c07c:	061a      	lsls	r2, r3, #24
    c07e:	4b77      	ldr	r3, [pc, #476]	; (c25c <process_recieved_packet+0x768>)
    c080:	781b      	ldrb	r3, [r3, #0]
    c082:	3301      	adds	r3, #1
    c084:	496c      	ldr	r1, [pc, #432]	; (c238 <process_recieved_packet+0x744>)
    c086:	18cb      	adds	r3, r1, r3
    c088:	78db      	ldrb	r3, [r3, #3]
    c08a:	041b      	lsls	r3, r3, #16
    c08c:	431a      	orrs	r2, r3
    c08e:	4b73      	ldr	r3, [pc, #460]	; (c25c <process_recieved_packet+0x768>)
    c090:	781b      	ldrb	r3, [r3, #0]
    c092:	3302      	adds	r3, #2
    c094:	4968      	ldr	r1, [pc, #416]	; (c238 <process_recieved_packet+0x744>)
    c096:	18cb      	adds	r3, r1, r3
    c098:	78db      	ldrb	r3, [r3, #3]
    c09a:	021b      	lsls	r3, r3, #8
    c09c:	4313      	orrs	r3, r2
    c09e:	4a6f      	ldr	r2, [pc, #444]	; (c25c <process_recieved_packet+0x768>)
    c0a0:	7812      	ldrb	r2, [r2, #0]
    c0a2:	3203      	adds	r2, #3
    c0a4:	4964      	ldr	r1, [pc, #400]	; (c238 <process_recieved_packet+0x744>)
    c0a6:	188a      	adds	r2, r1, r2
    c0a8:	78d2      	ldrb	r2, [r2, #3]
    c0aa:	4313      	orrs	r3, r2
    c0ac:	0018      	movs	r0, r3
    c0ae:	4b63      	ldr	r3, [pc, #396]	; (c23c <process_recieved_packet+0x748>)
    c0b0:	22fa      	movs	r2, #250	; 0xfa
    c0b2:	0091      	lsls	r1, r2, #2
    c0b4:	4798      	blx	r3
    c0b6:	0003      	movs	r3, r0
    c0b8:	001a      	movs	r2, r3
    c0ba:	4b61      	ldr	r3, [pc, #388]	; (c240 <process_recieved_packet+0x74c>)
    c0bc:	61da      	str	r2, [r3, #28]
				mcconf_limits.max_erpm_fbrake_cc = ((vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_ERPM_FBRAKE_CC_MAX+3])/1000;
    c0be:	4b68      	ldr	r3, [pc, #416]	; (c260 <process_recieved_packet+0x76c>)
    c0c0:	781b      	ldrb	r3, [r3, #0]
    c0c2:	001a      	movs	r2, r3
    c0c4:	4b5c      	ldr	r3, [pc, #368]	; (c238 <process_recieved_packet+0x744>)
    c0c6:	189b      	adds	r3, r3, r2
    c0c8:	78db      	ldrb	r3, [r3, #3]
    c0ca:	061a      	lsls	r2, r3, #24
    c0cc:	4b64      	ldr	r3, [pc, #400]	; (c260 <process_recieved_packet+0x76c>)
    c0ce:	781b      	ldrb	r3, [r3, #0]
    c0d0:	3301      	adds	r3, #1
    c0d2:	4959      	ldr	r1, [pc, #356]	; (c238 <process_recieved_packet+0x744>)
    c0d4:	18cb      	adds	r3, r1, r3
    c0d6:	78db      	ldrb	r3, [r3, #3]
    c0d8:	041b      	lsls	r3, r3, #16
    c0da:	431a      	orrs	r2, r3
    c0dc:	4b60      	ldr	r3, [pc, #384]	; (c260 <process_recieved_packet+0x76c>)
    c0de:	781b      	ldrb	r3, [r3, #0]
    c0e0:	3302      	adds	r3, #2
    c0e2:	4955      	ldr	r1, [pc, #340]	; (c238 <process_recieved_packet+0x744>)
    c0e4:	18cb      	adds	r3, r1, r3
    c0e6:	78db      	ldrb	r3, [r3, #3]
    c0e8:	021b      	lsls	r3, r3, #8
    c0ea:	4313      	orrs	r3, r2
    c0ec:	4a5c      	ldr	r2, [pc, #368]	; (c260 <process_recieved_packet+0x76c>)
    c0ee:	7812      	ldrb	r2, [r2, #0]
    c0f0:	3203      	adds	r2, #3
    c0f2:	4951      	ldr	r1, [pc, #324]	; (c238 <process_recieved_packet+0x744>)
    c0f4:	188a      	adds	r2, r1, r2
    c0f6:	78d2      	ldrb	r2, [r2, #3]
    c0f8:	4313      	orrs	r3, r2
    c0fa:	0018      	movs	r0, r3
    c0fc:	4b4f      	ldr	r3, [pc, #316]	; (c23c <process_recieved_packet+0x748>)
    c0fe:	22fa      	movs	r2, #250	; 0xfa
    c100:	0091      	lsls	r1, r2, #2
    c102:	4798      	blx	r3
    c104:	0003      	movs	r3, r0
    c106:	001a      	movs	r2, r3
    c108:	4b4d      	ldr	r3, [pc, #308]	; (c240 <process_recieved_packet+0x74c>)
    c10a:	621a      	str	r2, [r3, #32]
				mcconf_limits.min_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MIN+3])/1000;
    c10c:	4b55      	ldr	r3, [pc, #340]	; (c264 <process_recieved_packet+0x770>)
    c10e:	781b      	ldrb	r3, [r3, #0]
    c110:	001a      	movs	r2, r3
    c112:	4b49      	ldr	r3, [pc, #292]	; (c238 <process_recieved_packet+0x744>)
    c114:	189b      	adds	r3, r3, r2
    c116:	78db      	ldrb	r3, [r3, #3]
    c118:	061a      	lsls	r2, r3, #24
    c11a:	4b52      	ldr	r3, [pc, #328]	; (c264 <process_recieved_packet+0x770>)
    c11c:	781b      	ldrb	r3, [r3, #0]
    c11e:	3301      	adds	r3, #1
    c120:	4945      	ldr	r1, [pc, #276]	; (c238 <process_recieved_packet+0x744>)
    c122:	18cb      	adds	r3, r1, r3
    c124:	78db      	ldrb	r3, [r3, #3]
    c126:	041b      	lsls	r3, r3, #16
    c128:	431a      	orrs	r2, r3
    c12a:	4b4e      	ldr	r3, [pc, #312]	; (c264 <process_recieved_packet+0x770>)
    c12c:	781b      	ldrb	r3, [r3, #0]
    c12e:	3302      	adds	r3, #2
    c130:	4941      	ldr	r1, [pc, #260]	; (c238 <process_recieved_packet+0x744>)
    c132:	18cb      	adds	r3, r1, r3
    c134:	78db      	ldrb	r3, [r3, #3]
    c136:	021b      	lsls	r3, r3, #8
    c138:	4313      	orrs	r3, r2
    c13a:	4a4a      	ldr	r2, [pc, #296]	; (c264 <process_recieved_packet+0x770>)
    c13c:	7812      	ldrb	r2, [r2, #0]
    c13e:	3203      	adds	r2, #3
    c140:	493d      	ldr	r1, [pc, #244]	; (c238 <process_recieved_packet+0x744>)
    c142:	188a      	adds	r2, r1, r2
    c144:	78d2      	ldrb	r2, [r2, #3]
    c146:	4313      	orrs	r3, r2
    c148:	0018      	movs	r0, r3
    c14a:	4b3c      	ldr	r3, [pc, #240]	; (c23c <process_recieved_packet+0x748>)
    c14c:	22fa      	movs	r2, #250	; 0xfa
    c14e:	0091      	lsls	r1, r2, #2
    c150:	4798      	blx	r3
    c152:	0003      	movs	r3, r0
    c154:	001a      	movs	r2, r3
    c156:	4b3a      	ldr	r3, [pc, #232]	; (c240 <process_recieved_packet+0x74c>)
    c158:	625a      	str	r2, [r3, #36]	; 0x24
				mcconf_limits.max_vin = ((vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_VIN_MAX+3])/1000;
    c15a:	4b43      	ldr	r3, [pc, #268]	; (c268 <process_recieved_packet+0x774>)
    c15c:	781b      	ldrb	r3, [r3, #0]
    c15e:	001a      	movs	r2, r3
    c160:	4b35      	ldr	r3, [pc, #212]	; (c238 <process_recieved_packet+0x744>)
    c162:	189b      	adds	r3, r3, r2
    c164:	78db      	ldrb	r3, [r3, #3]
    c166:	061a      	lsls	r2, r3, #24
    c168:	4b3f      	ldr	r3, [pc, #252]	; (c268 <process_recieved_packet+0x774>)
    c16a:	781b      	ldrb	r3, [r3, #0]
    c16c:	3301      	adds	r3, #1
    c16e:	4932      	ldr	r1, [pc, #200]	; (c238 <process_recieved_packet+0x744>)
    c170:	18cb      	adds	r3, r1, r3
    c172:	78db      	ldrb	r3, [r3, #3]
    c174:	041b      	lsls	r3, r3, #16
    c176:	431a      	orrs	r2, r3
    c178:	4b3b      	ldr	r3, [pc, #236]	; (c268 <process_recieved_packet+0x774>)
    c17a:	781b      	ldrb	r3, [r3, #0]
    c17c:	3302      	adds	r3, #2
    c17e:	492e      	ldr	r1, [pc, #184]	; (c238 <process_recieved_packet+0x744>)
    c180:	18cb      	adds	r3, r1, r3
    c182:	78db      	ldrb	r3, [r3, #3]
    c184:	021b      	lsls	r3, r3, #8
    c186:	4313      	orrs	r3, r2
    c188:	4a37      	ldr	r2, [pc, #220]	; (c268 <process_recieved_packet+0x774>)
    c18a:	7812      	ldrb	r2, [r2, #0]
    c18c:	3203      	adds	r2, #3
    c18e:	492a      	ldr	r1, [pc, #168]	; (c238 <process_recieved_packet+0x744>)
    c190:	188a      	adds	r2, r1, r2
    c192:	78d2      	ldrb	r2, [r2, #3]
    c194:	4313      	orrs	r3, r2
    c196:	0018      	movs	r0, r3
    c198:	4b28      	ldr	r3, [pc, #160]	; (c23c <process_recieved_packet+0x748>)
    c19a:	22fa      	movs	r2, #250	; 0xfa
    c19c:	0091      	lsls	r1, r2, #2
    c19e:	4798      	blx	r3
    c1a0:	0003      	movs	r3, r0
    c1a2:	001a      	movs	r2, r3
    c1a4:	4b26      	ldr	r3, [pc, #152]	; (c240 <process_recieved_packet+0x74c>)
    c1a6:	629a      	str	r2, [r3, #40]	; 0x28
				mcconf_limits.battery_cut_start = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_STRT+3])/1000;
    c1a8:	4b30      	ldr	r3, [pc, #192]	; (c26c <process_recieved_packet+0x778>)
    c1aa:	781b      	ldrb	r3, [r3, #0]
    c1ac:	001a      	movs	r2, r3
    c1ae:	4b22      	ldr	r3, [pc, #136]	; (c238 <process_recieved_packet+0x744>)
    c1b0:	189b      	adds	r3, r3, r2
    c1b2:	78db      	ldrb	r3, [r3, #3]
    c1b4:	061a      	lsls	r2, r3, #24
    c1b6:	4b2d      	ldr	r3, [pc, #180]	; (c26c <process_recieved_packet+0x778>)
    c1b8:	781b      	ldrb	r3, [r3, #0]
    c1ba:	3301      	adds	r3, #1
    c1bc:	491e      	ldr	r1, [pc, #120]	; (c238 <process_recieved_packet+0x744>)
    c1be:	18cb      	adds	r3, r1, r3
    c1c0:	78db      	ldrb	r3, [r3, #3]
    c1c2:	041b      	lsls	r3, r3, #16
    c1c4:	431a      	orrs	r2, r3
    c1c6:	4b29      	ldr	r3, [pc, #164]	; (c26c <process_recieved_packet+0x778>)
    c1c8:	781b      	ldrb	r3, [r3, #0]
    c1ca:	3302      	adds	r3, #2
    c1cc:	491a      	ldr	r1, [pc, #104]	; (c238 <process_recieved_packet+0x744>)
    c1ce:	18cb      	adds	r3, r1, r3
    c1d0:	78db      	ldrb	r3, [r3, #3]
    c1d2:	021b      	lsls	r3, r3, #8
    c1d4:	4313      	orrs	r3, r2
    c1d6:	4a25      	ldr	r2, [pc, #148]	; (c26c <process_recieved_packet+0x778>)
    c1d8:	7812      	ldrb	r2, [r2, #0]
    c1da:	3203      	adds	r2, #3
    c1dc:	4916      	ldr	r1, [pc, #88]	; (c238 <process_recieved_packet+0x744>)
    c1de:	188a      	adds	r2, r1, r2
    c1e0:	78d2      	ldrb	r2, [r2, #3]
    c1e2:	4313      	orrs	r3, r2
    c1e4:	0018      	movs	r0, r3
    c1e6:	4b15      	ldr	r3, [pc, #84]	; (c23c <process_recieved_packet+0x748>)
    c1e8:	22fa      	movs	r2, #250	; 0xfa
    c1ea:	0091      	lsls	r1, r2, #2
    c1ec:	4798      	blx	r3
    c1ee:	0003      	movs	r3, r0
    c1f0:	001a      	movs	r2, r3
    c1f2:	4b1f      	ldr	r3, [pc, #124]	; (c270 <process_recieved_packet+0x77c>)
    c1f4:	0010      	movs	r0, r2
    c1f6:	4798      	blx	r3
    c1f8:	1c02      	adds	r2, r0, #0
    c1fa:	4b11      	ldr	r3, [pc, #68]	; (c240 <process_recieved_packet+0x74c>)
    c1fc:	62da      	str	r2, [r3, #44]	; 0x2c
				mcconf_limits.battery_cut_end = ((vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_BAT_CUT_END+3])/1000;
    c1fe:	4b1d      	ldr	r3, [pc, #116]	; (c274 <process_recieved_packet+0x780>)
    c200:	781b      	ldrb	r3, [r3, #0]
    c202:	001a      	movs	r2, r3
    c204:	4b0c      	ldr	r3, [pc, #48]	; (c238 <process_recieved_packet+0x744>)
    c206:	189b      	adds	r3, r3, r2
    c208:	78db      	ldrb	r3, [r3, #3]
    c20a:	061a      	lsls	r2, r3, #24
    c20c:	4b19      	ldr	r3, [pc, #100]	; (c274 <process_recieved_packet+0x780>)
    c20e:	781b      	ldrb	r3, [r3, #0]
    c210:	3301      	adds	r3, #1
    c212:	4909      	ldr	r1, [pc, #36]	; (c238 <process_recieved_packet+0x744>)
    c214:	18cb      	adds	r3, r1, r3
    c216:	78db      	ldrb	r3, [r3, #3]
    c218:	041b      	lsls	r3, r3, #16
    c21a:	431a      	orrs	r2, r3
    c21c:	4b15      	ldr	r3, [pc, #84]	; (c274 <process_recieved_packet+0x780>)
    c21e:	781b      	ldrb	r3, [r3, #0]
    c220:	3302      	adds	r3, #2
    c222:	4905      	ldr	r1, [pc, #20]	; (c238 <process_recieved_packet+0x744>)
    c224:	18cb      	adds	r3, r1, r3
    c226:	78db      	ldrb	r3, [r3, #3]
    c228:	021b      	lsls	r3, r3, #8
    c22a:	e025      	b.n	c278 <process_recieved_packet+0x784>
    c22c:	2000033c 	.word	0x2000033c
    c230:	2000001a 	.word	0x2000001a
    c234:	2000034f 	.word	0x2000034f
    c238:	20000ac4 	.word	0x20000ac4
    c23c:	00013e05 	.word	0x00013e05
    c240:	20000db4 	.word	0x20000db4
    c244:	20000350 	.word	0x20000350
    c248:	20000351 	.word	0x20000351
    c24c:	20000352 	.word	0x20000352
    c250:	20000353 	.word	0x20000353
    c254:	20000354 	.word	0x20000354
    c258:	20000355 	.word	0x20000355
    c25c:	20000356 	.word	0x20000356
    c260:	20000357 	.word	0x20000357
    c264:	20000358 	.word	0x20000358
    c268:	20000359 	.word	0x20000359
    c26c:	2000035a 	.word	0x2000035a
    c270:	00014e49 	.word	0x00014e49
    c274:	2000035b 	.word	0x2000035b
    c278:	4313      	orrs	r3, r2
    c27a:	4a7f      	ldr	r2, [pc, #508]	; (c478 <process_recieved_packet+0x984>)
    c27c:	7812      	ldrb	r2, [r2, #0]
    c27e:	3203      	adds	r2, #3
    c280:	497e      	ldr	r1, [pc, #504]	; (c47c <process_recieved_packet+0x988>)
    c282:	188a      	adds	r2, r1, r2
    c284:	78d2      	ldrb	r2, [r2, #3]
    c286:	4313      	orrs	r3, r2
    c288:	0018      	movs	r0, r3
    c28a:	4b7d      	ldr	r3, [pc, #500]	; (c480 <process_recieved_packet+0x98c>)
    c28c:	22fa      	movs	r2, #250	; 0xfa
    c28e:	0091      	lsls	r1, r2, #2
    c290:	4798      	blx	r3
    c292:	0003      	movs	r3, r0
    c294:	001a      	movs	r2, r3
    c296:	4b7b      	ldr	r3, [pc, #492]	; (c484 <process_recieved_packet+0x990>)
    c298:	0010      	movs	r0, r2
    c29a:	4798      	blx	r3
    c29c:	1c02      	adds	r2, r0, #0
    c29e:	4b7a      	ldr	r3, [pc, #488]	; (c488 <process_recieved_packet+0x994>)
    c2a0:	631a      	str	r2, [r3, #48]	; 0x30
				mcconf_limits.temp_fet_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_STRT+3])/1000;
    c2a2:	4b7a      	ldr	r3, [pc, #488]	; (c48c <process_recieved_packet+0x998>)
    c2a4:	781b      	ldrb	r3, [r3, #0]
    c2a6:	001a      	movs	r2, r3
    c2a8:	4b74      	ldr	r3, [pc, #464]	; (c47c <process_recieved_packet+0x988>)
    c2aa:	189b      	adds	r3, r3, r2
    c2ac:	78db      	ldrb	r3, [r3, #3]
    c2ae:	061a      	lsls	r2, r3, #24
    c2b0:	4b76      	ldr	r3, [pc, #472]	; (c48c <process_recieved_packet+0x998>)
    c2b2:	781b      	ldrb	r3, [r3, #0]
    c2b4:	3301      	adds	r3, #1
    c2b6:	4971      	ldr	r1, [pc, #452]	; (c47c <process_recieved_packet+0x988>)
    c2b8:	18cb      	adds	r3, r1, r3
    c2ba:	78db      	ldrb	r3, [r3, #3]
    c2bc:	041b      	lsls	r3, r3, #16
    c2be:	431a      	orrs	r2, r3
    c2c0:	4b72      	ldr	r3, [pc, #456]	; (c48c <process_recieved_packet+0x998>)
    c2c2:	781b      	ldrb	r3, [r3, #0]
    c2c4:	3302      	adds	r3, #2
    c2c6:	496d      	ldr	r1, [pc, #436]	; (c47c <process_recieved_packet+0x988>)
    c2c8:	18cb      	adds	r3, r1, r3
    c2ca:	78db      	ldrb	r3, [r3, #3]
    c2cc:	021b      	lsls	r3, r3, #8
    c2ce:	4313      	orrs	r3, r2
    c2d0:	4a6e      	ldr	r2, [pc, #440]	; (c48c <process_recieved_packet+0x998>)
    c2d2:	7812      	ldrb	r2, [r2, #0]
    c2d4:	3203      	adds	r2, #3
    c2d6:	4969      	ldr	r1, [pc, #420]	; (c47c <process_recieved_packet+0x988>)
    c2d8:	188a      	adds	r2, r1, r2
    c2da:	78d2      	ldrb	r2, [r2, #3]
    c2dc:	4313      	orrs	r3, r2
    c2de:	0018      	movs	r0, r3
    c2e0:	4b67      	ldr	r3, [pc, #412]	; (c480 <process_recieved_packet+0x98c>)
    c2e2:	22fa      	movs	r2, #250	; 0xfa
    c2e4:	0091      	lsls	r1, r2, #2
    c2e6:	4798      	blx	r3
    c2e8:	0003      	movs	r3, r0
    c2ea:	001a      	movs	r2, r3
    c2ec:	4b66      	ldr	r3, [pc, #408]	; (c488 <process_recieved_packet+0x994>)
    c2ee:	635a      	str	r2, [r3, #52]	; 0x34
				mcconf_limits.temp_fet_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_FET_END+3])/1000;
    c2f0:	4b67      	ldr	r3, [pc, #412]	; (c490 <process_recieved_packet+0x99c>)
    c2f2:	781b      	ldrb	r3, [r3, #0]
    c2f4:	001a      	movs	r2, r3
    c2f6:	4b61      	ldr	r3, [pc, #388]	; (c47c <process_recieved_packet+0x988>)
    c2f8:	189b      	adds	r3, r3, r2
    c2fa:	78db      	ldrb	r3, [r3, #3]
    c2fc:	061a      	lsls	r2, r3, #24
    c2fe:	4b64      	ldr	r3, [pc, #400]	; (c490 <process_recieved_packet+0x99c>)
    c300:	781b      	ldrb	r3, [r3, #0]
    c302:	3301      	adds	r3, #1
    c304:	495d      	ldr	r1, [pc, #372]	; (c47c <process_recieved_packet+0x988>)
    c306:	18cb      	adds	r3, r1, r3
    c308:	78db      	ldrb	r3, [r3, #3]
    c30a:	041b      	lsls	r3, r3, #16
    c30c:	431a      	orrs	r2, r3
    c30e:	4b60      	ldr	r3, [pc, #384]	; (c490 <process_recieved_packet+0x99c>)
    c310:	781b      	ldrb	r3, [r3, #0]
    c312:	3302      	adds	r3, #2
    c314:	4959      	ldr	r1, [pc, #356]	; (c47c <process_recieved_packet+0x988>)
    c316:	18cb      	adds	r3, r1, r3
    c318:	78db      	ldrb	r3, [r3, #3]
    c31a:	021b      	lsls	r3, r3, #8
    c31c:	4313      	orrs	r3, r2
    c31e:	4a5c      	ldr	r2, [pc, #368]	; (c490 <process_recieved_packet+0x99c>)
    c320:	7812      	ldrb	r2, [r2, #0]
    c322:	3203      	adds	r2, #3
    c324:	4955      	ldr	r1, [pc, #340]	; (c47c <process_recieved_packet+0x988>)
    c326:	188a      	adds	r2, r1, r2
    c328:	78d2      	ldrb	r2, [r2, #3]
    c32a:	4313      	orrs	r3, r2
    c32c:	0018      	movs	r0, r3
    c32e:	4b54      	ldr	r3, [pc, #336]	; (c480 <process_recieved_packet+0x98c>)
    c330:	22fa      	movs	r2, #250	; 0xfa
    c332:	0091      	lsls	r1, r2, #2
    c334:	4798      	blx	r3
    c336:	0003      	movs	r3, r0
    c338:	001a      	movs	r2, r3
    c33a:	4b53      	ldr	r3, [pc, #332]	; (c488 <process_recieved_packet+0x994>)
    c33c:	639a      	str	r2, [r3, #56]	; 0x38
				mcconf_limits.temp_motor_start = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_STRT+2])/1000;
    c33e:	4b55      	ldr	r3, [pc, #340]	; (c494 <process_recieved_packet+0x9a0>)
    c340:	781b      	ldrb	r3, [r3, #0]
    c342:	001a      	movs	r2, r3
    c344:	4b4d      	ldr	r3, [pc, #308]	; (c47c <process_recieved_packet+0x988>)
    c346:	189b      	adds	r3, r3, r2
    c348:	78db      	ldrb	r3, [r3, #3]
    c34a:	061a      	lsls	r2, r3, #24
    c34c:	4b51      	ldr	r3, [pc, #324]	; (c494 <process_recieved_packet+0x9a0>)
    c34e:	781b      	ldrb	r3, [r3, #0]
    c350:	3301      	adds	r3, #1
    c352:	494a      	ldr	r1, [pc, #296]	; (c47c <process_recieved_packet+0x988>)
    c354:	18cb      	adds	r3, r1, r3
    c356:	78db      	ldrb	r3, [r3, #3]
    c358:	041b      	lsls	r3, r3, #16
    c35a:	431a      	orrs	r2, r3
    c35c:	4b4d      	ldr	r3, [pc, #308]	; (c494 <process_recieved_packet+0x9a0>)
    c35e:	781b      	ldrb	r3, [r3, #0]
    c360:	3302      	adds	r3, #2
    c362:	4946      	ldr	r1, [pc, #280]	; (c47c <process_recieved_packet+0x988>)
    c364:	18cb      	adds	r3, r1, r3
    c366:	78db      	ldrb	r3, [r3, #3]
    c368:	021b      	lsls	r3, r3, #8
    c36a:	4313      	orrs	r3, r2
    c36c:	4a49      	ldr	r2, [pc, #292]	; (c494 <process_recieved_packet+0x9a0>)
    c36e:	7812      	ldrb	r2, [r2, #0]
    c370:	3202      	adds	r2, #2
    c372:	4942      	ldr	r1, [pc, #264]	; (c47c <process_recieved_packet+0x988>)
    c374:	188a      	adds	r2, r1, r2
    c376:	78d2      	ldrb	r2, [r2, #3]
    c378:	4313      	orrs	r3, r2
    c37a:	0018      	movs	r0, r3
    c37c:	4b40      	ldr	r3, [pc, #256]	; (c480 <process_recieved_packet+0x98c>)
    c37e:	22fa      	movs	r2, #250	; 0xfa
    c380:	0091      	lsls	r1, r2, #2
    c382:	4798      	blx	r3
    c384:	0003      	movs	r3, r0
    c386:	001a      	movs	r2, r3
    c388:	4b3f      	ldr	r3, [pc, #252]	; (c488 <process_recieved_packet+0x994>)
    c38a:	63da      	str	r2, [r3, #60]	; 0x3c
				mcconf_limits.temp_motor_end = ((vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_TMP_MTR_END+3])/1000;
    c38c:	4b42      	ldr	r3, [pc, #264]	; (c498 <process_recieved_packet+0x9a4>)
    c38e:	781b      	ldrb	r3, [r3, #0]
    c390:	001a      	movs	r2, r3
    c392:	4b3a      	ldr	r3, [pc, #232]	; (c47c <process_recieved_packet+0x988>)
    c394:	189b      	adds	r3, r3, r2
    c396:	78db      	ldrb	r3, [r3, #3]
    c398:	061a      	lsls	r2, r3, #24
    c39a:	4b3f      	ldr	r3, [pc, #252]	; (c498 <process_recieved_packet+0x9a4>)
    c39c:	781b      	ldrb	r3, [r3, #0]
    c39e:	3301      	adds	r3, #1
    c3a0:	4936      	ldr	r1, [pc, #216]	; (c47c <process_recieved_packet+0x988>)
    c3a2:	18cb      	adds	r3, r1, r3
    c3a4:	78db      	ldrb	r3, [r3, #3]
    c3a6:	041b      	lsls	r3, r3, #16
    c3a8:	431a      	orrs	r2, r3
    c3aa:	4b3b      	ldr	r3, [pc, #236]	; (c498 <process_recieved_packet+0x9a4>)
    c3ac:	781b      	ldrb	r3, [r3, #0]
    c3ae:	3302      	adds	r3, #2
    c3b0:	4932      	ldr	r1, [pc, #200]	; (c47c <process_recieved_packet+0x988>)
    c3b2:	18cb      	adds	r3, r1, r3
    c3b4:	78db      	ldrb	r3, [r3, #3]
    c3b6:	021b      	lsls	r3, r3, #8
    c3b8:	4313      	orrs	r3, r2
    c3ba:	4a37      	ldr	r2, [pc, #220]	; (c498 <process_recieved_packet+0x9a4>)
    c3bc:	7812      	ldrb	r2, [r2, #0]
    c3be:	3203      	adds	r2, #3
    c3c0:	492e      	ldr	r1, [pc, #184]	; (c47c <process_recieved_packet+0x988>)
    c3c2:	188a      	adds	r2, r1, r2
    c3c4:	78d2      	ldrb	r2, [r2, #3]
    c3c6:	4313      	orrs	r3, r2
    c3c8:	0018      	movs	r0, r3
    c3ca:	4b2d      	ldr	r3, [pc, #180]	; (c480 <process_recieved_packet+0x98c>)
    c3cc:	22fa      	movs	r2, #250	; 0xfa
    c3ce:	0091      	lsls	r1, r2, #2
    c3d0:	4798      	blx	r3
    c3d2:	0003      	movs	r3, r0
    c3d4:	001a      	movs	r2, r3
    c3d6:	4b2c      	ldr	r3, [pc, #176]	; (c488 <process_recieved_packet+0x994>)
    c3d8:	641a      	str	r2, [r3, #64]	; 0x40
				mcconf_limits.min_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MIN+3])/1000;
    c3da:	4b30      	ldr	r3, [pc, #192]	; (c49c <process_recieved_packet+0x9a8>)
    c3dc:	781b      	ldrb	r3, [r3, #0]
    c3de:	001a      	movs	r2, r3
    c3e0:	4b26      	ldr	r3, [pc, #152]	; (c47c <process_recieved_packet+0x988>)
    c3e2:	189b      	adds	r3, r3, r2
    c3e4:	78db      	ldrb	r3, [r3, #3]
    c3e6:	061a      	lsls	r2, r3, #24
    c3e8:	4b2c      	ldr	r3, [pc, #176]	; (c49c <process_recieved_packet+0x9a8>)
    c3ea:	781b      	ldrb	r3, [r3, #0]
    c3ec:	3301      	adds	r3, #1
    c3ee:	4923      	ldr	r1, [pc, #140]	; (c47c <process_recieved_packet+0x988>)
    c3f0:	18cb      	adds	r3, r1, r3
    c3f2:	78db      	ldrb	r3, [r3, #3]
    c3f4:	041b      	lsls	r3, r3, #16
    c3f6:	431a      	orrs	r2, r3
    c3f8:	4b28      	ldr	r3, [pc, #160]	; (c49c <process_recieved_packet+0x9a8>)
    c3fa:	781b      	ldrb	r3, [r3, #0]
    c3fc:	3302      	adds	r3, #2
    c3fe:	491f      	ldr	r1, [pc, #124]	; (c47c <process_recieved_packet+0x988>)
    c400:	18cb      	adds	r3, r1, r3
    c402:	78db      	ldrb	r3, [r3, #3]
    c404:	021b      	lsls	r3, r3, #8
    c406:	4313      	orrs	r3, r2
    c408:	4a24      	ldr	r2, [pc, #144]	; (c49c <process_recieved_packet+0x9a8>)
    c40a:	7812      	ldrb	r2, [r2, #0]
    c40c:	3203      	adds	r2, #3
    c40e:	491b      	ldr	r1, [pc, #108]	; (c47c <process_recieved_packet+0x988>)
    c410:	188a      	adds	r2, r1, r2
    c412:	78d2      	ldrb	r2, [r2, #3]
    c414:	4313      	orrs	r3, r2
    c416:	0018      	movs	r0, r3
    c418:	4b19      	ldr	r3, [pc, #100]	; (c480 <process_recieved_packet+0x98c>)
    c41a:	22fa      	movs	r2, #250	; 0xfa
    c41c:	0091      	lsls	r1, r2, #2
    c41e:	4798      	blx	r3
    c420:	0003      	movs	r3, r0
    c422:	001a      	movs	r2, r3
    c424:	4b18      	ldr	r3, [pc, #96]	; (c488 <process_recieved_packet+0x994>)
    c426:	645a      	str	r2, [r3, #68]	; 0x44
				mcconf_limits.max_duty = ((vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX] << 24) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+1] << 16) | (vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+2] << 8) | vesc_revieve_packet.payload[GET_MCCONF_DUTY_MAX+3])/1000;
    c428:	4b1d      	ldr	r3, [pc, #116]	; (c4a0 <process_recieved_packet+0x9ac>)
    c42a:	781b      	ldrb	r3, [r3, #0]
    c42c:	001a      	movs	r2, r3
    c42e:	4b13      	ldr	r3, [pc, #76]	; (c47c <process_recieved_packet+0x988>)
    c430:	189b      	adds	r3, r3, r2
    c432:	78db      	ldrb	r3, [r3, #3]
    c434:	061a      	lsls	r2, r3, #24
    c436:	4b1a      	ldr	r3, [pc, #104]	; (c4a0 <process_recieved_packet+0x9ac>)
    c438:	781b      	ldrb	r3, [r3, #0]
    c43a:	3301      	adds	r3, #1
    c43c:	490f      	ldr	r1, [pc, #60]	; (c47c <process_recieved_packet+0x988>)
    c43e:	18cb      	adds	r3, r1, r3
    c440:	78db      	ldrb	r3, [r3, #3]
    c442:	041b      	lsls	r3, r3, #16
    c444:	431a      	orrs	r2, r3
    c446:	4b16      	ldr	r3, [pc, #88]	; (c4a0 <process_recieved_packet+0x9ac>)
    c448:	781b      	ldrb	r3, [r3, #0]
    c44a:	3302      	adds	r3, #2
    c44c:	490b      	ldr	r1, [pc, #44]	; (c47c <process_recieved_packet+0x988>)
    c44e:	18cb      	adds	r3, r1, r3
    c450:	78db      	ldrb	r3, [r3, #3]
    c452:	021b      	lsls	r3, r3, #8
    c454:	4313      	orrs	r3, r2
    c456:	4a12      	ldr	r2, [pc, #72]	; (c4a0 <process_recieved_packet+0x9ac>)
    c458:	7812      	ldrb	r2, [r2, #0]
    c45a:	3203      	adds	r2, #3
    c45c:	4907      	ldr	r1, [pc, #28]	; (c47c <process_recieved_packet+0x988>)
    c45e:	188a      	adds	r2, r1, r2
    c460:	78d2      	ldrb	r2, [r2, #3]
    c462:	4313      	orrs	r3, r2
    c464:	0018      	movs	r0, r3
    c466:	4b06      	ldr	r3, [pc, #24]	; (c480 <process_recieved_packet+0x98c>)
    c468:	22fa      	movs	r2, #250	; 0xfa
    c46a:	0091      	lsls	r1, r2, #2
    c46c:	4798      	blx	r3
    c46e:	0003      	movs	r3, r0
    c470:	001a      	movs	r2, r3
    c472:	4b05      	ldr	r3, [pc, #20]	; (c488 <process_recieved_packet+0x994>)
    c474:	649a      	str	r2, [r3, #72]	; 0x48
    c476:	e136      	b.n	c6e6 <process_recieved_packet+0xbf2>
    c478:	2000035b 	.word	0x2000035b
    c47c:	20000ac4 	.word	0x20000ac4
    c480:	00013e05 	.word	0x00013e05
    c484:	00014e49 	.word	0x00014e49
    c488:	20000db4 	.word	0x20000db4
    c48c:	2000035c 	.word	0x2000035c
    c490:	2000035d 	.word	0x2000035d
    c494:	2000035e 	.word	0x2000035e
    c498:	2000035f 	.word	0x2000035f
    c49c:	20000360 	.word	0x20000360
    c4a0:	20000361 	.word	0x20000361
				mcconf_limits.motor_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MAX);
    c4a4:	4bbf      	ldr	r3, [pc, #764]	; (c7a4 <process_recieved_packet+0xcb0>)
    c4a6:	781b      	ldrb	r3, [r3, #0]
    c4a8:	b25a      	sxtb	r2, r3
    c4aa:	4bbf      	ldr	r3, [pc, #764]	; (c7a8 <process_recieved_packet+0xcb4>)
    c4ac:	0011      	movs	r1, r2
    c4ae:	0018      	movs	r0, r3
    c4b0:	4bbe      	ldr	r3, [pc, #760]	; (c7ac <process_recieved_packet+0xcb8>)
    c4b2:	4798      	blx	r3
    c4b4:	1c02      	adds	r2, r0, #0
    c4b6:	4bbe      	ldr	r3, [pc, #760]	; (c7b0 <process_recieved_packet+0xcbc>)
    c4b8:	1c10      	adds	r0, r2, #0
    c4ba:	4798      	blx	r3
    c4bc:	0002      	movs	r2, r0
    c4be:	4bbd      	ldr	r3, [pc, #756]	; (c7b4 <process_recieved_packet+0xcc0>)
    c4c0:	601a      	str	r2, [r3, #0]
				mcconf_limits.motor_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_MTR_CURR_MIN);
    c4c2:	4bbd      	ldr	r3, [pc, #756]	; (c7b8 <process_recieved_packet+0xcc4>)
    c4c4:	781b      	ldrb	r3, [r3, #0]
    c4c6:	b25a      	sxtb	r2, r3
    c4c8:	4bb7      	ldr	r3, [pc, #732]	; (c7a8 <process_recieved_packet+0xcb4>)
    c4ca:	0011      	movs	r1, r2
    c4cc:	0018      	movs	r0, r3
    c4ce:	4bb7      	ldr	r3, [pc, #732]	; (c7ac <process_recieved_packet+0xcb8>)
    c4d0:	4798      	blx	r3
    c4d2:	1c02      	adds	r2, r0, #0
    c4d4:	4bb6      	ldr	r3, [pc, #728]	; (c7b0 <process_recieved_packet+0xcbc>)
    c4d6:	1c10      	adds	r0, r2, #0
    c4d8:	4798      	blx	r3
    c4da:	0002      	movs	r2, r0
    c4dc:	4bb5      	ldr	r3, [pc, #724]	; (c7b4 <process_recieved_packet+0xcc0>)
    c4de:	605a      	str	r2, [r3, #4]
				mcconf_limits.input_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MAX);
    c4e0:	4bb6      	ldr	r3, [pc, #728]	; (c7bc <process_recieved_packet+0xcc8>)
    c4e2:	781b      	ldrb	r3, [r3, #0]
    c4e4:	b25a      	sxtb	r2, r3
    c4e6:	4bb0      	ldr	r3, [pc, #704]	; (c7a8 <process_recieved_packet+0xcb4>)
    c4e8:	0011      	movs	r1, r2
    c4ea:	0018      	movs	r0, r3
    c4ec:	4baf      	ldr	r3, [pc, #700]	; (c7ac <process_recieved_packet+0xcb8>)
    c4ee:	4798      	blx	r3
    c4f0:	1c02      	adds	r2, r0, #0
    c4f2:	4baf      	ldr	r3, [pc, #700]	; (c7b0 <process_recieved_packet+0xcbc>)
    c4f4:	1c10      	adds	r0, r2, #0
    c4f6:	4798      	blx	r3
    c4f8:	0002      	movs	r2, r0
    c4fa:	4bae      	ldr	r3, [pc, #696]	; (c7b4 <process_recieved_packet+0xcc0>)
    c4fc:	609a      	str	r2, [r3, #8]
				mcconf_limits.input_current_min = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_IN_CURR_MIN);
    c4fe:	4bb0      	ldr	r3, [pc, #704]	; (c7c0 <process_recieved_packet+0xccc>)
    c500:	781b      	ldrb	r3, [r3, #0]
    c502:	b25a      	sxtb	r2, r3
    c504:	4ba8      	ldr	r3, [pc, #672]	; (c7a8 <process_recieved_packet+0xcb4>)
    c506:	0011      	movs	r1, r2
    c508:	0018      	movs	r0, r3
    c50a:	4ba8      	ldr	r3, [pc, #672]	; (c7ac <process_recieved_packet+0xcb8>)
    c50c:	4798      	blx	r3
    c50e:	1c02      	adds	r2, r0, #0
    c510:	4ba7      	ldr	r3, [pc, #668]	; (c7b0 <process_recieved_packet+0xcbc>)
    c512:	1c10      	adds	r0, r2, #0
    c514:	4798      	blx	r3
    c516:	0002      	movs	r2, r0
    c518:	4ba6      	ldr	r3, [pc, #664]	; (c7b4 <process_recieved_packet+0xcc0>)
    c51a:	60da      	str	r2, [r3, #12]
				mcconf_limits.abs_current_max = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ABS_CURR_MAX);
    c51c:	4ba9      	ldr	r3, [pc, #676]	; (c7c4 <process_recieved_packet+0xcd0>)
    c51e:	781b      	ldrb	r3, [r3, #0]
    c520:	b25a      	sxtb	r2, r3
    c522:	4ba1      	ldr	r3, [pc, #644]	; (c7a8 <process_recieved_packet+0xcb4>)
    c524:	0011      	movs	r1, r2
    c526:	0018      	movs	r0, r3
    c528:	4ba0      	ldr	r3, [pc, #640]	; (c7ac <process_recieved_packet+0xcb8>)
    c52a:	4798      	blx	r3
    c52c:	1c02      	adds	r2, r0, #0
    c52e:	4ba0      	ldr	r3, [pc, #640]	; (c7b0 <process_recieved_packet+0xcbc>)
    c530:	1c10      	adds	r0, r2, #0
    c532:	4798      	blx	r3
    c534:	0002      	movs	r2, r0
    c536:	4b9f      	ldr	r3, [pc, #636]	; (c7b4 <process_recieved_packet+0xcc0>)
    c538:	611a      	str	r2, [r3, #16]
				mcconf_limits.min_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MIN);
    c53a:	4ba3      	ldr	r3, [pc, #652]	; (c7c8 <process_recieved_packet+0xcd4>)
    c53c:	781b      	ldrb	r3, [r3, #0]
    c53e:	b25a      	sxtb	r2, r3
    c540:	4b99      	ldr	r3, [pc, #612]	; (c7a8 <process_recieved_packet+0xcb4>)
    c542:	0011      	movs	r1, r2
    c544:	0018      	movs	r0, r3
    c546:	4b99      	ldr	r3, [pc, #612]	; (c7ac <process_recieved_packet+0xcb8>)
    c548:	4798      	blx	r3
    c54a:	1c02      	adds	r2, r0, #0
    c54c:	4b98      	ldr	r3, [pc, #608]	; (c7b0 <process_recieved_packet+0xcbc>)
    c54e:	1c10      	adds	r0, r2, #0
    c550:	4798      	blx	r3
    c552:	0002      	movs	r2, r0
    c554:	4b97      	ldr	r3, [pc, #604]	; (c7b4 <process_recieved_packet+0xcc0>)
    c556:	615a      	str	r2, [r3, #20]
				mcconf_limits.max_erpm = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_MAX);
    c558:	4b9c      	ldr	r3, [pc, #624]	; (c7cc <process_recieved_packet+0xcd8>)
    c55a:	781b      	ldrb	r3, [r3, #0]
    c55c:	b25a      	sxtb	r2, r3
    c55e:	4b92      	ldr	r3, [pc, #584]	; (c7a8 <process_recieved_packet+0xcb4>)
    c560:	0011      	movs	r1, r2
    c562:	0018      	movs	r0, r3
    c564:	4b91      	ldr	r3, [pc, #580]	; (c7ac <process_recieved_packet+0xcb8>)
    c566:	4798      	blx	r3
    c568:	1c02      	adds	r2, r0, #0
    c56a:	4b91      	ldr	r3, [pc, #580]	; (c7b0 <process_recieved_packet+0xcbc>)
    c56c:	1c10      	adds	r0, r2, #0
    c56e:	4798      	blx	r3
    c570:	0002      	movs	r2, r0
    c572:	4b90      	ldr	r3, [pc, #576]	; (c7b4 <process_recieved_packet+0xcc0>)
    c574:	619a      	str	r2, [r3, #24]
				mcconf_limits.max_erpm_fbrake = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_MAX);
    c576:	4b96      	ldr	r3, [pc, #600]	; (c7d0 <process_recieved_packet+0xcdc>)
    c578:	781b      	ldrb	r3, [r3, #0]
    c57a:	b25a      	sxtb	r2, r3
    c57c:	4b8a      	ldr	r3, [pc, #552]	; (c7a8 <process_recieved_packet+0xcb4>)
    c57e:	0011      	movs	r1, r2
    c580:	0018      	movs	r0, r3
    c582:	4b8a      	ldr	r3, [pc, #552]	; (c7ac <process_recieved_packet+0xcb8>)
    c584:	4798      	blx	r3
    c586:	1c02      	adds	r2, r0, #0
    c588:	4b89      	ldr	r3, [pc, #548]	; (c7b0 <process_recieved_packet+0xcbc>)
    c58a:	1c10      	adds	r0, r2, #0
    c58c:	4798      	blx	r3
    c58e:	0002      	movs	r2, r0
    c590:	4b88      	ldr	r3, [pc, #544]	; (c7b4 <process_recieved_packet+0xcc0>)
    c592:	61da      	str	r2, [r3, #28]
				mcconf_limits.max_erpm_fbrake_cc = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_ERPM_FBRAKE_CC_MAX);
    c594:	4b8f      	ldr	r3, [pc, #572]	; (c7d4 <process_recieved_packet+0xce0>)
    c596:	781b      	ldrb	r3, [r3, #0]
    c598:	b25a      	sxtb	r2, r3
    c59a:	4b83      	ldr	r3, [pc, #524]	; (c7a8 <process_recieved_packet+0xcb4>)
    c59c:	0011      	movs	r1, r2
    c59e:	0018      	movs	r0, r3
    c5a0:	4b82      	ldr	r3, [pc, #520]	; (c7ac <process_recieved_packet+0xcb8>)
    c5a2:	4798      	blx	r3
    c5a4:	1c02      	adds	r2, r0, #0
    c5a6:	4b82      	ldr	r3, [pc, #520]	; (c7b0 <process_recieved_packet+0xcbc>)
    c5a8:	1c10      	adds	r0, r2, #0
    c5aa:	4798      	blx	r3
    c5ac:	0002      	movs	r2, r0
    c5ae:	4b81      	ldr	r3, [pc, #516]	; (c7b4 <process_recieved_packet+0xcc0>)
    c5b0:	621a      	str	r2, [r3, #32]
				mcconf_limits.min_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MIN);
    c5b2:	4b89      	ldr	r3, [pc, #548]	; (c7d8 <process_recieved_packet+0xce4>)
    c5b4:	781b      	ldrb	r3, [r3, #0]
    c5b6:	b25a      	sxtb	r2, r3
    c5b8:	4b7b      	ldr	r3, [pc, #492]	; (c7a8 <process_recieved_packet+0xcb4>)
    c5ba:	0011      	movs	r1, r2
    c5bc:	0018      	movs	r0, r3
    c5be:	4b7b      	ldr	r3, [pc, #492]	; (c7ac <process_recieved_packet+0xcb8>)
    c5c0:	4798      	blx	r3
    c5c2:	1c02      	adds	r2, r0, #0
    c5c4:	4b7a      	ldr	r3, [pc, #488]	; (c7b0 <process_recieved_packet+0xcbc>)
    c5c6:	1c10      	adds	r0, r2, #0
    c5c8:	4798      	blx	r3
    c5ca:	0002      	movs	r2, r0
    c5cc:	4b79      	ldr	r3, [pc, #484]	; (c7b4 <process_recieved_packet+0xcc0>)
    c5ce:	625a      	str	r2, [r3, #36]	; 0x24
				mcconf_limits.max_vin = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_VIN_MAX);
    c5d0:	4b82      	ldr	r3, [pc, #520]	; (c7dc <process_recieved_packet+0xce8>)
    c5d2:	781b      	ldrb	r3, [r3, #0]
    c5d4:	b25a      	sxtb	r2, r3
    c5d6:	4b74      	ldr	r3, [pc, #464]	; (c7a8 <process_recieved_packet+0xcb4>)
    c5d8:	0011      	movs	r1, r2
    c5da:	0018      	movs	r0, r3
    c5dc:	4b73      	ldr	r3, [pc, #460]	; (c7ac <process_recieved_packet+0xcb8>)
    c5de:	4798      	blx	r3
    c5e0:	1c02      	adds	r2, r0, #0
    c5e2:	4b73      	ldr	r3, [pc, #460]	; (c7b0 <process_recieved_packet+0xcbc>)
    c5e4:	1c10      	adds	r0, r2, #0
    c5e6:	4798      	blx	r3
    c5e8:	0002      	movs	r2, r0
    c5ea:	4b72      	ldr	r3, [pc, #456]	; (c7b4 <process_recieved_packet+0xcc0>)
    c5ec:	629a      	str	r2, [r3, #40]	; 0x28
				mcconf_limits.battery_cut_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_STRT);
    c5ee:	4b7c      	ldr	r3, [pc, #496]	; (c7e0 <process_recieved_packet+0xcec>)
    c5f0:	781b      	ldrb	r3, [r3, #0]
    c5f2:	b25a      	sxtb	r2, r3
    c5f4:	4b6c      	ldr	r3, [pc, #432]	; (c7a8 <process_recieved_packet+0xcb4>)
    c5f6:	0011      	movs	r1, r2
    c5f8:	0018      	movs	r0, r3
    c5fa:	4b6c      	ldr	r3, [pc, #432]	; (c7ac <process_recieved_packet+0xcb8>)
    c5fc:	4798      	blx	r3
    c5fe:	1c02      	adds	r2, r0, #0
    c600:	4b6c      	ldr	r3, [pc, #432]	; (c7b4 <process_recieved_packet+0xcc0>)
    c602:	62da      	str	r2, [r3, #44]	; 0x2c
				mcconf_limits.battery_cut_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_BAT_CUT_END);
    c604:	4b77      	ldr	r3, [pc, #476]	; (c7e4 <process_recieved_packet+0xcf0>)
    c606:	781b      	ldrb	r3, [r3, #0]
    c608:	b25a      	sxtb	r2, r3
    c60a:	4b67      	ldr	r3, [pc, #412]	; (c7a8 <process_recieved_packet+0xcb4>)
    c60c:	0011      	movs	r1, r2
    c60e:	0018      	movs	r0, r3
    c610:	4b66      	ldr	r3, [pc, #408]	; (c7ac <process_recieved_packet+0xcb8>)
    c612:	4798      	blx	r3
    c614:	1c02      	adds	r2, r0, #0
    c616:	4b67      	ldr	r3, [pc, #412]	; (c7b4 <process_recieved_packet+0xcc0>)
    c618:	631a      	str	r2, [r3, #48]	; 0x30
				mcconf_limits.temp_fet_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_STRT);
    c61a:	4b73      	ldr	r3, [pc, #460]	; (c7e8 <process_recieved_packet+0xcf4>)
    c61c:	781b      	ldrb	r3, [r3, #0]
    c61e:	b25a      	sxtb	r2, r3
    c620:	4b61      	ldr	r3, [pc, #388]	; (c7a8 <process_recieved_packet+0xcb4>)
    c622:	0011      	movs	r1, r2
    c624:	0018      	movs	r0, r3
    c626:	4b61      	ldr	r3, [pc, #388]	; (c7ac <process_recieved_packet+0xcb8>)
    c628:	4798      	blx	r3
    c62a:	1c02      	adds	r2, r0, #0
    c62c:	4b60      	ldr	r3, [pc, #384]	; (c7b0 <process_recieved_packet+0xcbc>)
    c62e:	1c10      	adds	r0, r2, #0
    c630:	4798      	blx	r3
    c632:	0002      	movs	r2, r0
    c634:	4b5f      	ldr	r3, [pc, #380]	; (c7b4 <process_recieved_packet+0xcc0>)
    c636:	635a      	str	r2, [r3, #52]	; 0x34
				mcconf_limits.temp_fet_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_FET_END);
    c638:	4b6c      	ldr	r3, [pc, #432]	; (c7ec <process_recieved_packet+0xcf8>)
    c63a:	781b      	ldrb	r3, [r3, #0]
    c63c:	b25a      	sxtb	r2, r3
    c63e:	4b5a      	ldr	r3, [pc, #360]	; (c7a8 <process_recieved_packet+0xcb4>)
    c640:	0011      	movs	r1, r2
    c642:	0018      	movs	r0, r3
    c644:	4b59      	ldr	r3, [pc, #356]	; (c7ac <process_recieved_packet+0xcb8>)
    c646:	4798      	blx	r3
    c648:	1c02      	adds	r2, r0, #0
    c64a:	4b59      	ldr	r3, [pc, #356]	; (c7b0 <process_recieved_packet+0xcbc>)
    c64c:	1c10      	adds	r0, r2, #0
    c64e:	4798      	blx	r3
    c650:	0002      	movs	r2, r0
    c652:	4b58      	ldr	r3, [pc, #352]	; (c7b4 <process_recieved_packet+0xcc0>)
    c654:	639a      	str	r2, [r3, #56]	; 0x38
				mcconf_limits.temp_motor_start = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_STRT);
    c656:	4b66      	ldr	r3, [pc, #408]	; (c7f0 <process_recieved_packet+0xcfc>)
    c658:	781b      	ldrb	r3, [r3, #0]
    c65a:	b25a      	sxtb	r2, r3
    c65c:	4b52      	ldr	r3, [pc, #328]	; (c7a8 <process_recieved_packet+0xcb4>)
    c65e:	0011      	movs	r1, r2
    c660:	0018      	movs	r0, r3
    c662:	4b52      	ldr	r3, [pc, #328]	; (c7ac <process_recieved_packet+0xcb8>)
    c664:	4798      	blx	r3
    c666:	1c02      	adds	r2, r0, #0
    c668:	4b51      	ldr	r3, [pc, #324]	; (c7b0 <process_recieved_packet+0xcbc>)
    c66a:	1c10      	adds	r0, r2, #0
    c66c:	4798      	blx	r3
    c66e:	0002      	movs	r2, r0
    c670:	4b50      	ldr	r3, [pc, #320]	; (c7b4 <process_recieved_packet+0xcc0>)
    c672:	63da      	str	r2, [r3, #60]	; 0x3c
				mcconf_limits.temp_motor_end = buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_TMP_MTR_END);
    c674:	4b5f      	ldr	r3, [pc, #380]	; (c7f4 <process_recieved_packet+0xd00>)
    c676:	781b      	ldrb	r3, [r3, #0]
    c678:	b25a      	sxtb	r2, r3
    c67a:	4b4b      	ldr	r3, [pc, #300]	; (c7a8 <process_recieved_packet+0xcb4>)
    c67c:	0011      	movs	r1, r2
    c67e:	0018      	movs	r0, r3
    c680:	4b4a      	ldr	r3, [pc, #296]	; (c7ac <process_recieved_packet+0xcb8>)
    c682:	4798      	blx	r3
    c684:	1c02      	adds	r2, r0, #0
    c686:	4b4a      	ldr	r3, [pc, #296]	; (c7b0 <process_recieved_packet+0xcbc>)
    c688:	1c10      	adds	r0, r2, #0
    c68a:	4798      	blx	r3
    c68c:	0002      	movs	r2, r0
    c68e:	4b49      	ldr	r3, [pc, #292]	; (c7b4 <process_recieved_packet+0xcc0>)
    c690:	641a      	str	r2, [r3, #64]	; 0x40
				mcconf_limits.min_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MIN)*100);
    c692:	4b59      	ldr	r3, [pc, #356]	; (c7f8 <process_recieved_packet+0xd04>)
    c694:	781b      	ldrb	r3, [r3, #0]
    c696:	b25a      	sxtb	r2, r3
    c698:	4b43      	ldr	r3, [pc, #268]	; (c7a8 <process_recieved_packet+0xcb4>)
    c69a:	0011      	movs	r1, r2
    c69c:	0018      	movs	r0, r3
    c69e:	4b43      	ldr	r3, [pc, #268]	; (c7ac <process_recieved_packet+0xcb8>)
    c6a0:	4798      	blx	r3
    c6a2:	1c02      	adds	r2, r0, #0
    c6a4:	4b55      	ldr	r3, [pc, #340]	; (c7fc <process_recieved_packet+0xd08>)
    c6a6:	4956      	ldr	r1, [pc, #344]	; (c800 <process_recieved_packet+0xd0c>)
    c6a8:	1c10      	adds	r0, r2, #0
    c6aa:	4798      	blx	r3
    c6ac:	1c03      	adds	r3, r0, #0
    c6ae:	1c1a      	adds	r2, r3, #0
    c6b0:	4b3f      	ldr	r3, [pc, #252]	; (c7b0 <process_recieved_packet+0xcbc>)
    c6b2:	1c10      	adds	r0, r2, #0
    c6b4:	4798      	blx	r3
    c6b6:	0002      	movs	r2, r0
    c6b8:	4b3e      	ldr	r3, [pc, #248]	; (c7b4 <process_recieved_packet+0xcc0>)
    c6ba:	645a      	str	r2, [r3, #68]	; 0x44
				mcconf_limits.max_duty = (buffer_get_float32_auto(vesc_revieve_packet.payload, GET_MCCONF_DUTY_MAX)*100);
    c6bc:	4b51      	ldr	r3, [pc, #324]	; (c804 <process_recieved_packet+0xd10>)
    c6be:	781b      	ldrb	r3, [r3, #0]
    c6c0:	b25a      	sxtb	r2, r3
    c6c2:	4b39      	ldr	r3, [pc, #228]	; (c7a8 <process_recieved_packet+0xcb4>)
    c6c4:	0011      	movs	r1, r2
    c6c6:	0018      	movs	r0, r3
    c6c8:	4b38      	ldr	r3, [pc, #224]	; (c7ac <process_recieved_packet+0xcb8>)
    c6ca:	4798      	blx	r3
    c6cc:	1c02      	adds	r2, r0, #0
    c6ce:	4b4b      	ldr	r3, [pc, #300]	; (c7fc <process_recieved_packet+0xd08>)
    c6d0:	494b      	ldr	r1, [pc, #300]	; (c800 <process_recieved_packet+0xd0c>)
    c6d2:	1c10      	adds	r0, r2, #0
    c6d4:	4798      	blx	r3
    c6d6:	1c03      	adds	r3, r0, #0
    c6d8:	1c1a      	adds	r2, r3, #0
    c6da:	4b35      	ldr	r3, [pc, #212]	; (c7b0 <process_recieved_packet+0xcbc>)
    c6dc:	1c10      	adds	r0, r2, #0
    c6de:	4798      	blx	r3
    c6e0:	0002      	movs	r2, r0
    c6e2:	4b34      	ldr	r3, [pc, #208]	; (c7b4 <process_recieved_packet+0xcc0>)
    c6e4:	649a      	str	r2, [r3, #72]	; 0x48
			GET_LIMITS = 0;
    c6e6:	4b48      	ldr	r3, [pc, #288]	; (c808 <process_recieved_packet+0xd14>)
    c6e8:	2200      	movs	r2, #0
    c6ea:	701a      	strb	r2, [r3, #0]
			SEND_LIMITS = 1;
    c6ec:	4b47      	ldr	r3, [pc, #284]	; (c80c <process_recieved_packet+0xd18>)
    c6ee:	2201      	movs	r2, #1
    c6f0:	701a      	strb	r2, [r3, #0]
}
    c6f2:	e16a      	b.n	c9ca <process_recieved_packet+0xed6>
		} else if(packet_id == COMM_GET_DECODED_PPM){
    c6f4:	4b46      	ldr	r3, [pc, #280]	; (c810 <process_recieved_packet+0xd1c>)
    c6f6:	781b      	ldrb	r3, [r3, #0]
    c6f8:	1dfa      	adds	r2, r7, #7
    c6fa:	7812      	ldrb	r2, [r2, #0]
    c6fc:	429a      	cmp	r2, r3
    c6fe:	d110      	bne.n	c722 <process_recieved_packet+0xc2e>
			latest_vesc_vals.pwm_val = (int32_t)(((vesc_revieve_packet.payload[1]&0x00FF)<<24)|((vesc_revieve_packet.payload[2]&0x00FF)<<16)|((vesc_revieve_packet.payload[3]&0x00FF)<<8)|(vesc_revieve_packet.payload[4]&0x00FF));
    c700:	4b44      	ldr	r3, [pc, #272]	; (c814 <process_recieved_packet+0xd20>)
    c702:	791b      	ldrb	r3, [r3, #4]
    c704:	061a      	lsls	r2, r3, #24
    c706:	4b43      	ldr	r3, [pc, #268]	; (c814 <process_recieved_packet+0xd20>)
    c708:	795b      	ldrb	r3, [r3, #5]
    c70a:	041b      	lsls	r3, r3, #16
    c70c:	431a      	orrs	r2, r3
    c70e:	4b41      	ldr	r3, [pc, #260]	; (c814 <process_recieved_packet+0xd20>)
    c710:	799b      	ldrb	r3, [r3, #6]
    c712:	021b      	lsls	r3, r3, #8
    c714:	4313      	orrs	r3, r2
    c716:	4a3f      	ldr	r2, [pc, #252]	; (c814 <process_recieved_packet+0xd20>)
    c718:	79d2      	ldrb	r2, [r2, #7]
    c71a:	431a      	orrs	r2, r3
    c71c:	4b3e      	ldr	r3, [pc, #248]	; (c818 <process_recieved_packet+0xd24>)
    c71e:	631a      	str	r2, [r3, #48]	; 0x30
}
    c720:	e153      	b.n	c9ca <process_recieved_packet+0xed6>
		} else if(packet_id == COMM_GET_DECODED_CHUK){
    c722:	4b3e      	ldr	r3, [pc, #248]	; (c81c <process_recieved_packet+0xd28>)
    c724:	781b      	ldrb	r3, [r3, #0]
    c726:	1dfa      	adds	r2, r7, #7
    c728:	7812      	ldrb	r2, [r2, #0]
    c72a:	429a      	cmp	r2, r3
    c72c:	d17a      	bne.n	c824 <process_recieved_packet+0xd30>
			rec_chuck_struct.js_x = vesc_revieve_packet.payload[1];
    c72e:	4b39      	ldr	r3, [pc, #228]	; (c814 <process_recieved_packet+0xd20>)
    c730:	791b      	ldrb	r3, [r3, #4]
    c732:	b25a      	sxtb	r2, r3
    c734:	4b3a      	ldr	r3, [pc, #232]	; (c820 <process_recieved_packet+0xd2c>)
    c736:	701a      	strb	r2, [r3, #0]
			rec_chuck_struct.js_y = vesc_revieve_packet.payload[2];
    c738:	4b36      	ldr	r3, [pc, #216]	; (c814 <process_recieved_packet+0xd20>)
    c73a:	795b      	ldrb	r3, [r3, #5]
    c73c:	b25a      	sxtb	r2, r3
    c73e:	4b38      	ldr	r3, [pc, #224]	; (c820 <process_recieved_packet+0xd2c>)
    c740:	705a      	strb	r2, [r3, #1]
			rec_chuck_struct.bt_c = vesc_revieve_packet.payload[3];
    c742:	4b34      	ldr	r3, [pc, #208]	; (c814 <process_recieved_packet+0xd20>)
    c744:	799b      	ldrb	r3, [r3, #6]
    c746:	1e5a      	subs	r2, r3, #1
    c748:	4193      	sbcs	r3, r2
    c74a:	b2da      	uxtb	r2, r3
    c74c:	4b34      	ldr	r3, [pc, #208]	; (c820 <process_recieved_packet+0xd2c>)
    c74e:	721a      	strb	r2, [r3, #8]
			rec_chuck_struct.bt_z = vesc_revieve_packet.payload[4];
    c750:	4b30      	ldr	r3, [pc, #192]	; (c814 <process_recieved_packet+0xd20>)
    c752:	79db      	ldrb	r3, [r3, #7]
    c754:	1e5a      	subs	r2, r3, #1
    c756:	4193      	sbcs	r3, r2
    c758:	b2da      	uxtb	r2, r3
    c75a:	4b31      	ldr	r3, [pc, #196]	; (c820 <process_recieved_packet+0xd2c>)
    c75c:	725a      	strb	r2, [r3, #9]
			rec_chuck_struct.acc_x = (int16_t)(((vesc_revieve_packet.payload[5] & 0x00FF) << 8)|(vesc_revieve_packet.payload[6] & 0x00FF));
    c75e:	4b2d      	ldr	r3, [pc, #180]	; (c814 <process_recieved_packet+0xd20>)
    c760:	7a1b      	ldrb	r3, [r3, #8]
    c762:	021b      	lsls	r3, r3, #8
    c764:	b21a      	sxth	r2, r3
    c766:	4b2b      	ldr	r3, [pc, #172]	; (c814 <process_recieved_packet+0xd20>)
    c768:	7a5b      	ldrb	r3, [r3, #9]
    c76a:	b21b      	sxth	r3, r3
    c76c:	4313      	orrs	r3, r2
    c76e:	b21a      	sxth	r2, r3
    c770:	4b2b      	ldr	r3, [pc, #172]	; (c820 <process_recieved_packet+0xd2c>)
    c772:	805a      	strh	r2, [r3, #2]
			rec_chuck_struct.acc_y = (int16_t)(((vesc_revieve_packet.payload[7] & 0x00FF) << 8)|(vesc_revieve_packet.payload[8] & 0x00FF));
    c774:	4b27      	ldr	r3, [pc, #156]	; (c814 <process_recieved_packet+0xd20>)
    c776:	7a9b      	ldrb	r3, [r3, #10]
    c778:	021b      	lsls	r3, r3, #8
    c77a:	b21a      	sxth	r2, r3
    c77c:	4b25      	ldr	r3, [pc, #148]	; (c814 <process_recieved_packet+0xd20>)
    c77e:	7adb      	ldrb	r3, [r3, #11]
    c780:	b21b      	sxth	r3, r3
    c782:	4313      	orrs	r3, r2
    c784:	b21a      	sxth	r2, r3
    c786:	4b26      	ldr	r3, [pc, #152]	; (c820 <process_recieved_packet+0xd2c>)
    c788:	809a      	strh	r2, [r3, #4]
			rec_chuck_struct.acc_z = (int16_t)(((vesc_revieve_packet.payload[9] & 0x00FF) << 8)|(vesc_revieve_packet.payload[10] & 0x00FF));
    c78a:	4b22      	ldr	r3, [pc, #136]	; (c814 <process_recieved_packet+0xd20>)
    c78c:	7b1b      	ldrb	r3, [r3, #12]
    c78e:	021b      	lsls	r3, r3, #8
    c790:	b21a      	sxth	r2, r3
    c792:	4b20      	ldr	r3, [pc, #128]	; (c814 <process_recieved_packet+0xd20>)
    c794:	7b5b      	ldrb	r3, [r3, #13]
    c796:	b21b      	sxth	r3, r3
    c798:	4313      	orrs	r3, r2
    c79a:	b21a      	sxth	r2, r3
    c79c:	4b20      	ldr	r3, [pc, #128]	; (c820 <process_recieved_packet+0xd2c>)
    c79e:	80da      	strh	r2, [r3, #6]
}
    c7a0:	e113      	b.n	c9ca <process_recieved_packet+0xed6>
    c7a2:	46c0      	nop			; (mov r8, r8)
    c7a4:	2000034f 	.word	0x2000034f
    c7a8:	20000ac7 	.word	0x20000ac7
    c7ac:	0000c9e5 	.word	0x0000c9e5
    c7b0:	00014e09 	.word	0x00014e09
    c7b4:	20000db4 	.word	0x20000db4
    c7b8:	20000350 	.word	0x20000350
    c7bc:	20000351 	.word	0x20000351
    c7c0:	20000352 	.word	0x20000352
    c7c4:	20000353 	.word	0x20000353
    c7c8:	20000354 	.word	0x20000354
    c7cc:	20000355 	.word	0x20000355
    c7d0:	20000356 	.word	0x20000356
    c7d4:	20000357 	.word	0x20000357
    c7d8:	20000358 	.word	0x20000358
    c7dc:	20000359 	.word	0x20000359
    c7e0:	2000035a 	.word	0x2000035a
    c7e4:	2000035b 	.word	0x2000035b
    c7e8:	2000035c 	.word	0x2000035c
    c7ec:	2000035d 	.word	0x2000035d
    c7f0:	2000035e 	.word	0x2000035e
    c7f4:	2000035f 	.word	0x2000035f
    c7f8:	20000360 	.word	0x20000360
    c7fc:	00014891 	.word	0x00014891
    c800:	42c80000 	.word	0x42c80000
    c804:	20000361 	.word	0x20000361
    c808:	20000019 	.word	0x20000019
    c80c:	2000030e 	.word	0x2000030e
    c810:	2000033e 	.word	0x2000033e
    c814:	20000ac4 	.word	0x20000ac4
    c818:	20000940 	.word	0x20000940
    c81c:	2000033f 	.word	0x2000033f
    c820:	20000e34 	.word	0x20000e34
		} else if(packet_id == COMM_GET_VALUES_SELECTIVE){ // Only available in latest Official FW
    c824:	4b6b      	ldr	r3, [pc, #428]	; (c9d4 <process_recieved_packet+0xee0>)
    c826:	781b      	ldrb	r3, [r3, #0]
    c828:	1dfa      	adds	r2, r7, #7
    c82a:	7812      	ldrb	r2, [r2, #0]
    c82c:	429a      	cmp	r2, r3
    c82e:	d000      	beq.n	c832 <process_recieved_packet+0xd3e>
    c830:	e0cb      	b.n	c9ca <process_recieved_packet+0xed6>
			latest_vesc_vals.temp_fet_filtered = (vesc_revieve_packet.payload[5] << 8) | vesc_revieve_packet.payload[6];
    c832:	4b69      	ldr	r3, [pc, #420]	; (c9d8 <process_recieved_packet+0xee4>)
    c834:	7a1b      	ldrb	r3, [r3, #8]
    c836:	021b      	lsls	r3, r3, #8
    c838:	b21a      	sxth	r2, r3
    c83a:	4b67      	ldr	r3, [pc, #412]	; (c9d8 <process_recieved_packet+0xee4>)
    c83c:	7a5b      	ldrb	r3, [r3, #9]
    c83e:	b21b      	sxth	r3, r3
    c840:	4313      	orrs	r3, r2
    c842:	b21a      	sxth	r2, r3
    c844:	4b65      	ldr	r3, [pc, #404]	; (c9dc <process_recieved_packet+0xee8>)
    c846:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.avg_motor_current = (vesc_revieve_packet.payload[7] << 24) | (vesc_revieve_packet.payload[8] << 16) | (vesc_revieve_packet.payload[9] << 8) | vesc_revieve_packet.payload[10];
    c848:	4b63      	ldr	r3, [pc, #396]	; (c9d8 <process_recieved_packet+0xee4>)
    c84a:	7a9b      	ldrb	r3, [r3, #10]
    c84c:	061a      	lsls	r2, r3, #24
    c84e:	4b62      	ldr	r3, [pc, #392]	; (c9d8 <process_recieved_packet+0xee4>)
    c850:	7adb      	ldrb	r3, [r3, #11]
    c852:	041b      	lsls	r3, r3, #16
    c854:	431a      	orrs	r2, r3
    c856:	4b60      	ldr	r3, [pc, #384]	; (c9d8 <process_recieved_packet+0xee4>)
    c858:	7b1b      	ldrb	r3, [r3, #12]
    c85a:	021b      	lsls	r3, r3, #8
    c85c:	4313      	orrs	r3, r2
    c85e:	4a5e      	ldr	r2, [pc, #376]	; (c9d8 <process_recieved_packet+0xee4>)
    c860:	7b52      	ldrb	r2, [r2, #13]
    c862:	431a      	orrs	r2, r3
    c864:	4b5d      	ldr	r3, [pc, #372]	; (c9dc <process_recieved_packet+0xee8>)
    c866:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_input_current = (vesc_revieve_packet.payload[11] << 24) | (vesc_revieve_packet.payload[12] << 16) | (vesc_revieve_packet.payload[13] << 8) | vesc_revieve_packet.payload[14];
    c868:	4b5b      	ldr	r3, [pc, #364]	; (c9d8 <process_recieved_packet+0xee4>)
    c86a:	7b9b      	ldrb	r3, [r3, #14]
    c86c:	061a      	lsls	r2, r3, #24
    c86e:	4b5a      	ldr	r3, [pc, #360]	; (c9d8 <process_recieved_packet+0xee4>)
    c870:	7bdb      	ldrb	r3, [r3, #15]
    c872:	041b      	lsls	r3, r3, #16
    c874:	431a      	orrs	r2, r3
    c876:	4b58      	ldr	r3, [pc, #352]	; (c9d8 <process_recieved_packet+0xee4>)
    c878:	7c1b      	ldrb	r3, [r3, #16]
    c87a:	021b      	lsls	r3, r3, #8
    c87c:	4313      	orrs	r3, r2
    c87e:	4a56      	ldr	r2, [pc, #344]	; (c9d8 <process_recieved_packet+0xee4>)
    c880:	7c52      	ldrb	r2, [r2, #17]
    c882:	431a      	orrs	r2, r3
    c884:	4b55      	ldr	r3, [pc, #340]	; (c9dc <process_recieved_packet+0xee8>)
    c886:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.duty_cycle = (vesc_revieve_packet.payload[15] << 8) | vesc_revieve_packet.payload[16];
    c888:	4b53      	ldr	r3, [pc, #332]	; (c9d8 <process_recieved_packet+0xee4>)
    c88a:	7c9b      	ldrb	r3, [r3, #18]
    c88c:	021b      	lsls	r3, r3, #8
    c88e:	b21a      	sxth	r2, r3
    c890:	4b51      	ldr	r3, [pc, #324]	; (c9d8 <process_recieved_packet+0xee4>)
    c892:	7cdb      	ldrb	r3, [r3, #19]
    c894:	b21b      	sxth	r3, r3
    c896:	4313      	orrs	r3, r2
    c898:	b21a      	sxth	r2, r3
    c89a:	4b50      	ldr	r3, [pc, #320]	; (c9dc <process_recieved_packet+0xee8>)
    c89c:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (vesc_revieve_packet.payload[17] << 24) | (vesc_revieve_packet.payload[18] << 16) | (vesc_revieve_packet.payload[19] << 8) | vesc_revieve_packet.payload[20];
    c89e:	4b4e      	ldr	r3, [pc, #312]	; (c9d8 <process_recieved_packet+0xee4>)
    c8a0:	7d1b      	ldrb	r3, [r3, #20]
    c8a2:	061a      	lsls	r2, r3, #24
    c8a4:	4b4c      	ldr	r3, [pc, #304]	; (c9d8 <process_recieved_packet+0xee4>)
    c8a6:	7d5b      	ldrb	r3, [r3, #21]
    c8a8:	041b      	lsls	r3, r3, #16
    c8aa:	431a      	orrs	r2, r3
    c8ac:	4b4a      	ldr	r3, [pc, #296]	; (c9d8 <process_recieved_packet+0xee4>)
    c8ae:	7d9b      	ldrb	r3, [r3, #22]
    c8b0:	021b      	lsls	r3, r3, #8
    c8b2:	4313      	orrs	r3, r2
    c8b4:	4a48      	ldr	r2, [pc, #288]	; (c9d8 <process_recieved_packet+0xee4>)
    c8b6:	7dd2      	ldrb	r2, [r2, #23]
    c8b8:	431a      	orrs	r2, r3
    c8ba:	4b48      	ldr	r3, [pc, #288]	; (c9dc <process_recieved_packet+0xee8>)
    c8bc:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.INPUT_VOLTAGE = (vesc_revieve_packet.payload[21] << 8) | vesc_revieve_packet.payload[22];
    c8be:	4b46      	ldr	r3, [pc, #280]	; (c9d8 <process_recieved_packet+0xee4>)
    c8c0:	7e1b      	ldrb	r3, [r3, #24]
    c8c2:	021b      	lsls	r3, r3, #8
    c8c4:	b21a      	sxth	r2, r3
    c8c6:	4b44      	ldr	r3, [pc, #272]	; (c9d8 <process_recieved_packet+0xee4>)
    c8c8:	7e5b      	ldrb	r3, [r3, #25]
    c8ca:	b21b      	sxth	r3, r3
    c8cc:	4313      	orrs	r3, r2
    c8ce:	b21a      	sxth	r2, r3
    c8d0:	4b42      	ldr	r3, [pc, #264]	; (c9dc <process_recieved_packet+0xee8>)
    c8d2:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.amp_hours = ((vesc_revieve_packet.payload[23] << 24) | (vesc_revieve_packet.payload[24] << 16) | (vesc_revieve_packet.payload[25] << 8) | vesc_revieve_packet.payload[26])*10;
    c8d4:	4b40      	ldr	r3, [pc, #256]	; (c9d8 <process_recieved_packet+0xee4>)
    c8d6:	7e9b      	ldrb	r3, [r3, #26]
    c8d8:	061a      	lsls	r2, r3, #24
    c8da:	4b3f      	ldr	r3, [pc, #252]	; (c9d8 <process_recieved_packet+0xee4>)
    c8dc:	7edb      	ldrb	r3, [r3, #27]
    c8de:	041b      	lsls	r3, r3, #16
    c8e0:	431a      	orrs	r2, r3
    c8e2:	4b3d      	ldr	r3, [pc, #244]	; (c9d8 <process_recieved_packet+0xee4>)
    c8e4:	7f1b      	ldrb	r3, [r3, #28]
    c8e6:	021b      	lsls	r3, r3, #8
    c8e8:	4313      	orrs	r3, r2
    c8ea:	4a3b      	ldr	r2, [pc, #236]	; (c9d8 <process_recieved_packet+0xee4>)
    c8ec:	7f52      	ldrb	r2, [r2, #29]
    c8ee:	431a      	orrs	r2, r3
    c8f0:	0013      	movs	r3, r2
    c8f2:	009b      	lsls	r3, r3, #2
    c8f4:	189b      	adds	r3, r3, r2
    c8f6:	005b      	lsls	r3, r3, #1
    c8f8:	001a      	movs	r2, r3
    c8fa:	4b38      	ldr	r3, [pc, #224]	; (c9dc <process_recieved_packet+0xee8>)
    c8fc:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = ((vesc_revieve_packet.payload[27] << 24) | (vesc_revieve_packet.payload[28] << 16) | (vesc_revieve_packet.payload[29] << 8) | vesc_revieve_packet.payload[30])*10;
    c8fe:	4b36      	ldr	r3, [pc, #216]	; (c9d8 <process_recieved_packet+0xee4>)
    c900:	7f9b      	ldrb	r3, [r3, #30]
    c902:	061a      	lsls	r2, r3, #24
    c904:	4b34      	ldr	r3, [pc, #208]	; (c9d8 <process_recieved_packet+0xee4>)
    c906:	7fdb      	ldrb	r3, [r3, #31]
    c908:	041b      	lsls	r3, r3, #16
    c90a:	431a      	orrs	r2, r3
    c90c:	4b32      	ldr	r3, [pc, #200]	; (c9d8 <process_recieved_packet+0xee4>)
    c90e:	2120      	movs	r1, #32
    c910:	5c5b      	ldrb	r3, [r3, r1]
    c912:	021b      	lsls	r3, r3, #8
    c914:	4313      	orrs	r3, r2
    c916:	4a30      	ldr	r2, [pc, #192]	; (c9d8 <process_recieved_packet+0xee4>)
    c918:	2121      	movs	r1, #33	; 0x21
    c91a:	5c52      	ldrb	r2, [r2, r1]
    c91c:	431a      	orrs	r2, r3
    c91e:	0013      	movs	r3, r2
    c920:	009b      	lsls	r3, r3, #2
    c922:	189b      	adds	r3, r3, r2
    c924:	005b      	lsls	r3, r3, #1
    c926:	001a      	movs	r2, r3
    c928:	4b2c      	ldr	r3, [pc, #176]	; (c9dc <process_recieved_packet+0xee8>)
    c92a:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = ((vesc_revieve_packet.payload[31] << 24) | (vesc_revieve_packet.payload[32] << 16) | (vesc_revieve_packet.payload[33] << 8) | vesc_revieve_packet.payload[34])/100;
    c92c:	4b2a      	ldr	r3, [pc, #168]	; (c9d8 <process_recieved_packet+0xee4>)
    c92e:	2222      	movs	r2, #34	; 0x22
    c930:	5c9b      	ldrb	r3, [r3, r2]
    c932:	061a      	lsls	r2, r3, #24
    c934:	4b28      	ldr	r3, [pc, #160]	; (c9d8 <process_recieved_packet+0xee4>)
    c936:	2123      	movs	r1, #35	; 0x23
    c938:	5c5b      	ldrb	r3, [r3, r1]
    c93a:	041b      	lsls	r3, r3, #16
    c93c:	431a      	orrs	r2, r3
    c93e:	4b26      	ldr	r3, [pc, #152]	; (c9d8 <process_recieved_packet+0xee4>)
    c940:	2124      	movs	r1, #36	; 0x24
    c942:	5c5b      	ldrb	r3, [r3, r1]
    c944:	021b      	lsls	r3, r3, #8
    c946:	4313      	orrs	r3, r2
    c948:	4a23      	ldr	r2, [pc, #140]	; (c9d8 <process_recieved_packet+0xee4>)
    c94a:	2125      	movs	r1, #37	; 0x25
    c94c:	5c52      	ldrb	r2, [r2, r1]
    c94e:	431a      	orrs	r2, r3
    c950:	4b23      	ldr	r3, [pc, #140]	; (c9e0 <process_recieved_packet+0xeec>)
    c952:	2164      	movs	r1, #100	; 0x64
    c954:	0010      	movs	r0, r2
    c956:	4798      	blx	r3
    c958:	0003      	movs	r3, r0
    c95a:	001a      	movs	r2, r3
    c95c:	4b1f      	ldr	r3, [pc, #124]	; (c9dc <process_recieved_packet+0xee8>)
    c95e:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = ((vesc_revieve_packet.payload[35] << 24) | (vesc_revieve_packet.payload[36] << 16) | (vesc_revieve_packet.payload[37] << 8) | vesc_revieve_packet.payload[38])/100;
    c960:	4b1d      	ldr	r3, [pc, #116]	; (c9d8 <process_recieved_packet+0xee4>)
    c962:	2226      	movs	r2, #38	; 0x26
    c964:	5c9b      	ldrb	r3, [r3, r2]
    c966:	061a      	lsls	r2, r3, #24
    c968:	4b1b      	ldr	r3, [pc, #108]	; (c9d8 <process_recieved_packet+0xee4>)
    c96a:	2127      	movs	r1, #39	; 0x27
    c96c:	5c5b      	ldrb	r3, [r3, r1]
    c96e:	041b      	lsls	r3, r3, #16
    c970:	431a      	orrs	r2, r3
    c972:	4b19      	ldr	r3, [pc, #100]	; (c9d8 <process_recieved_packet+0xee4>)
    c974:	2128      	movs	r1, #40	; 0x28
    c976:	5c5b      	ldrb	r3, [r3, r1]
    c978:	021b      	lsls	r3, r3, #8
    c97a:	4313      	orrs	r3, r2
    c97c:	4a16      	ldr	r2, [pc, #88]	; (c9d8 <process_recieved_packet+0xee4>)
    c97e:	2129      	movs	r1, #41	; 0x29
    c980:	5c52      	ldrb	r2, [r2, r1]
    c982:	431a      	orrs	r2, r3
    c984:	4b16      	ldr	r3, [pc, #88]	; (c9e0 <process_recieved_packet+0xeec>)
    c986:	2164      	movs	r1, #100	; 0x64
    c988:	0010      	movs	r0, r2
    c98a:	4798      	blx	r3
    c98c:	0003      	movs	r3, r0
    c98e:	001a      	movs	r2, r3
    c990:	4b12      	ldr	r3, [pc, #72]	; (c9dc <process_recieved_packet+0xee8>)
    c992:	625a      	str	r2, [r3, #36]	; 0x24
			latest_vesc_vals.tachometer_value = (vesc_revieve_packet.payload[39] << 24) | (vesc_revieve_packet.payload[40] << 16) | (vesc_revieve_packet.payload[41] << 8) | vesc_revieve_packet.payload[42];
    c994:	4b10      	ldr	r3, [pc, #64]	; (c9d8 <process_recieved_packet+0xee4>)
    c996:	222a      	movs	r2, #42	; 0x2a
    c998:	5c9b      	ldrb	r3, [r3, r2]
    c99a:	061a      	lsls	r2, r3, #24
    c99c:	4b0e      	ldr	r3, [pc, #56]	; (c9d8 <process_recieved_packet+0xee4>)
    c99e:	212b      	movs	r1, #43	; 0x2b
    c9a0:	5c5b      	ldrb	r3, [r3, r1]
    c9a2:	041b      	lsls	r3, r3, #16
    c9a4:	431a      	orrs	r2, r3
    c9a6:	4b0c      	ldr	r3, [pc, #48]	; (c9d8 <process_recieved_packet+0xee4>)
    c9a8:	212c      	movs	r1, #44	; 0x2c
    c9aa:	5c5b      	ldrb	r3, [r3, r1]
    c9ac:	021b      	lsls	r3, r3, #8
    c9ae:	4313      	orrs	r3, r2
    c9b0:	4a09      	ldr	r2, [pc, #36]	; (c9d8 <process_recieved_packet+0xee4>)
    c9b2:	212d      	movs	r1, #45	; 0x2d
    c9b4:	5c52      	ldrb	r2, [r2, r1]
    c9b6:	431a      	orrs	r2, r3
    c9b8:	4b08      	ldr	r3, [pc, #32]	; (c9dc <process_recieved_packet+0xee8>)
    c9ba:	629a      	str	r2, [r3, #40]	; 0x28
			latest_vesc_vals.fault = vesc_revieve_packet.payload[43];
    c9bc:	4b06      	ldr	r3, [pc, #24]	; (c9d8 <process_recieved_packet+0xee4>)
    c9be:	222e      	movs	r2, #46	; 0x2e
    c9c0:	5c9b      	ldrb	r3, [r3, r2]
    c9c2:	b259      	sxtb	r1, r3
    c9c4:	4b05      	ldr	r3, [pc, #20]	; (c9dc <process_recieved_packet+0xee8>)
    c9c6:	222c      	movs	r2, #44	; 0x2c
    c9c8:	5499      	strb	r1, [r3, r2]
}
    c9ca:	46c0      	nop			; (mov r8, r8)
    c9cc:	46bd      	mov	sp, r7
    c9ce:	b002      	add	sp, #8
    c9d0:	bd80      	pop	{r7, pc}
    c9d2:	46c0      	nop			; (mov r8, r8)
    c9d4:	20000341 	.word	0x20000341
    c9d8:	20000ac4 	.word	0x20000ac4
    c9dc:	20000940 	.word	0x20000940
    c9e0:	00013e05 	.word	0x00013e05

0000c9e4 <buffer_get_float32_auto>:

float buffer_get_float32_auto(uint8_t *buffer, int8_t index) {
    c9e4:	b590      	push	{r4, r7, lr}
    c9e6:	b089      	sub	sp, #36	; 0x24
    c9e8:	af00      	add	r7, sp, #0
    c9ea:	6078      	str	r0, [r7, #4]
    c9ec:	000a      	movs	r2, r1
    c9ee:	1cfb      	adds	r3, r7, #3
    c9f0:	701a      	strb	r2, [r3, #0]
	uint32_t res = ((uint32_t) buffer[index]) << 24 | ((uint32_t) buffer[index+1]) << 16 | ((uint32_t) buffer[index+2]) << 8 | ((uint32_t) buffer[index+3]);
    c9f2:	1cfb      	adds	r3, r7, #3
    c9f4:	781b      	ldrb	r3, [r3, #0]
    c9f6:	b25b      	sxtb	r3, r3
    c9f8:	687a      	ldr	r2, [r7, #4]
    c9fa:	18d3      	adds	r3, r2, r3
    c9fc:	781b      	ldrb	r3, [r3, #0]
    c9fe:	061a      	lsls	r2, r3, #24
    ca00:	1cfb      	adds	r3, r7, #3
    ca02:	781b      	ldrb	r3, [r3, #0]
    ca04:	b25b      	sxtb	r3, r3
    ca06:	3301      	adds	r3, #1
    ca08:	6879      	ldr	r1, [r7, #4]
    ca0a:	18cb      	adds	r3, r1, r3
    ca0c:	781b      	ldrb	r3, [r3, #0]
    ca0e:	041b      	lsls	r3, r3, #16
    ca10:	431a      	orrs	r2, r3
    ca12:	1cfb      	adds	r3, r7, #3
    ca14:	781b      	ldrb	r3, [r3, #0]
    ca16:	b25b      	sxtb	r3, r3
    ca18:	3302      	adds	r3, #2
    ca1a:	6879      	ldr	r1, [r7, #4]
    ca1c:	18cb      	adds	r3, r1, r3
    ca1e:	781b      	ldrb	r3, [r3, #0]
    ca20:	021b      	lsls	r3, r3, #8
    ca22:	4313      	orrs	r3, r2
    ca24:	1cfa      	adds	r2, r7, #3
    ca26:	7812      	ldrb	r2, [r2, #0]
    ca28:	b252      	sxtb	r2, r2
    ca2a:	3203      	adds	r2, #3
    ca2c:	6879      	ldr	r1, [r7, #4]
    ca2e:	188a      	adds	r2, r1, r2
    ca30:	7812      	ldrb	r2, [r2, #0]
    ca32:	4313      	orrs	r3, r2
    ca34:	617b      	str	r3, [r7, #20]

	int e = (res >> 23) & 0xFF;
    ca36:	697b      	ldr	r3, [r7, #20]
    ca38:	0ddb      	lsrs	r3, r3, #23
    ca3a:	001a      	movs	r2, r3
    ca3c:	23ff      	movs	r3, #255	; 0xff
    ca3e:	4013      	ands	r3, r2
    ca40:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
    ca42:	697b      	ldr	r3, [r7, #20]
    ca44:	025b      	lsls	r3, r3, #9
    ca46:	0a5b      	lsrs	r3, r3, #9
    ca48:	613b      	str	r3, [r7, #16]
	bool neg = res & (1U << 31);
    ca4a:	697b      	ldr	r3, [r7, #20]
    ca4c:	0fdb      	lsrs	r3, r3, #31
    ca4e:	07da      	lsls	r2, r3, #31
    ca50:	230f      	movs	r3, #15
    ca52:	18fb      	adds	r3, r7, r3
    ca54:	1e51      	subs	r1, r2, #1
    ca56:	418a      	sbcs	r2, r1
    ca58:	701a      	strb	r2, [r3, #0]

	float sig = 0.0;
    ca5a:	2300      	movs	r3, #0
    ca5c:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
    ca5e:	69fb      	ldr	r3, [r7, #28]
    ca60:	2b00      	cmp	r3, #0
    ca62:	d102      	bne.n	ca6a <buffer_get_float32_auto+0x86>
    ca64:	693b      	ldr	r3, [r7, #16]
    ca66:	2b00      	cmp	r3, #0
    ca68:	d01f      	beq.n	caaa <buffer_get_float32_auto+0xc6>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
    ca6a:	4b1a      	ldr	r3, [pc, #104]	; (cad4 <buffer_get_float32_auto+0xf0>)
    ca6c:	6938      	ldr	r0, [r7, #16]
    ca6e:	4798      	blx	r3
    ca70:	1c02      	adds	r2, r0, #0
    ca72:	4b19      	ldr	r3, [pc, #100]	; (cad8 <buffer_get_float32_auto+0xf4>)
    ca74:	1c10      	adds	r0, r2, #0
    ca76:	4798      	blx	r3
    ca78:	4c18      	ldr	r4, [pc, #96]	; (cadc <buffer_get_float32_auto+0xf8>)
    ca7a:	2200      	movs	r2, #0
    ca7c:	4b18      	ldr	r3, [pc, #96]	; (cae0 <buffer_get_float32_auto+0xfc>)
    ca7e:	47a0      	blx	r4
    ca80:	0003      	movs	r3, r0
    ca82:	000c      	movs	r4, r1
    ca84:	0018      	movs	r0, r3
    ca86:	0021      	movs	r1, r4
    ca88:	4c16      	ldr	r4, [pc, #88]	; (cae4 <buffer_get_float32_auto+0x100>)
    ca8a:	2200      	movs	r2, #0
    ca8c:	4b16      	ldr	r3, [pc, #88]	; (cae8 <buffer_get_float32_auto+0x104>)
    ca8e:	47a0      	blx	r4
    ca90:	0003      	movs	r3, r0
    ca92:	000c      	movs	r4, r1
    ca94:	0019      	movs	r1, r3
    ca96:	0022      	movs	r2, r4
    ca98:	4b14      	ldr	r3, [pc, #80]	; (caec <buffer_get_float32_auto+0x108>)
    ca9a:	0008      	movs	r0, r1
    ca9c:	0011      	movs	r1, r2
    ca9e:	4798      	blx	r3
    caa0:	1c03      	adds	r3, r0, #0
    caa2:	61bb      	str	r3, [r7, #24]
		e -= 126;
    caa4:	69fb      	ldr	r3, [r7, #28]
    caa6:	3b7e      	subs	r3, #126	; 0x7e
    caa8:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
    caaa:	230f      	movs	r3, #15
    caac:	18fb      	adds	r3, r7, r3
    caae:	781b      	ldrb	r3, [r3, #0]
    cab0:	2b00      	cmp	r3, #0
    cab2:	d004      	beq.n	cabe <buffer_get_float32_auto+0xda>
		sig = -sig;
    cab4:	69bb      	ldr	r3, [r7, #24]
    cab6:	2280      	movs	r2, #128	; 0x80
    cab8:	0612      	lsls	r2, r2, #24
    caba:	4053      	eors	r3, r2
    cabc:	61bb      	str	r3, [r7, #24]
	}
	
	return ldexpf(sig, e);
    cabe:	69fa      	ldr	r2, [r7, #28]
    cac0:	69bb      	ldr	r3, [r7, #24]
    cac2:	0011      	movs	r1, r2
    cac4:	1c18      	adds	r0, r3, #0
    cac6:	4b0a      	ldr	r3, [pc, #40]	; (caf0 <buffer_get_float32_auto+0x10c>)
    cac8:	4798      	blx	r3
    caca:	1c03      	adds	r3, r0, #0
}
    cacc:	1c18      	adds	r0, r3, #0
    cace:	46bd      	mov	sp, r7
    cad0:	b009      	add	sp, #36	; 0x24
    cad2:	bd90      	pop	{r4, r7, pc}
    cad4:	00014ee9 	.word	0x00014ee9
    cad8:	00016a85 	.word	0x00016a85
    cadc:	00015595 	.word	0x00015595
    cae0:	41700000 	.word	0x41700000
    cae4:	00014f75 	.word	0x00014f75
    cae8:	3fe00000 	.word	0x3fe00000
    caec:	00016b29 	.word	0x00016b29
    caf0:	00013bc1 	.word	0x00013bc1

0000caf4 <vesc_get_fw_version>:


void vesc_get_fw_version(){
    caf4:	b590      	push	{r4, r7, lr}
    caf6:	4c2d      	ldr	r4, [pc, #180]	; (cbac <vesc_get_fw_version+0xb8>)
    caf8:	44a5      	add	sp, r4
    cafa:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    cafc:	4b2c      	ldr	r3, [pc, #176]	; (cbb0 <vesc_get_fw_version+0xbc>)
    cafe:	2282      	movs	r2, #130	; 0x82
    cb00:	0092      	lsls	r2, r2, #2
    cb02:	4694      	mov	ip, r2
    cb04:	44bc      	add	ip, r7
    cb06:	4463      	add	r3, ip
    cb08:	2202      	movs	r2, #2
    cb0a:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    cb0c:	4b28      	ldr	r3, [pc, #160]	; (cbb0 <vesc_get_fw_version+0xbc>)
    cb0e:	2282      	movs	r2, #130	; 0x82
    cb10:	0092      	lsls	r2, r2, #2
    cb12:	4694      	mov	ip, r2
    cb14:	44bc      	add	ip, r7
    cb16:	4463      	add	r3, ip
    cb18:	2201      	movs	r2, #1
    cb1a:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_FW_VERSION;
    cb1c:	4b25      	ldr	r3, [pc, #148]	; (cbb4 <vesc_get_fw_version+0xc0>)
    cb1e:	781a      	ldrb	r2, [r3, #0]
    cb20:	4b23      	ldr	r3, [pc, #140]	; (cbb0 <vesc_get_fw_version+0xbc>)
    cb22:	2182      	movs	r1, #130	; 0x82
    cb24:	0089      	lsls	r1, r1, #2
    cb26:	468c      	mov	ip, r1
    cb28:	44bc      	add	ip, r7
    cb2a:	4463      	add	r3, ip
    cb2c:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    cb2e:	4b22      	ldr	r3, [pc, #136]	; (cbb8 <vesc_get_fw_version+0xc4>)
    cb30:	18fc      	adds	r4, r7, r3
    cb32:	003b      	movs	r3, r7
    cb34:	3303      	adds	r3, #3
    cb36:	2101      	movs	r1, #1
    cb38:	0018      	movs	r0, r3
    cb3a:	4b20      	ldr	r3, [pc, #128]	; (cbbc <vesc_get_fw_version+0xc8>)
    cb3c:	4798      	blx	r3
    cb3e:	0003      	movs	r3, r0
    cb40:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cb42:	4b1d      	ldr	r3, [pc, #116]	; (cbb8 <vesc_get_fw_version+0xc4>)
    cb44:	18fb      	adds	r3, r7, r3
    cb46:	881b      	ldrh	r3, [r3, #0]
    cb48:	0a1b      	lsrs	r3, r3, #8
    cb4a:	b29b      	uxth	r3, r3
    cb4c:	b2d9      	uxtb	r1, r3
    cb4e:	4b18      	ldr	r3, [pc, #96]	; (cbb0 <vesc_get_fw_version+0xbc>)
    cb50:	2282      	movs	r2, #130	; 0x82
    cb52:	0092      	lsls	r2, r2, #2
    cb54:	4694      	mov	ip, r2
    cb56:	44bc      	add	ip, r7
    cb58:	4463      	add	r3, ip
    cb5a:	4a19      	ldr	r2, [pc, #100]	; (cbc0 <vesc_get_fw_version+0xcc>)
    cb5c:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cb5e:	4b16      	ldr	r3, [pc, #88]	; (cbb8 <vesc_get_fw_version+0xc4>)
    cb60:	18fb      	adds	r3, r7, r3
    cb62:	881b      	ldrh	r3, [r3, #0]
    cb64:	b2d9      	uxtb	r1, r3
    cb66:	4b12      	ldr	r3, [pc, #72]	; (cbb0 <vesc_get_fw_version+0xbc>)
    cb68:	2282      	movs	r2, #130	; 0x82
    cb6a:	0092      	lsls	r2, r2, #2
    cb6c:	18ba      	adds	r2, r7, r2
    cb6e:	18d2      	adds	r2, r2, r3
    cb70:	2381      	movs	r3, #129	; 0x81
    cb72:	009b      	lsls	r3, r3, #2
    cb74:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    cb76:	4b0e      	ldr	r3, [pc, #56]	; (cbb0 <vesc_get_fw_version+0xbc>)
    cb78:	2282      	movs	r2, #130	; 0x82
    cb7a:	0092      	lsls	r2, r2, #2
    cb7c:	18ba      	adds	r2, r7, r2
    cb7e:	18d4      	adds	r4, r2, r3
    cb80:	466b      	mov	r3, sp
    cb82:	0018      	movs	r0, r3
    cb84:	0021      	movs	r1, r4
    cb86:	3110      	adds	r1, #16
    cb88:	23fb      	movs	r3, #251	; 0xfb
    cb8a:	005b      	lsls	r3, r3, #1
    cb8c:	001a      	movs	r2, r3
    cb8e:	4b0d      	ldr	r3, [pc, #52]	; (cbc4 <vesc_get_fw_version+0xd0>)
    cb90:	4798      	blx	r3
    cb92:	6820      	ldr	r0, [r4, #0]
    cb94:	6861      	ldr	r1, [r4, #4]
    cb96:	68a2      	ldr	r2, [r4, #8]
    cb98:	68e3      	ldr	r3, [r4, #12]
    cb9a:	4c0b      	ldr	r4, [pc, #44]	; (cbc8 <vesc_get_fw_version+0xd4>)
    cb9c:	47a0      	blx	r4
}
    cb9e:	46c0      	nop			; (mov r8, r8)
    cba0:	46bd      	mov	sp, r7
    cba2:	2383      	movs	r3, #131	; 0x83
    cba4:	009b      	lsls	r3, r3, #2
    cba6:	449d      	add	sp, r3
    cba8:	bd90      	pop	{r4, r7, pc}
    cbaa:	46c0      	nop			; (mov r8, r8)
    cbac:	fffffbfc 	.word	0xfffffbfc
    cbb0:	fffffdf8 	.word	0xfffffdf8
    cbb4:	2000033a 	.word	0x2000033a
    cbb8:	00000206 	.word	0x00000206
    cbbc:	0000b641 	.word	0x0000b641
    cbc0:	00000203 	.word	0x00000203
    cbc4:	00016ccd 	.word	0x00016ccd
    cbc8:	0000b999 	.word	0x0000b999

0000cbcc <vesc_get_vals>:

void vesc_get_vals(){
    cbcc:	b590      	push	{r4, r7, lr}
    cbce:	4c6a      	ldr	r4, [pc, #424]	; (cd78 <vesc_get_vals+0x1ac>)
    cbd0:	44a5      	add	sp, r4
    cbd2:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;
	
	send_pack.start = 0x02;
    cbd4:	4b69      	ldr	r3, [pc, #420]	; (cd7c <vesc_get_vals+0x1b0>)
    cbd6:	2284      	movs	r2, #132	; 0x84
    cbd8:	0092      	lsls	r2, r2, #2
    cbda:	4694      	mov	ip, r2
    cbdc:	44bc      	add	ip, r7
    cbde:	4463      	add	r3, ip
    cbe0:	2202      	movs	r2, #2
    cbe2:	701a      	strb	r2, [r3, #0]
	if(latest_vesc_vals.FW_VERSION_MINOR >= 48 && latest_vesc_vals.FW_VERSION_MINOR < 100){
    cbe4:	4b66      	ldr	r3, [pc, #408]	; (cd80 <vesc_get_vals+0x1b4>)
    cbe6:	2235      	movs	r2, #53	; 0x35
    cbe8:	5c9b      	ldrb	r3, [r3, r2]
    cbea:	2b2f      	cmp	r3, #47	; 0x2f
    cbec:	d972      	bls.n	ccd4 <vesc_get_vals+0x108>
    cbee:	4b64      	ldr	r3, [pc, #400]	; (cd80 <vesc_get_vals+0x1b4>)
    cbf0:	2235      	movs	r2, #53	; 0x35
    cbf2:	5c9b      	ldrb	r3, [r3, r2]
    cbf4:	2b63      	cmp	r3, #99	; 0x63
    cbf6:	d86d      	bhi.n	ccd4 <vesc_get_vals+0x108>
		send_pack.len[0] = 0x05;
    cbf8:	4b60      	ldr	r3, [pc, #384]	; (cd7c <vesc_get_vals+0x1b0>)
    cbfa:	2284      	movs	r2, #132	; 0x84
    cbfc:	0092      	lsls	r2, r2, #2
    cbfe:	4694      	mov	ip, r2
    cc00:	44bc      	add	ip, r7
    cc02:	4463      	add	r3, ip
    cc04:	2205      	movs	r2, #5
    cc06:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_VALUES_SELECTIVE;
    cc08:	4b5e      	ldr	r3, [pc, #376]	; (cd84 <vesc_get_vals+0x1b8>)
    cc0a:	781a      	ldrb	r2, [r3, #0]
    cc0c:	4b5b      	ldr	r3, [pc, #364]	; (cd7c <vesc_get_vals+0x1b0>)
    cc0e:	2184      	movs	r1, #132	; 0x84
    cc10:	0089      	lsls	r1, r1, #2
    cc12:	468c      	mov	ip, r1
    cc14:	44bc      	add	ip, r7
    cc16:	4463      	add	r3, ip
    cc18:	70da      	strb	r2, [r3, #3]
		int32_t mask = (uint32_t)0b0001011111111001101;
    cc1a:	4b5b      	ldr	r3, [pc, #364]	; (cd88 <vesc_get_vals+0x1bc>)
    cc1c:	2283      	movs	r2, #131	; 0x83
    cc1e:	0092      	lsls	r2, r2, #2
    cc20:	18ba      	adds	r2, r7, r2
    cc22:	6013      	str	r3, [r2, #0]
		send_pack.payload[1] = (mask>>24)&0xFF;
    cc24:	2383      	movs	r3, #131	; 0x83
    cc26:	009b      	lsls	r3, r3, #2
    cc28:	18fb      	adds	r3, r7, r3
    cc2a:	681b      	ldr	r3, [r3, #0]
    cc2c:	0e1b      	lsrs	r3, r3, #24
    cc2e:	b2da      	uxtb	r2, r3
    cc30:	4b52      	ldr	r3, [pc, #328]	; (cd7c <vesc_get_vals+0x1b0>)
    cc32:	2184      	movs	r1, #132	; 0x84
    cc34:	0089      	lsls	r1, r1, #2
    cc36:	468c      	mov	ip, r1
    cc38:	44bc      	add	ip, r7
    cc3a:	4463      	add	r3, ip
    cc3c:	711a      	strb	r2, [r3, #4]
		send_pack.payload[2] = (mask>>16)&0xFF;
    cc3e:	2383      	movs	r3, #131	; 0x83
    cc40:	009b      	lsls	r3, r3, #2
    cc42:	18fb      	adds	r3, r7, r3
    cc44:	681b      	ldr	r3, [r3, #0]
    cc46:	141b      	asrs	r3, r3, #16
    cc48:	b2da      	uxtb	r2, r3
    cc4a:	4b4c      	ldr	r3, [pc, #304]	; (cd7c <vesc_get_vals+0x1b0>)
    cc4c:	2184      	movs	r1, #132	; 0x84
    cc4e:	0089      	lsls	r1, r1, #2
    cc50:	468c      	mov	ip, r1
    cc52:	44bc      	add	ip, r7
    cc54:	4463      	add	r3, ip
    cc56:	715a      	strb	r2, [r3, #5]
		send_pack.payload[3] = (mask>>8)&0xFF;
    cc58:	2383      	movs	r3, #131	; 0x83
    cc5a:	009b      	lsls	r3, r3, #2
    cc5c:	18fb      	adds	r3, r7, r3
    cc5e:	681b      	ldr	r3, [r3, #0]
    cc60:	121b      	asrs	r3, r3, #8
    cc62:	b2da      	uxtb	r2, r3
    cc64:	4b45      	ldr	r3, [pc, #276]	; (cd7c <vesc_get_vals+0x1b0>)
    cc66:	2184      	movs	r1, #132	; 0x84
    cc68:	0089      	lsls	r1, r1, #2
    cc6a:	468c      	mov	ip, r1
    cc6c:	44bc      	add	ip, r7
    cc6e:	4463      	add	r3, ip
    cc70:	719a      	strb	r2, [r3, #6]
		send_pack.payload[4] = (mask&0xFF);
    cc72:	2383      	movs	r3, #131	; 0x83
    cc74:	009b      	lsls	r3, r3, #2
    cc76:	18fb      	adds	r3, r7, r3
    cc78:	681b      	ldr	r3, [r3, #0]
    cc7a:	b2da      	uxtb	r2, r3
    cc7c:	4b3f      	ldr	r3, [pc, #252]	; (cd7c <vesc_get_vals+0x1b0>)
    cc7e:	2184      	movs	r1, #132	; 0x84
    cc80:	0089      	lsls	r1, r1, #2
    cc82:	468c      	mov	ip, r1
    cc84:	44bc      	add	ip, r7
    cc86:	4463      	add	r3, ip
    cc88:	71da      	strb	r2, [r3, #7]
		uint16_t crc = crc16(send_pack.payload, 5);
    cc8a:	4b40      	ldr	r3, [pc, #256]	; (cd8c <vesc_get_vals+0x1c0>)
    cc8c:	18fc      	adds	r4, r7, r3
    cc8e:	003b      	movs	r3, r7
    cc90:	3303      	adds	r3, #3
    cc92:	2105      	movs	r1, #5
    cc94:	0018      	movs	r0, r3
    cc96:	4b3e      	ldr	r3, [pc, #248]	; (cd90 <vesc_get_vals+0x1c4>)
    cc98:	4798      	blx	r3
    cc9a:	0003      	movs	r3, r0
    cc9c:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cc9e:	4b3b      	ldr	r3, [pc, #236]	; (cd8c <vesc_get_vals+0x1c0>)
    cca0:	18fb      	adds	r3, r7, r3
    cca2:	881b      	ldrh	r3, [r3, #0]
    cca4:	0a1b      	lsrs	r3, r3, #8
    cca6:	b29b      	uxth	r3, r3
    cca8:	b2d9      	uxtb	r1, r3
    ccaa:	4b34      	ldr	r3, [pc, #208]	; (cd7c <vesc_get_vals+0x1b0>)
    ccac:	2284      	movs	r2, #132	; 0x84
    ccae:	0092      	lsls	r2, r2, #2
    ccb0:	4694      	mov	ip, r2
    ccb2:	44bc      	add	ip, r7
    ccb4:	4463      	add	r3, ip
    ccb6:	4a37      	ldr	r2, [pc, #220]	; (cd94 <vesc_get_vals+0x1c8>)
    ccb8:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    ccba:	4b34      	ldr	r3, [pc, #208]	; (cd8c <vesc_get_vals+0x1c0>)
    ccbc:	18fb      	adds	r3, r7, r3
    ccbe:	881b      	ldrh	r3, [r3, #0]
    ccc0:	b2d9      	uxtb	r1, r3
    ccc2:	4b2e      	ldr	r3, [pc, #184]	; (cd7c <vesc_get_vals+0x1b0>)
    ccc4:	2284      	movs	r2, #132	; 0x84
    ccc6:	0092      	lsls	r2, r2, #2
    ccc8:	18ba      	adds	r2, r7, r2
    ccca:	18d2      	adds	r2, r2, r3
    cccc:	2381      	movs	r3, #129	; 0x81
    ccce:	009b      	lsls	r3, r3, #2
    ccd0:	54d1      	strb	r1, [r2, r3]
	if(latest_vesc_vals.FW_VERSION_MINOR >= 48 && latest_vesc_vals.FW_VERSION_MINOR < 100){
    ccd2:	e037      	b.n	cd44 <vesc_get_vals+0x178>
	} else {
		send_pack.len[0] = 0x01;
    ccd4:	4b29      	ldr	r3, [pc, #164]	; (cd7c <vesc_get_vals+0x1b0>)
    ccd6:	2284      	movs	r2, #132	; 0x84
    ccd8:	0092      	lsls	r2, r2, #2
    ccda:	4694      	mov	ip, r2
    ccdc:	44bc      	add	ip, r7
    ccde:	4463      	add	r3, ip
    cce0:	2201      	movs	r2, #1
    cce2:	705a      	strb	r2, [r3, #1]
		send_pack.payload[0] = COMM_GET_VALUES;
    cce4:	4b2c      	ldr	r3, [pc, #176]	; (cd98 <vesc_get_vals+0x1cc>)
    cce6:	781a      	ldrb	r2, [r3, #0]
    cce8:	4b24      	ldr	r3, [pc, #144]	; (cd7c <vesc_get_vals+0x1b0>)
    ccea:	2184      	movs	r1, #132	; 0x84
    ccec:	0089      	lsls	r1, r1, #2
    ccee:	468c      	mov	ip, r1
    ccf0:	44bc      	add	ip, r7
    ccf2:	4463      	add	r3, ip
    ccf4:	70da      	strb	r2, [r3, #3]
		uint16_t crc = crc16(send_pack.payload, 1);
    ccf6:	2382      	movs	r3, #130	; 0x82
    ccf8:	009b      	lsls	r3, r3, #2
    ccfa:	18fc      	adds	r4, r7, r3
    ccfc:	003b      	movs	r3, r7
    ccfe:	3303      	adds	r3, #3
    cd00:	2101      	movs	r1, #1
    cd02:	0018      	movs	r0, r3
    cd04:	4b22      	ldr	r3, [pc, #136]	; (cd90 <vesc_get_vals+0x1c4>)
    cd06:	4798      	blx	r3
    cd08:	0003      	movs	r3, r0
    cd0a:	8023      	strh	r3, [r4, #0]
		send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cd0c:	2382      	movs	r3, #130	; 0x82
    cd0e:	009b      	lsls	r3, r3, #2
    cd10:	18fb      	adds	r3, r7, r3
    cd12:	881b      	ldrh	r3, [r3, #0]
    cd14:	0a1b      	lsrs	r3, r3, #8
    cd16:	b29b      	uxth	r3, r3
    cd18:	b2d9      	uxtb	r1, r3
    cd1a:	4b18      	ldr	r3, [pc, #96]	; (cd7c <vesc_get_vals+0x1b0>)
    cd1c:	2284      	movs	r2, #132	; 0x84
    cd1e:	0092      	lsls	r2, r2, #2
    cd20:	4694      	mov	ip, r2
    cd22:	44bc      	add	ip, r7
    cd24:	4463      	add	r3, ip
    cd26:	4a1b      	ldr	r2, [pc, #108]	; (cd94 <vesc_get_vals+0x1c8>)
    cd28:	5499      	strb	r1, [r3, r2]
		send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cd2a:	2382      	movs	r3, #130	; 0x82
    cd2c:	009b      	lsls	r3, r3, #2
    cd2e:	18fb      	adds	r3, r7, r3
    cd30:	881b      	ldrh	r3, [r3, #0]
    cd32:	b2d9      	uxtb	r1, r3
    cd34:	4b11      	ldr	r3, [pc, #68]	; (cd7c <vesc_get_vals+0x1b0>)
    cd36:	2284      	movs	r2, #132	; 0x84
    cd38:	0092      	lsls	r2, r2, #2
    cd3a:	18ba      	adds	r2, r7, r2
    cd3c:	18d2      	adds	r2, r2, r3
    cd3e:	2381      	movs	r3, #129	; 0x81
    cd40:	009b      	lsls	r3, r3, #2
    cd42:	54d1      	strb	r1, [r2, r3]
	}

	send_packet(send_pack);
    cd44:	4b0d      	ldr	r3, [pc, #52]	; (cd7c <vesc_get_vals+0x1b0>)
    cd46:	2284      	movs	r2, #132	; 0x84
    cd48:	0092      	lsls	r2, r2, #2
    cd4a:	18ba      	adds	r2, r7, r2
    cd4c:	18d4      	adds	r4, r2, r3
    cd4e:	466b      	mov	r3, sp
    cd50:	0018      	movs	r0, r3
    cd52:	0021      	movs	r1, r4
    cd54:	3110      	adds	r1, #16
    cd56:	23fb      	movs	r3, #251	; 0xfb
    cd58:	005b      	lsls	r3, r3, #1
    cd5a:	001a      	movs	r2, r3
    cd5c:	4b0f      	ldr	r3, [pc, #60]	; (cd9c <vesc_get_vals+0x1d0>)
    cd5e:	4798      	blx	r3
    cd60:	6820      	ldr	r0, [r4, #0]
    cd62:	6861      	ldr	r1, [r4, #4]
    cd64:	68a2      	ldr	r2, [r4, #8]
    cd66:	68e3      	ldr	r3, [r4, #12]
    cd68:	4c0d      	ldr	r4, [pc, #52]	; (cda0 <vesc_get_vals+0x1d4>)
    cd6a:	47a0      	blx	r4
}
    cd6c:	46c0      	nop			; (mov r8, r8)
    cd6e:	46bd      	mov	sp, r7
    cd70:	2385      	movs	r3, #133	; 0x85
    cd72:	009b      	lsls	r3, r3, #2
    cd74:	449d      	add	sp, r3
    cd76:	bd90      	pop	{r4, r7, pc}
    cd78:	fffffbf4 	.word	0xfffffbf4
    cd7c:	fffffdf0 	.word	0xfffffdf0
    cd80:	20000940 	.word	0x20000940
    cd84:	20000341 	.word	0x20000341
    cd88:	0000bfcd 	.word	0x0000bfcd
    cd8c:	0000020a 	.word	0x0000020a
    cd90:	0000b641 	.word	0x0000b641
    cd94:	00000203 	.word	0x00000203
    cd98:	2000033b 	.word	0x2000033b
    cd9c:	00016ccd 	.word	0x00016ccd
    cda0:	0000b999 	.word	0x0000b999

0000cda4 <vesc_get_mcconf>:

void vesc_get_mcconf(){
    cda4:	b590      	push	{r4, r7, lr}
    cda6:	4c2d      	ldr	r4, [pc, #180]	; (ce5c <vesc_get_mcconf+0xb8>)
    cda8:	44a5      	add	sp, r4
    cdaa:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    cdac:	4b2c      	ldr	r3, [pc, #176]	; (ce60 <vesc_get_mcconf+0xbc>)
    cdae:	2282      	movs	r2, #130	; 0x82
    cdb0:	0092      	lsls	r2, r2, #2
    cdb2:	4694      	mov	ip, r2
    cdb4:	44bc      	add	ip, r7
    cdb6:	4463      	add	r3, ip
    cdb8:	2202      	movs	r2, #2
    cdba:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    cdbc:	4b28      	ldr	r3, [pc, #160]	; (ce60 <vesc_get_mcconf+0xbc>)
    cdbe:	2282      	movs	r2, #130	; 0x82
    cdc0:	0092      	lsls	r2, r2, #2
    cdc2:	4694      	mov	ip, r2
    cdc4:	44bc      	add	ip, r7
    cdc6:	4463      	add	r3, ip
    cdc8:	2201      	movs	r2, #1
    cdca:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_MCCONF;
    cdcc:	4b25      	ldr	r3, [pc, #148]	; (ce64 <vesc_get_mcconf+0xc0>)
    cdce:	781a      	ldrb	r2, [r3, #0]
    cdd0:	4b23      	ldr	r3, [pc, #140]	; (ce60 <vesc_get_mcconf+0xbc>)
    cdd2:	2182      	movs	r1, #130	; 0x82
    cdd4:	0089      	lsls	r1, r1, #2
    cdd6:	468c      	mov	ip, r1
    cdd8:	44bc      	add	ip, r7
    cdda:	4463      	add	r3, ip
    cddc:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    cdde:	4b22      	ldr	r3, [pc, #136]	; (ce68 <vesc_get_mcconf+0xc4>)
    cde0:	18fc      	adds	r4, r7, r3
    cde2:	003b      	movs	r3, r7
    cde4:	3303      	adds	r3, #3
    cde6:	2101      	movs	r1, #1
    cde8:	0018      	movs	r0, r3
    cdea:	4b20      	ldr	r3, [pc, #128]	; (ce6c <vesc_get_mcconf+0xc8>)
    cdec:	4798      	blx	r3
    cdee:	0003      	movs	r3, r0
    cdf0:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cdf2:	4b1d      	ldr	r3, [pc, #116]	; (ce68 <vesc_get_mcconf+0xc4>)
    cdf4:	18fb      	adds	r3, r7, r3
    cdf6:	881b      	ldrh	r3, [r3, #0]
    cdf8:	0a1b      	lsrs	r3, r3, #8
    cdfa:	b29b      	uxth	r3, r3
    cdfc:	b2d9      	uxtb	r1, r3
    cdfe:	4b18      	ldr	r3, [pc, #96]	; (ce60 <vesc_get_mcconf+0xbc>)
    ce00:	2282      	movs	r2, #130	; 0x82
    ce02:	0092      	lsls	r2, r2, #2
    ce04:	4694      	mov	ip, r2
    ce06:	44bc      	add	ip, r7
    ce08:	4463      	add	r3, ip
    ce0a:	4a19      	ldr	r2, [pc, #100]	; (ce70 <vesc_get_mcconf+0xcc>)
    ce0c:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    ce0e:	4b16      	ldr	r3, [pc, #88]	; (ce68 <vesc_get_mcconf+0xc4>)
    ce10:	18fb      	adds	r3, r7, r3
    ce12:	881b      	ldrh	r3, [r3, #0]
    ce14:	b2d9      	uxtb	r1, r3
    ce16:	4b12      	ldr	r3, [pc, #72]	; (ce60 <vesc_get_mcconf+0xbc>)
    ce18:	2282      	movs	r2, #130	; 0x82
    ce1a:	0092      	lsls	r2, r2, #2
    ce1c:	18ba      	adds	r2, r7, r2
    ce1e:	18d2      	adds	r2, r2, r3
    ce20:	2381      	movs	r3, #129	; 0x81
    ce22:	009b      	lsls	r3, r3, #2
    ce24:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    ce26:	4b0e      	ldr	r3, [pc, #56]	; (ce60 <vesc_get_mcconf+0xbc>)
    ce28:	2282      	movs	r2, #130	; 0x82
    ce2a:	0092      	lsls	r2, r2, #2
    ce2c:	18ba      	adds	r2, r7, r2
    ce2e:	18d4      	adds	r4, r2, r3
    ce30:	466b      	mov	r3, sp
    ce32:	0018      	movs	r0, r3
    ce34:	0021      	movs	r1, r4
    ce36:	3110      	adds	r1, #16
    ce38:	23fb      	movs	r3, #251	; 0xfb
    ce3a:	005b      	lsls	r3, r3, #1
    ce3c:	001a      	movs	r2, r3
    ce3e:	4b0d      	ldr	r3, [pc, #52]	; (ce74 <vesc_get_mcconf+0xd0>)
    ce40:	4798      	blx	r3
    ce42:	6820      	ldr	r0, [r4, #0]
    ce44:	6861      	ldr	r1, [r4, #4]
    ce46:	68a2      	ldr	r2, [r4, #8]
    ce48:	68e3      	ldr	r3, [r4, #12]
    ce4a:	4c0b      	ldr	r4, [pc, #44]	; (ce78 <vesc_get_mcconf+0xd4>)
    ce4c:	47a0      	blx	r4
}
    ce4e:	46c0      	nop			; (mov r8, r8)
    ce50:	46bd      	mov	sp, r7
    ce52:	2383      	movs	r3, #131	; 0x83
    ce54:	009b      	lsls	r3, r3, #2
    ce56:	449d      	add	sp, r3
    ce58:	bd90      	pop	{r4, r7, pc}
    ce5a:	46c0      	nop			; (mov r8, r8)
    ce5c:	fffffbfc 	.word	0xfffffbfc
    ce60:	fffffdf8 	.word	0xfffffdf8
    ce64:	2000033c 	.word	0x2000033c
    ce68:	00000206 	.word	0x00000206
    ce6c:	0000b641 	.word	0x0000b641
    ce70:	00000203 	.word	0x00000203
    ce74:	00016ccd 	.word	0x00016ccd
    ce78:	0000b999 	.word	0x0000b999

0000ce7c <vesc_get_pwm>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_get_pwm(){
    ce7c:	b590      	push	{r4, r7, lr}
    ce7e:	4c2d      	ldr	r4, [pc, #180]	; (cf34 <vesc_get_pwm+0xb8>)
    ce80:	44a5      	add	sp, r4
    ce82:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    ce84:	4b2c      	ldr	r3, [pc, #176]	; (cf38 <vesc_get_pwm+0xbc>)
    ce86:	2282      	movs	r2, #130	; 0x82
    ce88:	0092      	lsls	r2, r2, #2
    ce8a:	4694      	mov	ip, r2
    ce8c:	44bc      	add	ip, r7
    ce8e:	4463      	add	r3, ip
    ce90:	2202      	movs	r2, #2
    ce92:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    ce94:	4b28      	ldr	r3, [pc, #160]	; (cf38 <vesc_get_pwm+0xbc>)
    ce96:	2282      	movs	r2, #130	; 0x82
    ce98:	0092      	lsls	r2, r2, #2
    ce9a:	4694      	mov	ip, r2
    ce9c:	44bc      	add	ip, r7
    ce9e:	4463      	add	r3, ip
    cea0:	2201      	movs	r2, #1
    cea2:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_DECODED_PPM;
    cea4:	4b25      	ldr	r3, [pc, #148]	; (cf3c <vesc_get_pwm+0xc0>)
    cea6:	781a      	ldrb	r2, [r3, #0]
    cea8:	4b23      	ldr	r3, [pc, #140]	; (cf38 <vesc_get_pwm+0xbc>)
    ceaa:	2182      	movs	r1, #130	; 0x82
    ceac:	0089      	lsls	r1, r1, #2
    ceae:	468c      	mov	ip, r1
    ceb0:	44bc      	add	ip, r7
    ceb2:	4463      	add	r3, ip
    ceb4:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    ceb6:	4b22      	ldr	r3, [pc, #136]	; (cf40 <vesc_get_pwm+0xc4>)
    ceb8:	18fc      	adds	r4, r7, r3
    ceba:	003b      	movs	r3, r7
    cebc:	3303      	adds	r3, #3
    cebe:	2101      	movs	r1, #1
    cec0:	0018      	movs	r0, r3
    cec2:	4b20      	ldr	r3, [pc, #128]	; (cf44 <vesc_get_pwm+0xc8>)
    cec4:	4798      	blx	r3
    cec6:	0003      	movs	r3, r0
    cec8:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    ceca:	4b1d      	ldr	r3, [pc, #116]	; (cf40 <vesc_get_pwm+0xc4>)
    cecc:	18fb      	adds	r3, r7, r3
    cece:	881b      	ldrh	r3, [r3, #0]
    ced0:	0a1b      	lsrs	r3, r3, #8
    ced2:	b29b      	uxth	r3, r3
    ced4:	b2d9      	uxtb	r1, r3
    ced6:	4b18      	ldr	r3, [pc, #96]	; (cf38 <vesc_get_pwm+0xbc>)
    ced8:	2282      	movs	r2, #130	; 0x82
    ceda:	0092      	lsls	r2, r2, #2
    cedc:	4694      	mov	ip, r2
    cede:	44bc      	add	ip, r7
    cee0:	4463      	add	r3, ip
    cee2:	4a19      	ldr	r2, [pc, #100]	; (cf48 <vesc_get_pwm+0xcc>)
    cee4:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cee6:	4b16      	ldr	r3, [pc, #88]	; (cf40 <vesc_get_pwm+0xc4>)
    cee8:	18fb      	adds	r3, r7, r3
    ceea:	881b      	ldrh	r3, [r3, #0]
    ceec:	b2d9      	uxtb	r1, r3
    ceee:	4b12      	ldr	r3, [pc, #72]	; (cf38 <vesc_get_pwm+0xbc>)
    cef0:	2282      	movs	r2, #130	; 0x82
    cef2:	0092      	lsls	r2, r2, #2
    cef4:	18ba      	adds	r2, r7, r2
    cef6:	18d2      	adds	r2, r2, r3
    cef8:	2381      	movs	r3, #129	; 0x81
    cefa:	009b      	lsls	r3, r3, #2
    cefc:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    cefe:	4b0e      	ldr	r3, [pc, #56]	; (cf38 <vesc_get_pwm+0xbc>)
    cf00:	2282      	movs	r2, #130	; 0x82
    cf02:	0092      	lsls	r2, r2, #2
    cf04:	18ba      	adds	r2, r7, r2
    cf06:	18d4      	adds	r4, r2, r3
    cf08:	466b      	mov	r3, sp
    cf0a:	0018      	movs	r0, r3
    cf0c:	0021      	movs	r1, r4
    cf0e:	3110      	adds	r1, #16
    cf10:	23fb      	movs	r3, #251	; 0xfb
    cf12:	005b      	lsls	r3, r3, #1
    cf14:	001a      	movs	r2, r3
    cf16:	4b0d      	ldr	r3, [pc, #52]	; (cf4c <vesc_get_pwm+0xd0>)
    cf18:	4798      	blx	r3
    cf1a:	6820      	ldr	r0, [r4, #0]
    cf1c:	6861      	ldr	r1, [r4, #4]
    cf1e:	68a2      	ldr	r2, [r4, #8]
    cf20:	68e3      	ldr	r3, [r4, #12]
    cf22:	4c0b      	ldr	r4, [pc, #44]	; (cf50 <vesc_get_pwm+0xd4>)
    cf24:	47a0      	blx	r4
}
    cf26:	46c0      	nop			; (mov r8, r8)
    cf28:	46bd      	mov	sp, r7
    cf2a:	2383      	movs	r3, #131	; 0x83
    cf2c:	009b      	lsls	r3, r3, #2
    cf2e:	449d      	add	sp, r3
    cf30:	bd90      	pop	{r4, r7, pc}
    cf32:	46c0      	nop			; (mov r8, r8)
    cf34:	fffffbfc 	.word	0xfffffbfc
    cf38:	fffffdf8 	.word	0xfffffdf8
    cf3c:	2000033e 	.word	0x2000033e
    cf40:	00000206 	.word	0x00000206
    cf44:	0000b641 	.word	0x0000b641
    cf48:	00000203 	.word	0x00000203
    cf4c:	00016ccd 	.word	0x00016ccd
    cf50:	0000b999 	.word	0x0000b999

0000cf54 <vesc_get_chuck>:

void vesc_get_chuck(){
    cf54:	b590      	push	{r4, r7, lr}
    cf56:	4c2d      	ldr	r4, [pc, #180]	; (d00c <vesc_get_chuck+0xb8>)
    cf58:	44a5      	add	sp, r4
    cf5a:	af7e      	add	r7, sp, #504	; 0x1f8
	struct uart_packet send_pack;

	send_pack.start = 0x02;
    cf5c:	4b2c      	ldr	r3, [pc, #176]	; (d010 <vesc_get_chuck+0xbc>)
    cf5e:	2282      	movs	r2, #130	; 0x82
    cf60:	0092      	lsls	r2, r2, #2
    cf62:	4694      	mov	ip, r2
    cf64:	44bc      	add	ip, r7
    cf66:	4463      	add	r3, ip
    cf68:	2202      	movs	r2, #2
    cf6a:	701a      	strb	r2, [r3, #0]
	send_pack.len[0] = 0x01;
    cf6c:	4b28      	ldr	r3, [pc, #160]	; (d010 <vesc_get_chuck+0xbc>)
    cf6e:	2282      	movs	r2, #130	; 0x82
    cf70:	0092      	lsls	r2, r2, #2
    cf72:	4694      	mov	ip, r2
    cf74:	44bc      	add	ip, r7
    cf76:	4463      	add	r3, ip
    cf78:	2201      	movs	r2, #1
    cf7a:	705a      	strb	r2, [r3, #1]
	send_pack.payload[0] = COMM_GET_DECODED_CHUK;
    cf7c:	4b25      	ldr	r3, [pc, #148]	; (d014 <vesc_get_chuck+0xc0>)
    cf7e:	781a      	ldrb	r2, [r3, #0]
    cf80:	4b23      	ldr	r3, [pc, #140]	; (d010 <vesc_get_chuck+0xbc>)
    cf82:	2182      	movs	r1, #130	; 0x82
    cf84:	0089      	lsls	r1, r1, #2
    cf86:	468c      	mov	ip, r1
    cf88:	44bc      	add	ip, r7
    cf8a:	4463      	add	r3, ip
    cf8c:	70da      	strb	r2, [r3, #3]
	uint16_t crc = crc16(send_pack.payload, 1);
    cf8e:	4b22      	ldr	r3, [pc, #136]	; (d018 <vesc_get_chuck+0xc4>)
    cf90:	18fc      	adds	r4, r7, r3
    cf92:	003b      	movs	r3, r7
    cf94:	3303      	adds	r3, #3
    cf96:	2101      	movs	r1, #1
    cf98:	0018      	movs	r0, r3
    cf9a:	4b20      	ldr	r3, [pc, #128]	; (d01c <vesc_get_chuck+0xc8>)
    cf9c:	4798      	blx	r3
    cf9e:	0003      	movs	r3, r0
    cfa0:	8023      	strh	r3, [r4, #0]
	send_pack.crc[0] = (uint8_t)((crc&0xFF00)>>8);
    cfa2:	4b1d      	ldr	r3, [pc, #116]	; (d018 <vesc_get_chuck+0xc4>)
    cfa4:	18fb      	adds	r3, r7, r3
    cfa6:	881b      	ldrh	r3, [r3, #0]
    cfa8:	0a1b      	lsrs	r3, r3, #8
    cfaa:	b29b      	uxth	r3, r3
    cfac:	b2d9      	uxtb	r1, r3
    cfae:	4b18      	ldr	r3, [pc, #96]	; (d010 <vesc_get_chuck+0xbc>)
    cfb0:	2282      	movs	r2, #130	; 0x82
    cfb2:	0092      	lsls	r2, r2, #2
    cfb4:	4694      	mov	ip, r2
    cfb6:	44bc      	add	ip, r7
    cfb8:	4463      	add	r3, ip
    cfba:	4a19      	ldr	r2, [pc, #100]	; (d020 <vesc_get_chuck+0xcc>)
    cfbc:	5499      	strb	r1, [r3, r2]
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);
    cfbe:	4b16      	ldr	r3, [pc, #88]	; (d018 <vesc_get_chuck+0xc4>)
    cfc0:	18fb      	adds	r3, r7, r3
    cfc2:	881b      	ldrh	r3, [r3, #0]
    cfc4:	b2d9      	uxtb	r1, r3
    cfc6:	4b12      	ldr	r3, [pc, #72]	; (d010 <vesc_get_chuck+0xbc>)
    cfc8:	2282      	movs	r2, #130	; 0x82
    cfca:	0092      	lsls	r2, r2, #2
    cfcc:	18ba      	adds	r2, r7, r2
    cfce:	18d2      	adds	r2, r2, r3
    cfd0:	2381      	movs	r3, #129	; 0x81
    cfd2:	009b      	lsls	r3, r3, #2
    cfd4:	54d1      	strb	r1, [r2, r3]

	send_packet(send_pack);
    cfd6:	4b0e      	ldr	r3, [pc, #56]	; (d010 <vesc_get_chuck+0xbc>)
    cfd8:	2282      	movs	r2, #130	; 0x82
    cfda:	0092      	lsls	r2, r2, #2
    cfdc:	18ba      	adds	r2, r7, r2
    cfde:	18d4      	adds	r4, r2, r3
    cfe0:	466b      	mov	r3, sp
    cfe2:	0018      	movs	r0, r3
    cfe4:	0021      	movs	r1, r4
    cfe6:	3110      	adds	r1, #16
    cfe8:	23fb      	movs	r3, #251	; 0xfb
    cfea:	005b      	lsls	r3, r3, #1
    cfec:	001a      	movs	r2, r3
    cfee:	4b0d      	ldr	r3, [pc, #52]	; (d024 <vesc_get_chuck+0xd0>)
    cff0:	4798      	blx	r3
    cff2:	6820      	ldr	r0, [r4, #0]
    cff4:	6861      	ldr	r1, [r4, #4]
    cff6:	68a2      	ldr	r2, [r4, #8]
    cff8:	68e3      	ldr	r3, [r4, #12]
    cffa:	4c0b      	ldr	r4, [pc, #44]	; (d028 <vesc_get_chuck+0xd4>)
    cffc:	47a0      	blx	r4
}
    cffe:	46c0      	nop			; (mov r8, r8)
    d000:	46bd      	mov	sp, r7
    d002:	2383      	movs	r3, #131	; 0x83
    d004:	009b      	lsls	r3, r3, #2
    d006:	449d      	add	sp, r3
    d008:	bd90      	pop	{r4, r7, pc}
    d00a:	46c0      	nop			; (mov r8, r8)
    d00c:	fffffbfc 	.word	0xfffffbfc
    d010:	fffffdf8 	.word	0xfffffdf8
    d014:	2000033f 	.word	0x2000033f
    d018:	00000206 	.word	0x00000206
    d01c:	0000b641 	.word	0x0000b641
    d020:	00000203 	.word	0x00000203
    d024:	00016ccd 	.word	0x00016ccd
    d028:	0000b999 	.word	0x0000b999

0000d02c <vesc_read_all>:
	send_pack.crc[1] = (uint8_t)(crc&0x00FF);

	send_packet(send_pack);
}

void vesc_read_all(){
    d02c:	b580      	push	{r7, lr}
    d02e:	af00      	add	r7, sp, #0
	static uint8_t read_index = 0;
	if((millis()-vesc_usart_time) > vesc_usart_timeout)
    d030:	4b50      	ldr	r3, [pc, #320]	; (d174 <vesc_read_all+0x148>)
    d032:	4798      	blx	r3
    d034:	0002      	movs	r2, r0
    d036:	4b50      	ldr	r3, [pc, #320]	; (d178 <vesc_read_all+0x14c>)
    d038:	681b      	ldr	r3, [r3, #0]
    d03a:	1ad2      	subs	r2, r2, r3
    d03c:	4b4f      	ldr	r3, [pc, #316]	; (d17c <vesc_read_all+0x150>)
    d03e:	681b      	ldr	r3, [r3, #0]
    d040:	429a      	cmp	r2, r3
    d042:	d902      	bls.n	d04a <vesc_read_all+0x1e>
		HOLD_FOR_REPLY = false;
    d044:	4b4e      	ldr	r3, [pc, #312]	; (d180 <vesc_read_all+0x154>)
    d046:	2200      	movs	r2, #0
    d048:	701a      	strb	r2, [r3, #0]

	switch(read_index){
    d04a:	4b4e      	ldr	r3, [pc, #312]	; (d184 <vesc_read_all+0x158>)
    d04c:	781b      	ldrb	r3, [r3, #0]
    d04e:	2b01      	cmp	r3, #1
    d050:	d026      	beq.n	d0a0 <vesc_read_all+0x74>
    d052:	dc02      	bgt.n	d05a <vesc_read_all+0x2e>
    d054:	2b00      	cmp	r3, #0
    d056:	d005      	beq.n	d064 <vesc_read_all+0x38>
    d058:	e07d      	b.n	d156 <vesc_read_all+0x12a>
    d05a:	2b02      	cmp	r3, #2
    d05c:	d03e      	beq.n	d0dc <vesc_read_all+0xb0>
    d05e:	2b03      	cmp	r3, #3
    d060:	d05a      	beq.n	d118 <vesc_read_all+0xec>
    d062:	e078      	b.n	d156 <vesc_read_all+0x12a>
		case 0:
		if(!READ_VESC_PWM){
    d064:	4b48      	ldr	r3, [pc, #288]	; (d188 <vesc_read_all+0x15c>)
    d066:	781b      	ldrb	r3, [r3, #0]
    d068:	2201      	movs	r2, #1
    d06a:	4053      	eors	r3, r2
    d06c:	b2db      	uxtb	r3, r3
    d06e:	2b00      	cmp	r3, #0
    d070:	d006      	beq.n	d080 <vesc_read_all+0x54>
			read_index++;
    d072:	4b44      	ldr	r3, [pc, #272]	; (d184 <vesc_read_all+0x158>)
    d074:	781b      	ldrb	r3, [r3, #0]
    d076:	3301      	adds	r3, #1
    d078:	b2da      	uxtb	r2, r3
    d07a:	4b42      	ldr	r3, [pc, #264]	; (d184 <vesc_read_all+0x158>)
    d07c:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_pwm();
		}
		break;
    d07e:	e063      	b.n	d148 <vesc_read_all+0x11c>
		} else if(!HOLD_FOR_REPLY){
    d080:	4b3f      	ldr	r3, [pc, #252]	; (d180 <vesc_read_all+0x154>)
    d082:	781b      	ldrb	r3, [r3, #0]
    d084:	2201      	movs	r2, #1
    d086:	4053      	eors	r3, r2
    d088:	b2db      	uxtb	r3, r3
    d08a:	2b00      	cmp	r3, #0
    d08c:	d05c      	beq.n	d148 <vesc_read_all+0x11c>
			read_index++;
    d08e:	4b3d      	ldr	r3, [pc, #244]	; (d184 <vesc_read_all+0x158>)
    d090:	781b      	ldrb	r3, [r3, #0]
    d092:	3301      	adds	r3, #1
    d094:	b2da      	uxtb	r2, r3
    d096:	4b3b      	ldr	r3, [pc, #236]	; (d184 <vesc_read_all+0x158>)
    d098:	701a      	strb	r2, [r3, #0]
			vesc_get_pwm();
    d09a:	4b3c      	ldr	r3, [pc, #240]	; (d18c <vesc_read_all+0x160>)
    d09c:	4798      	blx	r3
		break;
    d09e:	e053      	b.n	d148 <vesc_read_all+0x11c>
		case 1:
		if(!READ_VESC_FW){
    d0a0:	4b3b      	ldr	r3, [pc, #236]	; (d190 <vesc_read_all+0x164>)
    d0a2:	781b      	ldrb	r3, [r3, #0]
    d0a4:	2201      	movs	r2, #1
    d0a6:	4053      	eors	r3, r2
    d0a8:	b2db      	uxtb	r3, r3
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	d006      	beq.n	d0bc <vesc_read_all+0x90>
			read_index++;
    d0ae:	4b35      	ldr	r3, [pc, #212]	; (d184 <vesc_read_all+0x158>)
    d0b0:	781b      	ldrb	r3, [r3, #0]
    d0b2:	3301      	adds	r3, #1
    d0b4:	b2da      	uxtb	r2, r3
    d0b6:	4b33      	ldr	r3, [pc, #204]	; (d184 <vesc_read_all+0x158>)
    d0b8:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_fw_version();
		}
		break;
    d0ba:	e047      	b.n	d14c <vesc_read_all+0x120>
		} else if(!HOLD_FOR_REPLY){
    d0bc:	4b30      	ldr	r3, [pc, #192]	; (d180 <vesc_read_all+0x154>)
    d0be:	781b      	ldrb	r3, [r3, #0]
    d0c0:	2201      	movs	r2, #1
    d0c2:	4053      	eors	r3, r2
    d0c4:	b2db      	uxtb	r3, r3
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d040      	beq.n	d14c <vesc_read_all+0x120>
			read_index++;
    d0ca:	4b2e      	ldr	r3, [pc, #184]	; (d184 <vesc_read_all+0x158>)
    d0cc:	781b      	ldrb	r3, [r3, #0]
    d0ce:	3301      	adds	r3, #1
    d0d0:	b2da      	uxtb	r2, r3
    d0d2:	4b2c      	ldr	r3, [pc, #176]	; (d184 <vesc_read_all+0x158>)
    d0d4:	701a      	strb	r2, [r3, #0]
			vesc_get_fw_version();
    d0d6:	4b2f      	ldr	r3, [pc, #188]	; (d194 <vesc_read_all+0x168>)
    d0d8:	4798      	blx	r3
		break;
    d0da:	e037      	b.n	d14c <vesc_read_all+0x120>
		case 2:
		if(!READ_VESC_VALS){
    d0dc:	4b2e      	ldr	r3, [pc, #184]	; (d198 <vesc_read_all+0x16c>)
    d0de:	781b      	ldrb	r3, [r3, #0]
    d0e0:	2201      	movs	r2, #1
    d0e2:	4053      	eors	r3, r2
    d0e4:	b2db      	uxtb	r3, r3
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	d006      	beq.n	d0f8 <vesc_read_all+0xcc>
			read_index++;
    d0ea:	4b26      	ldr	r3, [pc, #152]	; (d184 <vesc_read_all+0x158>)
    d0ec:	781b      	ldrb	r3, [r3, #0]
    d0ee:	3301      	adds	r3, #1
    d0f0:	b2da      	uxtb	r2, r3
    d0f2:	4b24      	ldr	r3, [pc, #144]	; (d184 <vesc_read_all+0x158>)
    d0f4:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index++;
			vesc_get_vals();
		}
		break;
    d0f6:	e02b      	b.n	d150 <vesc_read_all+0x124>
		} else if(!HOLD_FOR_REPLY){
    d0f8:	4b21      	ldr	r3, [pc, #132]	; (d180 <vesc_read_all+0x154>)
    d0fa:	781b      	ldrb	r3, [r3, #0]
    d0fc:	2201      	movs	r2, #1
    d0fe:	4053      	eors	r3, r2
    d100:	b2db      	uxtb	r3, r3
    d102:	2b00      	cmp	r3, #0
    d104:	d024      	beq.n	d150 <vesc_read_all+0x124>
			read_index++;
    d106:	4b1f      	ldr	r3, [pc, #124]	; (d184 <vesc_read_all+0x158>)
    d108:	781b      	ldrb	r3, [r3, #0]
    d10a:	3301      	adds	r3, #1
    d10c:	b2da      	uxtb	r2, r3
    d10e:	4b1d      	ldr	r3, [pc, #116]	; (d184 <vesc_read_all+0x158>)
    d110:	701a      	strb	r2, [r3, #0]
			vesc_get_vals();
    d112:	4b22      	ldr	r3, [pc, #136]	; (d19c <vesc_read_all+0x170>)
    d114:	4798      	blx	r3
		break;
    d116:	e01b      	b.n	d150 <vesc_read_all+0x124>
		case 3:
		if(!READ_VESC_CHUCK){
    d118:	4b21      	ldr	r3, [pc, #132]	; (d1a0 <vesc_read_all+0x174>)
    d11a:	781b      	ldrb	r3, [r3, #0]
    d11c:	2201      	movs	r2, #1
    d11e:	4053      	eors	r3, r2
    d120:	b2db      	uxtb	r3, r3
    d122:	2b00      	cmp	r3, #0
    d124:	d003      	beq.n	d12e <vesc_read_all+0x102>
			read_index=0;
    d126:	4b17      	ldr	r3, [pc, #92]	; (d184 <vesc_read_all+0x158>)
    d128:	2200      	movs	r2, #0
    d12a:	701a      	strb	r2, [r3, #0]
		} else if(!HOLD_FOR_REPLY){
			read_index=0;
			vesc_get_chuck();
		}
		break;
    d12c:	e012      	b.n	d154 <vesc_read_all+0x128>
		} else if(!HOLD_FOR_REPLY){
    d12e:	4b14      	ldr	r3, [pc, #80]	; (d180 <vesc_read_all+0x154>)
    d130:	781b      	ldrb	r3, [r3, #0]
    d132:	2201      	movs	r2, #1
    d134:	4053      	eors	r3, r2
    d136:	b2db      	uxtb	r3, r3
    d138:	2b00      	cmp	r3, #0
    d13a:	d00b      	beq.n	d154 <vesc_read_all+0x128>
			read_index=0;
    d13c:	4b11      	ldr	r3, [pc, #68]	; (d184 <vesc_read_all+0x158>)
    d13e:	2200      	movs	r2, #0
    d140:	701a      	strb	r2, [r3, #0]
			vesc_get_chuck();
    d142:	4b18      	ldr	r3, [pc, #96]	; (d1a4 <vesc_read_all+0x178>)
    d144:	4798      	blx	r3
		break;
    d146:	e005      	b.n	d154 <vesc_read_all+0x128>
		break;
    d148:	46c0      	nop			; (mov r8, r8)
    d14a:	e004      	b.n	d156 <vesc_read_all+0x12a>
		break;
    d14c:	46c0      	nop			; (mov r8, r8)
    d14e:	e002      	b.n	d156 <vesc_read_all+0x12a>
		break;
    d150:	46c0      	nop			; (mov r8, r8)
    d152:	e000      	b.n	d156 <vesc_read_all+0x12a>
		break;
    d154:	46c0      	nop			; (mov r8, r8)
	}
	
	READ_VESC_PWM = false;
    d156:	4b0c      	ldr	r3, [pc, #48]	; (d188 <vesc_read_all+0x15c>)
    d158:	2200      	movs	r2, #0
    d15a:	701a      	strb	r2, [r3, #0]
	READ_VESC_FW = false;
    d15c:	4b0c      	ldr	r3, [pc, #48]	; (d190 <vesc_read_all+0x164>)
    d15e:	2200      	movs	r2, #0
    d160:	701a      	strb	r2, [r3, #0]
	READ_VESC_VALS = false;
    d162:	4b0d      	ldr	r3, [pc, #52]	; (d198 <vesc_read_all+0x16c>)
    d164:	2200      	movs	r2, #0
    d166:	701a      	strb	r2, [r3, #0]
	READ_VESC_CHUCK = false;
    d168:	4b0d      	ldr	r3, [pc, #52]	; (d1a0 <vesc_read_all+0x174>)
    d16a:	2200      	movs	r2, #0
    d16c:	701a      	strb	r2, [r3, #0]
}
    d16e:	46c0      	nop			; (mov r8, r8)
    d170:	46bd      	mov	sp, r7
    d172:	bd80      	pop	{r7, pc}
    d174:	0000aee1 	.word	0x0000aee1
    d178:	20000364 	.word	0x20000364
    d17c:	200000ac 	.word	0x200000ac
    d180:	20000368 	.word	0x20000368
    d184:	200003e5 	.word	0x200003e5
    d188:	20000369 	.word	0x20000369
    d18c:	0000ce7d 	.word	0x0000ce7d
    d190:	2000036c 	.word	0x2000036c
    d194:	0000caf5 	.word	0x0000caf5
    d198:	2000036b 	.word	0x2000036b
    d19c:	0000cbcd 	.word	0x0000cbcd
    d1a0:	2000036a 	.word	0x2000036a
    d1a4:	0000cf55 	.word	0x0000cf55

0000d1a8 <detect_vesc_firmware>:


void detect_vesc_firmware(){
    d1a8:	b580      	push	{r7, lr}
    d1aa:	af00      	add	r7, sp, #0
	vesc_get_fw_version();
    d1ac:	4bcf      	ldr	r3, [pc, #828]	; (d4ec <detect_vesc_firmware+0x344>)
    d1ae:	4798      	blx	r3

	if(latest_vesc_vals.FW_VERSION_MAJOR != 0 || latest_vesc_vals.FW_VERSION_MINOR != 0)
    d1b0:	4bcf      	ldr	r3, [pc, #828]	; (d4f0 <detect_vesc_firmware+0x348>)
    d1b2:	2234      	movs	r2, #52	; 0x34
    d1b4:	5c9b      	ldrb	r3, [r3, r2]
    d1b6:	2b00      	cmp	r3, #0
    d1b8:	d105      	bne.n	d1c6 <detect_vesc_firmware+0x1e>
    d1ba:	4bcd      	ldr	r3, [pc, #820]	; (d4f0 <detect_vesc_firmware+0x348>)
    d1bc:	2235      	movs	r2, #53	; 0x35
    d1be:	5c9b      	ldrb	r3, [r3, r2]
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	d100      	bne.n	d1c6 <detect_vesc_firmware+0x1e>
    d1c4:	e271      	b.n	d6aa <detect_vesc_firmware+0x502>
	{
		ESC_FW_READ = true;
    d1c6:	4bcb      	ldr	r3, [pc, #812]	; (d4f4 <detect_vesc_firmware+0x34c>)
    d1c8:	2201      	movs	r2, #1
    d1ca:	701a      	strb	r2, [r3, #0]

		// Define the location in which particular values can be found in COMM messages used by each FW
		if(latest_vesc_vals.FW_VERSION_MAJOR == 2 && latest_vesc_vals.FW_VERSION_MINOR <= 18){ // <= v2.18
    d1cc:	4bc8      	ldr	r3, [pc, #800]	; (d4f0 <detect_vesc_firmware+0x348>)
    d1ce:	2234      	movs	r2, #52	; 0x34
    d1d0:	5c9b      	ldrb	r3, [r3, r2]
    d1d2:	2b02      	cmp	r3, #2
    d1d4:	d000      	beq.n	d1d8 <detect_vesc_firmware+0x30>
    d1d6:	e080      	b.n	d2da <detect_vesc_firmware+0x132>
    d1d8:	4bc5      	ldr	r3, [pc, #788]	; (d4f0 <detect_vesc_firmware+0x348>)
    d1da:	2235      	movs	r2, #53	; 0x35
    d1dc:	5c9b      	ldrb	r3, [r3, r2]
    d1de:	2b12      	cmp	r3, #18
    d1e0:	d87b      	bhi.n	d2da <detect_vesc_firmware+0x132>
			esc_fw = FW_2v18;
    d1e2:	4bc5      	ldr	r3, [pc, #788]	; (d4f8 <detect_vesc_firmware+0x350>)
    d1e4:	2200      	movs	r2, #0
    d1e6:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d1e8:	4bc4      	ldr	r3, [pc, #784]	; (d4fc <detect_vesc_firmware+0x354>)
    d1ea:	2200      	movs	r2, #0
    d1ec:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
    d1ee:	4bc4      	ldr	r3, [pc, #784]	; (d500 <detect_vesc_firmware+0x358>)
    d1f0:	2204      	movs	r2, #4
    d1f2:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 13;
    d1f4:	4bc3      	ldr	r3, [pc, #780]	; (d504 <detect_vesc_firmware+0x35c>)
    d1f6:	220d      	movs	r2, #13
    d1f8:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 29;
    d1fa:	4bc3      	ldr	r3, [pc, #780]	; (d508 <detect_vesc_firmware+0x360>)
    d1fc:	221d      	movs	r2, #29
    d1fe:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 30;
    d200:	4bc2      	ldr	r3, [pc, #776]	; (d50c <detect_vesc_firmware+0x364>)
    d202:	221e      	movs	r2, #30
    d204:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 32;
    d206:	4bc2      	ldr	r3, [pc, #776]	; (d510 <detect_vesc_firmware+0x368>)
    d208:	2220      	movs	r2, #32
    d20a:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 34;
    d20c:	4bc1      	ldr	r3, [pc, #772]	; (d514 <detect_vesc_firmware+0x36c>)
    d20e:	2222      	movs	r2, #34	; 0x22
    d210:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
    d212:	4bc1      	ldr	r3, [pc, #772]	; (d518 <detect_vesc_firmware+0x370>)
    d214:	22ff      	movs	r2, #255	; 0xff
    d216:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
    d218:	4bc0      	ldr	r3, [pc, #768]	; (d51c <detect_vesc_firmware+0x374>)
    d21a:	22ff      	movs	r2, #255	; 0xff
    d21c:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
    d21e:	4bc0      	ldr	r3, [pc, #768]	; (d520 <detect_vesc_firmware+0x378>)
    d220:	2201      	movs	r2, #1
    d222:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 15;
    d224:	4bbf      	ldr	r3, [pc, #764]	; (d524 <detect_vesc_firmware+0x37c>)
    d226:	220f      	movs	r2, #15
    d228:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 19;
    d22a:	4bbf      	ldr	r3, [pc, #764]	; (d528 <detect_vesc_firmware+0x380>)
    d22c:	2213      	movs	r2, #19
    d22e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 23;
    d230:	4bbe      	ldr	r3, [pc, #760]	; (d52c <detect_vesc_firmware+0x384>)
    d232:	2217      	movs	r2, #23
    d234:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 25;
    d236:	4bbe      	ldr	r3, [pc, #760]	; (d530 <detect_vesc_firmware+0x388>)
    d238:	2219      	movs	r2, #25
    d23a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 29;
    d23c:	4bbd      	ldr	r3, [pc, #756]	; (d534 <detect_vesc_firmware+0x38c>)
    d23e:	221d      	movs	r2, #29
    d240:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 31;
    d242:	4bbd      	ldr	r3, [pc, #756]	; (d538 <detect_vesc_firmware+0x390>)
    d244:	221f      	movs	r2, #31
    d246:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 35;
    d248:	4bbc      	ldr	r3, [pc, #752]	; (d53c <detect_vesc_firmware+0x394>)
    d24a:	2223      	movs	r2, #35	; 0x23
    d24c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 39;
    d24e:	4bbc      	ldr	r3, [pc, #752]	; (d540 <detect_vesc_firmware+0x398>)
    d250:	2227      	movs	r2, #39	; 0x27
    d252:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 43;
    d254:	4bbb      	ldr	r3, [pc, #748]	; (d544 <detect_vesc_firmware+0x39c>)
    d256:	222b      	movs	r2, #43	; 0x2b
    d258:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 47;
    d25a:	4bbb      	ldr	r3, [pc, #748]	; (d548 <detect_vesc_firmware+0x3a0>)
    d25c:	222f      	movs	r2, #47	; 0x2f
    d25e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 55;
    d260:	4bba      	ldr	r3, [pc, #744]	; (d54c <detect_vesc_firmware+0x3a4>)
    d262:	2237      	movs	r2, #55	; 0x37
    d264:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 5;
    d266:	4bba      	ldr	r3, [pc, #744]	; (d550 <detect_vesc_firmware+0x3a8>)
    d268:	2205      	movs	r2, #5
    d26a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
    d26c:	4bb9      	ldr	r3, [pc, #740]	; (d554 <detect_vesc_firmware+0x3ac>)
    d26e:	2209      	movs	r2, #9
    d270:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
    d272:	4bb9      	ldr	r3, [pc, #740]	; (d558 <detect_vesc_firmware+0x3b0>)
    d274:	220d      	movs	r2, #13
    d276:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
    d278:	4bb8      	ldr	r3, [pc, #736]	; (d55c <detect_vesc_firmware+0x3b4>)
    d27a:	2211      	movs	r2, #17
    d27c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
    d27e:	4bb8      	ldr	r3, [pc, #736]	; (d560 <detect_vesc_firmware+0x3b8>)
    d280:	2215      	movs	r2, #21
    d282:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
    d284:	4bb7      	ldr	r3, [pc, #732]	; (d564 <detect_vesc_firmware+0x3bc>)
    d286:	2219      	movs	r2, #25
    d288:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
    d28a:	4bb7      	ldr	r3, [pc, #732]	; (d568 <detect_vesc_firmware+0x3c0>)
    d28c:	221d      	movs	r2, #29
    d28e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 33;
    d290:	4bb6      	ldr	r3, [pc, #728]	; (d56c <detect_vesc_firmware+0x3c4>)
    d292:	2221      	movs	r2, #33	; 0x21
    d294:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 37;
    d296:	4bb6      	ldr	r3, [pc, #728]	; (d570 <detect_vesc_firmware+0x3c8>)
    d298:	2225      	movs	r2, #37	; 0x25
    d29a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 41;
    d29c:	4bb5      	ldr	r3, [pc, #724]	; (d574 <detect_vesc_firmware+0x3cc>)
    d29e:	2229      	movs	r2, #41	; 0x29
    d2a0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 45;
    d2a2:	4bb5      	ldr	r3, [pc, #724]	; (d578 <detect_vesc_firmware+0x3d0>)
    d2a4:	222d      	movs	r2, #45	; 0x2d
    d2a6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 49;
    d2a8:	4bb4      	ldr	r3, [pc, #720]	; (d57c <detect_vesc_firmware+0x3d4>)
    d2aa:	2231      	movs	r2, #49	; 0x31
    d2ac:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 53;
    d2ae:	4bb4      	ldr	r3, [pc, #720]	; (d580 <detect_vesc_firmware+0x3d8>)
    d2b0:	2235      	movs	r2, #53	; 0x35
    d2b2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 59;
    d2b4:	4bb3      	ldr	r3, [pc, #716]	; (d584 <detect_vesc_firmware+0x3dc>)
    d2b6:	223b      	movs	r2, #59	; 0x3b
    d2b8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 63;
    d2ba:	4bb3      	ldr	r3, [pc, #716]	; (d588 <detect_vesc_firmware+0x3e0>)
    d2bc:	223f      	movs	r2, #63	; 0x3f
    d2be:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 67;
    d2c0:	4bb2      	ldr	r3, [pc, #712]	; (d58c <detect_vesc_firmware+0x3e4>)
    d2c2:	2243      	movs	r2, #67	; 0x43
    d2c4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 71;
    d2c6:	4bb2      	ldr	r3, [pc, #712]	; (d590 <detect_vesc_firmware+0x3e8>)
    d2c8:	2247      	movs	r2, #71	; 0x47
    d2ca:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 75;
    d2cc:	4bb1      	ldr	r3, [pc, #708]	; (d594 <detect_vesc_firmware+0x3ec>)
    d2ce:	224b      	movs	r2, #75	; 0x4b
    d2d0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 79;
    d2d2:	4bb1      	ldr	r3, [pc, #708]	; (d598 <detect_vesc_firmware+0x3f0>)
    d2d4:	224f      	movs	r2, #79	; 0x4f
    d2d6:	701a      	strb	r2, [r3, #0]
    d2d8:	e1e7      	b.n	d6aa <detect_vesc_firmware+0x502>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR < 100){ // >= 3.0
    d2da:	4b85      	ldr	r3, [pc, #532]	; (d4f0 <detect_vesc_firmware+0x348>)
    d2dc:	2234      	movs	r2, #52	; 0x34
    d2de:	5c9b      	ldrb	r3, [r3, r2]
    d2e0:	2b03      	cmp	r3, #3
    d2e2:	d000      	beq.n	d2e6 <detect_vesc_firmware+0x13e>
    d2e4:	e080      	b.n	d3e8 <detect_vesc_firmware+0x240>
    d2e6:	4b82      	ldr	r3, [pc, #520]	; (d4f0 <detect_vesc_firmware+0x348>)
    d2e8:	2235      	movs	r2, #53	; 0x35
    d2ea:	5c9b      	ldrb	r3, [r3, r2]
    d2ec:	2b63      	cmp	r3, #99	; 0x63
    d2ee:	d87b      	bhi.n	d3e8 <detect_vesc_firmware+0x240>
			esc_fw = FW_3v00;
    d2f0:	4b81      	ldr	r3, [pc, #516]	; (d4f8 <detect_vesc_firmware+0x350>)
    d2f2:	2201      	movs	r2, #1
    d2f4:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d2f6:	4b81      	ldr	r3, [pc, #516]	; (d4fc <detect_vesc_firmware+0x354>)
    d2f8:	2200      	movs	r2, #0
    d2fa:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
    d2fc:	4b80      	ldr	r3, [pc, #512]	; (d500 <detect_vesc_firmware+0x358>)
    d2fe:	2204      	movs	r2, #4
    d300:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
    d302:	4b80      	ldr	r3, [pc, #512]	; (d504 <detect_vesc_firmware+0x35c>)
    d304:	220e      	movs	r2, #14
    d306:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
    d308:	4b7f      	ldr	r3, [pc, #508]	; (d508 <detect_vesc_firmware+0x360>)
    d30a:	221e      	movs	r2, #30
    d30c:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
    d30e:	4b7f      	ldr	r3, [pc, #508]	; (d50c <detect_vesc_firmware+0x364>)
    d310:	221f      	movs	r2, #31
    d312:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
    d314:	4b7e      	ldr	r3, [pc, #504]	; (d510 <detect_vesc_firmware+0x368>)
    d316:	2221      	movs	r2, #33	; 0x21
    d318:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
    d31a:	4b7e      	ldr	r3, [pc, #504]	; (d514 <detect_vesc_firmware+0x36c>)
    d31c:	2223      	movs	r2, #35	; 0x23
    d31e:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 50;
    d320:	4b7d      	ldr	r3, [pc, #500]	; (d518 <detect_vesc_firmware+0x370>)
    d322:	2232      	movs	r2, #50	; 0x32
    d324:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 65;
    d326:	4b7d      	ldr	r3, [pc, #500]	; (d51c <detect_vesc_firmware+0x374>)
    d328:	2241      	movs	r2, #65	; 0x41
    d32a:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
    d32c:	4b7c      	ldr	r3, [pc, #496]	; (d520 <detect_vesc_firmware+0x378>)
    d32e:	2201      	movs	r2, #1
    d330:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 5;
    d332:	4b7c      	ldr	r3, [pc, #496]	; (d524 <detect_vesc_firmware+0x37c>)
    d334:	2205      	movs	r2, #5
    d336:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 9;
    d338:	4b7b      	ldr	r3, [pc, #492]	; (d528 <detect_vesc_firmware+0x380>)
    d33a:	2209      	movs	r2, #9
    d33c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 21;
    d33e:	4b7b      	ldr	r3, [pc, #492]	; (d52c <detect_vesc_firmware+0x384>)
    d340:	2215      	movs	r2, #21
    d342:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 23;
    d344:	4b7a      	ldr	r3, [pc, #488]	; (d530 <detect_vesc_firmware+0x388>)
    d346:	2217      	movs	r2, #23
    d348:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 27;
    d34a:	4b7a      	ldr	r3, [pc, #488]	; (d534 <detect_vesc_firmware+0x38c>)
    d34c:	221b      	movs	r2, #27
    d34e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 29;
    d350:	4b79      	ldr	r3, [pc, #484]	; (d538 <detect_vesc_firmware+0x390>)
    d352:	221d      	movs	r2, #29
    d354:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 33;
    d356:	4b79      	ldr	r3, [pc, #484]	; (d53c <detect_vesc_firmware+0x394>)
    d358:	2221      	movs	r2, #33	; 0x21
    d35a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 37;
    d35c:	4b78      	ldr	r3, [pc, #480]	; (d540 <detect_vesc_firmware+0x398>)
    d35e:	2225      	movs	r2, #37	; 0x25
    d360:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 41;
    d362:	4b78      	ldr	r3, [pc, #480]	; (d544 <detect_vesc_firmware+0x39c>)
    d364:	2229      	movs	r2, #41	; 0x29
    d366:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 45;
    d368:	4b77      	ldr	r3, [pc, #476]	; (d548 <detect_vesc_firmware+0x3a0>)
    d36a:	222d      	movs	r2, #45	; 0x2d
    d36c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 53;
    d36e:	4b77      	ldr	r3, [pc, #476]	; (d54c <detect_vesc_firmware+0x3a4>)
    d370:	2235      	movs	r2, #53	; 0x35
    d372:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 9;
    d374:	4b76      	ldr	r3, [pc, #472]	; (d550 <detect_vesc_firmware+0x3a8>)
    d376:	2209      	movs	r2, #9
    d378:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 13;
    d37a:	4b76      	ldr	r3, [pc, #472]	; (d554 <detect_vesc_firmware+0x3ac>)
    d37c:	220d      	movs	r2, #13
    d37e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 17;
    d380:	4b75      	ldr	r3, [pc, #468]	; (d558 <detect_vesc_firmware+0x3b0>)
    d382:	2211      	movs	r2, #17
    d384:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 21;
    d386:	4b75      	ldr	r3, [pc, #468]	; (d55c <detect_vesc_firmware+0x3b4>)
    d388:	2215      	movs	r2, #21
    d38a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 25;
    d38c:	4b74      	ldr	r3, [pc, #464]	; (d560 <detect_vesc_firmware+0x3b8>)
    d38e:	2219      	movs	r2, #25
    d390:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 29;
    d392:	4b74      	ldr	r3, [pc, #464]	; (d564 <detect_vesc_firmware+0x3bc>)
    d394:	221d      	movs	r2, #29
    d396:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 33;
    d398:	4b73      	ldr	r3, [pc, #460]	; (d568 <detect_vesc_firmware+0x3c0>)
    d39a:	2221      	movs	r2, #33	; 0x21
    d39c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 41;
    d39e:	4b73      	ldr	r3, [pc, #460]	; (d56c <detect_vesc_firmware+0x3c4>)
    d3a0:	2229      	movs	r2, #41	; 0x29
    d3a2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 45;
    d3a4:	4b72      	ldr	r3, [pc, #456]	; (d570 <detect_vesc_firmware+0x3c8>)
    d3a6:	222d      	movs	r2, #45	; 0x2d
    d3a8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 49;
    d3aa:	4b72      	ldr	r3, [pc, #456]	; (d574 <detect_vesc_firmware+0x3cc>)
    d3ac:	2231      	movs	r2, #49	; 0x31
    d3ae:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 53;
    d3b0:	4b71      	ldr	r3, [pc, #452]	; (d578 <detect_vesc_firmware+0x3d0>)
    d3b2:	2235      	movs	r2, #53	; 0x35
    d3b4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 57;
    d3b6:	4b71      	ldr	r3, [pc, #452]	; (d57c <detect_vesc_firmware+0x3d4>)
    d3b8:	2239      	movs	r2, #57	; 0x39
    d3ba:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 61;
    d3bc:	4b70      	ldr	r3, [pc, #448]	; (d580 <detect_vesc_firmware+0x3d8>)
    d3be:	223d      	movs	r2, #61	; 0x3d
    d3c0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 66;
    d3c2:	4b70      	ldr	r3, [pc, #448]	; (d584 <detect_vesc_firmware+0x3dc>)
    d3c4:	2242      	movs	r2, #66	; 0x42
    d3c6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 70;
    d3c8:	4b6f      	ldr	r3, [pc, #444]	; (d588 <detect_vesc_firmware+0x3e0>)
    d3ca:	2246      	movs	r2, #70	; 0x46
    d3cc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 74;
    d3ce:	4b6f      	ldr	r3, [pc, #444]	; (d58c <detect_vesc_firmware+0x3e4>)
    d3d0:	224a      	movs	r2, #74	; 0x4a
    d3d2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 78;
    d3d4:	4b6e      	ldr	r3, [pc, #440]	; (d590 <detect_vesc_firmware+0x3e8>)
    d3d6:	224e      	movs	r2, #78	; 0x4e
    d3d8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 86;
    d3da:	4b6e      	ldr	r3, [pc, #440]	; (d594 <detect_vesc_firmware+0x3ec>)
    d3dc:	2256      	movs	r2, #86	; 0x56
    d3de:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 90;
    d3e0:	4b6d      	ldr	r3, [pc, #436]	; (d598 <detect_vesc_firmware+0x3f0>)
    d3e2:	225a      	movs	r2, #90	; 0x5a
    d3e4:	701a      	strb	r2, [r3, #0]
    d3e6:	e160      	b.n	d6aa <detect_vesc_firmware+0x502>
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 23){
    d3e8:	4b41      	ldr	r3, [pc, #260]	; (d4f0 <detect_vesc_firmware+0x348>)
    d3ea:	2234      	movs	r2, #52	; 0x34
    d3ec:	5c9b      	ldrb	r3, [r3, r2]
    d3ee:	2b17      	cmp	r3, #23
    d3f0:	d000      	beq.n	d3f4 <detect_vesc_firmware+0x24c>
    d3f2:	e0d3      	b.n	d59c <detect_vesc_firmware+0x3f4>
			esc_fw = FW_UNITY;
    d3f4:	4b40      	ldr	r3, [pc, #256]	; (d4f8 <detect_vesc_firmware+0x350>)
    d3f6:	2202      	movs	r2, #2
    d3f8:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d3fa:	4b40      	ldr	r3, [pc, #256]	; (d4fc <detect_vesc_firmware+0x354>)
    d3fc:	2200      	movs	r2, #0
    d3fe:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4; // May use COMM_GET_UNITY_VALUES = 38
    d400:	4b3f      	ldr	r3, [pc, #252]	; (d500 <detect_vesc_firmware+0x358>)
    d402:	2204      	movs	r2, #4
    d404:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
    d406:	4b3f      	ldr	r3, [pc, #252]	; (d504 <detect_vesc_firmware+0x35c>)
    d408:	220e      	movs	r2, #14
    d40a:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
    d40c:	4b3e      	ldr	r3, [pc, #248]	; (d508 <detect_vesc_firmware+0x360>)
    d40e:	221e      	movs	r2, #30
    d410:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
    d412:	4b3e      	ldr	r3, [pc, #248]	; (d50c <detect_vesc_firmware+0x364>)
    d414:	221f      	movs	r2, #31
    d416:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
    d418:	4b3d      	ldr	r3, [pc, #244]	; (d510 <detect_vesc_firmware+0x368>)
    d41a:	2221      	movs	r2, #33	; 0x21
    d41c:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
    d41e:	4b3d      	ldr	r3, [pc, #244]	; (d514 <detect_vesc_firmware+0x36c>)
    d420:	2223      	movs	r2, #35	; 0x23
    d422:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
    d424:	4b3c      	ldr	r3, [pc, #240]	; (d518 <detect_vesc_firmware+0x370>)
    d426:	22ff      	movs	r2, #255	; 0xff
    d428:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
    d42a:	4b3c      	ldr	r3, [pc, #240]	; (d51c <detect_vesc_firmware+0x374>)
    d42c:	22ff      	movs	r2, #255	; 0xff
    d42e:	701a      	strb	r2, [r3, #0]

			GET_VALUES_FET_TEMP = 1;
    d430:	4b3b      	ldr	r3, [pc, #236]	; (d520 <detect_vesc_firmware+0x378>)
    d432:	2201      	movs	r2, #1
    d434:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 9;
    d436:	4b3b      	ldr	r3, [pc, #236]	; (d524 <detect_vesc_firmware+0x37c>)
    d438:	2209      	movs	r2, #9
    d43a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 17;
    d43c:	4b3a      	ldr	r3, [pc, #232]	; (d528 <detect_vesc_firmware+0x380>)
    d43e:	2211      	movs	r2, #17
    d440:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 37;
    d442:	4b3a      	ldr	r3, [pc, #232]	; (d52c <detect_vesc_firmware+0x384>)
    d444:	2225      	movs	r2, #37	; 0x25
    d446:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 41;
    d448:	4b39      	ldr	r3, [pc, #228]	; (d530 <detect_vesc_firmware+0x388>)
    d44a:	2229      	movs	r2, #41	; 0x29
    d44c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 49;
    d44e:	4b39      	ldr	r3, [pc, #228]	; (d534 <detect_vesc_firmware+0x38c>)
    d450:	2231      	movs	r2, #49	; 0x31
    d452:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 51;
    d454:	4b38      	ldr	r3, [pc, #224]	; (d538 <detect_vesc_firmware+0x390>)
    d456:	2233      	movs	r2, #51	; 0x33
    d458:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 55;
    d45a:	4b38      	ldr	r3, [pc, #224]	; (d53c <detect_vesc_firmware+0x394>)
    d45c:	2237      	movs	r2, #55	; 0x37
    d45e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 59;
    d460:	4b37      	ldr	r3, [pc, #220]	; (d540 <detect_vesc_firmware+0x398>)
    d462:	223b      	movs	r2, #59	; 0x3b
    d464:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 63;
    d466:	4b37      	ldr	r3, [pc, #220]	; (d544 <detect_vesc_firmware+0x39c>)
    d468:	223f      	movs	r2, #63	; 0x3f
    d46a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 67;
    d46c:	4b36      	ldr	r3, [pc, #216]	; (d548 <detect_vesc_firmware+0x3a0>)
    d46e:	2243      	movs	r2, #67	; 0x43
    d470:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 83;
    d472:	4b36      	ldr	r3, [pc, #216]	; (d54c <detect_vesc_firmware+0x3a4>)
    d474:	2253      	movs	r2, #83	; 0x53
    d476:	701a      	strb	r2, [r3, #0]

			GET_MCCONF_MTR_CURR_MAX = 5;
    d478:	4b35      	ldr	r3, [pc, #212]	; (d550 <detect_vesc_firmware+0x3a8>)
    d47a:	2205      	movs	r2, #5
    d47c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
    d47e:	4b35      	ldr	r3, [pc, #212]	; (d554 <detect_vesc_firmware+0x3ac>)
    d480:	2209      	movs	r2, #9
    d482:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
    d484:	4b34      	ldr	r3, [pc, #208]	; (d558 <detect_vesc_firmware+0x3b0>)
    d486:	220d      	movs	r2, #13
    d488:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
    d48a:	4b34      	ldr	r3, [pc, #208]	; (d55c <detect_vesc_firmware+0x3b4>)
    d48c:	2211      	movs	r2, #17
    d48e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
    d490:	4b33      	ldr	r3, [pc, #204]	; (d560 <detect_vesc_firmware+0x3b8>)
    d492:	2215      	movs	r2, #21
    d494:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
    d496:	4b33      	ldr	r3, [pc, #204]	; (d564 <detect_vesc_firmware+0x3bc>)
    d498:	2219      	movs	r2, #25
    d49a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
    d49c:	4b32      	ldr	r3, [pc, #200]	; (d568 <detect_vesc_firmware+0x3c0>)
    d49e:	221d      	movs	r2, #29
    d4a0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 37;
    d4a2:	4b32      	ldr	r3, [pc, #200]	; (d56c <detect_vesc_firmware+0x3c4>)
    d4a4:	2225      	movs	r2, #37	; 0x25
    d4a6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 41;
    d4a8:	4b31      	ldr	r3, [pc, #196]	; (d570 <detect_vesc_firmware+0x3c8>)
    d4aa:	2229      	movs	r2, #41	; 0x29
    d4ac:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 45;
    d4ae:	4b31      	ldr	r3, [pc, #196]	; (d574 <detect_vesc_firmware+0x3cc>)
    d4b0:	222d      	movs	r2, #45	; 0x2d
    d4b2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 49;
    d4b4:	4b30      	ldr	r3, [pc, #192]	; (d578 <detect_vesc_firmware+0x3d0>)
    d4b6:	2231      	movs	r2, #49	; 0x31
    d4b8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 53;
    d4ba:	4b30      	ldr	r3, [pc, #192]	; (d57c <detect_vesc_firmware+0x3d4>)
    d4bc:	2235      	movs	r2, #53	; 0x35
    d4be:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 57;
    d4c0:	4b2f      	ldr	r3, [pc, #188]	; (d580 <detect_vesc_firmware+0x3d8>)
    d4c2:	2239      	movs	r2, #57	; 0x39
    d4c4:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 62;
    d4c6:	4b2f      	ldr	r3, [pc, #188]	; (d584 <detect_vesc_firmware+0x3dc>)
    d4c8:	223e      	movs	r2, #62	; 0x3e
    d4ca:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 66;
    d4cc:	4b2e      	ldr	r3, [pc, #184]	; (d588 <detect_vesc_firmware+0x3e0>)
    d4ce:	2242      	movs	r2, #66	; 0x42
    d4d0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 70;
    d4d2:	4b2e      	ldr	r3, [pc, #184]	; (d58c <detect_vesc_firmware+0x3e4>)
    d4d4:	2246      	movs	r2, #70	; 0x46
    d4d6:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
    d4d8:	4b2d      	ldr	r3, [pc, #180]	; (d590 <detect_vesc_firmware+0x3e8>)
    d4da:	224a      	movs	r2, #74	; 0x4a
    d4dc:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 82;
    d4de:	4b2d      	ldr	r3, [pc, #180]	; (d594 <detect_vesc_firmware+0x3ec>)
    d4e0:	2252      	movs	r2, #82	; 0x52
    d4e2:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 86;
    d4e4:	4b2c      	ldr	r3, [pc, #176]	; (d598 <detect_vesc_firmware+0x3f0>)
    d4e6:	2256      	movs	r2, #86	; 0x56
    d4e8:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
			GET_MCCONF_DUTY_MIN = 82;
			GET_MCCONF_DUTY_MAX = 86;
		}
	}
}
    d4ea:	e0de      	b.n	d6aa <detect_vesc_firmware+0x502>
    d4ec:	0000caf5 	.word	0x0000caf5
    d4f0:	20000940 	.word	0x20000940
    d4f4:	2000030f 	.word	0x2000030f
    d4f8:	2000001a 	.word	0x2000001a
    d4fc:	2000033a 	.word	0x2000033a
    d500:	2000033b 	.word	0x2000033b
    d504:	2000033c 	.word	0x2000033c
    d508:	2000033d 	.word	0x2000033d
    d50c:	2000033e 	.word	0x2000033e
    d510:	2000033f 	.word	0x2000033f
    d514:	20000340 	.word	0x20000340
    d518:	20000341 	.word	0x20000341
    d51c:	20000342 	.word	0x20000342
    d520:	20000343 	.word	0x20000343
    d524:	20000344 	.word	0x20000344
    d528:	20000345 	.word	0x20000345
    d52c:	20000346 	.word	0x20000346
    d530:	20000347 	.word	0x20000347
    d534:	20000348 	.word	0x20000348
    d538:	20000349 	.word	0x20000349
    d53c:	2000034a 	.word	0x2000034a
    d540:	2000034b 	.word	0x2000034b
    d544:	2000034c 	.word	0x2000034c
    d548:	2000034d 	.word	0x2000034d
    d54c:	2000034e 	.word	0x2000034e
    d550:	2000034f 	.word	0x2000034f
    d554:	20000350 	.word	0x20000350
    d558:	20000351 	.word	0x20000351
    d55c:	20000352 	.word	0x20000352
    d560:	20000353 	.word	0x20000353
    d564:	20000354 	.word	0x20000354
    d568:	20000355 	.word	0x20000355
    d56c:	20000356 	.word	0x20000356
    d570:	20000357 	.word	0x20000357
    d574:	20000358 	.word	0x20000358
    d578:	20000359 	.word	0x20000359
    d57c:	2000035a 	.word	0x2000035a
    d580:	2000035b 	.word	0x2000035b
    d584:	2000035c 	.word	0x2000035c
    d588:	2000035d 	.word	0x2000035d
    d58c:	2000035e 	.word	0x2000035e
    d590:	2000035f 	.word	0x2000035f
    d594:	20000360 	.word	0x20000360
    d598:	20000361 	.word	0x20000361
		} else if(latest_vesc_vals.FW_VERSION_MAJOR == 3 && latest_vesc_vals.FW_VERSION_MINOR >= 100){
    d59c:	4b44      	ldr	r3, [pc, #272]	; (d6b0 <detect_vesc_firmware+0x508>)
    d59e:	2234      	movs	r2, #52	; 0x34
    d5a0:	5c9b      	ldrb	r3, [r3, r2]
    d5a2:	2b03      	cmp	r3, #3
    d5a4:	d000      	beq.n	d5a8 <detect_vesc_firmware+0x400>
    d5a6:	e080      	b.n	d6aa <detect_vesc_firmware+0x502>
    d5a8:	4b41      	ldr	r3, [pc, #260]	; (d6b0 <detect_vesc_firmware+0x508>)
    d5aa:	2235      	movs	r2, #53	; 0x35
    d5ac:	5c9b      	ldrb	r3, [r3, r2]
    d5ae:	2b63      	cmp	r3, #99	; 0x63
    d5b0:	d97b      	bls.n	d6aa <detect_vesc_firmware+0x502>
			esc_fw = FW_ACKMANIAC;
    d5b2:	4b40      	ldr	r3, [pc, #256]	; (d6b4 <detect_vesc_firmware+0x50c>)
    d5b4:	2203      	movs	r2, #3
    d5b6:	701a      	strb	r2, [r3, #0]
			COMM_FW_VERSION = 0;
    d5b8:	4b3f      	ldr	r3, [pc, #252]	; (d6b8 <detect_vesc_firmware+0x510>)
    d5ba:	2200      	movs	r2, #0
    d5bc:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES = 4;
    d5be:	4b3f      	ldr	r3, [pc, #252]	; (d6bc <detect_vesc_firmware+0x514>)
    d5c0:	2204      	movs	r2, #4
    d5c2:	701a      	strb	r2, [r3, #0]
			COMM_GET_MCCONF = 14;
    d5c4:	4b3e      	ldr	r3, [pc, #248]	; (d6c0 <detect_vesc_firmware+0x518>)
    d5c6:	220e      	movs	r2, #14
    d5c8:	701a      	strb	r2, [r3, #0]
			COMM_ALIVE = 30;
    d5ca:	4b3e      	ldr	r3, [pc, #248]	; (d6c4 <detect_vesc_firmware+0x51c>)
    d5cc:	221e      	movs	r2, #30
    d5ce:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_PPM = 31;
    d5d0:	4b3d      	ldr	r3, [pc, #244]	; (d6c8 <detect_vesc_firmware+0x520>)
    d5d2:	221f      	movs	r2, #31
    d5d4:	701a      	strb	r2, [r3, #0]
			COMM_GET_DECODED_CHUK = 33;
    d5d6:	4b3d      	ldr	r3, [pc, #244]	; (d6cc <detect_vesc_firmware+0x524>)
    d5d8:	2221      	movs	r2, #33	; 0x21
    d5da:	701a      	strb	r2, [r3, #0]
			COMM_SET_CHUCK_DATA = 35;
    d5dc:	4b3c      	ldr	r3, [pc, #240]	; (d6d0 <detect_vesc_firmware+0x528>)
    d5de:	2223      	movs	r2, #35	; 0x23
    d5e0:	701a      	strb	r2, [r3, #0]
			COMM_GET_VALUES_SELECTIVE = 255;
    d5e2:	4b3c      	ldr	r3, [pc, #240]	; (d6d4 <detect_vesc_firmware+0x52c>)
    d5e4:	22ff      	movs	r2, #255	; 0xff
    d5e6:	701a      	strb	r2, [r3, #0]
			COMM_GET_IMU_DATA = 255;
    d5e8:	4b3b      	ldr	r3, [pc, #236]	; (d6d8 <detect_vesc_firmware+0x530>)
    d5ea:	22ff      	movs	r2, #255	; 0xff
    d5ec:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FET_TEMP = 1;
    d5ee:	4b3b      	ldr	r3, [pc, #236]	; (d6dc <detect_vesc_firmware+0x534>)
    d5f0:	2201      	movs	r2, #1
    d5f2:	701a      	strb	r2, [r3, #0]
			GET_VALUES_MTR_CURR = 5;
    d5f4:	4b3a      	ldr	r3, [pc, #232]	; (d6e0 <detect_vesc_firmware+0x538>)
    d5f6:	2205      	movs	r2, #5
    d5f8:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_CURR = 9;
    d5fa:	4b3a      	ldr	r3, [pc, #232]	; (d6e4 <detect_vesc_firmware+0x53c>)
    d5fc:	2209      	movs	r2, #9
    d5fe:	701a      	strb	r2, [r3, #0]
			GET_VALUES_DUTY = 21;
    d600:	4b39      	ldr	r3, [pc, #228]	; (d6e8 <detect_vesc_firmware+0x540>)
    d602:	2215      	movs	r2, #21
    d604:	701a      	strb	r2, [r3, #0]
			GET_VALUES_RPM = 23;
    d606:	4b39      	ldr	r3, [pc, #228]	; (d6ec <detect_vesc_firmware+0x544>)
    d608:	2217      	movs	r2, #23
    d60a:	701a      	strb	r2, [r3, #0]
			GET_VALUES_IN_VOLT = 27;
    d60c:	4b38      	ldr	r3, [pc, #224]	; (d6f0 <detect_vesc_firmware+0x548>)
    d60e:	221b      	movs	r2, #27
    d610:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_USED = 29;
    d612:	4b38      	ldr	r3, [pc, #224]	; (d6f4 <detect_vesc_firmware+0x54c>)
    d614:	221d      	movs	r2, #29
    d616:	701a      	strb	r2, [r3, #0]
			GET_VALUES_AH_CHRG = 33;
    d618:	4b37      	ldr	r3, [pc, #220]	; (d6f8 <detect_vesc_firmware+0x550>)
    d61a:	2221      	movs	r2, #33	; 0x21
    d61c:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_USED = 37;
    d61e:	4b37      	ldr	r3, [pc, #220]	; (d6fc <detect_vesc_firmware+0x554>)
    d620:	2225      	movs	r2, #37	; 0x25
    d622:	701a      	strb	r2, [r3, #0]
			GET_VALUES_WH_CHRG = 41;
    d624:	4b36      	ldr	r3, [pc, #216]	; (d700 <detect_vesc_firmware+0x558>)
    d626:	2229      	movs	r2, #41	; 0x29
    d628:	701a      	strb	r2, [r3, #0]
			GET_VALUES_TACH = 45;
    d62a:	4b36      	ldr	r3, [pc, #216]	; (d704 <detect_vesc_firmware+0x55c>)
    d62c:	222d      	movs	r2, #45	; 0x2d
    d62e:	701a      	strb	r2, [r3, #0]
			GET_VALUES_FAULT = 53;
    d630:	4b35      	ldr	r3, [pc, #212]	; (d708 <detect_vesc_firmware+0x560>)
    d632:	2235      	movs	r2, #53	; 0x35
    d634:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MAX = 5;
    d636:	4b35      	ldr	r3, [pc, #212]	; (d70c <detect_vesc_firmware+0x564>)
    d638:	2205      	movs	r2, #5
    d63a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_MTR_CURR_MIN = 9;
    d63c:	4b34      	ldr	r3, [pc, #208]	; (d710 <detect_vesc_firmware+0x568>)
    d63e:	2209      	movs	r2, #9
    d640:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MAX = 13;
    d642:	4b34      	ldr	r3, [pc, #208]	; (d714 <detect_vesc_firmware+0x56c>)
    d644:	220d      	movs	r2, #13
    d646:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_IN_CURR_MIN = 17;
    d648:	4b33      	ldr	r3, [pc, #204]	; (d718 <detect_vesc_firmware+0x570>)
    d64a:	2211      	movs	r2, #17
    d64c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ABS_CURR_MAX = 21;
    d64e:	4b33      	ldr	r3, [pc, #204]	; (d71c <detect_vesc_firmware+0x574>)
    d650:	2215      	movs	r2, #21
    d652:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MIN = 25;
    d654:	4b32      	ldr	r3, [pc, #200]	; (d720 <detect_vesc_firmware+0x578>)
    d656:	2219      	movs	r2, #25
    d658:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_MAX = 29;
    d65a:	4b32      	ldr	r3, [pc, #200]	; (d724 <detect_vesc_firmware+0x57c>)
    d65c:	221d      	movs	r2, #29
    d65e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_MAX = 37;
    d660:	4b31      	ldr	r3, [pc, #196]	; (d728 <detect_vesc_firmware+0x580>)
    d662:	2225      	movs	r2, #37	; 0x25
    d664:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_ERPM_FBRAKE_CC_MAX = 41;
    d666:	4b31      	ldr	r3, [pc, #196]	; (d72c <detect_vesc_firmware+0x584>)
    d668:	2229      	movs	r2, #41	; 0x29
    d66a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MIN = 45;
    d66c:	4b30      	ldr	r3, [pc, #192]	; (d730 <detect_vesc_firmware+0x588>)
    d66e:	222d      	movs	r2, #45	; 0x2d
    d670:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_VIN_MAX = 49;
    d672:	4b30      	ldr	r3, [pc, #192]	; (d734 <detect_vesc_firmware+0x58c>)
    d674:	2231      	movs	r2, #49	; 0x31
    d676:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_STRT = 53;
    d678:	4b2f      	ldr	r3, [pc, #188]	; (d738 <detect_vesc_firmware+0x590>)
    d67a:	2235      	movs	r2, #53	; 0x35
    d67c:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_BAT_CUT_END = 57;
    d67e:	4b2f      	ldr	r3, [pc, #188]	; (d73c <detect_vesc_firmware+0x594>)
    d680:	2239      	movs	r2, #57	; 0x39
    d682:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_STRT = 62;
    d684:	4b2e      	ldr	r3, [pc, #184]	; (d740 <detect_vesc_firmware+0x598>)
    d686:	223e      	movs	r2, #62	; 0x3e
    d688:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_FET_END = 66;
    d68a:	4b2e      	ldr	r3, [pc, #184]	; (d744 <detect_vesc_firmware+0x59c>)
    d68c:	2242      	movs	r2, #66	; 0x42
    d68e:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_STRT = 70;
    d690:	4b2d      	ldr	r3, [pc, #180]	; (d748 <detect_vesc_firmware+0x5a0>)
    d692:	2246      	movs	r2, #70	; 0x46
    d694:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_TMP_MTR_END = 74;
    d696:	4b2d      	ldr	r3, [pc, #180]	; (d74c <detect_vesc_firmware+0x5a4>)
    d698:	224a      	movs	r2, #74	; 0x4a
    d69a:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MIN = 82;
    d69c:	4b2c      	ldr	r3, [pc, #176]	; (d750 <detect_vesc_firmware+0x5a8>)
    d69e:	2252      	movs	r2, #82	; 0x52
    d6a0:	701a      	strb	r2, [r3, #0]
			GET_MCCONF_DUTY_MAX = 86;
    d6a2:	4b2c      	ldr	r3, [pc, #176]	; (d754 <detect_vesc_firmware+0x5ac>)
    d6a4:	2256      	movs	r2, #86	; 0x56
    d6a6:	701a      	strb	r2, [r3, #0]
}
    d6a8:	e7ff      	b.n	d6aa <detect_vesc_firmware+0x502>
    d6aa:	46c0      	nop			; (mov r8, r8)
    d6ac:	46bd      	mov	sp, r7
    d6ae:	bd80      	pop	{r7, pc}
    d6b0:	20000940 	.word	0x20000940
    d6b4:	2000001a 	.word	0x2000001a
    d6b8:	2000033a 	.word	0x2000033a
    d6bc:	2000033b 	.word	0x2000033b
    d6c0:	2000033c 	.word	0x2000033c
    d6c4:	2000033d 	.word	0x2000033d
    d6c8:	2000033e 	.word	0x2000033e
    d6cc:	2000033f 	.word	0x2000033f
    d6d0:	20000340 	.word	0x20000340
    d6d4:	20000341 	.word	0x20000341
    d6d8:	20000342 	.word	0x20000342
    d6dc:	20000343 	.word	0x20000343
    d6e0:	20000344 	.word	0x20000344
    d6e4:	20000345 	.word	0x20000345
    d6e8:	20000346 	.word	0x20000346
    d6ec:	20000347 	.word	0x20000347
    d6f0:	20000348 	.word	0x20000348
    d6f4:	20000349 	.word	0x20000349
    d6f8:	2000034a 	.word	0x2000034a
    d6fc:	2000034b 	.word	0x2000034b
    d700:	2000034c 	.word	0x2000034c
    d704:	2000034d 	.word	0x2000034d
    d708:	2000034e 	.word	0x2000034e
    d70c:	2000034f 	.word	0x2000034f
    d710:	20000350 	.word	0x20000350
    d714:	20000351 	.word	0x20000351
    d718:	20000352 	.word	0x20000352
    d71c:	20000353 	.word	0x20000353
    d720:	20000354 	.word	0x20000354
    d724:	20000355 	.word	0x20000355
    d728:	20000356 	.word	0x20000356
    d72c:	20000357 	.word	0x20000357
    d730:	20000358 	.word	0x20000358
    d734:	20000359 	.word	0x20000359
    d738:	2000035a 	.word	0x2000035a
    d73c:	2000035b 	.word	0x2000035b
    d740:	2000035c 	.word	0x2000035c
    d744:	2000035d 	.word	0x2000035d
    d748:	2000035e 	.word	0x2000035e
    d74c:	2000035f 	.word	0x2000035f
    d750:	20000360 	.word	0x20000360
    d754:	20000361 	.word	0x20000361

0000d758 <HandleUserInput>:




void HandleUserInput()
{
    d758:	b590      	push	{r4, r7, lr}
    d75a:	b083      	sub	sp, #12
    d75c:	af00      	add	r7, sp, #0
	///////////////   Use the appropriate throttle input   ///////////////
	//////////////////////////////////////////////////////////////////////
	switch(remote_type){
    d75e:	4bbb      	ldr	r3, [pc, #748]	; (da4c <HandleUserInput+0x2f4>)
    d760:	781b      	ldrb	r3, [r3, #0]
    d762:	2b04      	cmp	r3, #4
    d764:	d853      	bhi.n	d80e <HandleUserInput+0xb6>
    d766:	009a      	lsls	r2, r3, #2
    d768:	4bb9      	ldr	r3, [pc, #740]	; (da50 <HandleUserInput+0x2f8>)
    d76a:	18d3      	adds	r3, r2, r3
    d76c:	681b      	ldr	r3, [r3, #0]
    d76e:	469f      	mov	pc, r3
		case REMOTE_PPM:
		case REMOTE_UART_PPM:{
			READ_VESC_PWM = true;
    d770:	4bb8      	ldr	r3, [pc, #736]	; (da54 <HandleUserInput+0x2fc>)
    d772:	2201      	movs	r2, #1
    d774:	701a      	strb	r2, [r3, #0]
			float temp = (((float)latest_vesc_vals.pwm_val + 595000.0)*(255.0/1495000.0));
    d776:	4bb8      	ldr	r3, [pc, #736]	; (da58 <HandleUserInput+0x300>)
    d778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    d77a:	4bb8      	ldr	r3, [pc, #736]	; (da5c <HandleUserInput+0x304>)
    d77c:	0010      	movs	r0, r2
    d77e:	4798      	blx	r3
    d780:	1c02      	adds	r2, r0, #0
    d782:	4bb7      	ldr	r3, [pc, #732]	; (da60 <HandleUserInput+0x308>)
    d784:	1c10      	adds	r0, r2, #0
    d786:	4798      	blx	r3
    d788:	4cb6      	ldr	r4, [pc, #728]	; (da64 <HandleUserInput+0x30c>)
    d78a:	2200      	movs	r2, #0
    d78c:	4bb6      	ldr	r3, [pc, #728]	; (da68 <HandleUserInput+0x310>)
    d78e:	47a0      	blx	r4
    d790:	0003      	movs	r3, r0
    d792:	000c      	movs	r4, r1
    d794:	0018      	movs	r0, r3
    d796:	0021      	movs	r1, r4
    d798:	4cb4      	ldr	r4, [pc, #720]	; (da6c <HandleUserInput+0x314>)
    d79a:	4ab5      	ldr	r2, [pc, #724]	; (da70 <HandleUserInput+0x318>)
    d79c:	4bb5      	ldr	r3, [pc, #724]	; (da74 <HandleUserInput+0x31c>)
    d79e:	47a0      	blx	r4
    d7a0:	0003      	movs	r3, r0
    d7a2:	000c      	movs	r4, r1
    d7a4:	0019      	movs	r1, r3
    d7a6:	0022      	movs	r2, r4
    d7a8:	4bb3      	ldr	r3, [pc, #716]	; (da78 <HandleUserInput+0x320>)
    d7aa:	0008      	movs	r0, r1
    d7ac:	0011      	movs	r1, r2
    d7ae:	4798      	blx	r3
    d7b0:	1c03      	adds	r3, r0, #0
    d7b2:	607b      	str	r3, [r7, #4]
			//temp = -temp + 255;
			if(temp < 0)
    d7b4:	4bb1      	ldr	r3, [pc, #708]	; (da7c <HandleUserInput+0x324>)
    d7b6:	2100      	movs	r1, #0
    d7b8:	6878      	ldr	r0, [r7, #4]
    d7ba:	4798      	blx	r3
    d7bc:	1e03      	subs	r3, r0, #0
    d7be:	d002      	beq.n	d7c6 <HandleUserInput+0x6e>
				temp = 0;
    d7c0:	2300      	movs	r3, #0
    d7c2:	607b      	str	r3, [r7, #4]
    d7c4:	e007      	b.n	d7d6 <HandleUserInput+0x7e>
			else if(temp > 255)
    d7c6:	4bae      	ldr	r3, [pc, #696]	; (da80 <HandleUserInput+0x328>)
    d7c8:	49ae      	ldr	r1, [pc, #696]	; (da84 <HandleUserInput+0x32c>)
    d7ca:	6878      	ldr	r0, [r7, #4]
    d7cc:	4798      	blx	r3
    d7ce:	1e03      	subs	r3, r0, #0
    d7d0:	d001      	beq.n	d7d6 <HandleUserInput+0x7e>
				temp = 255;
    d7d2:	4bac      	ldr	r3, [pc, #688]	; (da84 <HandleUserInput+0x32c>)
    d7d4:	607b      	str	r3, [r7, #4]
			remote_y = (uint8_t)(temp);
    d7d6:	4bac      	ldr	r3, [pc, #688]	; (da88 <HandleUserInput+0x330>)
    d7d8:	6878      	ldr	r0, [r7, #4]
    d7da:	4798      	blx	r3
    d7dc:	0003      	movs	r3, r0
    d7de:	b2da      	uxtb	r2, r3
    d7e0:	4baa      	ldr	r3, [pc, #680]	; (da8c <HandleUserInput+0x334>)
    d7e2:	701a      	strb	r2, [r3, #0]
			break;}
    d7e4:	e013      	b.n	d80e <HandleUserInput+0xb6>
		case REMOTE_UART_SINGLE:
		case REMOTE_UART_DUAL:
			READ_VESC_CHUCK = true;
    d7e6:	4baa      	ldr	r3, [pc, #680]	; (da90 <HandleUserInput+0x338>)
    d7e8:	2201      	movs	r2, #1
    d7ea:	701a      	strb	r2, [r3, #0]
			remote_y = rec_chuck_struct.js_y;
    d7ec:	4ba9      	ldr	r3, [pc, #676]	; (da94 <HandleUserInput+0x33c>)
    d7ee:	785b      	ldrb	r3, [r3, #1]
    d7f0:	b25b      	sxtb	r3, r3
    d7f2:	b2da      	uxtb	r2, r3
    d7f4:	4ba5      	ldr	r3, [pc, #660]	; (da8c <HandleUserInput+0x334>)
    d7f6:	701a      	strb	r2, [r3, #0]
			if(remote_type == REMOTE_UART_DUAL)
    d7f8:	4b94      	ldr	r3, [pc, #592]	; (da4c <HandleUserInput+0x2f4>)
    d7fa:	781b      	ldrb	r3, [r3, #0]
    d7fc:	2b03      	cmp	r3, #3
    d7fe:	d005      	beq.n	d80c <HandleUserInput+0xb4>
				remote_x;
			else
				remote_x = 255/2;
    d800:	4ba5      	ldr	r3, [pc, #660]	; (da98 <HandleUserInput+0x340>)
    d802:	227f      	movs	r2, #127	; 0x7f
    d804:	701a      	strb	r2, [r3, #0]
			break;
    d806:	e001      	b.n	d80c <HandleUserInput+0xb4>
		case REMOTE_APP:
			//if(app_remote_check && REMOTE_TYPE < 2)
				//temp_y = AppRemoteY;
			//else
				//temp_y = VescRemoteY;
			break;
    d808:	46c0      	nop			; (mov r8, r8)
    d80a:	e000      	b.n	d80e <HandleUserInput+0xb6>
			break;
    d80c:	46c0      	nop			; (mov r8, r8)
	}


	////////////////   Use the appropriate button input   ////////////////
	//////////////////////////////////////////////////////////////////////
	switch(button_type){
    d80e:	4ba3      	ldr	r3, [pc, #652]	; (da9c <HandleUserInput+0x344>)
    d810:	781b      	ldrb	r3, [r3, #0]
    d812:	2b06      	cmp	r3, #6
    d814:	d82e      	bhi.n	d874 <HandleUserInput+0x11c>
    d816:	009a      	lsls	r2, r3, #2
    d818:	4ba1      	ldr	r3, [pc, #644]	; (daa0 <HandleUserInput+0x348>)
    d81a:	18d3      	adds	r3, r2, r3
    d81c:	681b      	ldr	r3, [r3, #0]
    d81e:	469f      	mov	pc, r3
		case BTN_MOMENTARY: 
		case BTN_LATCHED:
			remote_btn_state = port_pin_get_input_level(PPM_IN);
    d820:	2022      	movs	r0, #34	; 0x22
    d822:	4ba0      	ldr	r3, [pc, #640]	; (daa4 <HandleUserInput+0x34c>)
    d824:	4798      	blx	r3
    d826:	0003      	movs	r3, r0
    d828:	001a      	movs	r2, r3
    d82a:	4b9f      	ldr	r3, [pc, #636]	; (daa8 <HandleUserInput+0x350>)
    d82c:	701a      	strb	r2, [r3, #0]
			break;
    d82e:	e025      	b.n	d87c <HandleUserInput+0x124>
		case BTN_UART_C:
			remote_btn_state = rec_chuck_struct.bt_c;
    d830:	4b98      	ldr	r3, [pc, #608]	; (da94 <HandleUserInput+0x33c>)
    d832:	7a1b      	ldrb	r3, [r3, #8]
    d834:	001a      	movs	r2, r3
    d836:	4b9c      	ldr	r3, [pc, #624]	; (daa8 <HandleUserInput+0x350>)
    d838:	701a      	strb	r2, [r3, #0]
			break;	
    d83a:	e01f      	b.n	d87c <HandleUserInput+0x124>
		case BTN_UART_Z:
			remote_btn_state = rec_chuck_struct.bt_z;
    d83c:	4b95      	ldr	r3, [pc, #596]	; (da94 <HandleUserInput+0x33c>)
    d83e:	7a5b      	ldrb	r3, [r3, #9]
    d840:	001a      	movs	r2, r3
    d842:	4b99      	ldr	r3, [pc, #612]	; (daa8 <HandleUserInput+0x350>)
    d844:	701a      	strb	r2, [r3, #0]
			break;
    d846:	e019      	b.n	d87c <HandleUserInput+0x124>
		case BTN_THROTTLE_DWN:
			remote_btn_state = (remote_y < (127 - DWN_THRESH));
    d848:	4b90      	ldr	r3, [pc, #576]	; (da8c <HandleUserInput+0x334>)
    d84a:	781a      	ldrb	r2, [r3, #0]
    d84c:	2174      	movs	r1, #116	; 0x74
    d84e:	2300      	movs	r3, #0
    d850:	4291      	cmp	r1, r2
    d852:	415b      	adcs	r3, r3
    d854:	b2db      	uxtb	r3, r3
    d856:	001a      	movs	r2, r3
    d858:	4b93      	ldr	r3, [pc, #588]	; (daa8 <HandleUserInput+0x350>)
    d85a:	701a      	strb	r2, [r3, #0]
			break;
    d85c:	e00e      	b.n	d87c <HandleUserInput+0x124>
		case BTN_THROTTLE_UP:
			remote_btn_state = (remote_y > (127 + UP_THRESH));
    d85e:	4b8b      	ldr	r3, [pc, #556]	; (da8c <HandleUserInput+0x334>)
    d860:	781b      	ldrb	r3, [r3, #0]
    d862:	2289      	movs	r2, #137	; 0x89
    d864:	429a      	cmp	r2, r3
    d866:	419b      	sbcs	r3, r3
    d868:	425b      	negs	r3, r3
    d86a:	b2db      	uxtb	r3, r3
    d86c:	001a      	movs	r2, r3
    d86e:	4b8e      	ldr	r3, [pc, #568]	; (daa8 <HandleUserInput+0x350>)
    d870:	701a      	strb	r2, [r3, #0]
			break;
    d872:	e003      	b.n	d87c <HandleUserInput+0x124>
		default:
			remote_btn_state = 0;
    d874:	4b8c      	ldr	r3, [pc, #560]	; (daa8 <HandleUserInput+0x350>)
    d876:	2200      	movs	r2, #0
    d878:	701a      	strb	r2, [r3, #0]
			break;
    d87a:	46c0      	nop			; (mov r8, r8)
	}

	////   Determine the time the button was held down and released   ////
	//////////////////////////////////////////////////////////////////////
	if(button_type != BTN_LATCHED){
    d87c:	4b87      	ldr	r3, [pc, #540]	; (da9c <HandleUserInput+0x344>)
    d87e:	781b      	ldrb	r3, [r3, #0]
    d880:	2b02      	cmp	r3, #2
    d882:	d05e      	beq.n	d942 <HandleUserInput+0x1ea>
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    d884:	4b88      	ldr	r3, [pc, #544]	; (daa8 <HandleUserInput+0x350>)
    d886:	781b      	ldrb	r3, [r3, #0]
    d888:	2b01      	cmp	r3, #1
    d88a:	d10c      	bne.n	d8a6 <HandleUserInput+0x14e>
    d88c:	4b87      	ldr	r3, [pc, #540]	; (daac <HandleUserInput+0x354>)
    d88e:	781b      	ldrb	r3, [r3, #0]
    d890:	2b00      	cmp	r3, #0
    d892:	d108      	bne.n	d8a6 <HandleUserInput+0x14e>
			lButtonTime = millis(); // Mark the time of button state transition
    d894:	4b86      	ldr	r3, [pc, #536]	; (dab0 <HandleUserInput+0x358>)
    d896:	4798      	blx	r3
    d898:	0002      	movs	r2, r0
    d89a:	4b86      	ldr	r3, [pc, #536]	; (dab4 <HandleUserInput+0x35c>)
    d89c:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
    d89e:	4b86      	ldr	r3, [pc, #536]	; (dab8 <HandleUserInput+0x360>)
    d8a0:	2200      	movs	r2, #0
    d8a2:	601a      	str	r2, [r3, #0]
    d8a4:	e0a7      	b.n	d9f6 <HandleUserInput+0x29e>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
    d8a6:	4b80      	ldr	r3, [pc, #512]	; (daa8 <HandleUserInput+0x350>)
    d8a8:	781b      	ldrb	r3, [r3, #0]
    d8aa:	2b00      	cmp	r3, #0
    d8ac:	d118      	bne.n	d8e0 <HandleUserInput+0x188>
    d8ae:	4b7f      	ldr	r3, [pc, #508]	; (daac <HandleUserInput+0x354>)
    d8b0:	781b      	ldrb	r3, [r3, #0]
    d8b2:	2b01      	cmp	r3, #1
    d8b4:	d114      	bne.n	d8e0 <HandleUserInput+0x188>
			check_time(&lButtonTime);
    d8b6:	4b7f      	ldr	r3, [pc, #508]	; (dab4 <HandleUserInput+0x35c>)
    d8b8:	0018      	movs	r0, r3
    d8ba:	4b80      	ldr	r3, [pc, #512]	; (dabc <HandleUserInput+0x364>)
    d8bc:	4798      	blx	r3
			ButtonDownTime = millis() - lButtonTime;  // Track time button was pressed
    d8be:	4b7c      	ldr	r3, [pc, #496]	; (dab0 <HandleUserInput+0x358>)
    d8c0:	4798      	blx	r3
    d8c2:	0002      	movs	r2, r0
    d8c4:	4b7b      	ldr	r3, [pc, #492]	; (dab4 <HandleUserInput+0x35c>)
    d8c6:	681b      	ldr	r3, [r3, #0]
    d8c8:	1ad2      	subs	r2, r2, r3
    d8ca:	4b7d      	ldr	r3, [pc, #500]	; (dac0 <HandleUserInput+0x368>)
    d8cc:	601a      	str	r2, [r3, #0]

			lButtonTime = millis();  // Mark the time of button state transition
    d8ce:	4b78      	ldr	r3, [pc, #480]	; (dab0 <HandleUserInput+0x358>)
    d8d0:	4798      	blx	r3
    d8d2:	0002      	movs	r2, r0
    d8d4:	4b77      	ldr	r3, [pc, #476]	; (dab4 <HandleUserInput+0x35c>)
    d8d6:	601a      	str	r2, [r3, #0]
			ButtonHeldTime = 0;
    d8d8:	4b7a      	ldr	r3, [pc, #488]	; (dac4 <HandleUserInput+0x36c>)
    d8da:	2200      	movs	r2, #0
    d8dc:	601a      	str	r2, [r3, #0]
    d8de:	e08a      	b.n	d9f6 <HandleUserInput+0x29e>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
    d8e0:	4b71      	ldr	r3, [pc, #452]	; (daa8 <HandleUserInput+0x350>)
    d8e2:	781b      	ldrb	r3, [r3, #0]
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	d116      	bne.n	d916 <HandleUserInput+0x1be>
    d8e8:	4b70      	ldr	r3, [pc, #448]	; (daac <HandleUserInput+0x354>)
    d8ea:	781b      	ldrb	r3, [r3, #0]
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	d112      	bne.n	d916 <HandleUserInput+0x1be>
			check_time(&lButtonTime);
    d8f0:	4b70      	ldr	r3, [pc, #448]	; (dab4 <HandleUserInput+0x35c>)
    d8f2:	0018      	movs	r0, r3
    d8f4:	4b71      	ldr	r3, [pc, #452]	; (dabc <HandleUserInput+0x364>)
    d8f6:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
    d8f8:	4b6d      	ldr	r3, [pc, #436]	; (dab0 <HandleUserInput+0x358>)
    d8fa:	4798      	blx	r3
    d8fc:	0002      	movs	r2, r0
    d8fe:	4b6d      	ldr	r3, [pc, #436]	; (dab4 <HandleUserInput+0x35c>)
    d900:	681b      	ldr	r3, [r3, #0]
    d902:	1ad2      	subs	r2, r2, r3
    d904:	4b6c      	ldr	r3, [pc, #432]	; (dab8 <HandleUserInput+0x360>)
    d906:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
    d908:	4b6d      	ldr	r3, [pc, #436]	; (dac0 <HandleUserInput+0x368>)
    d90a:	2200      	movs	r2, #0
    d90c:	601a      	str	r2, [r3, #0]
			TurnSignalOn = false;
    d90e:	4b6e      	ldr	r3, [pc, #440]	; (dac8 <HandleUserInput+0x370>)
    d910:	2200      	movs	r2, #0
    d912:	701a      	strb	r2, [r3, #0]
    d914:	e06f      	b.n	d9f6 <HandleUserInput+0x29e>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
    d916:	4b64      	ldr	r3, [pc, #400]	; (daa8 <HandleUserInput+0x350>)
    d918:	781b      	ldrb	r3, [r3, #0]
    d91a:	2b01      	cmp	r3, #1
    d91c:	d000      	beq.n	d920 <HandleUserInput+0x1c8>
    d91e:	e06a      	b.n	d9f6 <HandleUserInput+0x29e>
    d920:	4b62      	ldr	r3, [pc, #392]	; (daac <HandleUserInput+0x354>)
    d922:	781b      	ldrb	r3, [r3, #0]
    d924:	2b01      	cmp	r3, #1
    d926:	d166      	bne.n	d9f6 <HandleUserInput+0x29e>
			check_time(&lButtonTime);
    d928:	4b62      	ldr	r3, [pc, #392]	; (dab4 <HandleUserInput+0x35c>)
    d92a:	0018      	movs	r0, r3
    d92c:	4b63      	ldr	r3, [pc, #396]	; (dabc <HandleUserInput+0x364>)
    d92e:	4798      	blx	r3
			ButtonHeldTime = millis() - lButtonTime; // Track time button is not pressed
    d930:	4b5f      	ldr	r3, [pc, #380]	; (dab0 <HandleUserInput+0x358>)
    d932:	4798      	blx	r3
    d934:	0002      	movs	r2, r0
    d936:	4b5f      	ldr	r3, [pc, #380]	; (dab4 <HandleUserInput+0x35c>)
    d938:	681b      	ldr	r3, [r3, #0]
    d93a:	1ad2      	subs	r2, r2, r3
    d93c:	4b61      	ldr	r3, [pc, #388]	; (dac4 <HandleUserInput+0x36c>)
    d93e:	601a      	str	r2, [r3, #0]
    d940:	e059      	b.n	d9f6 <HandleUserInput+0x29e>
		}
	} else {
		ButtonHeldTime = 0;
    d942:	4b60      	ldr	r3, [pc, #384]	; (dac4 <HandleUserInput+0x36c>)
    d944:	2200      	movs	r2, #0
    d946:	601a      	str	r2, [r3, #0]
		if(remote_btn_state == 1 && lremote_btn_state == 0){
    d948:	4b57      	ldr	r3, [pc, #348]	; (daa8 <HandleUserInput+0x350>)
    d94a:	781b      	ldrb	r3, [r3, #0]
    d94c:	2b01      	cmp	r3, #1
    d94e:	d10f      	bne.n	d970 <HandleUserInput+0x218>
    d950:	4b56      	ldr	r3, [pc, #344]	; (daac <HandleUserInput+0x354>)
    d952:	781b      	ldrb	r3, [r3, #0]
    d954:	2b00      	cmp	r3, #0
    d956:	d10b      	bne.n	d970 <HandleUserInput+0x218>
			ButtonDownTime = 250;  // Track time button was pressed
    d958:	4b59      	ldr	r3, [pc, #356]	; (dac0 <HandleUserInput+0x368>)
    d95a:	22fa      	movs	r2, #250	; 0xfa
    d95c:	601a      	str	r2, [r3, #0]
			lButtonTime = millis(); // Mark the time of button state transition
    d95e:	4b54      	ldr	r3, [pc, #336]	; (dab0 <HandleUserInput+0x358>)
    d960:	4798      	blx	r3
    d962:	0002      	movs	r2, r0
    d964:	4b53      	ldr	r3, [pc, #332]	; (dab4 <HandleUserInput+0x35c>)
    d966:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
    d968:	4b53      	ldr	r3, [pc, #332]	; (dab8 <HandleUserInput+0x360>)
    d96a:	2200      	movs	r2, #0
    d96c:	601a      	str	r2, [r3, #0]
    d96e:	e042      	b.n	d9f6 <HandleUserInput+0x29e>
		} else if(remote_btn_state == 0 && lremote_btn_state == 1){
    d970:	4b4d      	ldr	r3, [pc, #308]	; (daa8 <HandleUserInput+0x350>)
    d972:	781b      	ldrb	r3, [r3, #0]
    d974:	2b00      	cmp	r3, #0
    d976:	d10f      	bne.n	d998 <HandleUserInput+0x240>
    d978:	4b4c      	ldr	r3, [pc, #304]	; (daac <HandleUserInput+0x354>)
    d97a:	781b      	ldrb	r3, [r3, #0]
    d97c:	2b01      	cmp	r3, #1
    d97e:	d10b      	bne.n	d998 <HandleUserInput+0x240>
			ButtonDownTime = 250;  // Track time button was pressed
    d980:	4b4f      	ldr	r3, [pc, #316]	; (dac0 <HandleUserInput+0x368>)
    d982:	22fa      	movs	r2, #250	; 0xfa
    d984:	601a      	str	r2, [r3, #0]
			lButtonTime = millis();  // Mark the time of button state transition
    d986:	4b4a      	ldr	r3, [pc, #296]	; (dab0 <HandleUserInput+0x358>)
    d988:	4798      	blx	r3
    d98a:	0002      	movs	r2, r0
    d98c:	4b49      	ldr	r3, [pc, #292]	; (dab4 <HandleUserInput+0x35c>)
    d98e:	601a      	str	r2, [r3, #0]
			ButtonUpTime = 0;
    d990:	4b49      	ldr	r3, [pc, #292]	; (dab8 <HandleUserInput+0x360>)
    d992:	2200      	movs	r2, #0
    d994:	601a      	str	r2, [r3, #0]
    d996:	e02e      	b.n	d9f6 <HandleUserInput+0x29e>
		} else if(remote_btn_state == 0 && lremote_btn_state == 0){
    d998:	4b43      	ldr	r3, [pc, #268]	; (daa8 <HandleUserInput+0x350>)
    d99a:	781b      	ldrb	r3, [r3, #0]
    d99c:	2b00      	cmp	r3, #0
    d99e:	d113      	bne.n	d9c8 <HandleUserInput+0x270>
    d9a0:	4b42      	ldr	r3, [pc, #264]	; (daac <HandleUserInput+0x354>)
    d9a2:	781b      	ldrb	r3, [r3, #0]
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d10f      	bne.n	d9c8 <HandleUserInput+0x270>
			check_time(&lButtonTime);
    d9a8:	4b42      	ldr	r3, [pc, #264]	; (dab4 <HandleUserInput+0x35c>)
    d9aa:	0018      	movs	r0, r3
    d9ac:	4b43      	ldr	r3, [pc, #268]	; (dabc <HandleUserInput+0x364>)
    d9ae:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
    d9b0:	4b3f      	ldr	r3, [pc, #252]	; (dab0 <HandleUserInput+0x358>)
    d9b2:	4798      	blx	r3
    d9b4:	0002      	movs	r2, r0
    d9b6:	4b3f      	ldr	r3, [pc, #252]	; (dab4 <HandleUserInput+0x35c>)
    d9b8:	681b      	ldr	r3, [r3, #0]
    d9ba:	1ad2      	subs	r2, r2, r3
    d9bc:	4b3e      	ldr	r3, [pc, #248]	; (dab8 <HandleUserInput+0x360>)
    d9be:	601a      	str	r2, [r3, #0]

			ButtonDownTime = 0;
    d9c0:	4b3f      	ldr	r3, [pc, #252]	; (dac0 <HandleUserInput+0x368>)
    d9c2:	2200      	movs	r2, #0
    d9c4:	601a      	str	r2, [r3, #0]
    d9c6:	e016      	b.n	d9f6 <HandleUserInput+0x29e>
		} else if(remote_btn_state == 1 && lremote_btn_state == 1){
    d9c8:	4b37      	ldr	r3, [pc, #220]	; (daa8 <HandleUserInput+0x350>)
    d9ca:	781b      	ldrb	r3, [r3, #0]
    d9cc:	2b01      	cmp	r3, #1
    d9ce:	d112      	bne.n	d9f6 <HandleUserInput+0x29e>
    d9d0:	4b36      	ldr	r3, [pc, #216]	; (daac <HandleUserInput+0x354>)
    d9d2:	781b      	ldrb	r3, [r3, #0]
    d9d4:	2b01      	cmp	r3, #1
    d9d6:	d10e      	bne.n	d9f6 <HandleUserInput+0x29e>
			check_time(&lButtonTime);
    d9d8:	4b36      	ldr	r3, [pc, #216]	; (dab4 <HandleUserInput+0x35c>)
    d9da:	0018      	movs	r0, r3
    d9dc:	4b37      	ldr	r3, [pc, #220]	; (dabc <HandleUserInput+0x364>)
    d9de:	4798      	blx	r3
			ButtonUpTime = millis() - lButtonTime; // Track time button is not pressed
    d9e0:	4b33      	ldr	r3, [pc, #204]	; (dab0 <HandleUserInput+0x358>)
    d9e2:	4798      	blx	r3
    d9e4:	0002      	movs	r2, r0
    d9e6:	4b33      	ldr	r3, [pc, #204]	; (dab4 <HandleUserInput+0x35c>)
    d9e8:	681b      	ldr	r3, [r3, #0]
    d9ea:	1ad2      	subs	r2, r2, r3
    d9ec:	4b32      	ldr	r3, [pc, #200]	; (dab8 <HandleUserInput+0x360>)
    d9ee:	601a      	str	r2, [r3, #0]
			
			ButtonDownTime = 0;
    d9f0:	4b33      	ldr	r3, [pc, #204]	; (dac0 <HandleUserInput+0x368>)
    d9f2:	2200      	movs	r2, #0
    d9f4:	601a      	str	r2, [r3, #0]
		}
	}

	////////   Determine the type of button press that occurred   ////////
	//////////////////////////////////////////////////////////////////////
	ButtonPressType = PRESS_NONE;
    d9f6:	4b35      	ldr	r3, [pc, #212]	; (dacc <HandleUserInput+0x374>)
    d9f8:	2200      	movs	r2, #0
    d9fa:	701a      	strb	r2, [r3, #0]
	if(ButtonDownTime > 0 && ButtonDownTime < 500){ // Button Tap
    d9fc:	4b30      	ldr	r3, [pc, #192]	; (dac0 <HandleUserInput+0x368>)
    d9fe:	681b      	ldr	r3, [r3, #0]
    da00:	2b00      	cmp	r3, #0
    da02:	d00c      	beq.n	da1e <HandleUserInput+0x2c6>
    da04:	4b2e      	ldr	r3, [pc, #184]	; (dac0 <HandleUserInput+0x368>)
    da06:	681a      	ldr	r2, [r3, #0]
    da08:	23f4      	movs	r3, #244	; 0xf4
    da0a:	33ff      	adds	r3, #255	; 0xff
    da0c:	429a      	cmp	r2, r3
    da0e:	d806      	bhi.n	da1e <HandleUserInput+0x2c6>
		tapIndex++;
    da10:	4b2f      	ldr	r3, [pc, #188]	; (dad0 <HandleUserInput+0x378>)
    da12:	781b      	ldrb	r3, [r3, #0]
    da14:	3301      	adds	r3, #1
    da16:	b2da      	uxtb	r2, r3
    da18:	4b2d      	ldr	r3, [pc, #180]	; (dad0 <HandleUserInput+0x378>)
    da1a:	701a      	strb	r2, [r3, #0]
    da1c:	e06b      	b.n	daf6 <HandleUserInput+0x39e>
	} else if(ButtonDownTime > 500 && ButtonDownTime < 1000 && !TurnSignalOn){ // Medium Press
    da1e:	4b28      	ldr	r3, [pc, #160]	; (dac0 <HandleUserInput+0x368>)
    da20:	681a      	ldr	r2, [r3, #0]
    da22:	23fa      	movs	r3, #250	; 0xfa
    da24:	005b      	lsls	r3, r3, #1
    da26:	429a      	cmp	r2, r3
    da28:	d956      	bls.n	dad8 <HandleUserInput+0x380>
    da2a:	4b25      	ldr	r3, [pc, #148]	; (dac0 <HandleUserInput+0x368>)
    da2c:	681b      	ldr	r3, [r3, #0]
    da2e:	4a29      	ldr	r2, [pc, #164]	; (dad4 <HandleUserInput+0x37c>)
    da30:	4293      	cmp	r3, r2
    da32:	d851      	bhi.n	dad8 <HandleUserInput+0x380>
    da34:	4b24      	ldr	r3, [pc, #144]	; (dac8 <HandleUserInput+0x370>)
    da36:	781b      	ldrb	r3, [r3, #0]
    da38:	2201      	movs	r2, #1
    da3a:	4053      	eors	r3, r2
    da3c:	b2db      	uxtb	r3, r3
    da3e:	2b00      	cmp	r3, #0
    da40:	d04a      	beq.n	dad8 <HandleUserInput+0x380>
		ButtonPressType = MEDIUM_PRESS;
    da42:	4b22      	ldr	r3, [pc, #136]	; (dacc <HandleUserInput+0x374>)
    da44:	2206      	movs	r2, #6
    da46:	701a      	strb	r2, [r3, #0]
    da48:	e055      	b.n	daf6 <HandleUserInput+0x39e>
    da4a:	46c0      	nop			; (mov r8, r8)
    da4c:	20000308 	.word	0x20000308
    da50:	0001722c 	.word	0x0001722c
    da54:	20000369 	.word	0x20000369
    da58:	20000940 	.word	0x20000940
    da5c:	00014e49 	.word	0x00014e49
    da60:	00016a85 	.word	0x00016a85
    da64:	00014f75 	.word	0x00014f75
    da68:	41222870 	.word	0x41222870
    da6c:	00015dfd 	.word	0x00015dfd
    da70:	ca397ea4 	.word	0xca397ea4
    da74:	3f265b54 	.word	0x3f265b54
    da78:	00016b29 	.word	0x00016b29
    da7c:	0001407d 	.word	0x0001407d
    da80:	000140a5 	.word	0x000140a5
    da84:	437f0000 	.word	0x437f0000
    da88:	00014121 	.word	0x00014121
    da8c:	2000030a 	.word	0x2000030a
    da90:	2000036a 	.word	0x2000036a
    da94:	20000e34 	.word	0x20000e34
    da98:	2000030b 	.word	0x2000030b
    da9c:	20000309 	.word	0x20000309
    daa0:	00017240 	.word	0x00017240
    daa4:	00008b51 	.word	0x00008b51
    daa8:	2000030c 	.word	0x2000030c
    daac:	2000030d 	.word	0x2000030d
    dab0:	0000aee1 	.word	0x0000aee1
    dab4:	20000398 	.word	0x20000398
    dab8:	20000394 	.word	0x20000394
    dabc:	0000af11 	.word	0x0000af11
    dac0:	20000390 	.word	0x20000390
    dac4:	2000038c 	.word	0x2000038c
    dac8:	2000039c 	.word	0x2000039c
    dacc:	20000387 	.word	0x20000387
    dad0:	20000389 	.word	0x20000389
    dad4:	000003e7 	.word	0x000003e7
	} else if(ButtonDownTime >= 1000 && !TurnSignalOn){ // Long Press
    dad8:	4bc3      	ldr	r3, [pc, #780]	; (dde8 <HandleUserInput+0x690>)
    dada:	681b      	ldr	r3, [r3, #0]
    dadc:	4ac3      	ldr	r2, [pc, #780]	; (ddec <HandleUserInput+0x694>)
    dade:	4293      	cmp	r3, r2
    dae0:	d909      	bls.n	daf6 <HandleUserInput+0x39e>
    dae2:	4bc3      	ldr	r3, [pc, #780]	; (ddf0 <HandleUserInput+0x698>)
    dae4:	781b      	ldrb	r3, [r3, #0]
    dae6:	2201      	movs	r2, #1
    dae8:	4053      	eors	r3, r2
    daea:	b2db      	uxtb	r3, r3
    daec:	2b00      	cmp	r3, #0
    daee:	d002      	beq.n	daf6 <HandleUserInput+0x39e>
		ButtonPressType = LONG_PRESS;
    daf0:	4bc0      	ldr	r3, [pc, #768]	; (ddf4 <HandleUserInput+0x69c>)
    daf2:	2207      	movs	r2, #7
    daf4:	701a      	strb	r2, [r3, #0]
	}
	if(tapIndex > 0 && ButtonUpTime > 200){
    daf6:	4bc0      	ldr	r3, [pc, #768]	; (ddf8 <HandleUserInput+0x6a0>)
    daf8:	781b      	ldrb	r3, [r3, #0]
    dafa:	2b00      	cmp	r3, #0
    dafc:	d006      	beq.n	db0c <HandleUserInput+0x3b4>
    dafe:	4bbf      	ldr	r3, [pc, #764]	; (ddfc <HandleUserInput+0x6a4>)
    db00:	681b      	ldr	r3, [r3, #0]
    db02:	2bc8      	cmp	r3, #200	; 0xc8
    db04:	d902      	bls.n	db0c <HandleUserInput+0x3b4>
		tapSequence = 1;
    db06:	4bbe      	ldr	r3, [pc, #760]	; (de00 <HandleUserInput+0x6a8>)
    db08:	2201      	movs	r2, #1
    db0a:	701a      	strb	r2, [r3, #0]
	}
	if(tapSequence){
    db0c:	4bbc      	ldr	r3, [pc, #752]	; (de00 <HandleUserInput+0x6a8>)
    db0e:	781b      	ldrb	r3, [r3, #0]
    db10:	2b00      	cmp	r3, #0
    db12:	d03c      	beq.n	db8e <HandleUserInput+0x436>
		if(remote_type == REMOTE_UART_DUAL && VescRemoteX <= 110 && tapIndex == 1)
    db14:	4bbb      	ldr	r3, [pc, #748]	; (de04 <HandleUserInput+0x6ac>)
    db16:	781b      	ldrb	r3, [r3, #0]
    db18:	2b03      	cmp	r3, #3
    db1a:	d10b      	bne.n	db34 <HandleUserInput+0x3dc>
    db1c:	4bba      	ldr	r3, [pc, #744]	; (de08 <HandleUserInput+0x6b0>)
    db1e:	781b      	ldrb	r3, [r3, #0]
    db20:	2b6e      	cmp	r3, #110	; 0x6e
    db22:	d807      	bhi.n	db34 <HandleUserInput+0x3dc>
    db24:	4bb4      	ldr	r3, [pc, #720]	; (ddf8 <HandleUserInput+0x6a0>)
    db26:	781b      	ldrb	r3, [r3, #0]
    db28:	2b01      	cmp	r3, #1
    db2a:	d103      	bne.n	db34 <HandleUserInput+0x3dc>
			ButtonPressType = LEFT_TAP;
    db2c:	4bb1      	ldr	r3, [pc, #708]	; (ddf4 <HandleUserInput+0x69c>)
    db2e:	2204      	movs	r2, #4
    db30:	701a      	strb	r2, [r3, #0]
    db32:	e026      	b.n	db82 <HandleUserInput+0x42a>
		else if(remote_type == REMOTE_UART_DUAL && VescRemoteX >= 150 && tapIndex == 1)
    db34:	4bb3      	ldr	r3, [pc, #716]	; (de04 <HandleUserInput+0x6ac>)
    db36:	781b      	ldrb	r3, [r3, #0]
    db38:	2b03      	cmp	r3, #3
    db3a:	d10b      	bne.n	db54 <HandleUserInput+0x3fc>
    db3c:	4bb2      	ldr	r3, [pc, #712]	; (de08 <HandleUserInput+0x6b0>)
    db3e:	781b      	ldrb	r3, [r3, #0]
    db40:	2b95      	cmp	r3, #149	; 0x95
    db42:	d907      	bls.n	db54 <HandleUserInput+0x3fc>
    db44:	4bac      	ldr	r3, [pc, #688]	; (ddf8 <HandleUserInput+0x6a0>)
    db46:	781b      	ldrb	r3, [r3, #0]
    db48:	2b01      	cmp	r3, #1
    db4a:	d103      	bne.n	db54 <HandleUserInput+0x3fc>
		ButtonPressType = RIGHT_TAP;
    db4c:	4ba9      	ldr	r3, [pc, #676]	; (ddf4 <HandleUserInput+0x69c>)
    db4e:	2205      	movs	r2, #5
    db50:	701a      	strb	r2, [r3, #0]
    db52:	e016      	b.n	db82 <HandleUserInput+0x42a>
		else if(tapIndex == 1)
    db54:	4ba8      	ldr	r3, [pc, #672]	; (ddf8 <HandleUserInput+0x6a0>)
    db56:	781b      	ldrb	r3, [r3, #0]
    db58:	2b01      	cmp	r3, #1
    db5a:	d103      	bne.n	db64 <HandleUserInput+0x40c>
			ButtonPressType = SINGLE_TAP;
    db5c:	4ba5      	ldr	r3, [pc, #660]	; (ddf4 <HandleUserInput+0x69c>)
    db5e:	2201      	movs	r2, #1
    db60:	701a      	strb	r2, [r3, #0]
    db62:	e00e      	b.n	db82 <HandleUserInput+0x42a>
		else if(tapIndex == 2)
    db64:	4ba4      	ldr	r3, [pc, #656]	; (ddf8 <HandleUserInput+0x6a0>)
    db66:	781b      	ldrb	r3, [r3, #0]
    db68:	2b02      	cmp	r3, #2
    db6a:	d103      	bne.n	db74 <HandleUserInput+0x41c>
			ButtonPressType = DOUBLE_TAP;
    db6c:	4ba1      	ldr	r3, [pc, #644]	; (ddf4 <HandleUserInput+0x69c>)
    db6e:	2202      	movs	r2, #2
    db70:	701a      	strb	r2, [r3, #0]
    db72:	e006      	b.n	db82 <HandleUserInput+0x42a>
		else if(tapIndex == 3)
    db74:	4ba0      	ldr	r3, [pc, #640]	; (ddf8 <HandleUserInput+0x6a0>)
    db76:	781b      	ldrb	r3, [r3, #0]
    db78:	2b03      	cmp	r3, #3
    db7a:	d102      	bne.n	db82 <HandleUserInput+0x42a>
			ButtonPressType = TRIPLE_TAP;
    db7c:	4b9d      	ldr	r3, [pc, #628]	; (ddf4 <HandleUserInput+0x69c>)
    db7e:	2203      	movs	r2, #3
    db80:	701a      	strb	r2, [r3, #0]
		
		tapSequence = 0;
    db82:	4b9f      	ldr	r3, [pc, #636]	; (de00 <HandleUserInput+0x6a8>)
    db84:	2200      	movs	r2, #0
    db86:	701a      	strb	r2, [r3, #0]
		tapIndex = 0;
    db88:	4b9b      	ldr	r3, [pc, #620]	; (ddf8 <HandleUserInput+0x6a0>)
    db8a:	2200      	movs	r2, #0
    db8c:	701a      	strb	r2, [r3, #0]
	}
	
	//////////////////////   Handle the aux output   /////////////////////
	//////////////////////////////////////////////////////////////////////
	if(AUX_ENABLED){
    db8e:	4b9f      	ldr	r3, [pc, #636]	; (de0c <HandleUserInput+0x6b4>)
    db90:	781b      	ldrb	r3, [r3, #0]
    db92:	2b00      	cmp	r3, #0
    db94:	d100      	bne.n	db98 <HandleUserInput+0x440>
    db96:	e09f      	b.n	dcd8 <HandleUserInput+0x580>
		switch(auxControlType){
    db98:	4b9d      	ldr	r3, [pc, #628]	; (de10 <HandleUserInput+0x6b8>)
    db9a:	781b      	ldrb	r3, [r3, #0]
    db9c:	2b01      	cmp	r3, #1
    db9e:	d014      	beq.n	dbca <HandleUserInput+0x472>
    dba0:	dc02      	bgt.n	dba8 <HandleUserInput+0x450>
    dba2:	2b00      	cmp	r3, #0
    dba4:	d003      	beq.n	dbae <HandleUserInput+0x456>
    dba6:	e06b      	b.n	dc80 <HandleUserInput+0x528>
    dba8:	2b02      	cmp	r3, #2
    dbaa:	d031      	beq.n	dc10 <HandleUserInput+0x4b8>
				check_time(&AuxOnTime);
				if(AUX_OUTPUT == true && ((millis() - AuxOnTime) >= (auxTimedDuration * 100)))
					AUX_OUTPUT = false;
				break;
			case AUX_PATTERN:
				break;
    dbac:	e068      	b.n	dc80 <HandleUserInput+0x528>
				if(ButtonHeldTime > 500){
    dbae:	4b99      	ldr	r3, [pc, #612]	; (de14 <HandleUserInput+0x6bc>)
    dbb0:	681a      	ldr	r2, [r3, #0]
    dbb2:	23fa      	movs	r3, #250	; 0xfa
    dbb4:	005b      	lsls	r3, r3, #1
    dbb6:	429a      	cmp	r2, r3
    dbb8:	d903      	bls.n	dbc2 <HandleUserInput+0x46a>
					AUX_OUTPUT = true;
    dbba:	4b97      	ldr	r3, [pc, #604]	; (de18 <HandleUserInput+0x6c0>)
    dbbc:	2201      	movs	r2, #1
    dbbe:	701a      	strb	r2, [r3, #0]
				break;
    dbc0:	e05e      	b.n	dc80 <HandleUserInput+0x528>
					AUX_OUTPUT = false;
    dbc2:	4b95      	ldr	r3, [pc, #596]	; (de18 <HandleUserInput+0x6c0>)
    dbc4:	2200      	movs	r2, #0
    dbc6:	701a      	strb	r2, [r3, #0]
				break;
    dbc8:	e05a      	b.n	dc80 <HandleUserInput+0x528>
				if((remote_type != REMOTE_UART_DUAL && single_aux_control == ButtonPressType)
    dbca:	4b8e      	ldr	r3, [pc, #568]	; (de04 <HandleUserInput+0x6ac>)
    dbcc:	781b      	ldrb	r3, [r3, #0]
    dbce:	2b03      	cmp	r3, #3
    dbd0:	d005      	beq.n	dbde <HandleUserInput+0x486>
    dbd2:	4b92      	ldr	r3, [pc, #584]	; (de1c <HandleUserInput+0x6c4>)
    dbd4:	781a      	ldrb	r2, [r3, #0]
    dbd6:	4b87      	ldr	r3, [pc, #540]	; (ddf4 <HandleUserInput+0x69c>)
    dbd8:	781b      	ldrb	r3, [r3, #0]
    dbda:	429a      	cmp	r2, r3
    dbdc:	d009      	beq.n	dbf2 <HandleUserInput+0x49a>
					|| (remote_type == REMOTE_UART_DUAL && dual_aux_control == ButtonPressType)) {
    dbde:	4b89      	ldr	r3, [pc, #548]	; (de04 <HandleUserInput+0x6ac>)
    dbe0:	781b      	ldrb	r3, [r3, #0]
    dbe2:	2b03      	cmp	r3, #3
    dbe4:	d149      	bne.n	dc7a <HandleUserInput+0x522>
    dbe6:	4b8e      	ldr	r3, [pc, #568]	; (de20 <HandleUserInput+0x6c8>)
    dbe8:	781a      	ldrb	r2, [r3, #0]
    dbea:	4b82      	ldr	r3, [pc, #520]	; (ddf4 <HandleUserInput+0x69c>)
    dbec:	781b      	ldrb	r3, [r3, #0]
    dbee:	429a      	cmp	r2, r3
    dbf0:	d143      	bne.n	dc7a <HandleUserInput+0x522>
					AUX_OUTPUT = !AUX_OUTPUT;
    dbf2:	4b89      	ldr	r3, [pc, #548]	; (de18 <HandleUserInput+0x6c0>)
    dbf4:	781b      	ldrb	r3, [r3, #0]
    dbf6:	1e5a      	subs	r2, r3, #1
    dbf8:	4193      	sbcs	r3, r2
    dbfa:	b2db      	uxtb	r3, r3
    dbfc:	2201      	movs	r2, #1
    dbfe:	4053      	eors	r3, r2
    dc00:	b2db      	uxtb	r3, r3
    dc02:	1c1a      	adds	r2, r3, #0
    dc04:	2301      	movs	r3, #1
    dc06:	4013      	ands	r3, r2
    dc08:	b2da      	uxtb	r2, r3
    dc0a:	4b83      	ldr	r3, [pc, #524]	; (de18 <HandleUserInput+0x6c0>)
    dc0c:	701a      	strb	r2, [r3, #0]
				break;
    dc0e:	e034      	b.n	dc7a <HandleUserInput+0x522>
				if((remote_type != REMOTE_UART_DUAL && single_aux_control == ButtonPressType)
    dc10:	4b7c      	ldr	r3, [pc, #496]	; (de04 <HandleUserInput+0x6ac>)
    dc12:	781b      	ldrb	r3, [r3, #0]
    dc14:	2b03      	cmp	r3, #3
    dc16:	d005      	beq.n	dc24 <HandleUserInput+0x4cc>
    dc18:	4b80      	ldr	r3, [pc, #512]	; (de1c <HandleUserInput+0x6c4>)
    dc1a:	781a      	ldrb	r2, [r3, #0]
    dc1c:	4b75      	ldr	r3, [pc, #468]	; (ddf4 <HandleUserInput+0x69c>)
    dc1e:	781b      	ldrb	r3, [r3, #0]
    dc20:	429a      	cmp	r2, r3
    dc22:	d009      	beq.n	dc38 <HandleUserInput+0x4e0>
					|| (remote_type == REMOTE_UART_DUAL && dual_aux_control == ButtonPressType)) {
    dc24:	4b77      	ldr	r3, [pc, #476]	; (de04 <HandleUserInput+0x6ac>)
    dc26:	781b      	ldrb	r3, [r3, #0]
    dc28:	2b03      	cmp	r3, #3
    dc2a:	d10d      	bne.n	dc48 <HandleUserInput+0x4f0>
    dc2c:	4b7c      	ldr	r3, [pc, #496]	; (de20 <HandleUserInput+0x6c8>)
    dc2e:	781a      	ldrb	r2, [r3, #0]
    dc30:	4b70      	ldr	r3, [pc, #448]	; (ddf4 <HandleUserInput+0x69c>)
    dc32:	781b      	ldrb	r3, [r3, #0]
    dc34:	429a      	cmp	r2, r3
    dc36:	d107      	bne.n	dc48 <HandleUserInput+0x4f0>
					AUX_OUTPUT = true;
    dc38:	4b77      	ldr	r3, [pc, #476]	; (de18 <HandleUserInput+0x6c0>)
    dc3a:	2201      	movs	r2, #1
    dc3c:	701a      	strb	r2, [r3, #0]
					AuxOnTime = millis();
    dc3e:	4b79      	ldr	r3, [pc, #484]	; (de24 <HandleUserInput+0x6cc>)
    dc40:	4798      	blx	r3
    dc42:	0002      	movs	r2, r0
    dc44:	4b78      	ldr	r3, [pc, #480]	; (de28 <HandleUserInput+0x6d0>)
    dc46:	601a      	str	r2, [r3, #0]
				check_time(&AuxOnTime);
    dc48:	4b77      	ldr	r3, [pc, #476]	; (de28 <HandleUserInput+0x6d0>)
    dc4a:	0018      	movs	r0, r3
    dc4c:	4b77      	ldr	r3, [pc, #476]	; (de2c <HandleUserInput+0x6d4>)
    dc4e:	4798      	blx	r3
				if(AUX_OUTPUT == true && ((millis() - AuxOnTime) >= (auxTimedDuration * 100)))
    dc50:	4b71      	ldr	r3, [pc, #452]	; (de18 <HandleUserInput+0x6c0>)
    dc52:	781b      	ldrb	r3, [r3, #0]
    dc54:	2b00      	cmp	r3, #0
    dc56:	d012      	beq.n	dc7e <HandleUserInput+0x526>
    dc58:	4b72      	ldr	r3, [pc, #456]	; (de24 <HandleUserInput+0x6cc>)
    dc5a:	4798      	blx	r3
    dc5c:	0002      	movs	r2, r0
    dc5e:	4b72      	ldr	r3, [pc, #456]	; (de28 <HandleUserInput+0x6d0>)
    dc60:	681b      	ldr	r3, [r3, #0]
    dc62:	1ad3      	subs	r3, r2, r3
    dc64:	4a72      	ldr	r2, [pc, #456]	; (de30 <HandleUserInput+0x6d8>)
    dc66:	7812      	ldrb	r2, [r2, #0]
    dc68:	0011      	movs	r1, r2
    dc6a:	2264      	movs	r2, #100	; 0x64
    dc6c:	434a      	muls	r2, r1
    dc6e:	4293      	cmp	r3, r2
    dc70:	d305      	bcc.n	dc7e <HandleUserInput+0x526>
					AUX_OUTPUT = false;
    dc72:	4b69      	ldr	r3, [pc, #420]	; (de18 <HandleUserInput+0x6c0>)
    dc74:	2200      	movs	r2, #0
    dc76:	701a      	strb	r2, [r3, #0]
				break;
    dc78:	e001      	b.n	dc7e <HandleUserInput+0x526>
				break;
    dc7a:	46c0      	nop			; (mov r8, r8)
    dc7c:	e000      	b.n	dc80 <HandleUserInput+0x528>
				break;
    dc7e:	46c0      	nop			; (mov r8, r8)
		}

		if(AppAuxButton == 1 && lAppAuxButton == 0) {
    dc80:	4b6c      	ldr	r3, [pc, #432]	; (de34 <HandleUserInput+0x6dc>)
    dc82:	781b      	ldrb	r3, [r3, #0]
    dc84:	2b01      	cmp	r3, #1
    dc86:	d107      	bne.n	dc98 <HandleUserInput+0x540>
    dc88:	4b6b      	ldr	r3, [pc, #428]	; (de38 <HandleUserInput+0x6e0>)
    dc8a:	781b      	ldrb	r3, [r3, #0]
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	d103      	bne.n	dc98 <HandleUserInput+0x540>
			AUX_OUTPUT = true;
    dc90:	4b61      	ldr	r3, [pc, #388]	; (de18 <HandleUserInput+0x6c0>)
    dc92:	2201      	movs	r2, #1
    dc94:	701a      	strb	r2, [r3, #0]
    dc96:	e00a      	b.n	dcae <HandleUserInput+0x556>
		} else if(AppAuxButton == 0 && lAppAuxButton == 1){
    dc98:	4b66      	ldr	r3, [pc, #408]	; (de34 <HandleUserInput+0x6dc>)
    dc9a:	781b      	ldrb	r3, [r3, #0]
    dc9c:	2b00      	cmp	r3, #0
    dc9e:	d106      	bne.n	dcae <HandleUserInput+0x556>
    dca0:	4b65      	ldr	r3, [pc, #404]	; (de38 <HandleUserInput+0x6e0>)
    dca2:	781b      	ldrb	r3, [r3, #0]
    dca4:	2b01      	cmp	r3, #1
    dca6:	d102      	bne.n	dcae <HandleUserInput+0x556>
			AUX_OUTPUT = false;
    dca8:	4b5b      	ldr	r3, [pc, #364]	; (de18 <HandleUserInput+0x6c0>)
    dcaa:	2200      	movs	r2, #0
    dcac:	701a      	strb	r2, [r3, #0]
		}
		lAppAuxButton = AppAuxButton;
    dcae:	4b61      	ldr	r3, [pc, #388]	; (de34 <HandleUserInput+0x6dc>)
    dcb0:	781a      	ldrb	r2, [r3, #0]
    dcb2:	4b61      	ldr	r3, [pc, #388]	; (de38 <HandleUserInput+0x6e0>)
    dcb4:	701a      	strb	r2, [r3, #0]

		port_pin_set_output_level(AUX_PIN, !AUX_OUTPUT);
    dcb6:	4b58      	ldr	r3, [pc, #352]	; (de18 <HandleUserInput+0x6c0>)
    dcb8:	781b      	ldrb	r3, [r3, #0]
    dcba:	1e5a      	subs	r2, r3, #1
    dcbc:	4193      	sbcs	r3, r2
    dcbe:	b2db      	uxtb	r3, r3
    dcc0:	2201      	movs	r2, #1
    dcc2:	4053      	eors	r3, r2
    dcc4:	b2db      	uxtb	r3, r3
    dcc6:	1c1a      	adds	r2, r3, #0
    dcc8:	2301      	movs	r3, #1
    dcca:	4013      	ands	r3, r2
    dccc:	b2db      	uxtb	r3, r3
    dcce:	0019      	movs	r1, r3
    dcd0:	2008      	movs	r0, #8
    dcd2:	4b5a      	ldr	r3, [pc, #360]	; (de3c <HandleUserInput+0x6e4>)
    dcd4:	4798      	blx	r3
    dcd6:	e003      	b.n	dce0 <HandleUserInput+0x588>
	}
	else{
		port_pin_set_output_level(AUX_PIN, true);
    dcd8:	2101      	movs	r1, #1
    dcda:	2008      	movs	r0, #8
    dcdc:	4b57      	ldr	r3, [pc, #348]	; (de3c <HandleUserInput+0x6e4>)
    dcde:	4798      	blx	r3
	}

	/////////////   Handle the side, head, and tail lights   /////////////
	//////////////////////////////////////////////////////////////////////
	if(ButtonPressType != PRESS_NONE){
    dce0:	4b44      	ldr	r3, [pc, #272]	; (ddf4 <HandleUserInput+0x69c>)
    dce2:	781b      	ldrb	r3, [r3, #0]
    dce4:	2b00      	cmp	r3, #0
    dce6:	d100      	bne.n	dcea <HandleUserInput+0x592>
    dce8:	e1a5      	b.n	e036 <HandleUserInput+0x8de>
		if(remote_type != REMOTE_UART_DUAL){ // If single axis remote is connected
    dcea:	4b46      	ldr	r3, [pc, #280]	; (de04 <HandleUserInput+0x6ac>)
    dcec:	781b      	ldrb	r3, [r3, #0]
    dcee:	2b03      	cmp	r3, #3
    dcf0:	d100      	bne.n	dcf4 <HandleUserInput+0x59c>
    dcf2:	e0cc      	b.n	de8e <HandleUserInput+0x736>
			if(single_all_control == ButtonPressType){
    dcf4:	4b52      	ldr	r3, [pc, #328]	; (de40 <HandleUserInput+0x6e8>)
    dcf6:	781a      	ldrb	r2, [r3, #0]
    dcf8:	4b3e      	ldr	r3, [pc, #248]	; (ddf4 <HandleUserInput+0x69c>)
    dcfa:	781b      	ldrb	r3, [r3, #0]
    dcfc:	429a      	cmp	r2, r3
    dcfe:	d108      	bne.n	dd12 <HandleUserInput+0x5ba>
				LIGHTS_ON = !LIGHTS_ON;
    dd00:	4b50      	ldr	r3, [pc, #320]	; (de44 <HandleUserInput+0x6ec>)
    dd02:	781b      	ldrb	r3, [r3, #0]
    dd04:	425a      	negs	r2, r3
    dd06:	4153      	adcs	r3, r2
    dd08:	b2db      	uxtb	r3, r3
    dd0a:	001a      	movs	r2, r3
    dd0c:	4b4d      	ldr	r3, [pc, #308]	; (de44 <HandleUserInput+0x6ec>)
    dd0e:	701a      	strb	r2, [r3, #0]
    dd10:	e191      	b.n	e036 <HandleUserInput+0x8de>
			}
			else if(single_head_control == ButtonPressType){
    dd12:	4b4d      	ldr	r3, [pc, #308]	; (de48 <HandleUserInput+0x6f0>)
    dd14:	781a      	ldrb	r2, [r3, #0]
    dd16:	4b37      	ldr	r3, [pc, #220]	; (ddf4 <HandleUserInput+0x69c>)
    dd18:	781b      	ldrb	r3, [r3, #0]
    dd1a:	429a      	cmp	r2, r3
    dd1c:	d123      	bne.n	dd66 <HandleUserInput+0x60e>
				if(!LIGHTS_ON){
    dd1e:	4b49      	ldr	r3, [pc, #292]	; (de44 <HandleUserInput+0x6ec>)
    dd20:	781b      	ldrb	r3, [r3, #0]
    dd22:	2b00      	cmp	r3, #0
    dd24:	d109      	bne.n	dd3a <HandleUserInput+0x5e2>
					HEADLIGHTS = true;
    dd26:	4b49      	ldr	r3, [pc, #292]	; (de4c <HandleUserInput+0x6f4>)
    dd28:	2201      	movs	r2, #1
    dd2a:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    dd2c:	4b48      	ldr	r3, [pc, #288]	; (de50 <HandleUserInput+0x6f8>)
    dd2e:	2200      	movs	r2, #0
    dd30:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    dd32:	4b44      	ldr	r3, [pc, #272]	; (de44 <HandleUserInput+0x6ec>)
    dd34:	2201      	movs	r2, #1
    dd36:	701a      	strb	r2, [r3, #0]
    dd38:	e17d      	b.n	e036 <HandleUserInput+0x8de>
				}

				else if(SIDELIGHTS)
    dd3a:	4b45      	ldr	r3, [pc, #276]	; (de50 <HandleUserInput+0x6f8>)
    dd3c:	781b      	ldrb	r3, [r3, #0]
    dd3e:	2b00      	cmp	r3, #0
    dd40:	d008      	beq.n	dd54 <HandleUserInput+0x5fc>
				HEADLIGHTS = !HEADLIGHTS;
    dd42:	4b42      	ldr	r3, [pc, #264]	; (de4c <HandleUserInput+0x6f4>)
    dd44:	781b      	ldrb	r3, [r3, #0]
    dd46:	425a      	negs	r2, r3
    dd48:	4153      	adcs	r3, r2
    dd4a:	b2db      	uxtb	r3, r3
    dd4c:	001a      	movs	r2, r3
    dd4e:	4b3f      	ldr	r3, [pc, #252]	; (de4c <HandleUserInput+0x6f4>)
    dd50:	701a      	strb	r2, [r3, #0]
    dd52:	e170      	b.n	e036 <HandleUserInput+0x8de>
				else
				LIGHTS_ON = !LIGHTS_ON;
    dd54:	4b3b      	ldr	r3, [pc, #236]	; (de44 <HandleUserInput+0x6ec>)
    dd56:	781b      	ldrb	r3, [r3, #0]
    dd58:	425a      	negs	r2, r3
    dd5a:	4153      	adcs	r3, r2
    dd5c:	b2db      	uxtb	r3, r3
    dd5e:	001a      	movs	r2, r3
    dd60:	4b38      	ldr	r3, [pc, #224]	; (de44 <HandleUserInput+0x6ec>)
    dd62:	701a      	strb	r2, [r3, #0]
    dd64:	e167      	b.n	e036 <HandleUserInput+0x8de>
			}
			else if(single_side_control == ButtonPressType){
    dd66:	4b3b      	ldr	r3, [pc, #236]	; (de54 <HandleUserInput+0x6fc>)
    dd68:	781a      	ldrb	r2, [r3, #0]
    dd6a:	4b22      	ldr	r3, [pc, #136]	; (ddf4 <HandleUserInput+0x69c>)
    dd6c:	781b      	ldrb	r3, [r3, #0]
    dd6e:	429a      	cmp	r2, r3
    dd70:	d123      	bne.n	ddba <HandleUserInput+0x662>
				if(!LIGHTS_ON){
    dd72:	4b34      	ldr	r3, [pc, #208]	; (de44 <HandleUserInput+0x6ec>)
    dd74:	781b      	ldrb	r3, [r3, #0]
    dd76:	2b00      	cmp	r3, #0
    dd78:	d109      	bne.n	dd8e <HandleUserInput+0x636>
					HEADLIGHTS = false;
    dd7a:	4b34      	ldr	r3, [pc, #208]	; (de4c <HandleUserInput+0x6f4>)
    dd7c:	2200      	movs	r2, #0
    dd7e:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = true;
    dd80:	4b33      	ldr	r3, [pc, #204]	; (de50 <HandleUserInput+0x6f8>)
    dd82:	2201      	movs	r2, #1
    dd84:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    dd86:	4b2f      	ldr	r3, [pc, #188]	; (de44 <HandleUserInput+0x6ec>)
    dd88:	2201      	movs	r2, #1
    dd8a:	701a      	strb	r2, [r3, #0]
    dd8c:	e153      	b.n	e036 <HandleUserInput+0x8de>
				}
				else if(HEADLIGHTS)
    dd8e:	4b2f      	ldr	r3, [pc, #188]	; (de4c <HandleUserInput+0x6f4>)
    dd90:	781b      	ldrb	r3, [r3, #0]
    dd92:	2b00      	cmp	r3, #0
    dd94:	d008      	beq.n	dda8 <HandleUserInput+0x650>
				SIDELIGHTS = !SIDELIGHTS;
    dd96:	4b2e      	ldr	r3, [pc, #184]	; (de50 <HandleUserInput+0x6f8>)
    dd98:	781b      	ldrb	r3, [r3, #0]
    dd9a:	425a      	negs	r2, r3
    dd9c:	4153      	adcs	r3, r2
    dd9e:	b2db      	uxtb	r3, r3
    dda0:	001a      	movs	r2, r3
    dda2:	4b2b      	ldr	r3, [pc, #172]	; (de50 <HandleUserInput+0x6f8>)
    dda4:	701a      	strb	r2, [r3, #0]
    dda6:	e146      	b.n	e036 <HandleUserInput+0x8de>
				else
				LIGHTS_ON = !LIGHTS_ON;
    dda8:	4b26      	ldr	r3, [pc, #152]	; (de44 <HandleUserInput+0x6ec>)
    ddaa:	781b      	ldrb	r3, [r3, #0]
    ddac:	425a      	negs	r2, r3
    ddae:	4153      	adcs	r3, r2
    ddb0:	b2db      	uxtb	r3, r3
    ddb2:	001a      	movs	r2, r3
    ddb4:	4b23      	ldr	r3, [pc, #140]	; (de44 <HandleUserInput+0x6ec>)
    ddb6:	701a      	strb	r2, [r3, #0]
    ddb8:	e13d      	b.n	e036 <HandleUserInput+0x8de>
			}
			else if(single_down_control == ButtonPressType){
    ddba:	4b27      	ldr	r3, [pc, #156]	; (de58 <HandleUserInput+0x700>)
    ddbc:	781a      	ldrb	r2, [r3, #0]
    ddbe:	4b0d      	ldr	r3, [pc, #52]	; (ddf4 <HandleUserInput+0x69c>)
    ddc0:	781b      	ldrb	r3, [r3, #0]
    ddc2:	429a      	cmp	r2, r3
    ddc4:	d14c      	bne.n	de60 <HandleUserInput+0x708>
				if(light_mode == 0)
    ddc6:	4b25      	ldr	r3, [pc, #148]	; (de5c <HandleUserInput+0x704>)
    ddc8:	781b      	ldrb	r3, [r3, #0]
    ddca:	2b00      	cmp	r3, #0
    ddcc:	d105      	bne.n	ddda <HandleUserInput+0x682>
					light_mode = light_modes - 1;
    ddce:	2309      	movs	r3, #9
    ddd0:	3b01      	subs	r3, #1
    ddd2:	b2da      	uxtb	r2, r3
    ddd4:	4b21      	ldr	r3, [pc, #132]	; (de5c <HandleUserInput+0x704>)
    ddd6:	701a      	strb	r2, [r3, #0]
    ddd8:	e12d      	b.n	e036 <HandleUserInput+0x8de>
				else
					light_mode--;
    ddda:	4b20      	ldr	r3, [pc, #128]	; (de5c <HandleUserInput+0x704>)
    dddc:	781b      	ldrb	r3, [r3, #0]
    ddde:	3b01      	subs	r3, #1
    dde0:	b2da      	uxtb	r2, r3
    dde2:	4b1e      	ldr	r3, [pc, #120]	; (de5c <HandleUserInput+0x704>)
    dde4:	701a      	strb	r2, [r3, #0]
    dde6:	e126      	b.n	e036 <HandleUserInput+0x8de>
    dde8:	20000390 	.word	0x20000390
    ddec:	000003e7 	.word	0x000003e7
    ddf0:	2000039c 	.word	0x2000039c
    ddf4:	20000387 	.word	0x20000387
    ddf8:	20000389 	.word	0x20000389
    ddfc:	20000394 	.word	0x20000394
    de00:	20000388 	.word	0x20000388
    de04:	20000308 	.word	0x20000308
    de08:	20000372 	.word	0x20000372
    de0c:	20000374 	.word	0x20000374
    de10:	20000377 	.word	0x20000377
    de14:	2000038c 	.word	0x2000038c
    de18:	20000376 	.word	0x20000376
    de1c:	20000379 	.word	0x20000379
    de20:	2000037f 	.word	0x2000037f
    de24:	0000aee1 	.word	0x0000aee1
    de28:	200003a0 	.word	0x200003a0
    de2c:	0000af11 	.word	0x0000af11
    de30:	20000378 	.word	0x20000378
    de34:	20000385 	.word	0x20000385
    de38:	20000386 	.word	0x20000386
    de3c:	00008b95 	.word	0x00008b95
    de40:	2000037a 	.word	0x2000037a
    de44:	200000a3 	.word	0x200000a3
    de48:	2000037b 	.word	0x2000037b
    de4c:	20000322 	.word	0x20000322
    de50:	200000a2 	.word	0x200000a2
    de54:	2000037c 	.word	0x2000037c
    de58:	2000037e 	.word	0x2000037e
    de5c:	2000001b 	.word	0x2000001b
			}
			else if(single_up_control == ButtonPressType){
    de60:	4b79      	ldr	r3, [pc, #484]	; (e048 <HandleUserInput+0x8f0>)
    de62:	781a      	ldrb	r2, [r3, #0]
    de64:	4b79      	ldr	r3, [pc, #484]	; (e04c <HandleUserInput+0x8f4>)
    de66:	781b      	ldrb	r3, [r3, #0]
    de68:	429a      	cmp	r2, r3
    de6a:	d000      	beq.n	de6e <HandleUserInput+0x716>
    de6c:	e0e3      	b.n	e036 <HandleUserInput+0x8de>
				light_mode++;
    de6e:	4b78      	ldr	r3, [pc, #480]	; (e050 <HandleUserInput+0x8f8>)
    de70:	781b      	ldrb	r3, [r3, #0]
    de72:	3301      	adds	r3, #1
    de74:	b2da      	uxtb	r2, r3
    de76:	4b76      	ldr	r3, [pc, #472]	; (e050 <HandleUserInput+0x8f8>)
    de78:	701a      	strb	r2, [r3, #0]
				if(light_mode >= light_modes)
    de7a:	4b75      	ldr	r3, [pc, #468]	; (e050 <HandleUserInput+0x8f8>)
    de7c:	781b      	ldrb	r3, [r3, #0]
    de7e:	2209      	movs	r2, #9
    de80:	4293      	cmp	r3, r2
    de82:	d200      	bcs.n	de86 <HandleUserInput+0x72e>
    de84:	e0d7      	b.n	e036 <HandleUserInput+0x8de>
					light_mode = 0;
    de86:	4b72      	ldr	r3, [pc, #456]	; (e050 <HandleUserInput+0x8f8>)
    de88:	2200      	movs	r2, #0
    de8a:	701a      	strb	r2, [r3, #0]
    de8c:	e0d3      	b.n	e036 <HandleUserInput+0x8de>
			}
		}
		else if(remote_type == REMOTE_UART_DUAL){ // If dual axis remote is connected
    de8e:	4b71      	ldr	r3, [pc, #452]	; (e054 <HandleUserInput+0x8fc>)
    de90:	781b      	ldrb	r3, [r3, #0]
    de92:	2b03      	cmp	r3, #3
    de94:	d000      	beq.n	de98 <HandleUserInput+0x740>
    de96:	e0ce      	b.n	e036 <HandleUserInput+0x8de>
			if(dual_all_control == ButtonPressType){
    de98:	4b6f      	ldr	r3, [pc, #444]	; (e058 <HandleUserInput+0x900>)
    de9a:	781a      	ldrb	r2, [r3, #0]
    de9c:	4b6b      	ldr	r3, [pc, #428]	; (e04c <HandleUserInput+0x8f4>)
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	429a      	cmp	r2, r3
    dea2:	d108      	bne.n	deb6 <HandleUserInput+0x75e>
				LIGHTS_ON = !LIGHTS_ON;
    dea4:	4b6d      	ldr	r3, [pc, #436]	; (e05c <HandleUserInput+0x904>)
    dea6:	781b      	ldrb	r3, [r3, #0]
    dea8:	425a      	negs	r2, r3
    deaa:	4153      	adcs	r3, r2
    deac:	b2db      	uxtb	r3, r3
    deae:	001a      	movs	r2, r3
    deb0:	4b6a      	ldr	r3, [pc, #424]	; (e05c <HandleUserInput+0x904>)
    deb2:	701a      	strb	r2, [r3, #0]
    deb4:	e0bf      	b.n	e036 <HandleUserInput+0x8de>
			}
			else if(dual_head_control == ButtonPressType){
    deb6:	4b6a      	ldr	r3, [pc, #424]	; (e060 <HandleUserInput+0x908>)
    deb8:	781a      	ldrb	r2, [r3, #0]
    deba:	4b64      	ldr	r3, [pc, #400]	; (e04c <HandleUserInput+0x8f4>)
    debc:	781b      	ldrb	r3, [r3, #0]
    debe:	429a      	cmp	r2, r3
    dec0:	d123      	bne.n	df0a <HandleUserInput+0x7b2>
				if(!LIGHTS_ON){
    dec2:	4b66      	ldr	r3, [pc, #408]	; (e05c <HandleUserInput+0x904>)
    dec4:	781b      	ldrb	r3, [r3, #0]
    dec6:	2b00      	cmp	r3, #0
    dec8:	d109      	bne.n	dede <HandleUserInput+0x786>
					HEADLIGHTS = true;
    deca:	4b66      	ldr	r3, [pc, #408]	; (e064 <HandleUserInput+0x90c>)
    decc:	2201      	movs	r2, #1
    dece:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    ded0:	4b65      	ldr	r3, [pc, #404]	; (e068 <HandleUserInput+0x910>)
    ded2:	2200      	movs	r2, #0
    ded4:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    ded6:	4b61      	ldr	r3, [pc, #388]	; (e05c <HandleUserInput+0x904>)
    ded8:	2201      	movs	r2, #1
    deda:	701a      	strb	r2, [r3, #0]
    dedc:	e0ab      	b.n	e036 <HandleUserInput+0x8de>
				}

				else if(SIDELIGHTS)
    dede:	4b62      	ldr	r3, [pc, #392]	; (e068 <HandleUserInput+0x910>)
    dee0:	781b      	ldrb	r3, [r3, #0]
    dee2:	2b00      	cmp	r3, #0
    dee4:	d008      	beq.n	def8 <HandleUserInput+0x7a0>
				HEADLIGHTS = !HEADLIGHTS;
    dee6:	4b5f      	ldr	r3, [pc, #380]	; (e064 <HandleUserInput+0x90c>)
    dee8:	781b      	ldrb	r3, [r3, #0]
    deea:	425a      	negs	r2, r3
    deec:	4153      	adcs	r3, r2
    deee:	b2db      	uxtb	r3, r3
    def0:	001a      	movs	r2, r3
    def2:	4b5c      	ldr	r3, [pc, #368]	; (e064 <HandleUserInput+0x90c>)
    def4:	701a      	strb	r2, [r3, #0]
    def6:	e09e      	b.n	e036 <HandleUserInput+0x8de>
				else
				LIGHTS_ON = !LIGHTS_ON;
    def8:	4b58      	ldr	r3, [pc, #352]	; (e05c <HandleUserInput+0x904>)
    defa:	781b      	ldrb	r3, [r3, #0]
    defc:	425a      	negs	r2, r3
    defe:	4153      	adcs	r3, r2
    df00:	b2db      	uxtb	r3, r3
    df02:	001a      	movs	r2, r3
    df04:	4b55      	ldr	r3, [pc, #340]	; (e05c <HandleUserInput+0x904>)
    df06:	701a      	strb	r2, [r3, #0]
    df08:	e095      	b.n	e036 <HandleUserInput+0x8de>
			}
			else if(dual_side_control == ButtonPressType){
    df0a:	4b58      	ldr	r3, [pc, #352]	; (e06c <HandleUserInput+0x914>)
    df0c:	781a      	ldrb	r2, [r3, #0]
    df0e:	4b4f      	ldr	r3, [pc, #316]	; (e04c <HandleUserInput+0x8f4>)
    df10:	781b      	ldrb	r3, [r3, #0]
    df12:	429a      	cmp	r2, r3
    df14:	d123      	bne.n	df5e <HandleUserInput+0x806>
				if(!LIGHTS_ON){
    df16:	4b51      	ldr	r3, [pc, #324]	; (e05c <HandleUserInput+0x904>)
    df18:	781b      	ldrb	r3, [r3, #0]
    df1a:	2b00      	cmp	r3, #0
    df1c:	d109      	bne.n	df32 <HandleUserInput+0x7da>
					HEADLIGHTS = false;
    df1e:	4b51      	ldr	r3, [pc, #324]	; (e064 <HandleUserInput+0x90c>)
    df20:	2200      	movs	r2, #0
    df22:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = true;
    df24:	4b50      	ldr	r3, [pc, #320]	; (e068 <HandleUserInput+0x910>)
    df26:	2201      	movs	r2, #1
    df28:	701a      	strb	r2, [r3, #0]
					LIGHTS_ON = true;
    df2a:	4b4c      	ldr	r3, [pc, #304]	; (e05c <HandleUserInput+0x904>)
    df2c:	2201      	movs	r2, #1
    df2e:	701a      	strb	r2, [r3, #0]
    df30:	e081      	b.n	e036 <HandleUserInput+0x8de>
				}
				else if(HEADLIGHTS)
    df32:	4b4c      	ldr	r3, [pc, #304]	; (e064 <HandleUserInput+0x90c>)
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	2b00      	cmp	r3, #0
    df38:	d008      	beq.n	df4c <HandleUserInput+0x7f4>
				SIDELIGHTS = !SIDELIGHTS;
    df3a:	4b4b      	ldr	r3, [pc, #300]	; (e068 <HandleUserInput+0x910>)
    df3c:	781b      	ldrb	r3, [r3, #0]
    df3e:	425a      	negs	r2, r3
    df40:	4153      	adcs	r3, r2
    df42:	b2db      	uxtb	r3, r3
    df44:	001a      	movs	r2, r3
    df46:	4b48      	ldr	r3, [pc, #288]	; (e068 <HandleUserInput+0x910>)
    df48:	701a      	strb	r2, [r3, #0]
    df4a:	e074      	b.n	e036 <HandleUserInput+0x8de>
				else
				LIGHTS_ON = !LIGHTS_ON;
    df4c:	4b43      	ldr	r3, [pc, #268]	; (e05c <HandleUserInput+0x904>)
    df4e:	781b      	ldrb	r3, [r3, #0]
    df50:	425a      	negs	r2, r3
    df52:	4153      	adcs	r3, r2
    df54:	b2db      	uxtb	r3, r3
    df56:	001a      	movs	r2, r3
    df58:	4b40      	ldr	r3, [pc, #256]	; (e05c <HandleUserInput+0x904>)
    df5a:	701a      	strb	r2, [r3, #0]
    df5c:	e06b      	b.n	e036 <HandleUserInput+0x8de>
			}
			else if(dual_down_control == ButtonPressType){
    df5e:	4b44      	ldr	r3, [pc, #272]	; (e070 <HandleUserInput+0x918>)
    df60:	781a      	ldrb	r2, [r3, #0]
    df62:	4b3a      	ldr	r3, [pc, #232]	; (e04c <HandleUserInput+0x8f4>)
    df64:	781b      	ldrb	r3, [r3, #0]
    df66:	429a      	cmp	r2, r3
    df68:	d110      	bne.n	df8c <HandleUserInput+0x834>
				if(light_mode == 0)
    df6a:	4b39      	ldr	r3, [pc, #228]	; (e050 <HandleUserInput+0x8f8>)
    df6c:	781b      	ldrb	r3, [r3, #0]
    df6e:	2b00      	cmp	r3, #0
    df70:	d105      	bne.n	df7e <HandleUserInput+0x826>
					light_mode = light_modes - 1;
    df72:	2309      	movs	r3, #9
    df74:	3b01      	subs	r3, #1
    df76:	b2da      	uxtb	r2, r3
    df78:	4b35      	ldr	r3, [pc, #212]	; (e050 <HandleUserInput+0x8f8>)
    df7a:	701a      	strb	r2, [r3, #0]
    df7c:	e05b      	b.n	e036 <HandleUserInput+0x8de>
				else
					light_mode--;
    df7e:	4b34      	ldr	r3, [pc, #208]	; (e050 <HandleUserInput+0x8f8>)
    df80:	781b      	ldrb	r3, [r3, #0]
    df82:	3b01      	subs	r3, #1
    df84:	b2da      	uxtb	r2, r3
    df86:	4b32      	ldr	r3, [pc, #200]	; (e050 <HandleUserInput+0x8f8>)
    df88:	701a      	strb	r2, [r3, #0]
    df8a:	e054      	b.n	e036 <HandleUserInput+0x8de>
			}
			else if(dual_up_control == ButtonPressType){
    df8c:	4b39      	ldr	r3, [pc, #228]	; (e074 <HandleUserInput+0x91c>)
    df8e:	781a      	ldrb	r2, [r3, #0]
    df90:	4b2e      	ldr	r3, [pc, #184]	; (e04c <HandleUserInput+0x8f4>)
    df92:	781b      	ldrb	r3, [r3, #0]
    df94:	429a      	cmp	r2, r3
    df96:	d10e      	bne.n	dfb6 <HandleUserInput+0x85e>
				light_mode++;
    df98:	4b2d      	ldr	r3, [pc, #180]	; (e050 <HandleUserInput+0x8f8>)
    df9a:	781b      	ldrb	r3, [r3, #0]
    df9c:	3301      	adds	r3, #1
    df9e:	b2da      	uxtb	r2, r3
    dfa0:	4b2b      	ldr	r3, [pc, #172]	; (e050 <HandleUserInput+0x8f8>)
    dfa2:	701a      	strb	r2, [r3, #0]
				if(light_mode >= light_modes)
    dfa4:	4b2a      	ldr	r3, [pc, #168]	; (e050 <HandleUserInput+0x8f8>)
    dfa6:	781b      	ldrb	r3, [r3, #0]
    dfa8:	2209      	movs	r2, #9
    dfaa:	4293      	cmp	r3, r2
    dfac:	d343      	bcc.n	e036 <HandleUserInput+0x8de>
					light_mode = 0;
    dfae:	4b28      	ldr	r3, [pc, #160]	; (e050 <HandleUserInput+0x8f8>)
    dfb0:	2200      	movs	r2, #0
    dfb2:	701a      	strb	r2, [r3, #0]
    dfb4:	e03f      	b.n	e036 <HandleUserInput+0x8de>
			}
			else if(TURN_ENABLED == 1 && ButtonHeldTime > 500){
    dfb6:	4b30      	ldr	r3, [pc, #192]	; (e078 <HandleUserInput+0x920>)
    dfb8:	781b      	ldrb	r3, [r3, #0]
    dfba:	2b00      	cmp	r3, #0
    dfbc:	d02f      	beq.n	e01e <HandleUserInput+0x8c6>
    dfbe:	4b2f      	ldr	r3, [pc, #188]	; (e07c <HandleUserInput+0x924>)
    dfc0:	681a      	ldr	r2, [r3, #0]
    dfc2:	23fa      	movs	r3, #250	; 0xfa
    dfc4:	005b      	lsls	r3, r3, #1
    dfc6:	429a      	cmp	r2, r3
    dfc8:	d929      	bls.n	e01e <HandleUserInput+0x8c6>
				if(VescRemoteX < 110){
    dfca:	4b2d      	ldr	r3, [pc, #180]	; (e080 <HandleUserInput+0x928>)
    dfcc:	781b      	ldrb	r3, [r3, #0]
    dfce:	2b6d      	cmp	r3, #109	; 0x6d
    dfd0:	d810      	bhi.n	dff4 <HandleUserInput+0x89c>
					if(SIDELIGHTS)
    dfd2:	4b25      	ldr	r3, [pc, #148]	; (e068 <HandleUserInput+0x910>)
    dfd4:	781b      	ldrb	r3, [r3, #0]
    dfd6:	2b00      	cmp	r3, #0
    dfd8:	d002      	beq.n	dfe0 <HandleUserInput+0x888>
						RestoreTurnLights = true;
    dfda:	4b2a      	ldr	r3, [pc, #168]	; (e084 <HandleUserInput+0x92c>)
    dfdc:	2201      	movs	r2, #1
    dfde:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    dfe0:	4b21      	ldr	r3, [pc, #132]	; (e068 <HandleUserInput+0x910>)
    dfe2:	2200      	movs	r2, #0
    dfe4:	701a      	strb	r2, [r3, #0]
				
					TurnSignalOn = true;
    dfe6:	4b28      	ldr	r3, [pc, #160]	; (e088 <HandleUserInput+0x930>)
    dfe8:	2201      	movs	r2, #1
    dfea:	701a      	strb	r2, [r3, #0]
					TurnSignal(true);
    dfec:	2001      	movs	r0, #1
    dfee:	4b27      	ldr	r3, [pc, #156]	; (e08c <HandleUserInput+0x934>)
    dff0:	4798      	blx	r3
				if(VescRemoteX < 110){
    dff2:	e01f      	b.n	e034 <HandleUserInput+0x8dc>
				}
				else if(VescRemoteX > 150){
    dff4:	4b22      	ldr	r3, [pc, #136]	; (e080 <HandleUserInput+0x928>)
    dff6:	781b      	ldrb	r3, [r3, #0]
    dff8:	2b96      	cmp	r3, #150	; 0x96
    dffa:	d91b      	bls.n	e034 <HandleUserInput+0x8dc>
					if(SIDELIGHTS)
    dffc:	4b1a      	ldr	r3, [pc, #104]	; (e068 <HandleUserInput+0x910>)
    dffe:	781b      	ldrb	r3, [r3, #0]
    e000:	2b00      	cmp	r3, #0
    e002:	d002      	beq.n	e00a <HandleUserInput+0x8b2>
						RestoreTurnLights = true;
    e004:	4b1f      	ldr	r3, [pc, #124]	; (e084 <HandleUserInput+0x92c>)
    e006:	2201      	movs	r2, #1
    e008:	701a      	strb	r2, [r3, #0]
					SIDELIGHTS = false;
    e00a:	4b17      	ldr	r3, [pc, #92]	; (e068 <HandleUserInput+0x910>)
    e00c:	2200      	movs	r2, #0
    e00e:	701a      	strb	r2, [r3, #0]

					TurnSignalOn = true;
    e010:	4b1d      	ldr	r3, [pc, #116]	; (e088 <HandleUserInput+0x930>)
    e012:	2201      	movs	r2, #1
    e014:	701a      	strb	r2, [r3, #0]
					TurnSignal(false);
    e016:	2000      	movs	r0, #0
    e018:	4b1c      	ldr	r3, [pc, #112]	; (e08c <HandleUserInput+0x934>)
    e01a:	4798      	blx	r3
				if(VescRemoteX < 110){
    e01c:	e00a      	b.n	e034 <HandleUserInput+0x8dc>
				}
			}
			else if(RestoreTurnLights){
    e01e:	4b19      	ldr	r3, [pc, #100]	; (e084 <HandleUserInput+0x92c>)
    e020:	781b      	ldrb	r3, [r3, #0]
    e022:	2b00      	cmp	r3, #0
    e024:	d007      	beq.n	e036 <HandleUserInput+0x8de>
				SIDELIGHTS = true;
    e026:	4b10      	ldr	r3, [pc, #64]	; (e068 <HandleUserInput+0x910>)
    e028:	2201      	movs	r2, #1
    e02a:	701a      	strb	r2, [r3, #0]
				RestoreTurnLights = false;
    e02c:	4b15      	ldr	r3, [pc, #84]	; (e084 <HandleUserInput+0x92c>)
    e02e:	2200      	movs	r2, #0
    e030:	701a      	strb	r2, [r3, #0]
    e032:	e000      	b.n	e036 <HandleUserInput+0x8de>
				if(VescRemoteX < 110){
    e034:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	lremote_btn_state = remote_btn_state;
    e036:	4b16      	ldr	r3, [pc, #88]	; (e090 <HandleUserInput+0x938>)
    e038:	781a      	ldrb	r2, [r3, #0]
    e03a:	4b16      	ldr	r3, [pc, #88]	; (e094 <HandleUserInput+0x93c>)
    e03c:	701a      	strb	r2, [r3, #0]
}
    e03e:	46c0      	nop			; (mov r8, r8)
    e040:	46bd      	mov	sp, r7
    e042:	b003      	add	sp, #12
    e044:	bd90      	pop	{r4, r7, pc}
    e046:	46c0      	nop			; (mov r8, r8)
    e048:	2000037d 	.word	0x2000037d
    e04c:	20000387 	.word	0x20000387
    e050:	2000001b 	.word	0x2000001b
    e054:	20000308 	.word	0x20000308
    e058:	20000380 	.word	0x20000380
    e05c:	200000a3 	.word	0x200000a3
    e060:	20000381 	.word	0x20000381
    e064:	20000322 	.word	0x20000322
    e068:	200000a2 	.word	0x200000a2
    e06c:	20000382 	.word	0x20000382
    e070:	20000384 	.word	0x20000384
    e074:	20000383 	.word	0x20000383
    e078:	20000375 	.word	0x20000375
    e07c:	2000038c 	.word	0x2000038c
    e080:	20000372 	.word	0x20000372
    e084:	2000039d 	.word	0x2000039d
    e088:	2000039c 	.word	0x2000039c
    e08c:	0000b571 	.word	0x0000b571
    e090:	2000030c 	.word	0x2000030c
    e094:	2000030d 	.word	0x2000030d

0000e098 <save_led_data>:


// EEPROM size needs to be set to 0x02


void save_led_data(){
    e098:	b590      	push	{r4, r7, lr}
    e09a:	b085      	sub	sp, #20
    e09c:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e09e:	2300      	movs	r3, #0
    e0a0:	60fb      	str	r3, [r7, #12]
    e0a2:	e005      	b.n	e0b0 <save_led_data+0x18>
		eeprom_data[0] = 0;
    e0a4:	4ba4      	ldr	r3, [pc, #656]	; (e338 <save_led_data+0x2a0>)
    e0a6:	2200      	movs	r2, #0
    e0a8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e0aa:	68fb      	ldr	r3, [r7, #12]
    e0ac:	3301      	adds	r3, #1
    e0ae:	60fb      	str	r3, [r7, #12]
    e0b0:	68fb      	ldr	r3, [r7, #12]
    e0b2:	2b3b      	cmp	r3, #59	; 0x3b
    e0b4:	ddf6      	ble.n	e0a4 <save_led_data+0xc>
	}

	eeprom_data[0] = SWITCHES;
    e0b6:	4ba1      	ldr	r3, [pc, #644]	; (e33c <save_led_data+0x2a4>)
    e0b8:	781a      	ldrb	r2, [r3, #0]
    e0ba:	4b9f      	ldr	r3, [pc, #636]	; (e338 <save_led_data+0x2a0>)
    e0bc:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = light_mode;
    e0be:	4ba0      	ldr	r3, [pc, #640]	; (e340 <save_led_data+0x2a8>)
    e0c0:	781a      	ldrb	r2, [r3, #0]
    e0c2:	4b9d      	ldr	r3, [pc, #628]	; (e338 <save_led_data+0x2a0>)
    e0c4:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = (Static_RGB.LR & 0xFF);
    e0c6:	4b9f      	ldr	r3, [pc, #636]	; (e344 <save_led_data+0x2ac>)
    e0c8:	881b      	ldrh	r3, [r3, #0]
    e0ca:	b2da      	uxtb	r2, r3
    e0cc:	4b9a      	ldr	r3, [pc, #616]	; (e338 <save_led_data+0x2a0>)
    e0ce:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (Static_RGB.LR & 0xFF00) >> 8;
    e0d0:	4b9c      	ldr	r3, [pc, #624]	; (e344 <save_led_data+0x2ac>)
    e0d2:	881b      	ldrh	r3, [r3, #0]
    e0d4:	0a1b      	lsrs	r3, r3, #8
    e0d6:	b29b      	uxth	r3, r3
    e0d8:	b2da      	uxtb	r2, r3
    e0da:	4b97      	ldr	r3, [pc, #604]	; (e338 <save_led_data+0x2a0>)
    e0dc:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (Static_RGB.LG & 0xFF);
    e0de:	4b99      	ldr	r3, [pc, #612]	; (e344 <save_led_data+0x2ac>)
    e0e0:	885b      	ldrh	r3, [r3, #2]
    e0e2:	b2da      	uxtb	r2, r3
    e0e4:	4b94      	ldr	r3, [pc, #592]	; (e338 <save_led_data+0x2a0>)
    e0e6:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Static_RGB.LG & 0xFF00) >> 8;
    e0e8:	4b96      	ldr	r3, [pc, #600]	; (e344 <save_led_data+0x2ac>)
    e0ea:	885b      	ldrh	r3, [r3, #2]
    e0ec:	0a1b      	lsrs	r3, r3, #8
    e0ee:	b29b      	uxth	r3, r3
    e0f0:	b2da      	uxtb	r2, r3
    e0f2:	4b91      	ldr	r3, [pc, #580]	; (e338 <save_led_data+0x2a0>)
    e0f4:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Static_RGB.LB & 0xFF);
    e0f6:	4b93      	ldr	r3, [pc, #588]	; (e344 <save_led_data+0x2ac>)
    e0f8:	889b      	ldrh	r3, [r3, #4]
    e0fa:	b2da      	uxtb	r2, r3
    e0fc:	4b8e      	ldr	r3, [pc, #568]	; (e338 <save_led_data+0x2a0>)
    e0fe:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Static_RGB.LB & 0xFF00) >> 8;
    e100:	4b90      	ldr	r3, [pc, #576]	; (e344 <save_led_data+0x2ac>)
    e102:	889b      	ldrh	r3, [r3, #4]
    e104:	0a1b      	lsrs	r3, r3, #8
    e106:	b29b      	uxth	r3, r3
    e108:	b2da      	uxtb	r2, r3
    e10a:	4b8b      	ldr	r3, [pc, #556]	; (e338 <save_led_data+0x2a0>)
    e10c:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Static_RGB.RR & 0xFF);
    e10e:	4b8d      	ldr	r3, [pc, #564]	; (e344 <save_led_data+0x2ac>)
    e110:	88db      	ldrh	r3, [r3, #6]
    e112:	b2da      	uxtb	r2, r3
    e114:	4b88      	ldr	r3, [pc, #544]	; (e338 <save_led_data+0x2a0>)
    e116:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Static_RGB.RR & 0xFF00) >> 8;
    e118:	4b8a      	ldr	r3, [pc, #552]	; (e344 <save_led_data+0x2ac>)
    e11a:	88db      	ldrh	r3, [r3, #6]
    e11c:	0a1b      	lsrs	r3, r3, #8
    e11e:	b29b      	uxth	r3, r3
    e120:	b2da      	uxtb	r2, r3
    e122:	4b85      	ldr	r3, [pc, #532]	; (e338 <save_led_data+0x2a0>)
    e124:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Static_RGB.RG & 0xFF);
    e126:	4b87      	ldr	r3, [pc, #540]	; (e344 <save_led_data+0x2ac>)
    e128:	891b      	ldrh	r3, [r3, #8]
    e12a:	b2da      	uxtb	r2, r3
    e12c:	4b82      	ldr	r3, [pc, #520]	; (e338 <save_led_data+0x2a0>)
    e12e:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Static_RGB.RG & 0xFF00) >> 8;
    e130:	4b84      	ldr	r3, [pc, #528]	; (e344 <save_led_data+0x2ac>)
    e132:	891b      	ldrh	r3, [r3, #8]
    e134:	0a1b      	lsrs	r3, r3, #8
    e136:	b29b      	uxth	r3, r3
    e138:	b2da      	uxtb	r2, r3
    e13a:	4b7f      	ldr	r3, [pc, #508]	; (e338 <save_led_data+0x2a0>)
    e13c:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Static_RGB.RB & 0xFF);
    e13e:	4b81      	ldr	r3, [pc, #516]	; (e344 <save_led_data+0x2ac>)
    e140:	895b      	ldrh	r3, [r3, #10]
    e142:	b2da      	uxtb	r2, r3
    e144:	4b7c      	ldr	r3, [pc, #496]	; (e338 <save_led_data+0x2a0>)
    e146:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Static_RGB.RB & 0xFF00) >> 8;
    e148:	4b7e      	ldr	r3, [pc, #504]	; (e344 <save_led_data+0x2ac>)
    e14a:	895b      	ldrh	r3, [r3, #10]
    e14c:	0a1b      	lsrs	r3, r3, #8
    e14e:	b29b      	uxth	r3, r3
    e150:	b2da      	uxtb	r2, r3
    e152:	4b79      	ldr	r3, [pc, #484]	; (e338 <save_led_data+0x2a0>)
    e154:	735a      	strb	r2, [r3, #13]
	int dataOffset = 14;
    e156:	230e      	movs	r3, #14
    e158:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 8; i++){
    e15a:	2300      	movs	r3, #0
    e15c:	60bb      	str	r3, [r7, #8]
    e15e:	e058      	b.n	e212 <save_led_data+0x17a>
		eeprom_data[dataOffset + (i*5)] = ColorBase[i];
    e160:	68ba      	ldr	r2, [r7, #8]
    e162:	0013      	movs	r3, r2
    e164:	009b      	lsls	r3, r3, #2
    e166:	189a      	adds	r2, r3, r2
    e168:	683b      	ldr	r3, [r7, #0]
    e16a:	18d3      	adds	r3, r2, r3
    e16c:	4976      	ldr	r1, [pc, #472]	; (e348 <save_led_data+0x2b0>)
    e16e:	68ba      	ldr	r2, [r7, #8]
    e170:	188a      	adds	r2, r1, r2
    e172:	7811      	ldrb	r1, [r2, #0]
    e174:	4a70      	ldr	r2, [pc, #448]	; (e338 <save_led_data+0x2a0>)
    e176:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+1] = BrightBase[i];
    e178:	68ba      	ldr	r2, [r7, #8]
    e17a:	0013      	movs	r3, r2
    e17c:	009b      	lsls	r3, r3, #2
    e17e:	189a      	adds	r2, r3, r2
    e180:	683b      	ldr	r3, [r7, #0]
    e182:	18d3      	adds	r3, r2, r3
    e184:	3301      	adds	r3, #1
    e186:	4971      	ldr	r1, [pc, #452]	; (e34c <save_led_data+0x2b4>)
    e188:	68ba      	ldr	r2, [r7, #8]
    e18a:	188a      	adds	r2, r1, r2
    e18c:	7811      	ldrb	r1, [r2, #0]
    e18e:	4a6a      	ldr	r2, [pc, #424]	; (e338 <save_led_data+0x2a0>)
    e190:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+2] = RateBase[i];
    e192:	68ba      	ldr	r2, [r7, #8]
    e194:	0013      	movs	r3, r2
    e196:	009b      	lsls	r3, r3, #2
    e198:	189a      	adds	r2, r3, r2
    e19a:	683b      	ldr	r3, [r7, #0]
    e19c:	18d3      	adds	r3, r2, r3
    e19e:	3302      	adds	r3, #2
    e1a0:	496b      	ldr	r1, [pc, #428]	; (e350 <save_led_data+0x2b8>)
    e1a2:	68ba      	ldr	r2, [r7, #8]
    e1a4:	188a      	adds	r2, r1, r2
    e1a6:	7811      	ldrb	r1, [r2, #0]
    e1a8:	4a63      	ldr	r2, [pc, #396]	; (e338 <save_led_data+0x2a0>)
    e1aa:	54d1      	strb	r1, [r2, r3]
		eeprom_data[dataOffset + (i*5)+3] = (uint8_t)(RateSens[i]*100);
    e1ac:	68ba      	ldr	r2, [r7, #8]
    e1ae:	0013      	movs	r3, r2
    e1b0:	009b      	lsls	r3, r3, #2
    e1b2:	189a      	adds	r2, r3, r2
    e1b4:	683b      	ldr	r3, [r7, #0]
    e1b6:	18d3      	adds	r3, r2, r3
    e1b8:	1cdc      	adds	r4, r3, #3
    e1ba:	4b66      	ldr	r3, [pc, #408]	; (e354 <save_led_data+0x2bc>)
    e1bc:	68ba      	ldr	r2, [r7, #8]
    e1be:	0092      	lsls	r2, r2, #2
    e1c0:	58d2      	ldr	r2, [r2, r3]
    e1c2:	4b65      	ldr	r3, [pc, #404]	; (e358 <save_led_data+0x2c0>)
    e1c4:	4965      	ldr	r1, [pc, #404]	; (e35c <save_led_data+0x2c4>)
    e1c6:	1c10      	adds	r0, r2, #0
    e1c8:	4798      	blx	r3
    e1ca:	1c03      	adds	r3, r0, #0
    e1cc:	1c1a      	adds	r2, r3, #0
    e1ce:	4b64      	ldr	r3, [pc, #400]	; (e360 <save_led_data+0x2c8>)
    e1d0:	1c10      	adds	r0, r2, #0
    e1d2:	4798      	blx	r3
    e1d4:	0003      	movs	r3, r0
    e1d6:	b2da      	uxtb	r2, r3
    e1d8:	4b57      	ldr	r3, [pc, #348]	; (e338 <save_led_data+0x2a0>)
    e1da:	551a      	strb	r2, [r3, r4]
		eeprom_data[dataOffset + (i*5)+4] = (uint8_t)(Brightness[i]*100);
    e1dc:	68ba      	ldr	r2, [r7, #8]
    e1de:	0013      	movs	r3, r2
    e1e0:	009b      	lsls	r3, r3, #2
    e1e2:	189a      	adds	r2, r3, r2
    e1e4:	683b      	ldr	r3, [r7, #0]
    e1e6:	18d3      	adds	r3, r2, r3
    e1e8:	1d1c      	adds	r4, r3, #4
    e1ea:	4b5e      	ldr	r3, [pc, #376]	; (e364 <save_led_data+0x2cc>)
    e1ec:	68ba      	ldr	r2, [r7, #8]
    e1ee:	0092      	lsls	r2, r2, #2
    e1f0:	58d2      	ldr	r2, [r2, r3]
    e1f2:	4b59      	ldr	r3, [pc, #356]	; (e358 <save_led_data+0x2c0>)
    e1f4:	4959      	ldr	r1, [pc, #356]	; (e35c <save_led_data+0x2c4>)
    e1f6:	1c10      	adds	r0, r2, #0
    e1f8:	4798      	blx	r3
    e1fa:	1c03      	adds	r3, r0, #0
    e1fc:	1c1a      	adds	r2, r3, #0
    e1fe:	4b58      	ldr	r3, [pc, #352]	; (e360 <save_led_data+0x2c8>)
    e200:	1c10      	adds	r0, r2, #0
    e202:	4798      	blx	r3
    e204:	0003      	movs	r3, r0
    e206:	b2da      	uxtb	r2, r3
    e208:	4b4b      	ldr	r3, [pc, #300]	; (e338 <save_led_data+0x2a0>)
    e20a:	551a      	strb	r2, [r3, r4]
	for(int i = 0; i < 8; i++){
    e20c:	68bb      	ldr	r3, [r7, #8]
    e20e:	3301      	adds	r3, #1
    e210:	60bb      	str	r3, [r7, #8]
    e212:	68bb      	ldr	r3, [r7, #8]
    e214:	2b07      	cmp	r3, #7
    e216:	dda3      	ble.n	e160 <save_led_data+0xc8>
	}

	eeprom_emulator_write_page(0, eeprom_data);
    e218:	4b47      	ldr	r3, [pc, #284]	; (e338 <save_led_data+0x2a0>)
    e21a:	0019      	movs	r1, r3
    e21c:	2000      	movs	r0, #0
    e21e:	4b52      	ldr	r3, [pc, #328]	; (e368 <save_led_data+0x2d0>)
    e220:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    e222:	4b52      	ldr	r3, [pc, #328]	; (e36c <save_led_data+0x2d4>)
    e224:	4798      	blx	r3

	
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e226:	2300      	movs	r3, #0
    e228:	607b      	str	r3, [r7, #4]
    e22a:	e005      	b.n	e238 <save_led_data+0x1a0>
		eeprom_data[0] = 0;
    e22c:	4b42      	ldr	r3, [pc, #264]	; (e338 <save_led_data+0x2a0>)
    e22e:	2200      	movs	r2, #0
    e230:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e232:	687b      	ldr	r3, [r7, #4]
    e234:	3301      	adds	r3, #1
    e236:	607b      	str	r3, [r7, #4]
    e238:	687b      	ldr	r3, [r7, #4]
    e23a:	2b3b      	cmp	r3, #59	; 0x3b
    e23c:	ddf6      	ble.n	e22c <save_led_data+0x194>
	}
	
	eeprom_data[0] = ColorBase[8];
    e23e:	4b42      	ldr	r3, [pc, #264]	; (e348 <save_led_data+0x2b0>)
    e240:	7a1a      	ldrb	r2, [r3, #8]
    e242:	4b3d      	ldr	r3, [pc, #244]	; (e338 <save_led_data+0x2a0>)
    e244:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = BrightBase[8];
    e246:	4b41      	ldr	r3, [pc, #260]	; (e34c <save_led_data+0x2b4>)
    e248:	7a1a      	ldrb	r2, [r3, #8]
    e24a:	4b3b      	ldr	r3, [pc, #236]	; (e338 <save_led_data+0x2a0>)
    e24c:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = RateBase[8];
    e24e:	4b40      	ldr	r3, [pc, #256]	; (e350 <save_led_data+0x2b8>)
    e250:	7a1a      	ldrb	r2, [r3, #8]
    e252:	4b39      	ldr	r3, [pc, #228]	; (e338 <save_led_data+0x2a0>)
    e254:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = (uint8_t)(RateSens[8]*100);
    e256:	4b3f      	ldr	r3, [pc, #252]	; (e354 <save_led_data+0x2bc>)
    e258:	6a1a      	ldr	r2, [r3, #32]
    e25a:	4b3f      	ldr	r3, [pc, #252]	; (e358 <save_led_data+0x2c0>)
    e25c:	493f      	ldr	r1, [pc, #252]	; (e35c <save_led_data+0x2c4>)
    e25e:	1c10      	adds	r0, r2, #0
    e260:	4798      	blx	r3
    e262:	1c03      	adds	r3, r0, #0
    e264:	1c1a      	adds	r2, r3, #0
    e266:	4b3e      	ldr	r3, [pc, #248]	; (e360 <save_led_data+0x2c8>)
    e268:	1c10      	adds	r0, r2, #0
    e26a:	4798      	blx	r3
    e26c:	0003      	movs	r3, r0
    e26e:	b2da      	uxtb	r2, r3
    e270:	4b31      	ldr	r3, [pc, #196]	; (e338 <save_led_data+0x2a0>)
    e272:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = (uint8_t)(Brightness[8]*100);
    e274:	4b3b      	ldr	r3, [pc, #236]	; (e364 <save_led_data+0x2cc>)
    e276:	6a1a      	ldr	r2, [r3, #32]
    e278:	4b37      	ldr	r3, [pc, #220]	; (e358 <save_led_data+0x2c0>)
    e27a:	4938      	ldr	r1, [pc, #224]	; (e35c <save_led_data+0x2c4>)
    e27c:	1c10      	adds	r0, r2, #0
    e27e:	4798      	blx	r3
    e280:	1c03      	adds	r3, r0, #0
    e282:	1c1a      	adds	r2, r3, #0
    e284:	4b36      	ldr	r3, [pc, #216]	; (e360 <save_led_data+0x2c8>)
    e286:	1c10      	adds	r0, r2, #0
    e288:	4798      	blx	r3
    e28a:	0003      	movs	r3, r0
    e28c:	b2da      	uxtb	r2, r3
    e28e:	4b2a      	ldr	r3, [pc, #168]	; (e338 <save_led_data+0x2a0>)
    e290:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = (Custom_RGB.LR & 0xFF);
    e292:	4b37      	ldr	r3, [pc, #220]	; (e370 <save_led_data+0x2d8>)
    e294:	881b      	ldrh	r3, [r3, #0]
    e296:	b2da      	uxtb	r2, r3
    e298:	4b27      	ldr	r3, [pc, #156]	; (e338 <save_led_data+0x2a0>)
    e29a:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = (Custom_RGB.LR & 0xFF00) >> 8;
    e29c:	4b34      	ldr	r3, [pc, #208]	; (e370 <save_led_data+0x2d8>)
    e29e:	881b      	ldrh	r3, [r3, #0]
    e2a0:	0a1b      	lsrs	r3, r3, #8
    e2a2:	b29b      	uxth	r3, r3
    e2a4:	b2da      	uxtb	r2, r3
    e2a6:	4b24      	ldr	r3, [pc, #144]	; (e338 <save_led_data+0x2a0>)
    e2a8:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = (Custom_RGB.LG & 0xFF);
    e2aa:	4b31      	ldr	r3, [pc, #196]	; (e370 <save_led_data+0x2d8>)
    e2ac:	885b      	ldrh	r3, [r3, #2]
    e2ae:	b2da      	uxtb	r2, r3
    e2b0:	4b21      	ldr	r3, [pc, #132]	; (e338 <save_led_data+0x2a0>)
    e2b2:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = (Custom_RGB.LG & 0xFF00) >> 8;
    e2b4:	4b2e      	ldr	r3, [pc, #184]	; (e370 <save_led_data+0x2d8>)
    e2b6:	885b      	ldrh	r3, [r3, #2]
    e2b8:	0a1b      	lsrs	r3, r3, #8
    e2ba:	b29b      	uxth	r3, r3
    e2bc:	b2da      	uxtb	r2, r3
    e2be:	4b1e      	ldr	r3, [pc, #120]	; (e338 <save_led_data+0x2a0>)
    e2c0:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = (Custom_RGB.LB & 0xFF);
    e2c2:	4b2b      	ldr	r3, [pc, #172]	; (e370 <save_led_data+0x2d8>)
    e2c4:	889b      	ldrh	r3, [r3, #4]
    e2c6:	b2da      	uxtb	r2, r3
    e2c8:	4b1b      	ldr	r3, [pc, #108]	; (e338 <save_led_data+0x2a0>)
    e2ca:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = (Custom_RGB.LB & 0xFF00) >> 8;
    e2cc:	4b28      	ldr	r3, [pc, #160]	; (e370 <save_led_data+0x2d8>)
    e2ce:	889b      	ldrh	r3, [r3, #4]
    e2d0:	0a1b      	lsrs	r3, r3, #8
    e2d2:	b29b      	uxth	r3, r3
    e2d4:	b2da      	uxtb	r2, r3
    e2d6:	4b18      	ldr	r3, [pc, #96]	; (e338 <save_led_data+0x2a0>)
    e2d8:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = (Custom_RGB.RR & 0xFF);
    e2da:	4b25      	ldr	r3, [pc, #148]	; (e370 <save_led_data+0x2d8>)
    e2dc:	88db      	ldrh	r3, [r3, #6]
    e2de:	b2da      	uxtb	r2, r3
    e2e0:	4b15      	ldr	r3, [pc, #84]	; (e338 <save_led_data+0x2a0>)
    e2e2:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = (Custom_RGB.RR & 0xFF00) >> 8;
    e2e4:	4b22      	ldr	r3, [pc, #136]	; (e370 <save_led_data+0x2d8>)
    e2e6:	88db      	ldrh	r3, [r3, #6]
    e2e8:	0a1b      	lsrs	r3, r3, #8
    e2ea:	b29b      	uxth	r3, r3
    e2ec:	b2da      	uxtb	r2, r3
    e2ee:	4b12      	ldr	r3, [pc, #72]	; (e338 <save_led_data+0x2a0>)
    e2f0:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = (Custom_RGB.RG & 0xFF);
    e2f2:	4b1f      	ldr	r3, [pc, #124]	; (e370 <save_led_data+0x2d8>)
    e2f4:	891b      	ldrh	r3, [r3, #8]
    e2f6:	b2da      	uxtb	r2, r3
    e2f8:	4b0f      	ldr	r3, [pc, #60]	; (e338 <save_led_data+0x2a0>)
    e2fa:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = (Custom_RGB.RG & 0xFF00) >> 8;
    e2fc:	4b1c      	ldr	r3, [pc, #112]	; (e370 <save_led_data+0x2d8>)
    e2fe:	891b      	ldrh	r3, [r3, #8]
    e300:	0a1b      	lsrs	r3, r3, #8
    e302:	b29b      	uxth	r3, r3
    e304:	b2da      	uxtb	r2, r3
    e306:	4b0c      	ldr	r3, [pc, #48]	; (e338 <save_led_data+0x2a0>)
    e308:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = (Custom_RGB.RB & 0xFF);
    e30a:	4b19      	ldr	r3, [pc, #100]	; (e370 <save_led_data+0x2d8>)
    e30c:	895b      	ldrh	r3, [r3, #10]
    e30e:	b2da      	uxtb	r2, r3
    e310:	4b09      	ldr	r3, [pc, #36]	; (e338 <save_led_data+0x2a0>)
    e312:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = (Custom_RGB.RB & 0xFF00) >> 8;
    e314:	4b16      	ldr	r3, [pc, #88]	; (e370 <save_led_data+0x2d8>)
    e316:	895b      	ldrh	r3, [r3, #10]
    e318:	0a1b      	lsrs	r3, r3, #8
    e31a:	b29b      	uxth	r3, r3
    e31c:	b2da      	uxtb	r2, r3
    e31e:	4b06      	ldr	r3, [pc, #24]	; (e338 <save_led_data+0x2a0>)
    e320:	741a      	strb	r2, [r3, #16]

	eeprom_emulator_write_page(1, eeprom_data);
    e322:	4b05      	ldr	r3, [pc, #20]	; (e338 <save_led_data+0x2a0>)
    e324:	0019      	movs	r1, r3
    e326:	2001      	movs	r0, #1
    e328:	4b0f      	ldr	r3, [pc, #60]	; (e368 <save_led_data+0x2d0>)
    e32a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    e32c:	4b0f      	ldr	r3, [pc, #60]	; (e36c <save_led_data+0x2d4>)
    e32e:	4798      	blx	r3
}
    e330:	46c0      	nop			; (mov r8, r8)
    e332:	46bd      	mov	sp, r7
    e334:	b005      	add	sp, #20
    e336:	bd90      	pop	{r4, r7, pc}
    e338:	200009c8 	.word	0x200009c8
    e33c:	20000325 	.word	0x20000325
    e340:	2000001b 	.word	0x2000001b
    e344:	2000001c 	.word	0x2000001c
    e348:	20000070 	.word	0x20000070
    e34c:	2000007c 	.word	0x2000007c
    e350:	20000088 	.word	0x20000088
    e354:	20000028 	.word	0x20000028
    e358:	00014891 	.word	0x00014891
    e35c:	42c80000 	.word	0x42c80000
    e360:	00014121 	.word	0x00014121
    e364:	2000004c 	.word	0x2000004c
    e368:	00008739 	.word	0x00008739
    e36c:	000088e1 	.word	0x000088e1
    e370:	20000094 	.word	0x20000094

0000e374 <restore_led_data>:

void restore_led_data(){
    e374:	b590      	push	{r4, r7, lr}
    e376:	b09f      	sub	sp, #124	; 0x7c
    e378:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(0, eeprom_data);
    e37a:	4ba9      	ldr	r3, [pc, #676]	; (e620 <restore_led_data+0x2ac>)
    e37c:	0019      	movs	r1, r3
    e37e:	2000      	movs	r0, #0
    e380:	4ba8      	ldr	r3, [pc, #672]	; (e624 <restore_led_data+0x2b0>)
    e382:	4798      	blx	r3
	
	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    e384:	4ba6      	ldr	r3, [pc, #664]	; (e620 <restore_led_data+0x2ac>)
    e386:	781b      	ldrb	r3, [r3, #0]
    e388:	2bff      	cmp	r3, #255	; 0xff
    e38a:	d000      	beq.n	e38e <restore_led_data+0x1a>
    e38c:	e0b4      	b.n	e4f8 <restore_led_data+0x184>
    e38e:	4ba4      	ldr	r3, [pc, #656]	; (e620 <restore_led_data+0x2ac>)
    e390:	785b      	ldrb	r3, [r3, #1]
    e392:	2bff      	cmp	r3, #255	; 0xff
    e394:	d000      	beq.n	e398 <restore_led_data+0x24>
    e396:	e0af      	b.n	e4f8 <restore_led_data+0x184>
		SWITCHES = 0x30; // SIDE: on	HEAD: on	LIGHT: disable	IMU: disable
    e398:	4ba3      	ldr	r3, [pc, #652]	; (e628 <restore_led_data+0x2b4>)
    e39a:	2230      	movs	r2, #48	; 0x30
    e39c:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    e39e:	4ba2      	ldr	r3, [pc, #648]	; (e628 <restore_led_data+0x2b4>)
    e3a0:	781b      	ldrb	r3, [r3, #0]
    e3a2:	111b      	asrs	r3, r3, #4
    e3a4:	b2db      	uxtb	r3, r3
    e3a6:	2201      	movs	r2, #1
    e3a8:	4013      	ands	r3, r2
    e3aa:	b2da      	uxtb	r2, r3
    e3ac:	4b9f      	ldr	r3, [pc, #636]	; (e62c <restore_led_data+0x2b8>)
    e3ae:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    e3b0:	4b9d      	ldr	r3, [pc, #628]	; (e628 <restore_led_data+0x2b4>)
    e3b2:	781b      	ldrb	r3, [r3, #0]
    e3b4:	115b      	asrs	r3, r3, #5
    e3b6:	b2db      	uxtb	r3, r3
    e3b8:	2201      	movs	r2, #1
    e3ba:	4013      	ands	r3, r2
    e3bc:	b2da      	uxtb	r2, r3
    e3be:	4b9c      	ldr	r3, [pc, #624]	; (e630 <restore_led_data+0x2bc>)
    e3c0:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    e3c2:	4b99      	ldr	r3, [pc, #612]	; (e628 <restore_led_data+0x2b4>)
    e3c4:	781b      	ldrb	r3, [r3, #0]
    e3c6:	119b      	asrs	r3, r3, #6
    e3c8:	b2db      	uxtb	r3, r3
    e3ca:	2201      	movs	r2, #1
    e3cc:	4013      	ands	r3, r2
    e3ce:	b2da      	uxtb	r2, r3
    e3d0:	4b98      	ldr	r3, [pc, #608]	; (e634 <restore_led_data+0x2c0>)
    e3d2:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    e3d4:	4b94      	ldr	r3, [pc, #592]	; (e628 <restore_led_data+0x2b4>)
    e3d6:	781b      	ldrb	r3, [r3, #0]
    e3d8:	09db      	lsrs	r3, r3, #7
    e3da:	b2da      	uxtb	r2, r3
    e3dc:	4b96      	ldr	r3, [pc, #600]	; (e638 <restore_led_data+0x2c4>)
    e3de:	701a      	strb	r2, [r3, #0]
		light_mode = MODE_COLOR_CYCLE;
    e3e0:	4b96      	ldr	r3, [pc, #600]	; (e63c <restore_led_data+0x2c8>)
    e3e2:	2201      	movs	r2, #1
    e3e4:	701a      	strb	r2, [r3, #0]

		Static_RGB.LR = 0;
    e3e6:	4b96      	ldr	r3, [pc, #600]	; (e640 <restore_led_data+0x2cc>)
    e3e8:	2200      	movs	r2, #0
    e3ea:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = 0xFFFF;
    e3ec:	4b94      	ldr	r3, [pc, #592]	; (e640 <restore_led_data+0x2cc>)
    e3ee:	2201      	movs	r2, #1
    e3f0:	4252      	negs	r2, r2
    e3f2:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = 0;
    e3f4:	4b92      	ldr	r3, [pc, #584]	; (e640 <restore_led_data+0x2cc>)
    e3f6:	2200      	movs	r2, #0
    e3f8:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = 0;
    e3fa:	4b91      	ldr	r3, [pc, #580]	; (e640 <restore_led_data+0x2cc>)
    e3fc:	2200      	movs	r2, #0
    e3fe:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = 0;
    e400:	4b8f      	ldr	r3, [pc, #572]	; (e640 <restore_led_data+0x2cc>)
    e402:	2200      	movs	r2, #0
    e404:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = 0xFFFF;
    e406:	4b8e      	ldr	r3, [pc, #568]	; (e640 <restore_led_data+0x2cc>)
    e408:	2201      	movs	r2, #1
    e40a:	4252      	negs	r2, r2
    e40c:	815a      	strh	r2, [r3, #10]

		
		uint8_t default_ColorBase[9] = {0,1,2,7,1,7,9,10,1};
    e40e:	2360      	movs	r3, #96	; 0x60
    e410:	18fb      	adds	r3, r7, r3
    e412:	4a8c      	ldr	r2, [pc, #560]	; (e644 <restore_led_data+0x2d0>)
    e414:	ca03      	ldmia	r2!, {r0, r1}
    e416:	c303      	stmia	r3!, {r0, r1}
    e418:	7812      	ldrb	r2, [r2, #0]
    e41a:	701a      	strb	r2, [r3, #0]
		uint8_t default_BrightBase[9] = {255,0,0,0,3,3,0,0,2};
    e41c:	2354      	movs	r3, #84	; 0x54
    e41e:	18fb      	adds	r3, r7, r3
    e420:	4a89      	ldr	r2, [pc, #548]	; (e648 <restore_led_data+0x2d4>)
    e422:	ca03      	ldmia	r2!, {r0, r1}
    e424:	c303      	stmia	r3!, {r0, r1}
    e426:	7812      	ldrb	r2, [r2, #0]
    e428:	701a      	strb	r2, [r3, #0]
		uint8_t default_RateBase[9] = {255,0,255,0,0,255,0,0,3};
    e42a:	2348      	movs	r3, #72	; 0x48
    e42c:	18fb      	adds	r3, r7, r3
    e42e:	4a87      	ldr	r2, [pc, #540]	; (e64c <restore_led_data+0x2d8>)
    e430:	ca03      	ldmia	r2!, {r0, r1}
    e432:	c303      	stmia	r3!, {r0, r1}
    e434:	7812      	ldrb	r2, [r2, #0]
    e436:	701a      	strb	r2, [r3, #0]
		float default_RateSens[9] = {0,0.75,0,0.5,0.5,0,0.5,0.5,0.5};
    e438:	003b      	movs	r3, r7
    e43a:	4a85      	ldr	r2, [pc, #532]	; (e650 <restore_led_data+0x2dc>)
    e43c:	ca13      	ldmia	r2!, {r0, r1, r4}
    e43e:	c313      	stmia	r3!, {r0, r1, r4}
    e440:	ca13      	ldmia	r2!, {r0, r1, r4}
    e442:	c313      	stmia	r3!, {r0, r1, r4}
    e444:	ca13      	ldmia	r2!, {r0, r1, r4}
    e446:	c313      	stmia	r3!, {r0, r1, r4}
		float default_Brightness[9] = {0,0.25,0.5,0.5,0.5,0.5,0.5,0.5,0.5};
    e448:	2324      	movs	r3, #36	; 0x24
    e44a:	18fb      	adds	r3, r7, r3
    e44c:	4a81      	ldr	r2, [pc, #516]	; (e654 <restore_led_data+0x2e0>)
    e44e:	ca13      	ldmia	r2!, {r0, r1, r4}
    e450:	c313      	stmia	r3!, {r0, r1, r4}
    e452:	ca13      	ldmia	r2!, {r0, r1, r4}
    e454:	c313      	stmia	r3!, {r0, r1, r4}
    e456:	ca13      	ldmia	r2!, {r0, r1, r4}
    e458:	c313      	stmia	r3!, {r0, r1, r4}

		for(int i = 0; i < 9; i++){
    e45a:	2300      	movs	r3, #0
    e45c:	677b      	str	r3, [r7, #116]	; 0x74
    e45e:	e031      	b.n	e4c4 <restore_led_data+0x150>
			ColorBase[i] = default_ColorBase[i];
    e460:	2360      	movs	r3, #96	; 0x60
    e462:	18fa      	adds	r2, r7, r3
    e464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e466:	18d3      	adds	r3, r2, r3
    e468:	7819      	ldrb	r1, [r3, #0]
    e46a:	4a7b      	ldr	r2, [pc, #492]	; (e658 <restore_led_data+0x2e4>)
    e46c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e46e:	18d3      	adds	r3, r2, r3
    e470:	1c0a      	adds	r2, r1, #0
    e472:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = default_BrightBase[i];
    e474:	2354      	movs	r3, #84	; 0x54
    e476:	18fa      	adds	r2, r7, r3
    e478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e47a:	18d3      	adds	r3, r2, r3
    e47c:	7819      	ldrb	r1, [r3, #0]
    e47e:	4a77      	ldr	r2, [pc, #476]	; (e65c <restore_led_data+0x2e8>)
    e480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e482:	18d3      	adds	r3, r2, r3
    e484:	1c0a      	adds	r2, r1, #0
    e486:	701a      	strb	r2, [r3, #0]
			RateBase[i] = default_RateBase[i];
    e488:	2348      	movs	r3, #72	; 0x48
    e48a:	18fa      	adds	r2, r7, r3
    e48c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e48e:	18d3      	adds	r3, r2, r3
    e490:	7819      	ldrb	r1, [r3, #0]
    e492:	4a73      	ldr	r2, [pc, #460]	; (e660 <restore_led_data+0x2ec>)
    e494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e496:	18d3      	adds	r3, r2, r3
    e498:	1c0a      	adds	r2, r1, #0
    e49a:	701a      	strb	r2, [r3, #0]
			RateSens[i] = default_RateSens[i];
    e49c:	003b      	movs	r3, r7
    e49e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    e4a0:	0092      	lsls	r2, r2, #2
    e4a2:	58d1      	ldr	r1, [r2, r3]
    e4a4:	4b6f      	ldr	r3, [pc, #444]	; (e664 <restore_led_data+0x2f0>)
    e4a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    e4a8:	0092      	lsls	r2, r2, #2
    e4aa:	50d1      	str	r1, [r2, r3]
			Brightness[i] = default_Brightness[i];
    e4ac:	2324      	movs	r3, #36	; 0x24
    e4ae:	18fb      	adds	r3, r7, r3
    e4b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    e4b2:	0092      	lsls	r2, r2, #2
    e4b4:	58d1      	ldr	r1, [r2, r3]
    e4b6:	4b6c      	ldr	r3, [pc, #432]	; (e668 <restore_led_data+0x2f4>)
    e4b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    e4ba:	0092      	lsls	r2, r2, #2
    e4bc:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 9; i++){
    e4be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e4c0:	3301      	adds	r3, #1
    e4c2:	677b      	str	r3, [r7, #116]	; 0x74
    e4c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    e4c6:	2b08      	cmp	r3, #8
    e4c8:	ddca      	ble.n	e460 <restore_led_data+0xec>
		}

		Custom_RGB.LR = 0;
    e4ca:	4b68      	ldr	r3, [pc, #416]	; (e66c <restore_led_data+0x2f8>)
    e4cc:	2200      	movs	r2, #0
    e4ce:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = 0;
    e4d0:	4b66      	ldr	r3, [pc, #408]	; (e66c <restore_led_data+0x2f8>)
    e4d2:	2200      	movs	r2, #0
    e4d4:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = 0xFFFF;
    e4d6:	4b65      	ldr	r3, [pc, #404]	; (e66c <restore_led_data+0x2f8>)
    e4d8:	2201      	movs	r2, #1
    e4da:	4252      	negs	r2, r2
    e4dc:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = 0;
    e4de:	4b63      	ldr	r3, [pc, #396]	; (e66c <restore_led_data+0x2f8>)
    e4e0:	2200      	movs	r2, #0
    e4e2:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = 0xFFFF;
    e4e4:	4b61      	ldr	r3, [pc, #388]	; (e66c <restore_led_data+0x2f8>)
    e4e6:	2201      	movs	r2, #1
    e4e8:	4252      	negs	r2, r2
    e4ea:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = 0;
    e4ec:	4b5f      	ldr	r3, [pc, #380]	; (e66c <restore_led_data+0x2f8>)
    e4ee:	2200      	movs	r2, #0
    e4f0:	815a      	strh	r2, [r3, #10]

		save_led_data();
    e4f2:	4b5f      	ldr	r3, [pc, #380]	; (e670 <restore_led_data+0x2fc>)
    e4f4:	4798      	blx	r3
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    e4f6:	e1ad      	b.n	e854 <restore_led_data+0x4e0>
	}
	else{ // else restore the stored data
		SWITCHES = eeprom_data[0];
    e4f8:	4b49      	ldr	r3, [pc, #292]	; (e620 <restore_led_data+0x2ac>)
    e4fa:	781a      	ldrb	r2, [r3, #0]
    e4fc:	4b4a      	ldr	r3, [pc, #296]	; (e628 <restore_led_data+0x2b4>)
    e4fe:	701a      	strb	r2, [r3, #0]
		SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    e500:	4b49      	ldr	r3, [pc, #292]	; (e628 <restore_led_data+0x2b4>)
    e502:	781b      	ldrb	r3, [r3, #0]
    e504:	111b      	asrs	r3, r3, #4
    e506:	b2db      	uxtb	r3, r3
    e508:	2201      	movs	r2, #1
    e50a:	4013      	ands	r3, r2
    e50c:	b2da      	uxtb	r2, r3
    e50e:	4b47      	ldr	r3, [pc, #284]	; (e62c <restore_led_data+0x2b8>)
    e510:	701a      	strb	r2, [r3, #0]
		HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    e512:	4b45      	ldr	r3, [pc, #276]	; (e628 <restore_led_data+0x2b4>)
    e514:	781b      	ldrb	r3, [r3, #0]
    e516:	115b      	asrs	r3, r3, #5
    e518:	b2db      	uxtb	r3, r3
    e51a:	2201      	movs	r2, #1
    e51c:	4013      	ands	r3, r2
    e51e:	b2da      	uxtb	r2, r3
    e520:	4b43      	ldr	r3, [pc, #268]	; (e630 <restore_led_data+0x2bc>)
    e522:	701a      	strb	r2, [r3, #0]
		LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    e524:	4b40      	ldr	r3, [pc, #256]	; (e628 <restore_led_data+0x2b4>)
    e526:	781b      	ldrb	r3, [r3, #0]
    e528:	119b      	asrs	r3, r3, #6
    e52a:	b2db      	uxtb	r3, r3
    e52c:	2201      	movs	r2, #1
    e52e:	4013      	ands	r3, r2
    e530:	b2da      	uxtb	r2, r3
    e532:	4b40      	ldr	r3, [pc, #256]	; (e634 <restore_led_data+0x2c0>)
    e534:	701a      	strb	r2, [r3, #0]
		IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    e536:	4b3c      	ldr	r3, [pc, #240]	; (e628 <restore_led_data+0x2b4>)
    e538:	781b      	ldrb	r3, [r3, #0]
    e53a:	09db      	lsrs	r3, r3, #7
    e53c:	b2da      	uxtb	r2, r3
    e53e:	4b3e      	ldr	r3, [pc, #248]	; (e638 <restore_led_data+0x2c4>)
    e540:	701a      	strb	r2, [r3, #0]
		light_mode = eeprom_data[1];
    e542:	4b37      	ldr	r3, [pc, #220]	; (e620 <restore_led_data+0x2ac>)
    e544:	785a      	ldrb	r2, [r3, #1]
    e546:	4b3d      	ldr	r3, [pc, #244]	; (e63c <restore_led_data+0x2c8>)
    e548:	701a      	strb	r2, [r3, #0]
		Static_RGB.LR = eeprom_data[2];
    e54a:	4b35      	ldr	r3, [pc, #212]	; (e620 <restore_led_data+0x2ac>)
    e54c:	789b      	ldrb	r3, [r3, #2]
    e54e:	b29a      	uxth	r2, r3
    e550:	4b3b      	ldr	r3, [pc, #236]	; (e640 <restore_led_data+0x2cc>)
    e552:	801a      	strh	r2, [r3, #0]
		Static_RGB.LR = (Static_RGB.LR | (eeprom_data[3] << 8));
    e554:	4b3a      	ldr	r3, [pc, #232]	; (e640 <restore_led_data+0x2cc>)
    e556:	881b      	ldrh	r3, [r3, #0]
    e558:	b21a      	sxth	r2, r3
    e55a:	4b31      	ldr	r3, [pc, #196]	; (e620 <restore_led_data+0x2ac>)
    e55c:	78db      	ldrb	r3, [r3, #3]
    e55e:	021b      	lsls	r3, r3, #8
    e560:	b21b      	sxth	r3, r3
    e562:	4313      	orrs	r3, r2
    e564:	b21b      	sxth	r3, r3
    e566:	b29a      	uxth	r2, r3
    e568:	4b35      	ldr	r3, [pc, #212]	; (e640 <restore_led_data+0x2cc>)
    e56a:	801a      	strh	r2, [r3, #0]
		Static_RGB.LG = eeprom_data[4];
    e56c:	4b2c      	ldr	r3, [pc, #176]	; (e620 <restore_led_data+0x2ac>)
    e56e:	791b      	ldrb	r3, [r3, #4]
    e570:	b29a      	uxth	r2, r3
    e572:	4b33      	ldr	r3, [pc, #204]	; (e640 <restore_led_data+0x2cc>)
    e574:	805a      	strh	r2, [r3, #2]
		Static_RGB.LG = (Static_RGB.LG | (eeprom_data[5] << 8));
    e576:	4b32      	ldr	r3, [pc, #200]	; (e640 <restore_led_data+0x2cc>)
    e578:	885b      	ldrh	r3, [r3, #2]
    e57a:	b21a      	sxth	r2, r3
    e57c:	4b28      	ldr	r3, [pc, #160]	; (e620 <restore_led_data+0x2ac>)
    e57e:	795b      	ldrb	r3, [r3, #5]
    e580:	021b      	lsls	r3, r3, #8
    e582:	b21b      	sxth	r3, r3
    e584:	4313      	orrs	r3, r2
    e586:	b21b      	sxth	r3, r3
    e588:	b29a      	uxth	r2, r3
    e58a:	4b2d      	ldr	r3, [pc, #180]	; (e640 <restore_led_data+0x2cc>)
    e58c:	805a      	strh	r2, [r3, #2]
		Static_RGB.LB = eeprom_data[6];
    e58e:	4b24      	ldr	r3, [pc, #144]	; (e620 <restore_led_data+0x2ac>)
    e590:	799b      	ldrb	r3, [r3, #6]
    e592:	b29a      	uxth	r2, r3
    e594:	4b2a      	ldr	r3, [pc, #168]	; (e640 <restore_led_data+0x2cc>)
    e596:	809a      	strh	r2, [r3, #4]
		Static_RGB.LB = (Static_RGB.LB | (eeprom_data[7] << 8));
    e598:	4b29      	ldr	r3, [pc, #164]	; (e640 <restore_led_data+0x2cc>)
    e59a:	889b      	ldrh	r3, [r3, #4]
    e59c:	b21a      	sxth	r2, r3
    e59e:	4b20      	ldr	r3, [pc, #128]	; (e620 <restore_led_data+0x2ac>)
    e5a0:	79db      	ldrb	r3, [r3, #7]
    e5a2:	021b      	lsls	r3, r3, #8
    e5a4:	b21b      	sxth	r3, r3
    e5a6:	4313      	orrs	r3, r2
    e5a8:	b21b      	sxth	r3, r3
    e5aa:	b29a      	uxth	r2, r3
    e5ac:	4b24      	ldr	r3, [pc, #144]	; (e640 <restore_led_data+0x2cc>)
    e5ae:	809a      	strh	r2, [r3, #4]
		Static_RGB.RR = eeprom_data[8];
    e5b0:	4b1b      	ldr	r3, [pc, #108]	; (e620 <restore_led_data+0x2ac>)
    e5b2:	7a1b      	ldrb	r3, [r3, #8]
    e5b4:	b29a      	uxth	r2, r3
    e5b6:	4b22      	ldr	r3, [pc, #136]	; (e640 <restore_led_data+0x2cc>)
    e5b8:	80da      	strh	r2, [r3, #6]
		Static_RGB.RR = (Static_RGB.RR | (eeprom_data[9] << 8));
    e5ba:	4b21      	ldr	r3, [pc, #132]	; (e640 <restore_led_data+0x2cc>)
    e5bc:	88db      	ldrh	r3, [r3, #6]
    e5be:	b21a      	sxth	r2, r3
    e5c0:	4b17      	ldr	r3, [pc, #92]	; (e620 <restore_led_data+0x2ac>)
    e5c2:	7a5b      	ldrb	r3, [r3, #9]
    e5c4:	021b      	lsls	r3, r3, #8
    e5c6:	b21b      	sxth	r3, r3
    e5c8:	4313      	orrs	r3, r2
    e5ca:	b21b      	sxth	r3, r3
    e5cc:	b29a      	uxth	r2, r3
    e5ce:	4b1c      	ldr	r3, [pc, #112]	; (e640 <restore_led_data+0x2cc>)
    e5d0:	80da      	strh	r2, [r3, #6]
		Static_RGB.RG = eeprom_data[10];
    e5d2:	4b13      	ldr	r3, [pc, #76]	; (e620 <restore_led_data+0x2ac>)
    e5d4:	7a9b      	ldrb	r3, [r3, #10]
    e5d6:	b29a      	uxth	r2, r3
    e5d8:	4b19      	ldr	r3, [pc, #100]	; (e640 <restore_led_data+0x2cc>)
    e5da:	811a      	strh	r2, [r3, #8]
		Static_RGB.RG = (Static_RGB.RG | (eeprom_data[11] << 8));
    e5dc:	4b18      	ldr	r3, [pc, #96]	; (e640 <restore_led_data+0x2cc>)
    e5de:	891b      	ldrh	r3, [r3, #8]
    e5e0:	b21a      	sxth	r2, r3
    e5e2:	4b0f      	ldr	r3, [pc, #60]	; (e620 <restore_led_data+0x2ac>)
    e5e4:	7adb      	ldrb	r3, [r3, #11]
    e5e6:	021b      	lsls	r3, r3, #8
    e5e8:	b21b      	sxth	r3, r3
    e5ea:	4313      	orrs	r3, r2
    e5ec:	b21b      	sxth	r3, r3
    e5ee:	b29a      	uxth	r2, r3
    e5f0:	4b13      	ldr	r3, [pc, #76]	; (e640 <restore_led_data+0x2cc>)
    e5f2:	811a      	strh	r2, [r3, #8]
		Static_RGB.RB = eeprom_data[12];
    e5f4:	4b0a      	ldr	r3, [pc, #40]	; (e620 <restore_led_data+0x2ac>)
    e5f6:	7b1b      	ldrb	r3, [r3, #12]
    e5f8:	b29a      	uxth	r2, r3
    e5fa:	4b11      	ldr	r3, [pc, #68]	; (e640 <restore_led_data+0x2cc>)
    e5fc:	815a      	strh	r2, [r3, #10]
		Static_RGB.RB = (Static_RGB.RB | (eeprom_data[13] << 8));
    e5fe:	4b10      	ldr	r3, [pc, #64]	; (e640 <restore_led_data+0x2cc>)
    e600:	895b      	ldrh	r3, [r3, #10]
    e602:	b21a      	sxth	r2, r3
    e604:	4b06      	ldr	r3, [pc, #24]	; (e620 <restore_led_data+0x2ac>)
    e606:	7b5b      	ldrb	r3, [r3, #13]
    e608:	021b      	lsls	r3, r3, #8
    e60a:	b21b      	sxth	r3, r3
    e60c:	4313      	orrs	r3, r2
    e60e:	b21b      	sxth	r3, r3
    e610:	b29a      	uxth	r2, r3
    e612:	4b0b      	ldr	r3, [pc, #44]	; (e640 <restore_led_data+0x2cc>)
    e614:	815a      	strh	r2, [r3, #10]
		int dataOffset = 14;
    e616:	230e      	movs	r3, #14
    e618:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int i = 0; i < 8; i++){
    e61a:	2300      	movs	r3, #0
    e61c:	673b      	str	r3, [r7, #112]	; 0x70
    e61e:	e083      	b.n	e728 <restore_led_data+0x3b4>
    e620:	200009c8 	.word	0x200009c8
    e624:	00008845 	.word	0x00008845
    e628:	20000325 	.word	0x20000325
    e62c:	200000a2 	.word	0x200000a2
    e630:	20000322 	.word	0x20000322
    e634:	20000323 	.word	0x20000323
    e638:	20000324 	.word	0x20000324
    e63c:	2000001b 	.word	0x2000001b
    e640:	2000001c 	.word	0x2000001c
    e644:	0001725c 	.word	0x0001725c
    e648:	00017268 	.word	0x00017268
    e64c:	00017274 	.word	0x00017274
    e650:	00017280 	.word	0x00017280
    e654:	000172a4 	.word	0x000172a4
    e658:	20000070 	.word	0x20000070
    e65c:	2000007c 	.word	0x2000007c
    e660:	20000088 	.word	0x20000088
    e664:	20000028 	.word	0x20000028
    e668:	2000004c 	.word	0x2000004c
    e66c:	20000094 	.word	0x20000094
    e670:	0000e099 	.word	0x0000e099
			ColorBase[i] = eeprom_data[dataOffset + (i*5)];
    e674:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e676:	0013      	movs	r3, r2
    e678:	009b      	lsls	r3, r3, #2
    e67a:	189a      	adds	r2, r3, r2
    e67c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e67e:	18d3      	adds	r3, r2, r3
    e680:	4a76      	ldr	r2, [pc, #472]	; (e85c <restore_led_data+0x4e8>)
    e682:	5cd1      	ldrb	r1, [r2, r3]
    e684:	4a76      	ldr	r2, [pc, #472]	; (e860 <restore_led_data+0x4ec>)
    e686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e688:	18d3      	adds	r3, r2, r3
    e68a:	1c0a      	adds	r2, r1, #0
    e68c:	701a      	strb	r2, [r3, #0]
			BrightBase[i] = eeprom_data[dataOffset + (i*5) + 1];
    e68e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e690:	0013      	movs	r3, r2
    e692:	009b      	lsls	r3, r3, #2
    e694:	189a      	adds	r2, r3, r2
    e696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e698:	18d3      	adds	r3, r2, r3
    e69a:	3301      	adds	r3, #1
    e69c:	4a6f      	ldr	r2, [pc, #444]	; (e85c <restore_led_data+0x4e8>)
    e69e:	5cd1      	ldrb	r1, [r2, r3]
    e6a0:	4a70      	ldr	r2, [pc, #448]	; (e864 <restore_led_data+0x4f0>)
    e6a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e6a4:	18d3      	adds	r3, r2, r3
    e6a6:	1c0a      	adds	r2, r1, #0
    e6a8:	701a      	strb	r2, [r3, #0]
			RateBase[i] = eeprom_data[dataOffset + (i*5) + 2];
    e6aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e6ac:	0013      	movs	r3, r2
    e6ae:	009b      	lsls	r3, r3, #2
    e6b0:	189a      	adds	r2, r3, r2
    e6b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e6b4:	18d3      	adds	r3, r2, r3
    e6b6:	3302      	adds	r3, #2
    e6b8:	4a68      	ldr	r2, [pc, #416]	; (e85c <restore_led_data+0x4e8>)
    e6ba:	5cd1      	ldrb	r1, [r2, r3]
    e6bc:	4a6a      	ldr	r2, [pc, #424]	; (e868 <restore_led_data+0x4f4>)
    e6be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e6c0:	18d3      	adds	r3, r2, r3
    e6c2:	1c0a      	adds	r2, r1, #0
    e6c4:	701a      	strb	r2, [r3, #0]
			RateSens[i] = ((float)eeprom_data[dataOffset + (i*5) + 3])/100;
    e6c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e6c8:	0013      	movs	r3, r2
    e6ca:	009b      	lsls	r3, r3, #2
    e6cc:	189a      	adds	r2, r3, r2
    e6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e6d0:	18d3      	adds	r3, r2, r3
    e6d2:	3303      	adds	r3, #3
    e6d4:	4a61      	ldr	r2, [pc, #388]	; (e85c <restore_led_data+0x4e8>)
    e6d6:	5cd2      	ldrb	r2, [r2, r3]
    e6d8:	4b64      	ldr	r3, [pc, #400]	; (e86c <restore_led_data+0x4f8>)
    e6da:	0010      	movs	r0, r2
    e6dc:	4798      	blx	r3
    e6de:	1c02      	adds	r2, r0, #0
    e6e0:	4b63      	ldr	r3, [pc, #396]	; (e870 <restore_led_data+0x4fc>)
    e6e2:	4964      	ldr	r1, [pc, #400]	; (e874 <restore_led_data+0x500>)
    e6e4:	1c10      	adds	r0, r2, #0
    e6e6:	4798      	blx	r3
    e6e8:	1c03      	adds	r3, r0, #0
    e6ea:	1c19      	adds	r1, r3, #0
    e6ec:	4b62      	ldr	r3, [pc, #392]	; (e878 <restore_led_data+0x504>)
    e6ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e6f0:	0092      	lsls	r2, r2, #2
    e6f2:	50d1      	str	r1, [r2, r3]
			Brightness[i] = ((float)eeprom_data[dataOffset + (i*5) + 4])/100;
    e6f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e6f6:	0013      	movs	r3, r2
    e6f8:	009b      	lsls	r3, r3, #2
    e6fa:	189a      	adds	r2, r3, r2
    e6fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e6fe:	18d3      	adds	r3, r2, r3
    e700:	3304      	adds	r3, #4
    e702:	4a56      	ldr	r2, [pc, #344]	; (e85c <restore_led_data+0x4e8>)
    e704:	5cd2      	ldrb	r2, [r2, r3]
    e706:	4b59      	ldr	r3, [pc, #356]	; (e86c <restore_led_data+0x4f8>)
    e708:	0010      	movs	r0, r2
    e70a:	4798      	blx	r3
    e70c:	1c02      	adds	r2, r0, #0
    e70e:	4b58      	ldr	r3, [pc, #352]	; (e870 <restore_led_data+0x4fc>)
    e710:	4958      	ldr	r1, [pc, #352]	; (e874 <restore_led_data+0x500>)
    e712:	1c10      	adds	r0, r2, #0
    e714:	4798      	blx	r3
    e716:	1c03      	adds	r3, r0, #0
    e718:	1c19      	adds	r1, r3, #0
    e71a:	4b58      	ldr	r3, [pc, #352]	; (e87c <restore_led_data+0x508>)
    e71c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    e71e:	0092      	lsls	r2, r2, #2
    e720:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i < 8; i++){
    e722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e724:	3301      	adds	r3, #1
    e726:	673b      	str	r3, [r7, #112]	; 0x70
    e728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    e72a:	2b07      	cmp	r3, #7
    e72c:	dda2      	ble.n	e674 <restore_led_data+0x300>
		}

		eeprom_emulator_read_page(1, eeprom_data);
    e72e:	4b4b      	ldr	r3, [pc, #300]	; (e85c <restore_led_data+0x4e8>)
    e730:	0019      	movs	r1, r3
    e732:	2001      	movs	r0, #1
    e734:	4b52      	ldr	r3, [pc, #328]	; (e880 <restore_led_data+0x50c>)
    e736:	4798      	blx	r3

		ColorBase[8] = eeprom_data[0];
    e738:	4b48      	ldr	r3, [pc, #288]	; (e85c <restore_led_data+0x4e8>)
    e73a:	781a      	ldrb	r2, [r3, #0]
    e73c:	4b48      	ldr	r3, [pc, #288]	; (e860 <restore_led_data+0x4ec>)
    e73e:	721a      	strb	r2, [r3, #8]
		BrightBase[8] = eeprom_data[1];
    e740:	4b46      	ldr	r3, [pc, #280]	; (e85c <restore_led_data+0x4e8>)
    e742:	785a      	ldrb	r2, [r3, #1]
    e744:	4b47      	ldr	r3, [pc, #284]	; (e864 <restore_led_data+0x4f0>)
    e746:	721a      	strb	r2, [r3, #8]
		RateBase[8] = eeprom_data[2];
    e748:	4b44      	ldr	r3, [pc, #272]	; (e85c <restore_led_data+0x4e8>)
    e74a:	789a      	ldrb	r2, [r3, #2]
    e74c:	4b46      	ldr	r3, [pc, #280]	; (e868 <restore_led_data+0x4f4>)
    e74e:	721a      	strb	r2, [r3, #8]
		RateSens[8] = ((float)eeprom_data[3])/100;
    e750:	4b42      	ldr	r3, [pc, #264]	; (e85c <restore_led_data+0x4e8>)
    e752:	78da      	ldrb	r2, [r3, #3]
    e754:	4b45      	ldr	r3, [pc, #276]	; (e86c <restore_led_data+0x4f8>)
    e756:	0010      	movs	r0, r2
    e758:	4798      	blx	r3
    e75a:	1c02      	adds	r2, r0, #0
    e75c:	4b44      	ldr	r3, [pc, #272]	; (e870 <restore_led_data+0x4fc>)
    e75e:	4945      	ldr	r1, [pc, #276]	; (e874 <restore_led_data+0x500>)
    e760:	1c10      	adds	r0, r2, #0
    e762:	4798      	blx	r3
    e764:	1c03      	adds	r3, r0, #0
    e766:	1c1a      	adds	r2, r3, #0
    e768:	4b43      	ldr	r3, [pc, #268]	; (e878 <restore_led_data+0x504>)
    e76a:	621a      	str	r2, [r3, #32]
		Brightness[8] = ((float)eeprom_data[4])/100;
    e76c:	4b3b      	ldr	r3, [pc, #236]	; (e85c <restore_led_data+0x4e8>)
    e76e:	791a      	ldrb	r2, [r3, #4]
    e770:	4b3e      	ldr	r3, [pc, #248]	; (e86c <restore_led_data+0x4f8>)
    e772:	0010      	movs	r0, r2
    e774:	4798      	blx	r3
    e776:	1c02      	adds	r2, r0, #0
    e778:	4b3d      	ldr	r3, [pc, #244]	; (e870 <restore_led_data+0x4fc>)
    e77a:	493e      	ldr	r1, [pc, #248]	; (e874 <restore_led_data+0x500>)
    e77c:	1c10      	adds	r0, r2, #0
    e77e:	4798      	blx	r3
    e780:	1c03      	adds	r3, r0, #0
    e782:	1c1a      	adds	r2, r3, #0
    e784:	4b3d      	ldr	r3, [pc, #244]	; (e87c <restore_led_data+0x508>)
    e786:	621a      	str	r2, [r3, #32]
		Custom_RGB.LR = eeprom_data[5];
    e788:	4b34      	ldr	r3, [pc, #208]	; (e85c <restore_led_data+0x4e8>)
    e78a:	795b      	ldrb	r3, [r3, #5]
    e78c:	b29a      	uxth	r2, r3
    e78e:	4b3d      	ldr	r3, [pc, #244]	; (e884 <restore_led_data+0x510>)
    e790:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LR = (Custom_RGB.LR | (eeprom_data[6] << 8));
    e792:	4b3c      	ldr	r3, [pc, #240]	; (e884 <restore_led_data+0x510>)
    e794:	881b      	ldrh	r3, [r3, #0]
    e796:	b21a      	sxth	r2, r3
    e798:	4b30      	ldr	r3, [pc, #192]	; (e85c <restore_led_data+0x4e8>)
    e79a:	799b      	ldrb	r3, [r3, #6]
    e79c:	021b      	lsls	r3, r3, #8
    e79e:	b21b      	sxth	r3, r3
    e7a0:	4313      	orrs	r3, r2
    e7a2:	b21b      	sxth	r3, r3
    e7a4:	b29a      	uxth	r2, r3
    e7a6:	4b37      	ldr	r3, [pc, #220]	; (e884 <restore_led_data+0x510>)
    e7a8:	801a      	strh	r2, [r3, #0]
		Custom_RGB.LG = eeprom_data[7];
    e7aa:	4b2c      	ldr	r3, [pc, #176]	; (e85c <restore_led_data+0x4e8>)
    e7ac:	79db      	ldrb	r3, [r3, #7]
    e7ae:	b29a      	uxth	r2, r3
    e7b0:	4b34      	ldr	r3, [pc, #208]	; (e884 <restore_led_data+0x510>)
    e7b2:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LG = (Custom_RGB.LG | (eeprom_data[8] << 8));
    e7b4:	4b33      	ldr	r3, [pc, #204]	; (e884 <restore_led_data+0x510>)
    e7b6:	885b      	ldrh	r3, [r3, #2]
    e7b8:	b21a      	sxth	r2, r3
    e7ba:	4b28      	ldr	r3, [pc, #160]	; (e85c <restore_led_data+0x4e8>)
    e7bc:	7a1b      	ldrb	r3, [r3, #8]
    e7be:	021b      	lsls	r3, r3, #8
    e7c0:	b21b      	sxth	r3, r3
    e7c2:	4313      	orrs	r3, r2
    e7c4:	b21b      	sxth	r3, r3
    e7c6:	b29a      	uxth	r2, r3
    e7c8:	4b2e      	ldr	r3, [pc, #184]	; (e884 <restore_led_data+0x510>)
    e7ca:	805a      	strh	r2, [r3, #2]
		Custom_RGB.LB = eeprom_data[9];
    e7cc:	4b23      	ldr	r3, [pc, #140]	; (e85c <restore_led_data+0x4e8>)
    e7ce:	7a5b      	ldrb	r3, [r3, #9]
    e7d0:	b29a      	uxth	r2, r3
    e7d2:	4b2c      	ldr	r3, [pc, #176]	; (e884 <restore_led_data+0x510>)
    e7d4:	809a      	strh	r2, [r3, #4]
		Custom_RGB.LB = (Custom_RGB.LB | (eeprom_data[10] << 8));
    e7d6:	4b2b      	ldr	r3, [pc, #172]	; (e884 <restore_led_data+0x510>)
    e7d8:	889b      	ldrh	r3, [r3, #4]
    e7da:	b21a      	sxth	r2, r3
    e7dc:	4b1f      	ldr	r3, [pc, #124]	; (e85c <restore_led_data+0x4e8>)
    e7de:	7a9b      	ldrb	r3, [r3, #10]
    e7e0:	021b      	lsls	r3, r3, #8
    e7e2:	b21b      	sxth	r3, r3
    e7e4:	4313      	orrs	r3, r2
    e7e6:	b21b      	sxth	r3, r3
    e7e8:	b29a      	uxth	r2, r3
    e7ea:	4b26      	ldr	r3, [pc, #152]	; (e884 <restore_led_data+0x510>)
    e7ec:	809a      	strh	r2, [r3, #4]
		Custom_RGB.RR = eeprom_data[11];
    e7ee:	4b1b      	ldr	r3, [pc, #108]	; (e85c <restore_led_data+0x4e8>)
    e7f0:	7adb      	ldrb	r3, [r3, #11]
    e7f2:	b29a      	uxth	r2, r3
    e7f4:	4b23      	ldr	r3, [pc, #140]	; (e884 <restore_led_data+0x510>)
    e7f6:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RR = (Custom_RGB.RR | (eeprom_data[12] << 8));
    e7f8:	4b22      	ldr	r3, [pc, #136]	; (e884 <restore_led_data+0x510>)
    e7fa:	88db      	ldrh	r3, [r3, #6]
    e7fc:	b21a      	sxth	r2, r3
    e7fe:	4b17      	ldr	r3, [pc, #92]	; (e85c <restore_led_data+0x4e8>)
    e800:	7b1b      	ldrb	r3, [r3, #12]
    e802:	021b      	lsls	r3, r3, #8
    e804:	b21b      	sxth	r3, r3
    e806:	4313      	orrs	r3, r2
    e808:	b21b      	sxth	r3, r3
    e80a:	b29a      	uxth	r2, r3
    e80c:	4b1d      	ldr	r3, [pc, #116]	; (e884 <restore_led_data+0x510>)
    e80e:	80da      	strh	r2, [r3, #6]
		Custom_RGB.RG = eeprom_data[13];
    e810:	4b12      	ldr	r3, [pc, #72]	; (e85c <restore_led_data+0x4e8>)
    e812:	7b5b      	ldrb	r3, [r3, #13]
    e814:	b29a      	uxth	r2, r3
    e816:	4b1b      	ldr	r3, [pc, #108]	; (e884 <restore_led_data+0x510>)
    e818:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RG = (Custom_RGB.RG | (eeprom_data[14] << 8));
    e81a:	4b1a      	ldr	r3, [pc, #104]	; (e884 <restore_led_data+0x510>)
    e81c:	891b      	ldrh	r3, [r3, #8]
    e81e:	b21a      	sxth	r2, r3
    e820:	4b0e      	ldr	r3, [pc, #56]	; (e85c <restore_led_data+0x4e8>)
    e822:	7b9b      	ldrb	r3, [r3, #14]
    e824:	021b      	lsls	r3, r3, #8
    e826:	b21b      	sxth	r3, r3
    e828:	4313      	orrs	r3, r2
    e82a:	b21b      	sxth	r3, r3
    e82c:	b29a      	uxth	r2, r3
    e82e:	4b15      	ldr	r3, [pc, #84]	; (e884 <restore_led_data+0x510>)
    e830:	811a      	strh	r2, [r3, #8]
		Custom_RGB.RB = eeprom_data[15];
    e832:	4b0a      	ldr	r3, [pc, #40]	; (e85c <restore_led_data+0x4e8>)
    e834:	7bdb      	ldrb	r3, [r3, #15]
    e836:	b29a      	uxth	r2, r3
    e838:	4b12      	ldr	r3, [pc, #72]	; (e884 <restore_led_data+0x510>)
    e83a:	815a      	strh	r2, [r3, #10]
		Custom_RGB.RB = (Custom_RGB.RB | (eeprom_data[16] << 8));
    e83c:	4b11      	ldr	r3, [pc, #68]	; (e884 <restore_led_data+0x510>)
    e83e:	895b      	ldrh	r3, [r3, #10]
    e840:	b21a      	sxth	r2, r3
    e842:	4b06      	ldr	r3, [pc, #24]	; (e85c <restore_led_data+0x4e8>)
    e844:	7c1b      	ldrb	r3, [r3, #16]
    e846:	021b      	lsls	r3, r3, #8
    e848:	b21b      	sxth	r3, r3
    e84a:	4313      	orrs	r3, r2
    e84c:	b21b      	sxth	r3, r3
    e84e:	b29a      	uxth	r2, r3
    e850:	4b0c      	ldr	r3, [pc, #48]	; (e884 <restore_led_data+0x510>)
    e852:	815a      	strh	r2, [r3, #10]
	}
}
    e854:	46c0      	nop			; (mov r8, r8)
    e856:	46bd      	mov	sp, r7
    e858:	b01f      	add	sp, #124	; 0x7c
    e85a:	bd90      	pop	{r4, r7, pc}
    e85c:	200009c8 	.word	0x200009c8
    e860:	20000070 	.word	0x20000070
    e864:	2000007c 	.word	0x2000007c
    e868:	20000088 	.word	0x20000088
    e86c:	00014ee9 	.word	0x00014ee9
    e870:	000144b1 	.word	0x000144b1
    e874:	42c80000 	.word	0x42c80000
    e878:	20000028 	.word	0x20000028
    e87c:	2000004c 	.word	0x2000004c
    e880:	00008845 	.word	0x00008845
    e884:	20000094 	.word	0x20000094

0000e888 <save_cal_data>:

void save_cal_data()
{
    e888:	b580      	push	{r7, lr}
    e88a:	b082      	sub	sp, #8
    e88c:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e88e:	2300      	movs	r3, #0
    e890:	607b      	str	r3, [r7, #4]
    e892:	e005      	b.n	e8a0 <save_cal_data+0x18>
		eeprom_data[0] = 0;
    e894:	4b44      	ldr	r3, [pc, #272]	; (e9a8 <save_cal_data+0x120>)
    e896:	2200      	movs	r2, #0
    e898:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    e89a:	687b      	ldr	r3, [r7, #4]
    e89c:	3301      	adds	r3, #1
    e89e:	607b      	str	r3, [r7, #4]
    e8a0:	687b      	ldr	r3, [r7, #4]
    e8a2:	2b3b      	cmp	r3, #59	; 0x3b
    e8a4:	ddf6      	ble.n	e894 <save_cal_data+0xc>
	}

	eeprom_data[0] = ((gBiasRaw[0]) & 0xFF00) >> 8;
    e8a6:	4b41      	ldr	r3, [pc, #260]	; (e9ac <save_cal_data+0x124>)
    e8a8:	2200      	movs	r2, #0
    e8aa:	5e9b      	ldrsh	r3, [r3, r2]
    e8ac:	121b      	asrs	r3, r3, #8
    e8ae:	b2da      	uxtb	r2, r3
    e8b0:	4b3d      	ldr	r3, [pc, #244]	; (e9a8 <save_cal_data+0x120>)
    e8b2:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ((gBiasRaw[0]) & 0xFF);
    e8b4:	4b3d      	ldr	r3, [pc, #244]	; (e9ac <save_cal_data+0x124>)
    e8b6:	2200      	movs	r2, #0
    e8b8:	5e9b      	ldrsh	r3, [r3, r2]
    e8ba:	b2da      	uxtb	r2, r3
    e8bc:	4b3a      	ldr	r3, [pc, #232]	; (e9a8 <save_cal_data+0x120>)
    e8be:	705a      	strb	r2, [r3, #1]
	eeprom_data[2] = ((gBiasRaw[1]) & 0xFF00) >> 8;
    e8c0:	4b3a      	ldr	r3, [pc, #232]	; (e9ac <save_cal_data+0x124>)
    e8c2:	2202      	movs	r2, #2
    e8c4:	5e9b      	ldrsh	r3, [r3, r2]
    e8c6:	121b      	asrs	r3, r3, #8
    e8c8:	b2da      	uxtb	r2, r3
    e8ca:	4b37      	ldr	r3, [pc, #220]	; (e9a8 <save_cal_data+0x120>)
    e8cc:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = ((gBiasRaw[1]) & 0xFF);
    e8ce:	4b37      	ldr	r3, [pc, #220]	; (e9ac <save_cal_data+0x124>)
    e8d0:	2202      	movs	r2, #2
    e8d2:	5e9b      	ldrsh	r3, [r3, r2]
    e8d4:	b2da      	uxtb	r2, r3
    e8d6:	4b34      	ldr	r3, [pc, #208]	; (e9a8 <save_cal_data+0x120>)
    e8d8:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = ((gBiasRaw[2]) & 0xFF00) >> 8;
    e8da:	4b34      	ldr	r3, [pc, #208]	; (e9ac <save_cal_data+0x124>)
    e8dc:	2204      	movs	r2, #4
    e8de:	5e9b      	ldrsh	r3, [r3, r2]
    e8e0:	121b      	asrs	r3, r3, #8
    e8e2:	b2da      	uxtb	r2, r3
    e8e4:	4b30      	ldr	r3, [pc, #192]	; (e9a8 <save_cal_data+0x120>)
    e8e6:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = ((gBiasRaw[2]) & 0xFF);
    e8e8:	4b30      	ldr	r3, [pc, #192]	; (e9ac <save_cal_data+0x124>)
    e8ea:	2204      	movs	r2, #4
    e8ec:	5e9b      	ldrsh	r3, [r3, r2]
    e8ee:	b2da      	uxtb	r2, r3
    e8f0:	4b2d      	ldr	r3, [pc, #180]	; (e9a8 <save_cal_data+0x120>)
    e8f2:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = ((aBiasRaw[0]) & 0xFF00) >> 8;
    e8f4:	4b2e      	ldr	r3, [pc, #184]	; (e9b0 <save_cal_data+0x128>)
    e8f6:	2200      	movs	r2, #0
    e8f8:	5e9b      	ldrsh	r3, [r3, r2]
    e8fa:	121b      	asrs	r3, r3, #8
    e8fc:	b2da      	uxtb	r2, r3
    e8fe:	4b2a      	ldr	r3, [pc, #168]	; (e9a8 <save_cal_data+0x120>)
    e900:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = ((aBiasRaw[0]) & 0xFF);
    e902:	4b2b      	ldr	r3, [pc, #172]	; (e9b0 <save_cal_data+0x128>)
    e904:	2200      	movs	r2, #0
    e906:	5e9b      	ldrsh	r3, [r3, r2]
    e908:	b2da      	uxtb	r2, r3
    e90a:	4b27      	ldr	r3, [pc, #156]	; (e9a8 <save_cal_data+0x120>)
    e90c:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = ((aBiasRaw[1]) & 0xFF00) >> 8;
    e90e:	4b28      	ldr	r3, [pc, #160]	; (e9b0 <save_cal_data+0x128>)
    e910:	2202      	movs	r2, #2
    e912:	5e9b      	ldrsh	r3, [r3, r2]
    e914:	121b      	asrs	r3, r3, #8
    e916:	b2da      	uxtb	r2, r3
    e918:	4b23      	ldr	r3, [pc, #140]	; (e9a8 <save_cal_data+0x120>)
    e91a:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = ((aBiasRaw[1]) & 0xFF);
    e91c:	4b24      	ldr	r3, [pc, #144]	; (e9b0 <save_cal_data+0x128>)
    e91e:	2202      	movs	r2, #2
    e920:	5e9b      	ldrsh	r3, [r3, r2]
    e922:	b2da      	uxtb	r2, r3
    e924:	4b20      	ldr	r3, [pc, #128]	; (e9a8 <save_cal_data+0x120>)
    e926:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = ((aBiasRaw[2]) & 0xFF00) >> 8;
    e928:	4b21      	ldr	r3, [pc, #132]	; (e9b0 <save_cal_data+0x128>)
    e92a:	2204      	movs	r2, #4
    e92c:	5e9b      	ldrsh	r3, [r3, r2]
    e92e:	121b      	asrs	r3, r3, #8
    e930:	b2da      	uxtb	r2, r3
    e932:	4b1d      	ldr	r3, [pc, #116]	; (e9a8 <save_cal_data+0x120>)
    e934:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = ((aBiasRaw[2]) & 0xFF);
    e936:	4b1e      	ldr	r3, [pc, #120]	; (e9b0 <save_cal_data+0x128>)
    e938:	2204      	movs	r2, #4
    e93a:	5e9b      	ldrsh	r3, [r3, r2]
    e93c:	b2da      	uxtb	r2, r3
    e93e:	4b1a      	ldr	r3, [pc, #104]	; (e9a8 <save_cal_data+0x120>)
    e940:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = ((mBiasRaw[0]) & 0xFF00) >> 8;
    e942:	4b1c      	ldr	r3, [pc, #112]	; (e9b4 <save_cal_data+0x12c>)
    e944:	2200      	movs	r2, #0
    e946:	5e9b      	ldrsh	r3, [r3, r2]
    e948:	121b      	asrs	r3, r3, #8
    e94a:	b2da      	uxtb	r2, r3
    e94c:	4b16      	ldr	r3, [pc, #88]	; (e9a8 <save_cal_data+0x120>)
    e94e:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = ((mBiasRaw[0]) & 0xFF);
    e950:	4b18      	ldr	r3, [pc, #96]	; (e9b4 <save_cal_data+0x12c>)
    e952:	2200      	movs	r2, #0
    e954:	5e9b      	ldrsh	r3, [r3, r2]
    e956:	b2da      	uxtb	r2, r3
    e958:	4b13      	ldr	r3, [pc, #76]	; (e9a8 <save_cal_data+0x120>)
    e95a:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = ((mBiasRaw[1]) & 0xFF00) >> 8;
    e95c:	4b15      	ldr	r3, [pc, #84]	; (e9b4 <save_cal_data+0x12c>)
    e95e:	2202      	movs	r2, #2
    e960:	5e9b      	ldrsh	r3, [r3, r2]
    e962:	121b      	asrs	r3, r3, #8
    e964:	b2da      	uxtb	r2, r3
    e966:	4b10      	ldr	r3, [pc, #64]	; (e9a8 <save_cal_data+0x120>)
    e968:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = ((mBiasRaw[1]) & 0xFF);
    e96a:	4b12      	ldr	r3, [pc, #72]	; (e9b4 <save_cal_data+0x12c>)
    e96c:	2202      	movs	r2, #2
    e96e:	5e9b      	ldrsh	r3, [r3, r2]
    e970:	b2da      	uxtb	r2, r3
    e972:	4b0d      	ldr	r3, [pc, #52]	; (e9a8 <save_cal_data+0x120>)
    e974:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = ((mBiasRaw[2]) & 0xFF00) >> 8;
    e976:	4b0f      	ldr	r3, [pc, #60]	; (e9b4 <save_cal_data+0x12c>)
    e978:	2204      	movs	r2, #4
    e97a:	5e9b      	ldrsh	r3, [r3, r2]
    e97c:	121b      	asrs	r3, r3, #8
    e97e:	b2da      	uxtb	r2, r3
    e980:	4b09      	ldr	r3, [pc, #36]	; (e9a8 <save_cal_data+0x120>)
    e982:	741a      	strb	r2, [r3, #16]
	eeprom_data[17] = ((mBiasRaw[2]) & 0xFF);
    e984:	4b0b      	ldr	r3, [pc, #44]	; (e9b4 <save_cal_data+0x12c>)
    e986:	2204      	movs	r2, #4
    e988:	5e9b      	ldrsh	r3, [r3, r2]
    e98a:	b2da      	uxtb	r2, r3
    e98c:	4b06      	ldr	r3, [pc, #24]	; (e9a8 <save_cal_data+0x120>)
    e98e:	745a      	strb	r2, [r3, #17]

	//Write EEPROM data
	eeprom_emulator_write_page(2, eeprom_data);
    e990:	4b05      	ldr	r3, [pc, #20]	; (e9a8 <save_cal_data+0x120>)
    e992:	0019      	movs	r1, r3
    e994:	2002      	movs	r0, #2
    e996:	4b08      	ldr	r3, [pc, #32]	; (e9b8 <save_cal_data+0x130>)
    e998:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    e99a:	4b08      	ldr	r3, [pc, #32]	; (e9bc <save_cal_data+0x134>)
    e99c:	4798      	blx	r3
}
    e99e:	46c0      	nop			; (mov r8, r8)
    e9a0:	46bd      	mov	sp, r7
    e9a2:	b002      	add	sp, #8
    e9a4:	bd80      	pop	{r7, pc}
    e9a6:	46c0      	nop			; (mov r8, r8)
    e9a8:	200009c8 	.word	0x200009c8
    e9ac:	20000a80 	.word	0x20000a80
    e9b0:	20000a88 	.word	0x20000a88
    e9b4:	20000498 	.word	0x20000498
    e9b8:	00008739 	.word	0x00008739
    e9bc:	000088e1 	.word	0x000088e1

0000e9c0 <restore_cal_data>:

void restore_cal_data(bool autoCal)
{
    e9c0:	b580      	push	{r7, lr}
    e9c2:	b084      	sub	sp, #16
    e9c4:	af00      	add	r7, sp, #0
    e9c6:	0002      	movs	r2, r0
    e9c8:	1dfb      	adds	r3, r7, #7
    e9ca:	701a      	strb	r2, [r3, #0]
	eeprom_emulator_read_page(2, eeprom_data);
    e9cc:	4b63      	ldr	r3, [pc, #396]	; (eb5c <restore_cal_data+0x19c>)
    e9ce:	0019      	movs	r1, r3
    e9d0:	2002      	movs	r0, #2
    e9d2:	4b63      	ldr	r3, [pc, #396]	; (eb60 <restore_cal_data+0x1a0>)
    e9d4:	4798      	blx	r3
	int16_t temp = 0;
    e9d6:	230e      	movs	r3, #14
    e9d8:	18fb      	adds	r3, r7, r3
    e9da:	2200      	movs	r2, #0
    e9dc:	801a      	strh	r2, [r3, #0]

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    e9de:	4b5f      	ldr	r3, [pc, #380]	; (eb5c <restore_cal_data+0x19c>)
    e9e0:	781b      	ldrb	r3, [r3, #0]
    e9e2:	2bff      	cmp	r3, #255	; 0xff
    e9e4:	d121      	bne.n	ea2a <restore_cal_data+0x6a>
    e9e6:	4b5d      	ldr	r3, [pc, #372]	; (eb5c <restore_cal_data+0x19c>)
    e9e8:	785b      	ldrb	r3, [r3, #1]
    e9ea:	2bff      	cmp	r3, #255	; 0xff
    e9ec:	d11d      	bne.n	ea2a <restore_cal_data+0x6a>
		gBiasRaw[0] = 0;
    e9ee:	4b5d      	ldr	r3, [pc, #372]	; (eb64 <restore_cal_data+0x1a4>)
    e9f0:	2200      	movs	r2, #0
    e9f2:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = 0;
    e9f4:	4b5b      	ldr	r3, [pc, #364]	; (eb64 <restore_cal_data+0x1a4>)
    e9f6:	2200      	movs	r2, #0
    e9f8:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = 0;
    e9fa:	4b5a      	ldr	r3, [pc, #360]	; (eb64 <restore_cal_data+0x1a4>)
    e9fc:	2200      	movs	r2, #0
    e9fe:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = 0;
    ea00:	4b59      	ldr	r3, [pc, #356]	; (eb68 <restore_cal_data+0x1a8>)
    ea02:	2200      	movs	r2, #0
    ea04:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = 0;
    ea06:	4b58      	ldr	r3, [pc, #352]	; (eb68 <restore_cal_data+0x1a8>)
    ea08:	2200      	movs	r2, #0
    ea0a:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = 0;
    ea0c:	4b56      	ldr	r3, [pc, #344]	; (eb68 <restore_cal_data+0x1a8>)
    ea0e:	2200      	movs	r2, #0
    ea10:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = 0;
    ea12:	4b56      	ldr	r3, [pc, #344]	; (eb6c <restore_cal_data+0x1ac>)
    ea14:	2200      	movs	r2, #0
    ea16:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = 0;
    ea18:	4b54      	ldr	r3, [pc, #336]	; (eb6c <restore_cal_data+0x1ac>)
    ea1a:	2200      	movs	r2, #0
    ea1c:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = 0;
    ea1e:	4b53      	ldr	r3, [pc, #332]	; (eb6c <restore_cal_data+0x1ac>)
    ea20:	2200      	movs	r2, #0
    ea22:	809a      	strh	r2, [r3, #4]

		save_cal_data();
    ea24:	4b52      	ldr	r3, [pc, #328]	; (eb70 <restore_cal_data+0x1b0>)
    ea26:	4798      	blx	r3
    ea28:	e08f      	b.n	eb4a <restore_cal_data+0x18a>
	}
	else{ // else restore the stored data
		gBiasRaw[0] = (temp | (eeprom_data[0] << 8) | eeprom_data[1]);
    ea2a:	4b4c      	ldr	r3, [pc, #304]	; (eb5c <restore_cal_data+0x19c>)
    ea2c:	781b      	ldrb	r3, [r3, #0]
    ea2e:	021b      	lsls	r3, r3, #8
    ea30:	b21a      	sxth	r2, r3
    ea32:	230e      	movs	r3, #14
    ea34:	18fb      	adds	r3, r7, r3
    ea36:	881b      	ldrh	r3, [r3, #0]
    ea38:	4313      	orrs	r3, r2
    ea3a:	b21a      	sxth	r2, r3
    ea3c:	4b47      	ldr	r3, [pc, #284]	; (eb5c <restore_cal_data+0x19c>)
    ea3e:	785b      	ldrb	r3, [r3, #1]
    ea40:	b21b      	sxth	r3, r3
    ea42:	4313      	orrs	r3, r2
    ea44:	b21a      	sxth	r2, r3
    ea46:	4b47      	ldr	r3, [pc, #284]	; (eb64 <restore_cal_data+0x1a4>)
    ea48:	801a      	strh	r2, [r3, #0]
		gBiasRaw[1] = (temp | (eeprom_data[2] << 8) | eeprom_data[3]);
    ea4a:	4b44      	ldr	r3, [pc, #272]	; (eb5c <restore_cal_data+0x19c>)
    ea4c:	789b      	ldrb	r3, [r3, #2]
    ea4e:	021b      	lsls	r3, r3, #8
    ea50:	b21a      	sxth	r2, r3
    ea52:	230e      	movs	r3, #14
    ea54:	18fb      	adds	r3, r7, r3
    ea56:	881b      	ldrh	r3, [r3, #0]
    ea58:	4313      	orrs	r3, r2
    ea5a:	b21a      	sxth	r2, r3
    ea5c:	4b3f      	ldr	r3, [pc, #252]	; (eb5c <restore_cal_data+0x19c>)
    ea5e:	78db      	ldrb	r3, [r3, #3]
    ea60:	b21b      	sxth	r3, r3
    ea62:	4313      	orrs	r3, r2
    ea64:	b21a      	sxth	r2, r3
    ea66:	4b3f      	ldr	r3, [pc, #252]	; (eb64 <restore_cal_data+0x1a4>)
    ea68:	805a      	strh	r2, [r3, #2]
		gBiasRaw[2] = (temp | (eeprom_data[4] << 8) | eeprom_data[5]);
    ea6a:	4b3c      	ldr	r3, [pc, #240]	; (eb5c <restore_cal_data+0x19c>)
    ea6c:	791b      	ldrb	r3, [r3, #4]
    ea6e:	021b      	lsls	r3, r3, #8
    ea70:	b21a      	sxth	r2, r3
    ea72:	230e      	movs	r3, #14
    ea74:	18fb      	adds	r3, r7, r3
    ea76:	881b      	ldrh	r3, [r3, #0]
    ea78:	4313      	orrs	r3, r2
    ea7a:	b21a      	sxth	r2, r3
    ea7c:	4b37      	ldr	r3, [pc, #220]	; (eb5c <restore_cal_data+0x19c>)
    ea7e:	795b      	ldrb	r3, [r3, #5]
    ea80:	b21b      	sxth	r3, r3
    ea82:	4313      	orrs	r3, r2
    ea84:	b21a      	sxth	r2, r3
    ea86:	4b37      	ldr	r3, [pc, #220]	; (eb64 <restore_cal_data+0x1a4>)
    ea88:	809a      	strh	r2, [r3, #4]
		aBiasRaw[0] = (temp | (eeprom_data[6] << 8) | eeprom_data[7]);
    ea8a:	4b34      	ldr	r3, [pc, #208]	; (eb5c <restore_cal_data+0x19c>)
    ea8c:	799b      	ldrb	r3, [r3, #6]
    ea8e:	021b      	lsls	r3, r3, #8
    ea90:	b21a      	sxth	r2, r3
    ea92:	230e      	movs	r3, #14
    ea94:	18fb      	adds	r3, r7, r3
    ea96:	881b      	ldrh	r3, [r3, #0]
    ea98:	4313      	orrs	r3, r2
    ea9a:	b21a      	sxth	r2, r3
    ea9c:	4b2f      	ldr	r3, [pc, #188]	; (eb5c <restore_cal_data+0x19c>)
    ea9e:	79db      	ldrb	r3, [r3, #7]
    eaa0:	b21b      	sxth	r3, r3
    eaa2:	4313      	orrs	r3, r2
    eaa4:	b21a      	sxth	r2, r3
    eaa6:	4b30      	ldr	r3, [pc, #192]	; (eb68 <restore_cal_data+0x1a8>)
    eaa8:	801a      	strh	r2, [r3, #0]
		aBiasRaw[1] = (temp | (eeprom_data[8] << 8) | eeprom_data[9]);
    eaaa:	4b2c      	ldr	r3, [pc, #176]	; (eb5c <restore_cal_data+0x19c>)
    eaac:	7a1b      	ldrb	r3, [r3, #8]
    eaae:	021b      	lsls	r3, r3, #8
    eab0:	b21a      	sxth	r2, r3
    eab2:	230e      	movs	r3, #14
    eab4:	18fb      	adds	r3, r7, r3
    eab6:	881b      	ldrh	r3, [r3, #0]
    eab8:	4313      	orrs	r3, r2
    eaba:	b21a      	sxth	r2, r3
    eabc:	4b27      	ldr	r3, [pc, #156]	; (eb5c <restore_cal_data+0x19c>)
    eabe:	7a5b      	ldrb	r3, [r3, #9]
    eac0:	b21b      	sxth	r3, r3
    eac2:	4313      	orrs	r3, r2
    eac4:	b21a      	sxth	r2, r3
    eac6:	4b28      	ldr	r3, [pc, #160]	; (eb68 <restore_cal_data+0x1a8>)
    eac8:	805a      	strh	r2, [r3, #2]
		aBiasRaw[2] = (temp | (eeprom_data[10] << 8) | eeprom_data[11]);
    eaca:	4b24      	ldr	r3, [pc, #144]	; (eb5c <restore_cal_data+0x19c>)
    eacc:	7a9b      	ldrb	r3, [r3, #10]
    eace:	021b      	lsls	r3, r3, #8
    ead0:	b21a      	sxth	r2, r3
    ead2:	230e      	movs	r3, #14
    ead4:	18fb      	adds	r3, r7, r3
    ead6:	881b      	ldrh	r3, [r3, #0]
    ead8:	4313      	orrs	r3, r2
    eada:	b21a      	sxth	r2, r3
    eadc:	4b1f      	ldr	r3, [pc, #124]	; (eb5c <restore_cal_data+0x19c>)
    eade:	7adb      	ldrb	r3, [r3, #11]
    eae0:	b21b      	sxth	r3, r3
    eae2:	4313      	orrs	r3, r2
    eae4:	b21a      	sxth	r2, r3
    eae6:	4b20      	ldr	r3, [pc, #128]	; (eb68 <restore_cal_data+0x1a8>)
    eae8:	809a      	strh	r2, [r3, #4]
		mBiasRaw[0] = (temp | (eeprom_data[12] << 8) | eeprom_data[13]);
    eaea:	4b1c      	ldr	r3, [pc, #112]	; (eb5c <restore_cal_data+0x19c>)
    eaec:	7b1b      	ldrb	r3, [r3, #12]
    eaee:	021b      	lsls	r3, r3, #8
    eaf0:	b21a      	sxth	r2, r3
    eaf2:	230e      	movs	r3, #14
    eaf4:	18fb      	adds	r3, r7, r3
    eaf6:	881b      	ldrh	r3, [r3, #0]
    eaf8:	4313      	orrs	r3, r2
    eafa:	b21a      	sxth	r2, r3
    eafc:	4b17      	ldr	r3, [pc, #92]	; (eb5c <restore_cal_data+0x19c>)
    eafe:	7b5b      	ldrb	r3, [r3, #13]
    eb00:	b21b      	sxth	r3, r3
    eb02:	4313      	orrs	r3, r2
    eb04:	b21a      	sxth	r2, r3
    eb06:	4b19      	ldr	r3, [pc, #100]	; (eb6c <restore_cal_data+0x1ac>)
    eb08:	801a      	strh	r2, [r3, #0]
		mBiasRaw[1] = (temp | (eeprom_data[14] << 8) | eeprom_data[15]);
    eb0a:	4b14      	ldr	r3, [pc, #80]	; (eb5c <restore_cal_data+0x19c>)
    eb0c:	7b9b      	ldrb	r3, [r3, #14]
    eb0e:	021b      	lsls	r3, r3, #8
    eb10:	b21a      	sxth	r2, r3
    eb12:	230e      	movs	r3, #14
    eb14:	18fb      	adds	r3, r7, r3
    eb16:	881b      	ldrh	r3, [r3, #0]
    eb18:	4313      	orrs	r3, r2
    eb1a:	b21a      	sxth	r2, r3
    eb1c:	4b0f      	ldr	r3, [pc, #60]	; (eb5c <restore_cal_data+0x19c>)
    eb1e:	7bdb      	ldrb	r3, [r3, #15]
    eb20:	b21b      	sxth	r3, r3
    eb22:	4313      	orrs	r3, r2
    eb24:	b21a      	sxth	r2, r3
    eb26:	4b11      	ldr	r3, [pc, #68]	; (eb6c <restore_cal_data+0x1ac>)
    eb28:	805a      	strh	r2, [r3, #2]
		mBiasRaw[2] = (temp | (eeprom_data[16] << 8) | eeprom_data[17]);
    eb2a:	4b0c      	ldr	r3, [pc, #48]	; (eb5c <restore_cal_data+0x19c>)
    eb2c:	7c1b      	ldrb	r3, [r3, #16]
    eb2e:	021b      	lsls	r3, r3, #8
    eb30:	b21a      	sxth	r2, r3
    eb32:	230e      	movs	r3, #14
    eb34:	18fb      	adds	r3, r7, r3
    eb36:	881b      	ldrh	r3, [r3, #0]
    eb38:	4313      	orrs	r3, r2
    eb3a:	b21a      	sxth	r2, r3
    eb3c:	4b07      	ldr	r3, [pc, #28]	; (eb5c <restore_cal_data+0x19c>)
    eb3e:	7c5b      	ldrb	r3, [r3, #17]
    eb40:	b21b      	sxth	r3, r3
    eb42:	4313      	orrs	r3, r2
    eb44:	b21a      	sxth	r2, r3
    eb46:	4b09      	ldr	r3, [pc, #36]	; (eb6c <restore_cal_data+0x1ac>)
    eb48:	809a      	strh	r2, [r3, #4]
	}
	
	_autoCalc = autoCal;
    eb4a:	4b0a      	ldr	r3, [pc, #40]	; (eb74 <restore_cal_data+0x1b4>)
    eb4c:	1dfa      	adds	r2, r7, #7
    eb4e:	7812      	ldrb	r2, [r2, #0]
    eb50:	701a      	strb	r2, [r3, #0]
}
    eb52:	46c0      	nop			; (mov r8, r8)
    eb54:	46bd      	mov	sp, r7
    eb56:	b004      	add	sp, #16
    eb58:	bd80      	pop	{r7, pc}
    eb5a:	46c0      	nop			; (mov r8, r8)
    eb5c:	200009c8 	.word	0x200009c8
    eb60:	00008845 	.word	0x00008845
    eb64:	20000a80 	.word	0x20000a80
    eb68:	20000a88 	.word	0x20000a88
    eb6c:	20000498 	.word	0x20000498
    eb70:	0000e889 	.word	0x0000e889
    eb74:	200008f0 	.word	0x200008f0

0000eb78 <save_orientation_controls_remote_esc>:

void save_orientation_controls_remote_esc()
{
    eb78:	b580      	push	{r7, lr}
    eb7a:	b082      	sub	sp, #8
    eb7c:	af00      	add	r7, sp, #0
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    eb7e:	2300      	movs	r3, #0
    eb80:	607b      	str	r3, [r7, #4]
    eb82:	e005      	b.n	eb90 <save_orientation_controls_remote_esc+0x18>
		eeprom_data[0] = 0;
    eb84:	4b42      	ldr	r3, [pc, #264]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    eb86:	2200      	movs	r2, #0
    eb88:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EEPROM_PAGE_SIZE; i++){
    eb8a:	687b      	ldr	r3, [r7, #4]
    eb8c:	3301      	adds	r3, #1
    eb8e:	607b      	str	r3, [r7, #4]
    eb90:	687b      	ldr	r3, [r7, #4]
    eb92:	2b3b      	cmp	r3, #59	; 0x3b
    eb94:	ddf6      	ble.n	eb84 <save_orientation_controls_remote_esc+0xc>
	}

	eeprom_data[0] = ORIENTATION[0];
    eb96:	4b3f      	ldr	r3, [pc, #252]	; (ec94 <save_orientation_controls_remote_esc+0x11c>)
    eb98:	781a      	ldrb	r2, [r3, #0]
    eb9a:	4b3d      	ldr	r3, [pc, #244]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    eb9c:	701a      	strb	r2, [r3, #0]
	eeprom_data[1] = ORIENTATION[1];
    eb9e:	4b3d      	ldr	r3, [pc, #244]	; (ec94 <save_orientation_controls_remote_esc+0x11c>)
    eba0:	785a      	ldrb	r2, [r3, #1]
    eba2:	4b3b      	ldr	r3, [pc, #236]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    eba4:	705a      	strb	r2, [r3, #1]

	eeprom_data[2] = ((AUX_ENABLED << 1) | TURN_ENABLED);
    eba6:	4b3c      	ldr	r3, [pc, #240]	; (ec98 <save_orientation_controls_remote_esc+0x120>)
    eba8:	781b      	ldrb	r3, [r3, #0]
    ebaa:	005b      	lsls	r3, r3, #1
    ebac:	b25a      	sxtb	r2, r3
    ebae:	4b3b      	ldr	r3, [pc, #236]	; (ec9c <save_orientation_controls_remote_esc+0x124>)
    ebb0:	781b      	ldrb	r3, [r3, #0]
    ebb2:	b25b      	sxtb	r3, r3
    ebb4:	4313      	orrs	r3, r2
    ebb6:	b25b      	sxtb	r3, r3
    ebb8:	b2da      	uxtb	r2, r3
    ebba:	4b35      	ldr	r3, [pc, #212]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ebbc:	709a      	strb	r2, [r3, #2]
	eeprom_data[3] = auxControlType;
    ebbe:	4b38      	ldr	r3, [pc, #224]	; (eca0 <save_orientation_controls_remote_esc+0x128>)
    ebc0:	781a      	ldrb	r2, [r3, #0]
    ebc2:	4b33      	ldr	r3, [pc, #204]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ebc4:	70da      	strb	r2, [r3, #3]
	eeprom_data[4] = auxTimedDuration;
    ebc6:	4b37      	ldr	r3, [pc, #220]	; (eca4 <save_orientation_controls_remote_esc+0x12c>)
    ebc8:	781a      	ldrb	r2, [r3, #0]
    ebca:	4b31      	ldr	r3, [pc, #196]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ebcc:	711a      	strb	r2, [r3, #4]
	eeprom_data[5] = single_aux_control;
    ebce:	4b36      	ldr	r3, [pc, #216]	; (eca8 <save_orientation_controls_remote_esc+0x130>)
    ebd0:	781a      	ldrb	r2, [r3, #0]
    ebd2:	4b2f      	ldr	r3, [pc, #188]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ebd4:	715a      	strb	r2, [r3, #5]
	eeprom_data[6] = single_all_control;
    ebd6:	4b35      	ldr	r3, [pc, #212]	; (ecac <save_orientation_controls_remote_esc+0x134>)
    ebd8:	781a      	ldrb	r2, [r3, #0]
    ebda:	4b2d      	ldr	r3, [pc, #180]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ebdc:	719a      	strb	r2, [r3, #6]
	eeprom_data[7] = single_head_control;
    ebde:	4b34      	ldr	r3, [pc, #208]	; (ecb0 <save_orientation_controls_remote_esc+0x138>)
    ebe0:	781a      	ldrb	r2, [r3, #0]
    ebe2:	4b2b      	ldr	r3, [pc, #172]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ebe4:	71da      	strb	r2, [r3, #7]
	eeprom_data[8] = single_side_control;
    ebe6:	4b33      	ldr	r3, [pc, #204]	; (ecb4 <save_orientation_controls_remote_esc+0x13c>)
    ebe8:	781a      	ldrb	r2, [r3, #0]
    ebea:	4b29      	ldr	r3, [pc, #164]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ebec:	721a      	strb	r2, [r3, #8]
	eeprom_data[9] = single_up_control;
    ebee:	4b32      	ldr	r3, [pc, #200]	; (ecb8 <save_orientation_controls_remote_esc+0x140>)
    ebf0:	781a      	ldrb	r2, [r3, #0]
    ebf2:	4b27      	ldr	r3, [pc, #156]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ebf4:	725a      	strb	r2, [r3, #9]
	eeprom_data[10] = single_down_control;
    ebf6:	4b31      	ldr	r3, [pc, #196]	; (ecbc <save_orientation_controls_remote_esc+0x144>)
    ebf8:	781a      	ldrb	r2, [r3, #0]
    ebfa:	4b25      	ldr	r3, [pc, #148]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ebfc:	729a      	strb	r2, [r3, #10]
	eeprom_data[11] = dual_aux_control;
    ebfe:	4b30      	ldr	r3, [pc, #192]	; (ecc0 <save_orientation_controls_remote_esc+0x148>)
    ec00:	781a      	ldrb	r2, [r3, #0]
    ec02:	4b23      	ldr	r3, [pc, #140]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec04:	72da      	strb	r2, [r3, #11]
	eeprom_data[12] = dual_all_control;
    ec06:	4b2f      	ldr	r3, [pc, #188]	; (ecc4 <save_orientation_controls_remote_esc+0x14c>)
    ec08:	781a      	ldrb	r2, [r3, #0]
    ec0a:	4b21      	ldr	r3, [pc, #132]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec0c:	731a      	strb	r2, [r3, #12]
	eeprom_data[13] = dual_head_control;
    ec0e:	4b2e      	ldr	r3, [pc, #184]	; (ecc8 <save_orientation_controls_remote_esc+0x150>)
    ec10:	781a      	ldrb	r2, [r3, #0]
    ec12:	4b1f      	ldr	r3, [pc, #124]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec14:	735a      	strb	r2, [r3, #13]
	eeprom_data[14] = dual_side_control;
    ec16:	4b2d      	ldr	r3, [pc, #180]	; (eccc <save_orientation_controls_remote_esc+0x154>)
    ec18:	781a      	ldrb	r2, [r3, #0]
    ec1a:	4b1d      	ldr	r3, [pc, #116]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec1c:	739a      	strb	r2, [r3, #14]
	eeprom_data[15] = dual_up_control;
    ec1e:	4b2c      	ldr	r3, [pc, #176]	; (ecd0 <save_orientation_controls_remote_esc+0x158>)
    ec20:	781a      	ldrb	r2, [r3, #0]
    ec22:	4b1b      	ldr	r3, [pc, #108]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec24:	73da      	strb	r2, [r3, #15]
	eeprom_data[16] = dual_down_control;
    ec26:	4b2b      	ldr	r3, [pc, #172]	; (ecd4 <save_orientation_controls_remote_esc+0x15c>)
    ec28:	781a      	ldrb	r2, [r3, #0]
    ec2a:	4b19      	ldr	r3, [pc, #100]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec2c:	741a      	strb	r2, [r3, #16]

	eeprom_data[17] = ((remote_type << 4) | (button_type & 0x0F));
    ec2e:	4b2a      	ldr	r3, [pc, #168]	; (ecd8 <save_orientation_controls_remote_esc+0x160>)
    ec30:	781b      	ldrb	r3, [r3, #0]
    ec32:	011b      	lsls	r3, r3, #4
    ec34:	b25a      	sxtb	r2, r3
    ec36:	4b29      	ldr	r3, [pc, #164]	; (ecdc <save_orientation_controls_remote_esc+0x164>)
    ec38:	781b      	ldrb	r3, [r3, #0]
    ec3a:	b25b      	sxtb	r3, r3
    ec3c:	210f      	movs	r1, #15
    ec3e:	400b      	ands	r3, r1
    ec40:	b25b      	sxtb	r3, r3
    ec42:	4313      	orrs	r3, r2
    ec44:	b25b      	sxtb	r3, r3
    ec46:	b2da      	uxtb	r2, r3
    ec48:	4b11      	ldr	r3, [pc, #68]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec4a:	745a      	strb	r2, [r3, #17]
	eeprom_data[18] = deadzone;
    ec4c:	4b24      	ldr	r3, [pc, #144]	; (ece0 <save_orientation_controls_remote_esc+0x168>)
    ec4e:	781a      	ldrb	r2, [r3, #0]
    ec50:	4b0f      	ldr	r3, [pc, #60]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec52:	749a      	strb	r2, [r3, #18]
	
	eeprom_data[19] = esc_fw;
    ec54:	4b23      	ldr	r3, [pc, #140]	; (ece4 <save_orientation_controls_remote_esc+0x16c>)
    ec56:	781a      	ldrb	r2, [r3, #0]
    ec58:	4b0d      	ldr	r3, [pc, #52]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec5a:	74da      	strb	r2, [r3, #19]
	eeprom_data[20] = ((esc_comms << 4) | (UART_baud & 0x0F));//*/
    ec5c:	4b22      	ldr	r3, [pc, #136]	; (ece8 <save_orientation_controls_remote_esc+0x170>)
    ec5e:	781b      	ldrb	r3, [r3, #0]
    ec60:	011b      	lsls	r3, r3, #4
    ec62:	b25a      	sxtb	r2, r3
    ec64:	4b21      	ldr	r3, [pc, #132]	; (ecec <save_orientation_controls_remote_esc+0x174>)
    ec66:	781b      	ldrb	r3, [r3, #0]
    ec68:	b25b      	sxtb	r3, r3
    ec6a:	210f      	movs	r1, #15
    ec6c:	400b      	ands	r3, r1
    ec6e:	b25b      	sxtb	r3, r3
    ec70:	4313      	orrs	r3, r2
    ec72:	b25b      	sxtb	r3, r3
    ec74:	b2da      	uxtb	r2, r3
    ec76:	4b06      	ldr	r3, [pc, #24]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec78:	751a      	strb	r2, [r3, #20]

	//Write EEPROM data
	eeprom_emulator_write_page(3, eeprom_data);
    ec7a:	4b05      	ldr	r3, [pc, #20]	; (ec90 <save_orientation_controls_remote_esc+0x118>)
    ec7c:	0019      	movs	r1, r3
    ec7e:	2003      	movs	r0, #3
    ec80:	4b1b      	ldr	r3, [pc, #108]	; (ecf0 <save_orientation_controls_remote_esc+0x178>)
    ec82:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    ec84:	4b1b      	ldr	r3, [pc, #108]	; (ecf4 <save_orientation_controls_remote_esc+0x17c>)
    ec86:	4798      	blx	r3
}
    ec88:	46c0      	nop			; (mov r8, r8)
    ec8a:	46bd      	mov	sp, r7
    ec8c:	b002      	add	sp, #8
    ec8e:	bd80      	pop	{r7, pc}
    ec90:	200009c8 	.word	0x200009c8
    ec94:	20000004 	.word	0x20000004
    ec98:	20000374 	.word	0x20000374
    ec9c:	20000375 	.word	0x20000375
    eca0:	20000377 	.word	0x20000377
    eca4:	20000378 	.word	0x20000378
    eca8:	20000379 	.word	0x20000379
    ecac:	2000037a 	.word	0x2000037a
    ecb0:	2000037b 	.word	0x2000037b
    ecb4:	2000037c 	.word	0x2000037c
    ecb8:	2000037d 	.word	0x2000037d
    ecbc:	2000037e 	.word	0x2000037e
    ecc0:	2000037f 	.word	0x2000037f
    ecc4:	20000380 	.word	0x20000380
    ecc8:	20000381 	.word	0x20000381
    eccc:	20000382 	.word	0x20000382
    ecd0:	20000383 	.word	0x20000383
    ecd4:	20000384 	.word	0x20000384
    ecd8:	20000308 	.word	0x20000308
    ecdc:	20000309 	.word	0x20000309
    ece0:	20000018 	.word	0x20000018
    ece4:	2000001a 	.word	0x2000001a
    ece8:	20000310 	.word	0x20000310
    ecec:	20000311 	.word	0x20000311
    ecf0:	00008739 	.word	0x00008739
    ecf4:	000088e1 	.word	0x000088e1

0000ecf8 <restore_orientation_controls_remote_esc>:

void restore_orientation_controls_remote_esc()
{
    ecf8:	b580      	push	{r7, lr}
    ecfa:	af00      	add	r7, sp, #0
	eeprom_emulator_read_page(3, eeprom_data);
    ecfc:	4b68      	ldr	r3, [pc, #416]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ecfe:	0019      	movs	r1, r3
    ed00:	2003      	movs	r0, #3
    ed02:	4b68      	ldr	r3, [pc, #416]	; (eea4 <restore_orientation_controls_remote_esc+0x1ac>)
    ed04:	4798      	blx	r3

	// If EEPROM has not been written, configure with default values then write them
	if(eeprom_data[0] == 0xFF && eeprom_data[1] == 0xFF) {
    ed06:	4b66      	ldr	r3, [pc, #408]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ed08:	781b      	ldrb	r3, [r3, #0]
    ed0a:	2bff      	cmp	r3, #255	; 0xff
    ed0c:	d14e      	bne.n	edac <restore_orientation_controls_remote_esc+0xb4>
    ed0e:	4b64      	ldr	r3, [pc, #400]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ed10:	785b      	ldrb	r3, [r3, #1]
    ed12:	2bff      	cmp	r3, #255	; 0xff
    ed14:	d14a      	bne.n	edac <restore_orientation_controls_remote_esc+0xb4>
		ORIENTATION[0] = 1; // Connectors up
    ed16:	4b64      	ldr	r3, [pc, #400]	; (eea8 <restore_orientation_controls_remote_esc+0x1b0>)
    ed18:	2201      	movs	r2, #1
    ed1a:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = 6; // Power front
    ed1c:	4b62      	ldr	r3, [pc, #392]	; (eea8 <restore_orientation_controls_remote_esc+0x1b0>)
    ed1e:	2206      	movs	r2, #6
    ed20:	705a      	strb	r2, [r3, #1]

		AUX_ENABLED = 0; // Aux disabled
    ed22:	4b62      	ldr	r3, [pc, #392]	; (eeac <restore_orientation_controls_remote_esc+0x1b4>)
    ed24:	2200      	movs	r2, #0
    ed26:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = 0; // Turn disabled
    ed28:	4b61      	ldr	r3, [pc, #388]	; (eeb0 <restore_orientation_controls_remote_esc+0x1b8>)
    ed2a:	2200      	movs	r2, #0
    ed2c:	701a      	strb	r2, [r3, #0]
		auxControlType = AUX_MOMENTARY;
    ed2e:	4b61      	ldr	r3, [pc, #388]	; (eeb4 <restore_orientation_controls_remote_esc+0x1bc>)
    ed30:	2200      	movs	r2, #0
    ed32:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = 10; // 1 second
    ed34:	4b60      	ldr	r3, [pc, #384]	; (eeb8 <restore_orientation_controls_remote_esc+0x1c0>)
    ed36:	220a      	movs	r2, #10
    ed38:	701a      	strb	r2, [r3, #0]
		single_aux_control = PRESS_NONE;
    ed3a:	4b60      	ldr	r3, [pc, #384]	; (eebc <restore_orientation_controls_remote_esc+0x1c4>)
    ed3c:	2200      	movs	r2, #0
    ed3e:	701a      	strb	r2, [r3, #0]
		single_all_control = SINGLE_TAP;
    ed40:	4b5f      	ldr	r3, [pc, #380]	; (eec0 <restore_orientation_controls_remote_esc+0x1c8>)
    ed42:	2201      	movs	r2, #1
    ed44:	701a      	strb	r2, [r3, #0]
		single_head_control = MEDIUM_PRESS;
    ed46:	4b5f      	ldr	r3, [pc, #380]	; (eec4 <restore_orientation_controls_remote_esc+0x1cc>)
    ed48:	2206      	movs	r2, #6
    ed4a:	701a      	strb	r2, [r3, #0]
		single_side_control = LONG_PRESS;
    ed4c:	4b5e      	ldr	r3, [pc, #376]	; (eec8 <restore_orientation_controls_remote_esc+0x1d0>)
    ed4e:	2207      	movs	r2, #7
    ed50:	701a      	strb	r2, [r3, #0]
		single_up_control = DOUBLE_TAP;
    ed52:	4b5e      	ldr	r3, [pc, #376]	; (eecc <restore_orientation_controls_remote_esc+0x1d4>)
    ed54:	2202      	movs	r2, #2
    ed56:	701a      	strb	r2, [r3, #0]
		single_down_control = TRIPLE_TAP;
    ed58:	4b5d      	ldr	r3, [pc, #372]	; (eed0 <restore_orientation_controls_remote_esc+0x1d8>)
    ed5a:	2203      	movs	r2, #3
    ed5c:	701a      	strb	r2, [r3, #0]
		dual_aux_control = PRESS_NONE;
    ed5e:	4b5d      	ldr	r3, [pc, #372]	; (eed4 <restore_orientation_controls_remote_esc+0x1dc>)
    ed60:	2200      	movs	r2, #0
    ed62:	701a      	strb	r2, [r3, #0]
		dual_all_control = SINGLE_TAP;
    ed64:	4b5c      	ldr	r3, [pc, #368]	; (eed8 <restore_orientation_controls_remote_esc+0x1e0>)
    ed66:	2201      	movs	r2, #1
    ed68:	701a      	strb	r2, [r3, #0]
		dual_head_control = MEDIUM_PRESS;
    ed6a:	4b5c      	ldr	r3, [pc, #368]	; (eedc <restore_orientation_controls_remote_esc+0x1e4>)
    ed6c:	2206      	movs	r2, #6
    ed6e:	701a      	strb	r2, [r3, #0]
		dual_side_control = LONG_PRESS;
    ed70:	4b5b      	ldr	r3, [pc, #364]	; (eee0 <restore_orientation_controls_remote_esc+0x1e8>)
    ed72:	2207      	movs	r2, #7
    ed74:	701a      	strb	r2, [r3, #0]
		dual_up_control =  RIGHT_TAP;
    ed76:	4b5b      	ldr	r3, [pc, #364]	; (eee4 <restore_orientation_controls_remote_esc+0x1ec>)
    ed78:	2205      	movs	r2, #5
    ed7a:	701a      	strb	r2, [r3, #0]
		dual_down_control = LEFT_TAP;
    ed7c:	4b5a      	ldr	r3, [pc, #360]	; (eee8 <restore_orientation_controls_remote_esc+0x1f0>)
    ed7e:	2204      	movs	r2, #4
    ed80:	701a      	strb	r2, [r3, #0]

		remote_type = 0;
    ed82:	4b5a      	ldr	r3, [pc, #360]	; (eeec <restore_orientation_controls_remote_esc+0x1f4>)
    ed84:	2200      	movs	r2, #0
    ed86:	701a      	strb	r2, [r3, #0]
		deadzone = 10;
    ed88:	4b59      	ldr	r3, [pc, #356]	; (eef0 <restore_orientation_controls_remote_esc+0x1f8>)
    ed8a:	220a      	movs	r2, #10
    ed8c:	701a      	strb	r2, [r3, #0]
		button_type = 1;
    ed8e:	4b59      	ldr	r3, [pc, #356]	; (eef4 <restore_orientation_controls_remote_esc+0x1fc>)
    ed90:	2201      	movs	r2, #1
    ed92:	701a      	strb	r2, [r3, #0]

		esc_fw = FW_3v00; // Set 3.0 as the default FW to prevent bricking any ESCs
    ed94:	4b58      	ldr	r3, [pc, #352]	; (eef8 <restore_orientation_controls_remote_esc+0x200>)
    ed96:	2201      	movs	r2, #1
    ed98:	701a      	strb	r2, [r3, #0]
		esc_comms = 2;
    ed9a:	4b58      	ldr	r3, [pc, #352]	; (eefc <restore_orientation_controls_remote_esc+0x204>)
    ed9c:	2202      	movs	r2, #2
    ed9e:	701a      	strb	r2, [r3, #0]
		UART_baud = 3;
    eda0:	4b57      	ldr	r3, [pc, #348]	; (ef00 <restore_orientation_controls_remote_esc+0x208>)
    eda2:	2203      	movs	r2, #3
    eda4:	701a      	strb	r2, [r3, #0]

		save_orientation_controls_remote_esc();
    eda6:	4b57      	ldr	r3, [pc, #348]	; (ef04 <restore_orientation_controls_remote_esc+0x20c>)
    eda8:	4798      	blx	r3
    edaa:	e075      	b.n	ee98 <restore_orientation_controls_remote_esc+0x1a0>
	}
	else { // else restore the stored data
		ORIENTATION[0] = eeprom_data[0];
    edac:	4b3c      	ldr	r3, [pc, #240]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    edae:	781a      	ldrb	r2, [r3, #0]
    edb0:	4b3d      	ldr	r3, [pc, #244]	; (eea8 <restore_orientation_controls_remote_esc+0x1b0>)
    edb2:	701a      	strb	r2, [r3, #0]
		ORIENTATION[1] = eeprom_data[1];
    edb4:	4b3a      	ldr	r3, [pc, #232]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    edb6:	785a      	ldrb	r2, [r3, #1]
    edb8:	4b3b      	ldr	r3, [pc, #236]	; (eea8 <restore_orientation_controls_remote_esc+0x1b0>)
    edba:	705a      	strb	r2, [r3, #1]

		AUX_ENABLED = (eeprom_data[2] & 0x02) >> 1;
    edbc:	4b38      	ldr	r3, [pc, #224]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    edbe:	789b      	ldrb	r3, [r3, #2]
    edc0:	105b      	asrs	r3, r3, #1
    edc2:	2201      	movs	r2, #1
    edc4:	4013      	ands	r3, r2
    edc6:	1e5a      	subs	r2, r3, #1
    edc8:	4193      	sbcs	r3, r2
    edca:	b2da      	uxtb	r2, r3
    edcc:	4b37      	ldr	r3, [pc, #220]	; (eeac <restore_orientation_controls_remote_esc+0x1b4>)
    edce:	701a      	strb	r2, [r3, #0]
		TURN_ENABLED = (eeprom_data[2] & 0x01);
    edd0:	4b33      	ldr	r3, [pc, #204]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    edd2:	789b      	ldrb	r3, [r3, #2]
    edd4:	001a      	movs	r2, r3
    edd6:	2301      	movs	r3, #1
    edd8:	4013      	ands	r3, r2
    edda:	1e5a      	subs	r2, r3, #1
    eddc:	4193      	sbcs	r3, r2
    edde:	b2da      	uxtb	r2, r3
    ede0:	4b33      	ldr	r3, [pc, #204]	; (eeb0 <restore_orientation_controls_remote_esc+0x1b8>)
    ede2:	701a      	strb	r2, [r3, #0]
		auxControlType = eeprom_data[3];
    ede4:	4b2e      	ldr	r3, [pc, #184]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ede6:	78da      	ldrb	r2, [r3, #3]
    ede8:	4b32      	ldr	r3, [pc, #200]	; (eeb4 <restore_orientation_controls_remote_esc+0x1bc>)
    edea:	701a      	strb	r2, [r3, #0]
		auxTimedDuration = eeprom_data[4];
    edec:	4b2c      	ldr	r3, [pc, #176]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    edee:	791a      	ldrb	r2, [r3, #4]
    edf0:	4b31      	ldr	r3, [pc, #196]	; (eeb8 <restore_orientation_controls_remote_esc+0x1c0>)
    edf2:	701a      	strb	r2, [r3, #0]
		single_aux_control = eeprom_data[5];
    edf4:	4b2a      	ldr	r3, [pc, #168]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    edf6:	795a      	ldrb	r2, [r3, #5]
    edf8:	4b30      	ldr	r3, [pc, #192]	; (eebc <restore_orientation_controls_remote_esc+0x1c4>)
    edfa:	701a      	strb	r2, [r3, #0]
		single_all_control = eeprom_data[6];
    edfc:	4b28      	ldr	r3, [pc, #160]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    edfe:	799a      	ldrb	r2, [r3, #6]
    ee00:	4b2f      	ldr	r3, [pc, #188]	; (eec0 <restore_orientation_controls_remote_esc+0x1c8>)
    ee02:	701a      	strb	r2, [r3, #0]
		single_head_control = eeprom_data[7];
    ee04:	4b26      	ldr	r3, [pc, #152]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee06:	79da      	ldrb	r2, [r3, #7]
    ee08:	4b2e      	ldr	r3, [pc, #184]	; (eec4 <restore_orientation_controls_remote_esc+0x1cc>)
    ee0a:	701a      	strb	r2, [r3, #0]
		single_side_control = eeprom_data[8];
    ee0c:	4b24      	ldr	r3, [pc, #144]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee0e:	7a1a      	ldrb	r2, [r3, #8]
    ee10:	4b2d      	ldr	r3, [pc, #180]	; (eec8 <restore_orientation_controls_remote_esc+0x1d0>)
    ee12:	701a      	strb	r2, [r3, #0]
		single_up_control = eeprom_data[9];
    ee14:	4b22      	ldr	r3, [pc, #136]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee16:	7a5a      	ldrb	r2, [r3, #9]
    ee18:	4b2c      	ldr	r3, [pc, #176]	; (eecc <restore_orientation_controls_remote_esc+0x1d4>)
    ee1a:	701a      	strb	r2, [r3, #0]
		single_down_control = eeprom_data[10];
    ee1c:	4b20      	ldr	r3, [pc, #128]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee1e:	7a9a      	ldrb	r2, [r3, #10]
    ee20:	4b2b      	ldr	r3, [pc, #172]	; (eed0 <restore_orientation_controls_remote_esc+0x1d8>)
    ee22:	701a      	strb	r2, [r3, #0]
		dual_aux_control = eeprom_data[11];
    ee24:	4b1e      	ldr	r3, [pc, #120]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee26:	7ada      	ldrb	r2, [r3, #11]
    ee28:	4b2a      	ldr	r3, [pc, #168]	; (eed4 <restore_orientation_controls_remote_esc+0x1dc>)
    ee2a:	701a      	strb	r2, [r3, #0]
		dual_all_control = eeprom_data[12];
    ee2c:	4b1c      	ldr	r3, [pc, #112]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee2e:	7b1a      	ldrb	r2, [r3, #12]
    ee30:	4b29      	ldr	r3, [pc, #164]	; (eed8 <restore_orientation_controls_remote_esc+0x1e0>)
    ee32:	701a      	strb	r2, [r3, #0]
		dual_head_control = eeprom_data[13];
    ee34:	4b1a      	ldr	r3, [pc, #104]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee36:	7b5a      	ldrb	r2, [r3, #13]
    ee38:	4b28      	ldr	r3, [pc, #160]	; (eedc <restore_orientation_controls_remote_esc+0x1e4>)
    ee3a:	701a      	strb	r2, [r3, #0]
		dual_side_control = eeprom_data[14];
    ee3c:	4b18      	ldr	r3, [pc, #96]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee3e:	7b9a      	ldrb	r2, [r3, #14]
    ee40:	4b27      	ldr	r3, [pc, #156]	; (eee0 <restore_orientation_controls_remote_esc+0x1e8>)
    ee42:	701a      	strb	r2, [r3, #0]
		dual_up_control = eeprom_data[15];
    ee44:	4b16      	ldr	r3, [pc, #88]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee46:	7bda      	ldrb	r2, [r3, #15]
    ee48:	4b26      	ldr	r3, [pc, #152]	; (eee4 <restore_orientation_controls_remote_esc+0x1ec>)
    ee4a:	701a      	strb	r2, [r3, #0]
		dual_down_control = eeprom_data[16];
    ee4c:	4b14      	ldr	r3, [pc, #80]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee4e:	7c1a      	ldrb	r2, [r3, #16]
    ee50:	4b25      	ldr	r3, [pc, #148]	; (eee8 <restore_orientation_controls_remote_esc+0x1f0>)
    ee52:	701a      	strb	r2, [r3, #0]

		remote_type = ((eeprom_data[17]&0xF0)>>4);
    ee54:	4b12      	ldr	r3, [pc, #72]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee56:	7c5b      	ldrb	r3, [r3, #17]
    ee58:	091b      	lsrs	r3, r3, #4
    ee5a:	b2da      	uxtb	r2, r3
    ee5c:	4b23      	ldr	r3, [pc, #140]	; (eeec <restore_orientation_controls_remote_esc+0x1f4>)
    ee5e:	701a      	strb	r2, [r3, #0]
		button_type = (eeprom_data[17]&0x0F);
    ee60:	4b0f      	ldr	r3, [pc, #60]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee62:	7c5b      	ldrb	r3, [r3, #17]
    ee64:	220f      	movs	r2, #15
    ee66:	4013      	ands	r3, r2
    ee68:	b2da      	uxtb	r2, r3
    ee6a:	4b22      	ldr	r3, [pc, #136]	; (eef4 <restore_orientation_controls_remote_esc+0x1fc>)
    ee6c:	701a      	strb	r2, [r3, #0]
		deadzone = eeprom_data[18];
    ee6e:	4b0c      	ldr	r3, [pc, #48]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee70:	7c9a      	ldrb	r2, [r3, #18]
    ee72:	4b1f      	ldr	r3, [pc, #124]	; (eef0 <restore_orientation_controls_remote_esc+0x1f8>)
    ee74:	701a      	strb	r2, [r3, #0]

		esc_fw = eeprom_data[19];
    ee76:	4b0a      	ldr	r3, [pc, #40]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee78:	7cda      	ldrb	r2, [r3, #19]
    ee7a:	4b1f      	ldr	r3, [pc, #124]	; (eef8 <restore_orientation_controls_remote_esc+0x200>)
    ee7c:	701a      	strb	r2, [r3, #0]
		esc_comms = ((eeprom_data[20]&0xF0)>>4);
    ee7e:	4b08      	ldr	r3, [pc, #32]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee80:	7d1b      	ldrb	r3, [r3, #20]
    ee82:	091b      	lsrs	r3, r3, #4
    ee84:	b2da      	uxtb	r2, r3
    ee86:	4b1d      	ldr	r3, [pc, #116]	; (eefc <restore_orientation_controls_remote_esc+0x204>)
    ee88:	701a      	strb	r2, [r3, #0]
		UART_baud = (eeprom_data[20]&0x0F);//*/
    ee8a:	4b05      	ldr	r3, [pc, #20]	; (eea0 <restore_orientation_controls_remote_esc+0x1a8>)
    ee8c:	7d1b      	ldrb	r3, [r3, #20]
    ee8e:	220f      	movs	r2, #15
    ee90:	4013      	ands	r3, r2
    ee92:	b2da      	uxtb	r2, r3
    ee94:	4b1a      	ldr	r3, [pc, #104]	; (ef00 <restore_orientation_controls_remote_esc+0x208>)
    ee96:	701a      	strb	r2, [r3, #0]
	}
}
    ee98:	46c0      	nop			; (mov r8, r8)
    ee9a:	46bd      	mov	sp, r7
    ee9c:	bd80      	pop	{r7, pc}
    ee9e:	46c0      	nop			; (mov r8, r8)
    eea0:	200009c8 	.word	0x200009c8
    eea4:	00008845 	.word	0x00008845
    eea8:	20000004 	.word	0x20000004
    eeac:	20000374 	.word	0x20000374
    eeb0:	20000375 	.word	0x20000375
    eeb4:	20000377 	.word	0x20000377
    eeb8:	20000378 	.word	0x20000378
    eebc:	20000379 	.word	0x20000379
    eec0:	2000037a 	.word	0x2000037a
    eec4:	2000037b 	.word	0x2000037b
    eec8:	2000037c 	.word	0x2000037c
    eecc:	2000037d 	.word	0x2000037d
    eed0:	2000037e 	.word	0x2000037e
    eed4:	2000037f 	.word	0x2000037f
    eed8:	20000380 	.word	0x20000380
    eedc:	20000381 	.word	0x20000381
    eee0:	20000382 	.word	0x20000382
    eee4:	20000383 	.word	0x20000383
    eee8:	20000384 	.word	0x20000384
    eeec:	20000308 	.word	0x20000308
    eef0:	20000018 	.word	0x20000018
    eef4:	20000309 	.word	0x20000309
    eef8:	2000001a 	.word	0x2000001a
    eefc:	20000310 	.word	0x20000310
    ef00:	20000311 	.word	0x20000311
    ef04:	0000eb79 	.word	0x0000eb79

0000ef08 <ble_usart_read_callback>:

int ble_usart_count = 0;
uint8_t BLE_MSG[BLE_USART_READ_DATA_LENGTH];
// The callback routine for when a BLE message is recieved
void ble_usart_read_callback(struct usart_module *const usart_module)
{
    ef08:	b580      	push	{r7, lr}
    ef0a:	b084      	sub	sp, #16
    ef0c:	af00      	add	r7, sp, #0
    ef0e:	6078      	str	r0, [r7, #4]
	ble_usart_count++;
    ef10:	4bd9      	ldr	r3, [pc, #868]	; (f278 <ble_usart_read_callback+0x370>)
    ef12:	681b      	ldr	r3, [r3, #0]
    ef14:	1c5a      	adds	r2, r3, #1
    ef16:	4bd8      	ldr	r3, [pc, #864]	; (f278 <ble_usart_read_callback+0x370>)
    ef18:	601a      	str	r2, [r3, #0]

	if(ble_usart_count < BLE_USART_READ_DATA_LENGTH)
    ef1a:	4bd7      	ldr	r3, [pc, #860]	; (f278 <ble_usart_read_callback+0x370>)
    ef1c:	681b      	ldr	r3, [r3, #0]
    ef1e:	2b0e      	cmp	r3, #14
    ef20:	dc07      	bgt.n	ef32 <ble_usart_read_callback+0x2a>
		BLE_MSG[ble_usart_count-1] = ble_USART_read_buffer[0];
    ef22:	4bd5      	ldr	r3, [pc, #852]	; (f278 <ble_usart_read_callback+0x370>)
    ef24:	681b      	ldr	r3, [r3, #0]
    ef26:	3b01      	subs	r3, #1
    ef28:	4ad4      	ldr	r2, [pc, #848]	; (f27c <ble_usart_read_callback+0x374>)
    ef2a:	7811      	ldrb	r1, [r2, #0]
    ef2c:	4ad4      	ldr	r2, [pc, #848]	; (f280 <ble_usart_read_callback+0x378>)
    ef2e:	54d1      	strb	r1, [r2, r3]
    ef30:	e002      	b.n	ef38 <ble_usart_read_callback+0x30>
	else
		ERROR_LEDs(1);
    ef32:	2001      	movs	r0, #1
    ef34:	4bd3      	ldr	r3, [pc, #844]	; (f284 <ble_usart_read_callback+0x37c>)
    ef36:	4798      	blx	r3

		

	usart_read_buffer_job(&ble_usart, (uint8_t *)ble_USART_read_buffer, (uint16_t)1);
    ef38:	49d0      	ldr	r1, [pc, #832]	; (f27c <ble_usart_read_callback+0x374>)
    ef3a:	4bd3      	ldr	r3, [pc, #844]	; (f288 <ble_usart_read_callback+0x380>)
    ef3c:	2201      	movs	r2, #1
    ef3e:	0018      	movs	r0, r3
    ef40:	4bd2      	ldr	r3, [pc, #840]	; (f28c <ble_usart_read_callback+0x384>)
    ef42:	4798      	blx	r3
	if(ble_USART_read_buffer[0] == 0xAE){ //switch the message length
    ef44:	4bcd      	ldr	r3, [pc, #820]	; (f27c <ble_usart_read_callback+0x374>)
    ef46:	781b      	ldrb	r3, [r3, #0]
    ef48:	2bae      	cmp	r3, #174	; 0xae
    ef4a:	d001      	beq.n	ef50 <ble_usart_read_callback+0x48>
    ef4c:	f000 fdc5 	bl	fada <ble_usart_read_callback+0xbd2>
		bool MESSAGE_HANDLED = false;
    ef50:	230f      	movs	r3, #15
    ef52:	18fb      	adds	r3, r7, r3
    ef54:	2200      	movs	r2, #0
    ef56:	701a      	strb	r2, [r3, #0]
		switch(ble_usart_count){
    ef58:	4bc7      	ldr	r3, [pc, #796]	; (f278 <ble_usart_read_callback+0x370>)
    ef5a:	681b      	ldr	r3, [r3, #0]
    ef5c:	2b0c      	cmp	r3, #12
    ef5e:	d901      	bls.n	ef64 <ble_usart_read_callback+0x5c>
    ef60:	f000 fda8 	bl	fab4 <ble_usart_read_callback+0xbac>
    ef64:	009a      	lsls	r2, r3, #2
    ef66:	4bca      	ldr	r3, [pc, #808]	; (f290 <ble_usart_read_callback+0x388>)
    ef68:	18d3      	adds	r3, r2, r3
    ef6a:	681b      	ldr	r3, [r3, #0]
    ef6c:	469f      	mov	pc, r3
			case 2:
				switch(BLE_MSG[0]){ //switch the message ID
    ef6e:	4bc4      	ldr	r3, [pc, #784]	; (f280 <ble_usart_read_callback+0x378>)
    ef70:	781b      	ldrb	r3, [r3, #0]
    ef72:	3baa      	subs	r3, #170	; 0xaa
    ef74:	2b54      	cmp	r3, #84	; 0x54
    ef76:	d901      	bls.n	ef7c <ble_usart_read_callback+0x74>
    ef78:	f000 fd99 	bl	faae <ble_usart_read_callback+0xba6>
    ef7c:	009a      	lsls	r2, r3, #2
    ef7e:	4bc5      	ldr	r3, [pc, #788]	; (f294 <ble_usart_read_callback+0x38c>)
    ef80:	18d3      	adds	r3, r2, r3
    ef82:	681b      	ldr	r3, [r3, #0]
    ef84:	469f      	mov	pc, r3
					case Read_Motor_Limits:
						GET_LIMITS = 1;
    ef86:	4bc4      	ldr	r3, [pc, #784]	; (f298 <ble_usart_read_callback+0x390>)
    ef88:	2201      	movs	r2, #1
    ef8a:	701a      	strb	r2, [r3, #0]
						SEND_CONTINUOUS = 0;
    ef8c:	4bc3      	ldr	r3, [pc, #780]	; (f29c <ble_usart_read_callback+0x394>)
    ef8e:	2200      	movs	r2, #0
    ef90:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    ef92:	230f      	movs	r3, #15
    ef94:	18fb      	adds	r3, r7, r3
    ef96:	2201      	movs	r2, #1
    ef98:	701a      	strb	r2, [r3, #0]
						break;
    ef9a:	e096      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case (int)Read_LED_Vars:
						SEND_LED_CHARS = 1;
    ef9c:	4bc0      	ldr	r3, [pc, #768]	; (f2a0 <ble_usart_read_callback+0x398>)
    ef9e:	2201      	movs	r2, #1
    efa0:	701a      	strb	r2, [r3, #0]
						SEND_CONTINUOUS = 0;
    efa2:	4bbe      	ldr	r3, [pc, #760]	; (f29c <ble_usart_read_callback+0x394>)
    efa4:	2200      	movs	r2, #0
    efa6:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    efa8:	230f      	movs	r3, #15
    efaa:	18fb      	adds	r3, r7, r3
    efac:	2201      	movs	r2, #1
    efae:	701a      	strb	r2, [r3, #0]
						break;
    efb0:	e08b      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case Calibrate_All:
						_autoCalc = false; // Workaround so that calibrate doesnt include the current offset
    efb2:	4bbc      	ldr	r3, [pc, #752]	; (f2a4 <ble_usart_read_callback+0x39c>)
    efb4:	2200      	movs	r2, #0
    efb6:	701a      	strb	r2, [r3, #0]
						calibrate(true);
    efb8:	2001      	movs	r0, #1
    efba:	4bbb      	ldr	r3, [pc, #748]	; (f2a8 <ble_usart_read_callback+0x3a0>)
    efbc:	4798      	blx	r3
						save_cal_data();
    efbe:	4bbb      	ldr	r3, [pc, #748]	; (f2ac <ble_usart_read_callback+0x3a4>)
    efc0:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    efc2:	230f      	movs	r3, #15
    efc4:	18fb      	adds	r3, r7, r3
    efc6:	2201      	movs	r2, #1
    efc8:	701a      	strb	r2, [r3, #0]
						break;
    efca:	e07e      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case Read_Sensor_Vars:
						SEND_SENSORS = 1;
    efcc:	4bb8      	ldr	r3, [pc, #736]	; (f2b0 <ble_usart_read_callback+0x3a8>)
    efce:	2201      	movs	r2, #1
    efd0:	701a      	strb	r2, [r3, #0]
						SEND_CONTINUOUS = 0;
    efd2:	4bb2      	ldr	r3, [pc, #712]	; (f29c <ble_usart_read_callback+0x394>)
    efd4:	2200      	movs	r2, #0
    efd6:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    efd8:	230f      	movs	r3, #15
    efda:	18fb      	adds	r3, r7, r3
    efdc:	2201      	movs	r2, #1
    efde:	701a      	strb	r2, [r3, #0]
						break;
    efe0:	e073      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case LED_Toggle:
						LIGHTS_ON = !LIGHTS_ON;
    efe2:	4bb4      	ldr	r3, [pc, #720]	; (f2b4 <ble_usart_read_callback+0x3ac>)
    efe4:	781b      	ldrb	r3, [r3, #0]
    efe6:	425a      	negs	r2, r3
    efe8:	4153      	adcs	r3, r2
    efea:	b2db      	uxtb	r3, r3
    efec:	001a      	movs	r2, r3
    efee:	4bb1      	ldr	r3, [pc, #708]	; (f2b4 <ble_usart_read_callback+0x3ac>)
    eff0:	701a      	strb	r2, [r3, #0]
						save_led_data();
    eff2:	4bb1      	ldr	r3, [pc, #708]	; (f2b8 <ble_usart_read_callback+0x3b0>)
    eff4:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    eff6:	230f      	movs	r3, #15
    eff8:	18fb      	adds	r3, r7, r3
    effa:	2201      	movs	r2, #1
    effc:	701a      	strb	r2, [r3, #0]
						break;
    effe:	e064      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case LED_Mode_Down:
						if(light_mode > 0)
    f000:	4bae      	ldr	r3, [pc, #696]	; (f2bc <ble_usart_read_callback+0x3b4>)
    f002:	781b      	ldrb	r3, [r3, #0]
    f004:	2b00      	cmp	r3, #0
    f006:	d005      	beq.n	f014 <ble_usart_read_callback+0x10c>
						light_mode--;
    f008:	4bac      	ldr	r3, [pc, #688]	; (f2bc <ble_usart_read_callback+0x3b4>)
    f00a:	781b      	ldrb	r3, [r3, #0]
    f00c:	3b01      	subs	r3, #1
    f00e:	b2da      	uxtb	r2, r3
    f010:	4baa      	ldr	r3, [pc, #680]	; (f2bc <ble_usart_read_callback+0x3b4>)
    f012:	701a      	strb	r2, [r3, #0]
						save_led_data();
    f014:	4ba8      	ldr	r3, [pc, #672]	; (f2b8 <ble_usart_read_callback+0x3b0>)
    f016:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f018:	230f      	movs	r3, #15
    f01a:	18fb      	adds	r3, r7, r3
    f01c:	2201      	movs	r2, #1
    f01e:	701a      	strb	r2, [r3, #0]
						break;
    f020:	e053      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case LED_Mode_Up:
						if(light_mode < light_modes)
    f022:	4ba6      	ldr	r3, [pc, #664]	; (f2bc <ble_usart_read_callback+0x3b4>)
    f024:	781b      	ldrb	r3, [r3, #0]
    f026:	2209      	movs	r2, #9
    f028:	4293      	cmp	r3, r2
    f02a:	d205      	bcs.n	f038 <ble_usart_read_callback+0x130>
						light_mode++;
    f02c:	4ba3      	ldr	r3, [pc, #652]	; (f2bc <ble_usart_read_callback+0x3b4>)
    f02e:	781b      	ldrb	r3, [r3, #0]
    f030:	3301      	adds	r3, #1
    f032:	b2da      	uxtb	r2, r3
    f034:	4ba1      	ldr	r3, [pc, #644]	; (f2bc <ble_usart_read_callback+0x3b4>)
    f036:	701a      	strb	r2, [r3, #0]
						save_led_data();
    f038:	4b9f      	ldr	r3, [pc, #636]	; (f2b8 <ble_usart_read_callback+0x3b0>)
    f03a:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f03c:	230f      	movs	r3, #15
    f03e:	18fb      	adds	r3, r7, r3
    f040:	2201      	movs	r2, #1
    f042:	701a      	strb	r2, [r3, #0]
						break;
    f044:	e041      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case Read_Orientaion:
						SEND_ORIENTAION_CONFIG = 1;
    f046:	4b9e      	ldr	r3, [pc, #632]	; (f2c0 <ble_usart_read_callback+0x3b8>)
    f048:	2201      	movs	r2, #1
    f04a:	701a      	strb	r2, [r3, #0]
						SEND_CONTINUOUS = 0;
    f04c:	4b93      	ldr	r3, [pc, #588]	; (f29c <ble_usart_read_callback+0x394>)
    f04e:	2200      	movs	r2, #0
    f050:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    f052:	230f      	movs	r3, #15
    f054:	18fb      	adds	r3, r7, r3
    f056:	2201      	movs	r2, #1
    f058:	701a      	strb	r2, [r3, #0]
						break;
    f05a:	e036      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case Read_Controls:
						SEND_CONTROLS_CONFIG = 1;
    f05c:	4b99      	ldr	r3, [pc, #612]	; (f2c4 <ble_usart_read_callback+0x3bc>)
    f05e:	2201      	movs	r2, #1
    f060:	701a      	strb	r2, [r3, #0]
						SEND_CONTINUOUS = 0;
    f062:	4b8e      	ldr	r3, [pc, #568]	; (f29c <ble_usart_read_callback+0x394>)
    f064:	2200      	movs	r2, #0
    f066:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    f068:	230f      	movs	r3, #15
    f06a:	18fb      	adds	r3, r7, r3
    f06c:	2201      	movs	r2, #1
    f06e:	701a      	strb	r2, [r3, #0]
						break;
    f070:	e02b      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case Read_Remote_Config:
						SEND_REMOTE_CONFIG = 1;
    f072:	4b95      	ldr	r3, [pc, #596]	; (f2c8 <ble_usart_read_callback+0x3c0>)
    f074:	2201      	movs	r2, #1
    f076:	701a      	strb	r2, [r3, #0]
						SEND_CONTINUOUS = 0;
    f078:	4b88      	ldr	r3, [pc, #544]	; (f29c <ble_usart_read_callback+0x394>)
    f07a:	2200      	movs	r2, #0
    f07c:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    f07e:	230f      	movs	r3, #15
    f080:	18fb      	adds	r3, r7, r3
    f082:	2201      	movs	r2, #1
    f084:	701a      	strb	r2, [r3, #0]
						break;
    f086:	e020      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case Read_ESC_Config:
						SEND_ESC_CONFIG = 1;
    f088:	4b90      	ldr	r3, [pc, #576]	; (f2cc <ble_usart_read_callback+0x3c4>)
    f08a:	2201      	movs	r2, #1
    f08c:	701a      	strb	r2, [r3, #0]
						SEND_CONTINUOUS = 0;
    f08e:	4b83      	ldr	r3, [pc, #524]	; (f29c <ble_usart_read_callback+0x394>)
    f090:	2200      	movs	r2, #0
    f092:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    f094:	230f      	movs	r3, #15
    f096:	18fb      	adds	r3, r7, r3
    f098:	2201      	movs	r2, #1
    f09a:	701a      	strb	r2, [r3, #0]
						break;
    f09c:	e015      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case Aux_Pressed:
						LIGHTS_ON = true;
    f09e:	4b85      	ldr	r3, [pc, #532]	; (f2b4 <ble_usart_read_callback+0x3ac>)
    f0a0:	2201      	movs	r2, #1
    f0a2:	701a      	strb	r2, [r3, #0]
						AppAuxButton = 1;
    f0a4:	4b8a      	ldr	r3, [pc, #552]	; (f2d0 <ble_usart_read_callback+0x3c8>)
    f0a6:	2201      	movs	r2, #1
    f0a8:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    f0aa:	230f      	movs	r3, #15
    f0ac:	18fb      	adds	r3, r7, r3
    f0ae:	2201      	movs	r2, #1
    f0b0:	701a      	strb	r2, [r3, #0]
						break;
    f0b2:	e00a      	b.n	f0ca <ble_usart_read_callback+0x1c2>
					case Aux_Released:
						LIGHTS_ON = false;
    f0b4:	4b7f      	ldr	r3, [pc, #508]	; (f2b4 <ble_usart_read_callback+0x3ac>)
    f0b6:	2200      	movs	r2, #0
    f0b8:	701a      	strb	r2, [r3, #0]
						AppAuxButton = 0;
    f0ba:	4b85      	ldr	r3, [pc, #532]	; (f2d0 <ble_usart_read_callback+0x3c8>)
    f0bc:	2200      	movs	r2, #0
    f0be:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    f0c0:	230f      	movs	r3, #15
    f0c2:	18fb      	adds	r3, r7, r3
    f0c4:	2201      	movs	r2, #1
    f0c6:	701a      	strb	r2, [r3, #0]
						break;
    f0c8:	46c0      	nop			; (mov r8, r8)
				}//*/
				break;
    f0ca:	f000 fcf0 	bl	faae <ble_usart_read_callback+0xba6>
			case 3:
				switch(BLE_MSG[0]){
    f0ce:	4b6c      	ldr	r3, [pc, #432]	; (f280 <ble_usart_read_callback+0x378>)
    f0d0:	781b      	ldrb	r3, [r3, #0]
    f0d2:	2bbd      	cmp	r3, #189	; 0xbd
    f0d4:	d003      	beq.n	f0de <ble_usart_read_callback+0x1d6>
    f0d6:	2be8      	cmp	r3, #232	; 0xe8
    f0d8:	d00d      	beq.n	f0f6 <ble_usart_read_callback+0x1ee>
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
						save_led_data();
						MESSAGE_HANDLED = true;
						break;
				}//*/
				break;
    f0da:	f000 fceb 	bl	fab4 <ble_usart_read_callback+0xbac>
						AppRemoteY = (BLE_MSG[1] & 0x0FF);
    f0de:	4b68      	ldr	r3, [pc, #416]	; (f280 <ble_usart_read_callback+0x378>)
    f0e0:	785a      	ldrb	r2, [r3, #1]
    f0e2:	4b7c      	ldr	r3, [pc, #496]	; (f2d4 <ble_usart_read_callback+0x3cc>)
    f0e4:	701a      	strb	r2, [r3, #0]
						NEW_REMOTE_DATA = 1;
    f0e6:	4b7c      	ldr	r3, [pc, #496]	; (f2d8 <ble_usart_read_callback+0x3d0>)
    f0e8:	2201      	movs	r2, #1
    f0ea:	701a      	strb	r2, [r3, #0]
						MESSAGE_HANDLED = true;
    f0ec:	230f      	movs	r3, #15
    f0ee:	18fb      	adds	r3, r7, r3
    f0f0:	2201      	movs	r2, #1
    f0f2:	701a      	strb	r2, [r3, #0]
						break;
    f0f4:	e031      	b.n	f15a <ble_usart_read_callback+0x252>
						LIGHTS_ON = 1;
    f0f6:	4b6f      	ldr	r3, [pc, #444]	; (f2b4 <ble_usart_read_callback+0x3ac>)
    f0f8:	2201      	movs	r2, #1
    f0fa:	701a      	strb	r2, [r3, #0]
						light_mode = MODE_RPM_THROTTLE;
    f0fc:	4b6f      	ldr	r3, [pc, #444]	; (f2bc <ble_usart_read_callback+0x3b4>)
    f0fe:	2205      	movs	r2, #5
    f100:	701a      	strb	r2, [r3, #0]
						SWITCHES = BLE_MSG[1];
    f102:	4b5f      	ldr	r3, [pc, #380]	; (f280 <ble_usart_read_callback+0x378>)
    f104:	785a      	ldrb	r2, [r3, #1]
    f106:	4b75      	ldr	r3, [pc, #468]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f108:	701a      	strb	r2, [r3, #0]
						SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f10a:	4b74      	ldr	r3, [pc, #464]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f10c:	781b      	ldrb	r3, [r3, #0]
    f10e:	111b      	asrs	r3, r3, #4
    f110:	b2db      	uxtb	r3, r3
    f112:	2201      	movs	r2, #1
    f114:	4013      	ands	r3, r2
    f116:	b2da      	uxtb	r2, r3
    f118:	4b71      	ldr	r3, [pc, #452]	; (f2e0 <ble_usart_read_callback+0x3d8>)
    f11a:	701a      	strb	r2, [r3, #0]
						HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f11c:	4b6f      	ldr	r3, [pc, #444]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f11e:	781b      	ldrb	r3, [r3, #0]
    f120:	115b      	asrs	r3, r3, #5
    f122:	b2db      	uxtb	r3, r3
    f124:	2201      	movs	r2, #1
    f126:	4013      	ands	r3, r2
    f128:	b2da      	uxtb	r2, r3
    f12a:	4b6e      	ldr	r3, [pc, #440]	; (f2e4 <ble_usart_read_callback+0x3dc>)
    f12c:	701a      	strb	r2, [r3, #0]
						LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f12e:	4b6b      	ldr	r3, [pc, #428]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f130:	781b      	ldrb	r3, [r3, #0]
    f132:	119b      	asrs	r3, r3, #6
    f134:	b2db      	uxtb	r3, r3
    f136:	2201      	movs	r2, #1
    f138:	4013      	ands	r3, r2
    f13a:	b2da      	uxtb	r2, r3
    f13c:	4b6a      	ldr	r3, [pc, #424]	; (f2e8 <ble_usart_read_callback+0x3e0>)
    f13e:	701a      	strb	r2, [r3, #0]
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f140:	4b66      	ldr	r3, [pc, #408]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f142:	781b      	ldrb	r3, [r3, #0]
    f144:	09db      	lsrs	r3, r3, #7
    f146:	b2da      	uxtb	r2, r3
    f148:	4b68      	ldr	r3, [pc, #416]	; (f2ec <ble_usart_read_callback+0x3e4>)
    f14a:	701a      	strb	r2, [r3, #0]
						save_led_data();
    f14c:	4b5a      	ldr	r3, [pc, #360]	; (f2b8 <ble_usart_read_callback+0x3b0>)
    f14e:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f150:	230f      	movs	r3, #15
    f152:	18fb      	adds	r3, r7, r3
    f154:	2201      	movs	r2, #1
    f156:	701a      	strb	r2, [r3, #0]
						break;
    f158:	46c0      	nop			; (mov r8, r8)
				break;
    f15a:	f000 fcab 	bl	fab4 <ble_usart_read_callback+0xbac>
			case 4:
				switch(BLE_MSG[0]){
    f15e:	4b48      	ldr	r3, [pc, #288]	; (f280 <ble_usart_read_callback+0x378>)
    f160:	781b      	ldrb	r3, [r3, #0]
    f162:	3bc3      	subs	r3, #195	; 0xc3
    f164:	2b3a      	cmp	r3, #58	; 0x3a
    f166:	d901      	bls.n	f16c <ble_usart_read_callback+0x264>
    f168:	f000 fca3 	bl	fab2 <ble_usart_read_callback+0xbaa>
    f16c:	009a      	lsls	r2, r3, #2
    f16e:	4b60      	ldr	r3, [pc, #384]	; (f2f0 <ble_usart_read_callback+0x3e8>)
    f170:	18d3      	adds	r3, r2, r3
    f172:	681b      	ldr	r3, [r3, #0]
    f174:	469f      	mov	pc, r3
					case Compass_Cycle_Values:
						LIGHTS_ON = 1;
    f176:	4b4f      	ldr	r3, [pc, #316]	; (f2b4 <ble_usart_read_callback+0x3ac>)
    f178:	2201      	movs	r2, #1
    f17a:	701a      	strb	r2, [r3, #0]
						light_mode = MODE_COMPASS_CYCLE;
    f17c:	4b4f      	ldr	r3, [pc, #316]	; (f2bc <ble_usart_read_callback+0x3b4>)
    f17e:	2202      	movs	r2, #2
    f180:	701a      	strb	r2, [r3, #0]
						SWITCHES = BLE_MSG[1];
    f182:	4b3f      	ldr	r3, [pc, #252]	; (f280 <ble_usart_read_callback+0x378>)
    f184:	785a      	ldrb	r2, [r3, #1]
    f186:	4b55      	ldr	r3, [pc, #340]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f188:	701a      	strb	r2, [r3, #0]
						SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f18a:	4b54      	ldr	r3, [pc, #336]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f18c:	781b      	ldrb	r3, [r3, #0]
    f18e:	111b      	asrs	r3, r3, #4
    f190:	b2db      	uxtb	r3, r3
    f192:	2201      	movs	r2, #1
    f194:	4013      	ands	r3, r2
    f196:	b2da      	uxtb	r2, r3
    f198:	4b51      	ldr	r3, [pc, #324]	; (f2e0 <ble_usart_read_callback+0x3d8>)
    f19a:	701a      	strb	r2, [r3, #0]
						HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f19c:	4b4f      	ldr	r3, [pc, #316]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f19e:	781b      	ldrb	r3, [r3, #0]
    f1a0:	115b      	asrs	r3, r3, #5
    f1a2:	b2db      	uxtb	r3, r3
    f1a4:	2201      	movs	r2, #1
    f1a6:	4013      	ands	r3, r2
    f1a8:	b2da      	uxtb	r2, r3
    f1aa:	4b4e      	ldr	r3, [pc, #312]	; (f2e4 <ble_usart_read_callback+0x3dc>)
    f1ac:	701a      	strb	r2, [r3, #0]
						LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f1ae:	4b4b      	ldr	r3, [pc, #300]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f1b0:	781b      	ldrb	r3, [r3, #0]
    f1b2:	119b      	asrs	r3, r3, #6
    f1b4:	b2db      	uxtb	r3, r3
    f1b6:	2201      	movs	r2, #1
    f1b8:	4013      	ands	r3, r2
    f1ba:	b2da      	uxtb	r2, r3
    f1bc:	4b4a      	ldr	r3, [pc, #296]	; (f2e8 <ble_usart_read_callback+0x3e0>)
    f1be:	701a      	strb	r2, [r3, #0]
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f1c0:	4b46      	ldr	r3, [pc, #280]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f1c2:	781b      	ldrb	r3, [r3, #0]
    f1c4:	09db      	lsrs	r3, r3, #7
    f1c6:	b2da      	uxtb	r2, r3
    f1c8:	4b48      	ldr	r3, [pc, #288]	; (f2ec <ble_usart_read_callback+0x3e4>)
    f1ca:	701a      	strb	r2, [r3, #0]
						Brightness[MODE_COMPASS_CYCLE] = ((float)(BLE_MSG[2]))/100;
    f1cc:	4b2c      	ldr	r3, [pc, #176]	; (f280 <ble_usart_read_callback+0x378>)
    f1ce:	789a      	ldrb	r2, [r3, #2]
    f1d0:	4b48      	ldr	r3, [pc, #288]	; (f2f4 <ble_usart_read_callback+0x3ec>)
    f1d2:	0010      	movs	r0, r2
    f1d4:	4798      	blx	r3
    f1d6:	1c02      	adds	r2, r0, #0
    f1d8:	4b47      	ldr	r3, [pc, #284]	; (f2f8 <ble_usart_read_callback+0x3f0>)
    f1da:	4948      	ldr	r1, [pc, #288]	; (f2fc <ble_usart_read_callback+0x3f4>)
    f1dc:	1c10      	adds	r0, r2, #0
    f1de:	4798      	blx	r3
    f1e0:	1c03      	adds	r3, r0, #0
    f1e2:	1c1a      	adds	r2, r3, #0
    f1e4:	4b46      	ldr	r3, [pc, #280]	; (f300 <ble_usart_read_callback+0x3f8>)
    f1e6:	609a      	str	r2, [r3, #8]
						save_led_data();
    f1e8:	4b33      	ldr	r3, [pc, #204]	; (f2b8 <ble_usart_read_callback+0x3b0>)
    f1ea:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f1ec:	230f      	movs	r3, #15
    f1ee:	18fb      	adds	r3, r7, r3
    f1f0:	2201      	movs	r2, #1
    f1f2:	701a      	strb	r2, [r3, #0]
						break;
    f1f4:	e14b      	b.n	f48e <ble_usart_read_callback+0x586>
					case RPM_Values:
						LIGHTS_ON = 1;
    f1f6:	4b2f      	ldr	r3, [pc, #188]	; (f2b4 <ble_usart_read_callback+0x3ac>)
    f1f8:	2201      	movs	r2, #1
    f1fa:	701a      	strb	r2, [r3, #0]
						light_mode = MODE_RPM_CYCLE;
    f1fc:	4b2f      	ldr	r3, [pc, #188]	; (f2bc <ble_usart_read_callback+0x3b4>)
    f1fe:	2204      	movs	r2, #4
    f200:	701a      	strb	r2, [r3, #0]
						SWITCHES = BLE_MSG[1];
    f202:	4b1f      	ldr	r3, [pc, #124]	; (f280 <ble_usart_read_callback+0x378>)
    f204:	785a      	ldrb	r2, [r3, #1]
    f206:	4b35      	ldr	r3, [pc, #212]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f208:	701a      	strb	r2, [r3, #0]
						SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f20a:	4b34      	ldr	r3, [pc, #208]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f20c:	781b      	ldrb	r3, [r3, #0]
    f20e:	111b      	asrs	r3, r3, #4
    f210:	b2db      	uxtb	r3, r3
    f212:	2201      	movs	r2, #1
    f214:	4013      	ands	r3, r2
    f216:	b2da      	uxtb	r2, r3
    f218:	4b31      	ldr	r3, [pc, #196]	; (f2e0 <ble_usart_read_callback+0x3d8>)
    f21a:	701a      	strb	r2, [r3, #0]
						HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f21c:	4b2f      	ldr	r3, [pc, #188]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f21e:	781b      	ldrb	r3, [r3, #0]
    f220:	115b      	asrs	r3, r3, #5
    f222:	b2db      	uxtb	r3, r3
    f224:	2201      	movs	r2, #1
    f226:	4013      	ands	r3, r2
    f228:	b2da      	uxtb	r2, r3
    f22a:	4b2e      	ldr	r3, [pc, #184]	; (f2e4 <ble_usart_read_callback+0x3dc>)
    f22c:	701a      	strb	r2, [r3, #0]
						LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f22e:	4b2b      	ldr	r3, [pc, #172]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f230:	781b      	ldrb	r3, [r3, #0]
    f232:	119b      	asrs	r3, r3, #6
    f234:	b2db      	uxtb	r3, r3
    f236:	2201      	movs	r2, #1
    f238:	4013      	ands	r3, r2
    f23a:	b2da      	uxtb	r2, r3
    f23c:	4b2a      	ldr	r3, [pc, #168]	; (f2e8 <ble_usart_read_callback+0x3e0>)
    f23e:	701a      	strb	r2, [r3, #0]
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f240:	4b26      	ldr	r3, [pc, #152]	; (f2dc <ble_usart_read_callback+0x3d4>)
    f242:	781b      	ldrb	r3, [r3, #0]
    f244:	09db      	lsrs	r3, r3, #7
    f246:	b2da      	uxtb	r2, r3
    f248:	4b28      	ldr	r3, [pc, #160]	; (f2ec <ble_usart_read_callback+0x3e4>)
    f24a:	701a      	strb	r2, [r3, #0]
						RateSens[MODE_RPM_CYCLE] = ((float)(BLE_MSG[2]))/100;
    f24c:	4b0c      	ldr	r3, [pc, #48]	; (f280 <ble_usart_read_callback+0x378>)
    f24e:	789a      	ldrb	r2, [r3, #2]
    f250:	4b28      	ldr	r3, [pc, #160]	; (f2f4 <ble_usart_read_callback+0x3ec>)
    f252:	0010      	movs	r0, r2
    f254:	4798      	blx	r3
    f256:	1c02      	adds	r2, r0, #0
    f258:	4b27      	ldr	r3, [pc, #156]	; (f2f8 <ble_usart_read_callback+0x3f0>)
    f25a:	4928      	ldr	r1, [pc, #160]	; (f2fc <ble_usart_read_callback+0x3f4>)
    f25c:	1c10      	adds	r0, r2, #0
    f25e:	4798      	blx	r3
    f260:	1c03      	adds	r3, r0, #0
    f262:	1c1a      	adds	r2, r3, #0
    f264:	4b27      	ldr	r3, [pc, #156]	; (f304 <ble_usart_read_callback+0x3fc>)
    f266:	611a      	str	r2, [r3, #16]
						save_led_data();
    f268:	4b13      	ldr	r3, [pc, #76]	; (f2b8 <ble_usart_read_callback+0x3b0>)
    f26a:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f26c:	230f      	movs	r3, #15
    f26e:	18fb      	adds	r3, r7, r3
    f270:	2201      	movs	r2, #1
    f272:	701a      	strb	r2, [r3, #0]
						break;
    f274:	e10b      	b.n	f48e <ble_usart_read_callback+0x586>
    f276:	46c0      	nop			; (mov r8, r8)
    f278:	200003e0 	.word	0x200003e0
    f27c:	20000cec 	.word	0x20000cec
    f280:	200007b4 	.word	0x200007b4
    f284:	0000b405 	.word	0x0000b405
    f288:	200004a0 	.word	0x200004a0
    f28c:	00006615 	.word	0x00006615
    f290:	00017314 	.word	0x00017314
    f294:	00017348 	.word	0x00017348
    f298:	20000019 	.word	0x20000019
    f29c:	200000e4 	.word	0x200000e4
    f2a0:	200003b0 	.word	0x200003b0
    f2a4:	200008f0 	.word	0x200008f0
    f2a8:	000096b1 	.word	0x000096b1
    f2ac:	0000e889 	.word	0x0000e889
    f2b0:	200003da 	.word	0x200003da
    f2b4:	200000a3 	.word	0x200000a3
    f2b8:	0000e099 	.word	0x0000e099
    f2bc:	2000001b 	.word	0x2000001b
    f2c0:	200003db 	.word	0x200003db
    f2c4:	200003dc 	.word	0x200003dc
    f2c8:	200003dd 	.word	0x200003dd
    f2cc:	200003de 	.word	0x200003de
    f2d0:	20000385 	.word	0x20000385
    f2d4:	200000e6 	.word	0x200000e6
    f2d8:	200003d9 	.word	0x200003d9
    f2dc:	20000325 	.word	0x20000325
    f2e0:	200000a2 	.word	0x200000a2
    f2e4:	20000322 	.word	0x20000322
    f2e8:	20000323 	.word	0x20000323
    f2ec:	20000324 	.word	0x20000324
    f2f0:	0001749c 	.word	0x0001749c
    f2f4:	00014ee9 	.word	0x00014ee9
    f2f8:	000144b1 	.word	0x000144b1
    f2fc:	42c80000 	.word	0x42c80000
    f300:	2000004c 	.word	0x2000004c
    f304:	20000028 	.word	0x20000028
					case X_Accel_Values:
						LIGHTS_ON = 1;
    f308:	4bb6      	ldr	r3, [pc, #728]	; (f5e4 <ble_usart_read_callback+0x6dc>)
    f30a:	2201      	movs	r2, #1
    f30c:	701a      	strb	r2, [r3, #0]
						light_mode = MODE_X_ACCEL;
    f30e:	4bb6      	ldr	r3, [pc, #728]	; (f5e8 <ble_usart_read_callback+0x6e0>)
    f310:	2206      	movs	r2, #6
    f312:	701a      	strb	r2, [r3, #0]
						SWITCHES = BLE_MSG[1];
    f314:	4bb5      	ldr	r3, [pc, #724]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f316:	785a      	ldrb	r2, [r3, #1]
    f318:	4bb5      	ldr	r3, [pc, #724]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f31a:	701a      	strb	r2, [r3, #0]
						SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f31c:	4bb4      	ldr	r3, [pc, #720]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f31e:	781b      	ldrb	r3, [r3, #0]
    f320:	111b      	asrs	r3, r3, #4
    f322:	b2db      	uxtb	r3, r3
    f324:	2201      	movs	r2, #1
    f326:	4013      	ands	r3, r2
    f328:	b2da      	uxtb	r2, r3
    f32a:	4bb2      	ldr	r3, [pc, #712]	; (f5f4 <ble_usart_read_callback+0x6ec>)
    f32c:	701a      	strb	r2, [r3, #0]
						HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f32e:	4bb0      	ldr	r3, [pc, #704]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f330:	781b      	ldrb	r3, [r3, #0]
    f332:	115b      	asrs	r3, r3, #5
    f334:	b2db      	uxtb	r3, r3
    f336:	2201      	movs	r2, #1
    f338:	4013      	ands	r3, r2
    f33a:	b2da      	uxtb	r2, r3
    f33c:	4bae      	ldr	r3, [pc, #696]	; (f5f8 <ble_usart_read_callback+0x6f0>)
    f33e:	701a      	strb	r2, [r3, #0]
						LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f340:	4bab      	ldr	r3, [pc, #684]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f342:	781b      	ldrb	r3, [r3, #0]
    f344:	119b      	asrs	r3, r3, #6
    f346:	b2db      	uxtb	r3, r3
    f348:	2201      	movs	r2, #1
    f34a:	4013      	ands	r3, r2
    f34c:	b2da      	uxtb	r2, r3
    f34e:	4bab      	ldr	r3, [pc, #684]	; (f5fc <ble_usart_read_callback+0x6f4>)
    f350:	701a      	strb	r2, [r3, #0]
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f352:	4ba7      	ldr	r3, [pc, #668]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f354:	781b      	ldrb	r3, [r3, #0]
    f356:	09db      	lsrs	r3, r3, #7
    f358:	b2da      	uxtb	r2, r3
    f35a:	4ba9      	ldr	r3, [pc, #676]	; (f600 <ble_usart_read_callback+0x6f8>)
    f35c:	701a      	strb	r2, [r3, #0]
						RateSens[MODE_X_ACCEL] = ((float)(BLE_MSG[2]))/100;
    f35e:	4ba3      	ldr	r3, [pc, #652]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f360:	789a      	ldrb	r2, [r3, #2]
    f362:	4ba8      	ldr	r3, [pc, #672]	; (f604 <ble_usart_read_callback+0x6fc>)
    f364:	0010      	movs	r0, r2
    f366:	4798      	blx	r3
    f368:	1c02      	adds	r2, r0, #0
    f36a:	4ba7      	ldr	r3, [pc, #668]	; (f608 <ble_usart_read_callback+0x700>)
    f36c:	49a7      	ldr	r1, [pc, #668]	; (f60c <ble_usart_read_callback+0x704>)
    f36e:	1c10      	adds	r0, r2, #0
    f370:	4798      	blx	r3
    f372:	1c03      	adds	r3, r0, #0
    f374:	1c1a      	adds	r2, r3, #0
    f376:	4ba6      	ldr	r3, [pc, #664]	; (f610 <ble_usart_read_callback+0x708>)
    f378:	619a      	str	r2, [r3, #24]
						save_led_data();
    f37a:	4ba6      	ldr	r3, [pc, #664]	; (f614 <ble_usart_read_callback+0x70c>)
    f37c:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f37e:	230f      	movs	r3, #15
    f380:	18fb      	adds	r3, r7, r3
    f382:	2201      	movs	r2, #1
    f384:	701a      	strb	r2, [r3, #0]
						break;
    f386:	e082      	b.n	f48e <ble_usart_read_callback+0x586>
					case Y_Accel_Values:
						LIGHTS_ON = 1;
    f388:	4b96      	ldr	r3, [pc, #600]	; (f5e4 <ble_usart_read_callback+0x6dc>)
    f38a:	2201      	movs	r2, #1
    f38c:	701a      	strb	r2, [r3, #0]
						light_mode = MODE_Y_ACCEL;
    f38e:	4b96      	ldr	r3, [pc, #600]	; (f5e8 <ble_usart_read_callback+0x6e0>)
    f390:	2207      	movs	r2, #7
    f392:	701a      	strb	r2, [r3, #0]
						SWITCHES = BLE_MSG[1];
    f394:	4b95      	ldr	r3, [pc, #596]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f396:	785a      	ldrb	r2, [r3, #1]
    f398:	4b95      	ldr	r3, [pc, #596]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f39a:	701a      	strb	r2, [r3, #0]
						SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f39c:	4b94      	ldr	r3, [pc, #592]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f39e:	781b      	ldrb	r3, [r3, #0]
    f3a0:	111b      	asrs	r3, r3, #4
    f3a2:	b2db      	uxtb	r3, r3
    f3a4:	2201      	movs	r2, #1
    f3a6:	4013      	ands	r3, r2
    f3a8:	b2da      	uxtb	r2, r3
    f3aa:	4b92      	ldr	r3, [pc, #584]	; (f5f4 <ble_usart_read_callback+0x6ec>)
    f3ac:	701a      	strb	r2, [r3, #0]
						HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f3ae:	4b90      	ldr	r3, [pc, #576]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f3b0:	781b      	ldrb	r3, [r3, #0]
    f3b2:	115b      	asrs	r3, r3, #5
    f3b4:	b2db      	uxtb	r3, r3
    f3b6:	2201      	movs	r2, #1
    f3b8:	4013      	ands	r3, r2
    f3ba:	b2da      	uxtb	r2, r3
    f3bc:	4b8e      	ldr	r3, [pc, #568]	; (f5f8 <ble_usart_read_callback+0x6f0>)
    f3be:	701a      	strb	r2, [r3, #0]
						LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f3c0:	4b8b      	ldr	r3, [pc, #556]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f3c2:	781b      	ldrb	r3, [r3, #0]
    f3c4:	119b      	asrs	r3, r3, #6
    f3c6:	b2db      	uxtb	r3, r3
    f3c8:	2201      	movs	r2, #1
    f3ca:	4013      	ands	r3, r2
    f3cc:	b2da      	uxtb	r2, r3
    f3ce:	4b8b      	ldr	r3, [pc, #556]	; (f5fc <ble_usart_read_callback+0x6f4>)
    f3d0:	701a      	strb	r2, [r3, #0]
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f3d2:	4b87      	ldr	r3, [pc, #540]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f3d4:	781b      	ldrb	r3, [r3, #0]
    f3d6:	09db      	lsrs	r3, r3, #7
    f3d8:	b2da      	uxtb	r2, r3
    f3da:	4b89      	ldr	r3, [pc, #548]	; (f600 <ble_usart_read_callback+0x6f8>)
    f3dc:	701a      	strb	r2, [r3, #0]
						Brightness[MODE_Y_ACCEL] = ((float)(BLE_MSG[2]))/100;
    f3de:	4b83      	ldr	r3, [pc, #524]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f3e0:	789a      	ldrb	r2, [r3, #2]
    f3e2:	4b88      	ldr	r3, [pc, #544]	; (f604 <ble_usart_read_callback+0x6fc>)
    f3e4:	0010      	movs	r0, r2
    f3e6:	4798      	blx	r3
    f3e8:	1c02      	adds	r2, r0, #0
    f3ea:	4b87      	ldr	r3, [pc, #540]	; (f608 <ble_usart_read_callback+0x700>)
    f3ec:	4987      	ldr	r1, [pc, #540]	; (f60c <ble_usart_read_callback+0x704>)
    f3ee:	1c10      	adds	r0, r2, #0
    f3f0:	4798      	blx	r3
    f3f2:	1c03      	adds	r3, r0, #0
    f3f4:	1c1a      	adds	r2, r3, #0
    f3f6:	4b88      	ldr	r3, [pc, #544]	; (f618 <ble_usart_read_callback+0x710>)
    f3f8:	61da      	str	r2, [r3, #28]
						save_led_data();
    f3fa:	4b86      	ldr	r3, [pc, #536]	; (f614 <ble_usart_read_callback+0x70c>)
    f3fc:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f3fe:	230f      	movs	r3, #15
    f400:	18fb      	adds	r3, r7, r3
    f402:	2201      	movs	r2, #1
    f404:	701a      	strb	r2, [r3, #0]
						break;
    f406:	e042      	b.n	f48e <ble_usart_read_callback+0x586>
					case Apply_Orientation:
						ORIENTATION[0] = BLE_MSG[1];
    f408:	4b78      	ldr	r3, [pc, #480]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f40a:	785a      	ldrb	r2, [r3, #1]
    f40c:	4b83      	ldr	r3, [pc, #524]	; (f61c <ble_usart_read_callback+0x714>)
    f40e:	701a      	strb	r2, [r3, #0]
						ORIENTATION[1] = BLE_MSG[2];
    f410:	4b76      	ldr	r3, [pc, #472]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f412:	789a      	ldrb	r2, [r3, #2]
    f414:	4b81      	ldr	r3, [pc, #516]	; (f61c <ble_usart_read_callback+0x714>)
    f416:	705a      	strb	r2, [r3, #1]
						save_orientation_controls_remote_esc();
    f418:	4b81      	ldr	r3, [pc, #516]	; (f620 <ble_usart_read_callback+0x718>)
    f41a:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f41c:	230f      	movs	r3, #15
    f41e:	18fb      	adds	r3, r7, r3
    f420:	2201      	movs	r2, #1
    f422:	701a      	strb	r2, [r3, #0]
						break;
    f424:	e033      	b.n	f48e <ble_usart_read_callback+0x586>
					case Apply_Remote_Config:
						remote_type = (BLE_MSG[1]&0x0F0)>>4;
    f426:	4b71      	ldr	r3, [pc, #452]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f428:	785b      	ldrb	r3, [r3, #1]
    f42a:	091b      	lsrs	r3, r3, #4
    f42c:	b2da      	uxtb	r2, r3
    f42e:	4b7d      	ldr	r3, [pc, #500]	; (f624 <ble_usart_read_callback+0x71c>)
    f430:	701a      	strb	r2, [r3, #0]
						button_type = (BLE_MSG[1]&0x0F);
    f432:	4b6e      	ldr	r3, [pc, #440]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f434:	785b      	ldrb	r3, [r3, #1]
    f436:	220f      	movs	r2, #15
    f438:	4013      	ands	r3, r2
    f43a:	b2da      	uxtb	r2, r3
    f43c:	4b7a      	ldr	r3, [pc, #488]	; (f628 <ble_usart_read_callback+0x720>)
    f43e:	701a      	strb	r2, [r3, #0]
						deadzone = BLE_MSG[2];
    f440:	4b6a      	ldr	r3, [pc, #424]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f442:	789a      	ldrb	r2, [r3, #2]
    f444:	4b79      	ldr	r3, [pc, #484]	; (f62c <ble_usart_read_callback+0x724>)
    f446:	701a      	strb	r2, [r3, #0]
						save_orientation_controls_remote_esc();
    f448:	4b75      	ldr	r3, [pc, #468]	; (f620 <ble_usart_read_callback+0x718>)
    f44a:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f44c:	230f      	movs	r3, #15
    f44e:	18fb      	adds	r3, r7, r3
    f450:	2201      	movs	r2, #1
    f452:	701a      	strb	r2, [r3, #0]
						break;
    f454:	e01b      	b.n	f48e <ble_usart_read_callback+0x586>
					case Apply_ESC_Config:
						esc_fw = BLE_MSG[1];
    f456:	4b65      	ldr	r3, [pc, #404]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f458:	785a      	ldrb	r2, [r3, #1]
    f45a:	4b75      	ldr	r3, [pc, #468]	; (f630 <ble_usart_read_callback+0x728>)
    f45c:	701a      	strb	r2, [r3, #0]
						esc_comms = (BLE_MSG[2]&0x0F0)>>4;
    f45e:	4b63      	ldr	r3, [pc, #396]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f460:	789b      	ldrb	r3, [r3, #2]
    f462:	091b      	lsrs	r3, r3, #4
    f464:	b2da      	uxtb	r2, r3
    f466:	4b73      	ldr	r3, [pc, #460]	; (f634 <ble_usart_read_callback+0x72c>)
    f468:	701a      	strb	r2, [r3, #0]
						UART_baud = (BLE_MSG[2]&0x0F);
    f46a:	4b60      	ldr	r3, [pc, #384]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f46c:	789b      	ldrb	r3, [r3, #2]
    f46e:	220f      	movs	r2, #15
    f470:	4013      	ands	r3, r2
    f472:	b2da      	uxtb	r2, r3
    f474:	4b70      	ldr	r3, [pc, #448]	; (f638 <ble_usart_read_callback+0x730>)
    f476:	701a      	strb	r2, [r3, #0]
						save_orientation_controls_remote_esc();
    f478:	4b69      	ldr	r3, [pc, #420]	; (f620 <ble_usart_read_callback+0x718>)
    f47a:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f47c:	230f      	movs	r3, #15
    f47e:	18fb      	adds	r3, r7, r3
    f480:	2201      	movs	r2, #1
    f482:	701a      	strb	r2, [r3, #0]
						configured_comms = esc_comms;
    f484:	4b6b      	ldr	r3, [pc, #428]	; (f634 <ble_usart_read_callback+0x72c>)
    f486:	781a      	ldrb	r2, [r3, #0]
    f488:	4b6c      	ldr	r3, [pc, #432]	; (f63c <ble_usart_read_callback+0x734>)
    f48a:	701a      	strb	r2, [r3, #0]
						break;
    f48c:	46c0      	nop			; (mov r8, r8)
				}//*/
				break;
    f48e:	e310      	b.n	fab2 <ble_usart_read_callback+0xbaa>
			case 5:
				switch(BLE_MSG[0]){
    f490:	4b56      	ldr	r3, [pc, #344]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f492:	781b      	ldrb	r3, [r3, #0]
    f494:	2bea      	cmp	r3, #234	; 0xea
    f496:	d050      	beq.n	f53a <ble_usart_read_callback+0x632>
    f498:	2bec      	cmp	r3, #236	; 0xec
    f49a:	d000      	beq.n	f49e <ble_usart_read_callback+0x596>
						Brightness[MODE_THROTTLE] = ((float)(BLE_MSG[3]))/100;
						save_led_data();
						MESSAGE_HANDLED = true;
						break;
				}
				break;
    f49c:	e30a      	b.n	fab4 <ble_usart_read_callback+0xbac>
						LIGHTS_ON = 1;
    f49e:	4b51      	ldr	r3, [pc, #324]	; (f5e4 <ble_usart_read_callback+0x6dc>)
    f4a0:	2201      	movs	r2, #1
    f4a2:	701a      	strb	r2, [r3, #0]
						light_mode = MODE_COLOR_CYCLE;
    f4a4:	4b50      	ldr	r3, [pc, #320]	; (f5e8 <ble_usart_read_callback+0x6e0>)
    f4a6:	2201      	movs	r2, #1
    f4a8:	701a      	strb	r2, [r3, #0]
						SWITCHES = BLE_MSG[1];
    f4aa:	4b50      	ldr	r3, [pc, #320]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f4ac:	785a      	ldrb	r2, [r3, #1]
    f4ae:	4b50      	ldr	r3, [pc, #320]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f4b0:	701a      	strb	r2, [r3, #0]
						SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f4b2:	4b4f      	ldr	r3, [pc, #316]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f4b4:	781b      	ldrb	r3, [r3, #0]
    f4b6:	111b      	asrs	r3, r3, #4
    f4b8:	b2db      	uxtb	r3, r3
    f4ba:	2201      	movs	r2, #1
    f4bc:	4013      	ands	r3, r2
    f4be:	b2da      	uxtb	r2, r3
    f4c0:	4b4c      	ldr	r3, [pc, #304]	; (f5f4 <ble_usart_read_callback+0x6ec>)
    f4c2:	701a      	strb	r2, [r3, #0]
						HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f4c4:	4b4a      	ldr	r3, [pc, #296]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f4c6:	781b      	ldrb	r3, [r3, #0]
    f4c8:	115b      	asrs	r3, r3, #5
    f4ca:	b2db      	uxtb	r3, r3
    f4cc:	2201      	movs	r2, #1
    f4ce:	4013      	ands	r3, r2
    f4d0:	b2da      	uxtb	r2, r3
    f4d2:	4b49      	ldr	r3, [pc, #292]	; (f5f8 <ble_usart_read_callback+0x6f0>)
    f4d4:	701a      	strb	r2, [r3, #0]
						LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f4d6:	4b46      	ldr	r3, [pc, #280]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f4d8:	781b      	ldrb	r3, [r3, #0]
    f4da:	119b      	asrs	r3, r3, #6
    f4dc:	b2db      	uxtb	r3, r3
    f4de:	2201      	movs	r2, #1
    f4e0:	4013      	ands	r3, r2
    f4e2:	b2da      	uxtb	r2, r3
    f4e4:	4b45      	ldr	r3, [pc, #276]	; (f5fc <ble_usart_read_callback+0x6f4>)
    f4e6:	701a      	strb	r2, [r3, #0]
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f4e8:	4b41      	ldr	r3, [pc, #260]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f4ea:	781b      	ldrb	r3, [r3, #0]
    f4ec:	09db      	lsrs	r3, r3, #7
    f4ee:	b2da      	uxtb	r2, r3
    f4f0:	4b43      	ldr	r3, [pc, #268]	; (f600 <ble_usart_read_callback+0x6f8>)
    f4f2:	701a      	strb	r2, [r3, #0]
						RateSens[MODE_COLOR_CYCLE] = ((float)(BLE_MSG[2]))/100;
    f4f4:	4b3d      	ldr	r3, [pc, #244]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f4f6:	789a      	ldrb	r2, [r3, #2]
    f4f8:	4b42      	ldr	r3, [pc, #264]	; (f604 <ble_usart_read_callback+0x6fc>)
    f4fa:	0010      	movs	r0, r2
    f4fc:	4798      	blx	r3
    f4fe:	1c02      	adds	r2, r0, #0
    f500:	4b41      	ldr	r3, [pc, #260]	; (f608 <ble_usart_read_callback+0x700>)
    f502:	4942      	ldr	r1, [pc, #264]	; (f60c <ble_usart_read_callback+0x704>)
    f504:	1c10      	adds	r0, r2, #0
    f506:	4798      	blx	r3
    f508:	1c03      	adds	r3, r0, #0
    f50a:	1c1a      	adds	r2, r3, #0
    f50c:	4b40      	ldr	r3, [pc, #256]	; (f610 <ble_usart_read_callback+0x708>)
    f50e:	605a      	str	r2, [r3, #4]
						Brightness[MODE_COLOR_CYCLE] = ((float)(BLE_MSG[3]))/100;
    f510:	4b36      	ldr	r3, [pc, #216]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f512:	78da      	ldrb	r2, [r3, #3]
    f514:	4b3b      	ldr	r3, [pc, #236]	; (f604 <ble_usart_read_callback+0x6fc>)
    f516:	0010      	movs	r0, r2
    f518:	4798      	blx	r3
    f51a:	1c02      	adds	r2, r0, #0
    f51c:	4b3a      	ldr	r3, [pc, #232]	; (f608 <ble_usart_read_callback+0x700>)
    f51e:	493b      	ldr	r1, [pc, #236]	; (f60c <ble_usart_read_callback+0x704>)
    f520:	1c10      	adds	r0, r2, #0
    f522:	4798      	blx	r3
    f524:	1c03      	adds	r3, r0, #0
    f526:	1c1a      	adds	r2, r3, #0
    f528:	4b3b      	ldr	r3, [pc, #236]	; (f618 <ble_usart_read_callback+0x710>)
    f52a:	605a      	str	r2, [r3, #4]
						save_led_data();
    f52c:	4b39      	ldr	r3, [pc, #228]	; (f614 <ble_usart_read_callback+0x70c>)
    f52e:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f530:	230f      	movs	r3, #15
    f532:	18fb      	adds	r3, r7, r3
    f534:	2201      	movs	r2, #1
    f536:	701a      	strb	r2, [r3, #0]
						break;
    f538:	e04d      	b.n	f5d6 <ble_usart_read_callback+0x6ce>
						LIGHTS_ON = 1;
    f53a:	4b2a      	ldr	r3, [pc, #168]	; (f5e4 <ble_usart_read_callback+0x6dc>)
    f53c:	2201      	movs	r2, #1
    f53e:	701a      	strb	r2, [r3, #0]
						light_mode = MODE_THROTTLE;
    f540:	4b29      	ldr	r3, [pc, #164]	; (f5e8 <ble_usart_read_callback+0x6e0>)
    f542:	2203      	movs	r2, #3
    f544:	701a      	strb	r2, [r3, #0]
						SWITCHES = BLE_MSG[1];
    f546:	4b29      	ldr	r3, [pc, #164]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f548:	785a      	ldrb	r2, [r3, #1]
    f54a:	4b29      	ldr	r3, [pc, #164]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f54c:	701a      	strb	r2, [r3, #0]
						SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f54e:	4b28      	ldr	r3, [pc, #160]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f550:	781b      	ldrb	r3, [r3, #0]
    f552:	111b      	asrs	r3, r3, #4
    f554:	b2db      	uxtb	r3, r3
    f556:	2201      	movs	r2, #1
    f558:	4013      	ands	r3, r2
    f55a:	b2da      	uxtb	r2, r3
    f55c:	4b25      	ldr	r3, [pc, #148]	; (f5f4 <ble_usart_read_callback+0x6ec>)
    f55e:	701a      	strb	r2, [r3, #0]
						HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f560:	4b23      	ldr	r3, [pc, #140]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f562:	781b      	ldrb	r3, [r3, #0]
    f564:	115b      	asrs	r3, r3, #5
    f566:	b2db      	uxtb	r3, r3
    f568:	2201      	movs	r2, #1
    f56a:	4013      	ands	r3, r2
    f56c:	b2da      	uxtb	r2, r3
    f56e:	4b22      	ldr	r3, [pc, #136]	; (f5f8 <ble_usart_read_callback+0x6f0>)
    f570:	701a      	strb	r2, [r3, #0]
						LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f572:	4b1f      	ldr	r3, [pc, #124]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f574:	781b      	ldrb	r3, [r3, #0]
    f576:	119b      	asrs	r3, r3, #6
    f578:	b2db      	uxtb	r3, r3
    f57a:	2201      	movs	r2, #1
    f57c:	4013      	ands	r3, r2
    f57e:	b2da      	uxtb	r2, r3
    f580:	4b1e      	ldr	r3, [pc, #120]	; (f5fc <ble_usart_read_callback+0x6f4>)
    f582:	701a      	strb	r2, [r3, #0]
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f584:	4b1a      	ldr	r3, [pc, #104]	; (f5f0 <ble_usart_read_callback+0x6e8>)
    f586:	781b      	ldrb	r3, [r3, #0]
    f588:	09db      	lsrs	r3, r3, #7
    f58a:	b2da      	uxtb	r2, r3
    f58c:	4b1c      	ldr	r3, [pc, #112]	; (f600 <ble_usart_read_callback+0x6f8>)
    f58e:	701a      	strb	r2, [r3, #0]
						RateSens[MODE_THROTTLE] = ((float)(BLE_MSG[2]))/100;
    f590:	4b16      	ldr	r3, [pc, #88]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f592:	789a      	ldrb	r2, [r3, #2]
    f594:	4b1b      	ldr	r3, [pc, #108]	; (f604 <ble_usart_read_callback+0x6fc>)
    f596:	0010      	movs	r0, r2
    f598:	4798      	blx	r3
    f59a:	1c02      	adds	r2, r0, #0
    f59c:	4b1a      	ldr	r3, [pc, #104]	; (f608 <ble_usart_read_callback+0x700>)
    f59e:	491b      	ldr	r1, [pc, #108]	; (f60c <ble_usart_read_callback+0x704>)
    f5a0:	1c10      	adds	r0, r2, #0
    f5a2:	4798      	blx	r3
    f5a4:	1c03      	adds	r3, r0, #0
    f5a6:	1c1a      	adds	r2, r3, #0
    f5a8:	4b19      	ldr	r3, [pc, #100]	; (f610 <ble_usart_read_callback+0x708>)
    f5aa:	60da      	str	r2, [r3, #12]
						Brightness[MODE_THROTTLE] = ((float)(BLE_MSG[3]))/100;
    f5ac:	4b0f      	ldr	r3, [pc, #60]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f5ae:	78da      	ldrb	r2, [r3, #3]
    f5b0:	4b14      	ldr	r3, [pc, #80]	; (f604 <ble_usart_read_callback+0x6fc>)
    f5b2:	0010      	movs	r0, r2
    f5b4:	4798      	blx	r3
    f5b6:	1c02      	adds	r2, r0, #0
    f5b8:	4b13      	ldr	r3, [pc, #76]	; (f608 <ble_usart_read_callback+0x700>)
    f5ba:	4914      	ldr	r1, [pc, #80]	; (f60c <ble_usart_read_callback+0x704>)
    f5bc:	1c10      	adds	r0, r2, #0
    f5be:	4798      	blx	r3
    f5c0:	1c03      	adds	r3, r0, #0
    f5c2:	1c1a      	adds	r2, r3, #0
    f5c4:	4b14      	ldr	r3, [pc, #80]	; (f618 <ble_usart_read_callback+0x710>)
    f5c6:	60da      	str	r2, [r3, #12]
						save_led_data();
    f5c8:	4b12      	ldr	r3, [pc, #72]	; (f614 <ble_usart_read_callback+0x70c>)
    f5ca:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f5cc:	230f      	movs	r3, #15
    f5ce:	18fb      	adds	r3, r7, r3
    f5d0:	2201      	movs	r2, #1
    f5d2:	701a      	strb	r2, [r3, #0]
						break;
    f5d4:	46c0      	nop			; (mov r8, r8)
				break;
    f5d6:	e26d      	b.n	fab4 <ble_usart_read_callback+0xbac>
			case 9:
				switch(BLE_MSG[0]){
    f5d8:	4b04      	ldr	r3, [pc, #16]	; (f5ec <ble_usart_read_callback+0x6e4>)
    f5da:	781b      	ldrb	r3, [r3, #0]
    f5dc:	2bed      	cmp	r3, #237	; 0xed
    f5de:	d02f      	beq.n	f640 <ble_usart_read_callback+0x738>
						Static_RGB.RB = (uint16_t)((float)BLE_MSG[7] * 257);
						save_led_data();
						MESSAGE_HANDLED = true;
						break;
				}//*/
				break;
    f5e0:	e268      	b.n	fab4 <ble_usart_read_callback+0xbac>
    f5e2:	46c0      	nop			; (mov r8, r8)
    f5e4:	200000a3 	.word	0x200000a3
    f5e8:	2000001b 	.word	0x2000001b
    f5ec:	200007b4 	.word	0x200007b4
    f5f0:	20000325 	.word	0x20000325
    f5f4:	200000a2 	.word	0x200000a2
    f5f8:	20000322 	.word	0x20000322
    f5fc:	20000323 	.word	0x20000323
    f600:	20000324 	.word	0x20000324
    f604:	00014ee9 	.word	0x00014ee9
    f608:	000144b1 	.word	0x000144b1
    f60c:	42c80000 	.word	0x42c80000
    f610:	20000028 	.word	0x20000028
    f614:	0000e099 	.word	0x0000e099
    f618:	2000004c 	.word	0x2000004c
    f61c:	20000004 	.word	0x20000004
    f620:	0000eb79 	.word	0x0000eb79
    f624:	20000308 	.word	0x20000308
    f628:	20000309 	.word	0x20000309
    f62c:	20000018 	.word	0x20000018
    f630:	2000001a 	.word	0x2000001a
    f634:	20000310 	.word	0x20000310
    f638:	20000311 	.word	0x20000311
    f63c:	200003a4 	.word	0x200003a4
						LIGHTS_ON = 1;
    f640:	4b91      	ldr	r3, [pc, #580]	; (f888 <ble_usart_read_callback+0x980>)
    f642:	2201      	movs	r2, #1
    f644:	701a      	strb	r2, [r3, #0]
						light_mode = MODE_STATIC;
    f646:	4b91      	ldr	r3, [pc, #580]	; (f88c <ble_usart_read_callback+0x984>)
    f648:	2200      	movs	r2, #0
    f64a:	701a      	strb	r2, [r3, #0]
						SWITCHES = BLE_MSG[1];
    f64c:	4b90      	ldr	r3, [pc, #576]	; (f890 <ble_usart_read_callback+0x988>)
    f64e:	785a      	ldrb	r2, [r3, #1]
    f650:	4b90      	ldr	r3, [pc, #576]	; (f894 <ble_usart_read_callback+0x98c>)
    f652:	701a      	strb	r2, [r3, #0]
						SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f654:	4b8f      	ldr	r3, [pc, #572]	; (f894 <ble_usart_read_callback+0x98c>)
    f656:	781b      	ldrb	r3, [r3, #0]
    f658:	111b      	asrs	r3, r3, #4
    f65a:	b2db      	uxtb	r3, r3
    f65c:	2201      	movs	r2, #1
    f65e:	4013      	ands	r3, r2
    f660:	b2da      	uxtb	r2, r3
    f662:	4b8d      	ldr	r3, [pc, #564]	; (f898 <ble_usart_read_callback+0x990>)
    f664:	701a      	strb	r2, [r3, #0]
						HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f666:	4b8b      	ldr	r3, [pc, #556]	; (f894 <ble_usart_read_callback+0x98c>)
    f668:	781b      	ldrb	r3, [r3, #0]
    f66a:	115b      	asrs	r3, r3, #5
    f66c:	b2db      	uxtb	r3, r3
    f66e:	2201      	movs	r2, #1
    f670:	4013      	ands	r3, r2
    f672:	b2da      	uxtb	r2, r3
    f674:	4b89      	ldr	r3, [pc, #548]	; (f89c <ble_usart_read_callback+0x994>)
    f676:	701a      	strb	r2, [r3, #0]
						LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f678:	4b86      	ldr	r3, [pc, #536]	; (f894 <ble_usart_read_callback+0x98c>)
    f67a:	781b      	ldrb	r3, [r3, #0]
    f67c:	119b      	asrs	r3, r3, #6
    f67e:	b2db      	uxtb	r3, r3
    f680:	2201      	movs	r2, #1
    f682:	4013      	ands	r3, r2
    f684:	b2da      	uxtb	r2, r3
    f686:	4b86      	ldr	r3, [pc, #536]	; (f8a0 <ble_usart_read_callback+0x998>)
    f688:	701a      	strb	r2, [r3, #0]
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f68a:	4b82      	ldr	r3, [pc, #520]	; (f894 <ble_usart_read_callback+0x98c>)
    f68c:	781b      	ldrb	r3, [r3, #0]
    f68e:	09db      	lsrs	r3, r3, #7
    f690:	b2da      	uxtb	r2, r3
    f692:	4b84      	ldr	r3, [pc, #528]	; (f8a4 <ble_usart_read_callback+0x99c>)
    f694:	701a      	strb	r2, [r3, #0]
						Static_RGB.LR = (uint16_t)((float)BLE_MSG[2] * 257);
    f696:	4b7e      	ldr	r3, [pc, #504]	; (f890 <ble_usart_read_callback+0x988>)
    f698:	789a      	ldrb	r2, [r3, #2]
    f69a:	4b83      	ldr	r3, [pc, #524]	; (f8a8 <ble_usart_read_callback+0x9a0>)
    f69c:	0010      	movs	r0, r2
    f69e:	4798      	blx	r3
    f6a0:	1c02      	adds	r2, r0, #0
    f6a2:	4b82      	ldr	r3, [pc, #520]	; (f8ac <ble_usart_read_callback+0x9a4>)
    f6a4:	4982      	ldr	r1, [pc, #520]	; (f8b0 <ble_usart_read_callback+0x9a8>)
    f6a6:	1c10      	adds	r0, r2, #0
    f6a8:	4798      	blx	r3
    f6aa:	1c03      	adds	r3, r0, #0
    f6ac:	1c1a      	adds	r2, r3, #0
    f6ae:	4b81      	ldr	r3, [pc, #516]	; (f8b4 <ble_usart_read_callback+0x9ac>)
    f6b0:	1c10      	adds	r0, r2, #0
    f6b2:	4798      	blx	r3
    f6b4:	0003      	movs	r3, r0
    f6b6:	b29a      	uxth	r2, r3
    f6b8:	4b7f      	ldr	r3, [pc, #508]	; (f8b8 <ble_usart_read_callback+0x9b0>)
    f6ba:	801a      	strh	r2, [r3, #0]
						Static_RGB.LG = (uint16_t)((float)BLE_MSG[3] * 257);
    f6bc:	4b74      	ldr	r3, [pc, #464]	; (f890 <ble_usart_read_callback+0x988>)
    f6be:	78da      	ldrb	r2, [r3, #3]
    f6c0:	4b79      	ldr	r3, [pc, #484]	; (f8a8 <ble_usart_read_callback+0x9a0>)
    f6c2:	0010      	movs	r0, r2
    f6c4:	4798      	blx	r3
    f6c6:	1c02      	adds	r2, r0, #0
    f6c8:	4b78      	ldr	r3, [pc, #480]	; (f8ac <ble_usart_read_callback+0x9a4>)
    f6ca:	4979      	ldr	r1, [pc, #484]	; (f8b0 <ble_usart_read_callback+0x9a8>)
    f6cc:	1c10      	adds	r0, r2, #0
    f6ce:	4798      	blx	r3
    f6d0:	1c03      	adds	r3, r0, #0
    f6d2:	1c1a      	adds	r2, r3, #0
    f6d4:	4b77      	ldr	r3, [pc, #476]	; (f8b4 <ble_usart_read_callback+0x9ac>)
    f6d6:	1c10      	adds	r0, r2, #0
    f6d8:	4798      	blx	r3
    f6da:	0003      	movs	r3, r0
    f6dc:	b29a      	uxth	r2, r3
    f6de:	4b76      	ldr	r3, [pc, #472]	; (f8b8 <ble_usart_read_callback+0x9b0>)
    f6e0:	805a      	strh	r2, [r3, #2]
						Static_RGB.LB = (uint16_t)((float)BLE_MSG[4] * 257);
    f6e2:	4b6b      	ldr	r3, [pc, #428]	; (f890 <ble_usart_read_callback+0x988>)
    f6e4:	791a      	ldrb	r2, [r3, #4]
    f6e6:	4b70      	ldr	r3, [pc, #448]	; (f8a8 <ble_usart_read_callback+0x9a0>)
    f6e8:	0010      	movs	r0, r2
    f6ea:	4798      	blx	r3
    f6ec:	1c02      	adds	r2, r0, #0
    f6ee:	4b6f      	ldr	r3, [pc, #444]	; (f8ac <ble_usart_read_callback+0x9a4>)
    f6f0:	496f      	ldr	r1, [pc, #444]	; (f8b0 <ble_usart_read_callback+0x9a8>)
    f6f2:	1c10      	adds	r0, r2, #0
    f6f4:	4798      	blx	r3
    f6f6:	1c03      	adds	r3, r0, #0
    f6f8:	1c1a      	adds	r2, r3, #0
    f6fa:	4b6e      	ldr	r3, [pc, #440]	; (f8b4 <ble_usart_read_callback+0x9ac>)
    f6fc:	1c10      	adds	r0, r2, #0
    f6fe:	4798      	blx	r3
    f700:	0003      	movs	r3, r0
    f702:	b29a      	uxth	r2, r3
    f704:	4b6c      	ldr	r3, [pc, #432]	; (f8b8 <ble_usart_read_callback+0x9b0>)
    f706:	809a      	strh	r2, [r3, #4]
						Static_RGB.RR = (uint16_t)((float)BLE_MSG[5] * 257);
    f708:	4b61      	ldr	r3, [pc, #388]	; (f890 <ble_usart_read_callback+0x988>)
    f70a:	795a      	ldrb	r2, [r3, #5]
    f70c:	4b66      	ldr	r3, [pc, #408]	; (f8a8 <ble_usart_read_callback+0x9a0>)
    f70e:	0010      	movs	r0, r2
    f710:	4798      	blx	r3
    f712:	1c02      	adds	r2, r0, #0
    f714:	4b65      	ldr	r3, [pc, #404]	; (f8ac <ble_usart_read_callback+0x9a4>)
    f716:	4966      	ldr	r1, [pc, #408]	; (f8b0 <ble_usart_read_callback+0x9a8>)
    f718:	1c10      	adds	r0, r2, #0
    f71a:	4798      	blx	r3
    f71c:	1c03      	adds	r3, r0, #0
    f71e:	1c1a      	adds	r2, r3, #0
    f720:	4b64      	ldr	r3, [pc, #400]	; (f8b4 <ble_usart_read_callback+0x9ac>)
    f722:	1c10      	adds	r0, r2, #0
    f724:	4798      	blx	r3
    f726:	0003      	movs	r3, r0
    f728:	b29a      	uxth	r2, r3
    f72a:	4b63      	ldr	r3, [pc, #396]	; (f8b8 <ble_usart_read_callback+0x9b0>)
    f72c:	80da      	strh	r2, [r3, #6]
						Static_RGB.RG = (uint16_t)((float)BLE_MSG[6] * 257);
    f72e:	4b58      	ldr	r3, [pc, #352]	; (f890 <ble_usart_read_callback+0x988>)
    f730:	799a      	ldrb	r2, [r3, #6]
    f732:	4b5d      	ldr	r3, [pc, #372]	; (f8a8 <ble_usart_read_callback+0x9a0>)
    f734:	0010      	movs	r0, r2
    f736:	4798      	blx	r3
    f738:	1c02      	adds	r2, r0, #0
    f73a:	4b5c      	ldr	r3, [pc, #368]	; (f8ac <ble_usart_read_callback+0x9a4>)
    f73c:	495c      	ldr	r1, [pc, #368]	; (f8b0 <ble_usart_read_callback+0x9a8>)
    f73e:	1c10      	adds	r0, r2, #0
    f740:	4798      	blx	r3
    f742:	1c03      	adds	r3, r0, #0
    f744:	1c1a      	adds	r2, r3, #0
    f746:	4b5b      	ldr	r3, [pc, #364]	; (f8b4 <ble_usart_read_callback+0x9ac>)
    f748:	1c10      	adds	r0, r2, #0
    f74a:	4798      	blx	r3
    f74c:	0003      	movs	r3, r0
    f74e:	b29a      	uxth	r2, r3
    f750:	4b59      	ldr	r3, [pc, #356]	; (f8b8 <ble_usart_read_callback+0x9b0>)
    f752:	811a      	strh	r2, [r3, #8]
						Static_RGB.RB = (uint16_t)((float)BLE_MSG[7] * 257);
    f754:	4b4e      	ldr	r3, [pc, #312]	; (f890 <ble_usart_read_callback+0x988>)
    f756:	79da      	ldrb	r2, [r3, #7]
    f758:	4b53      	ldr	r3, [pc, #332]	; (f8a8 <ble_usart_read_callback+0x9a0>)
    f75a:	0010      	movs	r0, r2
    f75c:	4798      	blx	r3
    f75e:	1c02      	adds	r2, r0, #0
    f760:	4b52      	ldr	r3, [pc, #328]	; (f8ac <ble_usart_read_callback+0x9a4>)
    f762:	4953      	ldr	r1, [pc, #332]	; (f8b0 <ble_usart_read_callback+0x9a8>)
    f764:	1c10      	adds	r0, r2, #0
    f766:	4798      	blx	r3
    f768:	1c03      	adds	r3, r0, #0
    f76a:	1c1a      	adds	r2, r3, #0
    f76c:	4b51      	ldr	r3, [pc, #324]	; (f8b4 <ble_usart_read_callback+0x9ac>)
    f76e:	1c10      	adds	r0, r2, #0
    f770:	4798      	blx	r3
    f772:	0003      	movs	r3, r0
    f774:	b29a      	uxth	r2, r3
    f776:	4b50      	ldr	r3, [pc, #320]	; (f8b8 <ble_usart_read_callback+0x9b0>)
    f778:	815a      	strh	r2, [r3, #10]
						save_led_data();
    f77a:	4b50      	ldr	r3, [pc, #320]	; (f8bc <ble_usart_read_callback+0x9b4>)
    f77c:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f77e:	230f      	movs	r3, #15
    f780:	18fb      	adds	r3, r7, r3
    f782:	2201      	movs	r2, #1
    f784:	701a      	strb	r2, [r3, #0]
						break;
    f786:	46c0      	nop			; (mov r8, r8)
				break;
    f788:	e194      	b.n	fab4 <ble_usart_read_callback+0xbac>
			case 10:
				switch(BLE_MSG[0]){
    f78a:	4b41      	ldr	r3, [pc, #260]	; (f890 <ble_usart_read_callback+0x988>)
    f78c:	781b      	ldrb	r3, [r3, #0]
    f78e:	2bc2      	cmp	r3, #194	; 0xc2
    f790:	d000      	beq.n	f794 <ble_usart_read_callback+0x88c>
						dual_up_control = (BLE_MSG[8]&0x0F);
						save_orientation_controls_remote_esc();
						MESSAGE_HANDLED = true;
						break;
				}//*/
				break;
    f792:	e18f      	b.n	fab4 <ble_usart_read_callback+0xbac>
						AUX_ENABLED = (BLE_MSG[1]&0x80)>>7;
    f794:	4b3e      	ldr	r3, [pc, #248]	; (f890 <ble_usart_read_callback+0x988>)
    f796:	785b      	ldrb	r3, [r3, #1]
    f798:	09db      	lsrs	r3, r3, #7
    f79a:	b2db      	uxtb	r3, r3
    f79c:	1e5a      	subs	r2, r3, #1
    f79e:	4193      	sbcs	r3, r2
    f7a0:	b2da      	uxtb	r2, r3
    f7a2:	4b47      	ldr	r3, [pc, #284]	; (f8c0 <ble_usart_read_callback+0x9b8>)
    f7a4:	701a      	strb	r2, [r3, #0]
						TURN_ENABLED = (BLE_MSG[1]&0x40)>>6;
    f7a6:	4b3a      	ldr	r3, [pc, #232]	; (f890 <ble_usart_read_callback+0x988>)
    f7a8:	785b      	ldrb	r3, [r3, #1]
    f7aa:	119b      	asrs	r3, r3, #6
    f7ac:	2201      	movs	r2, #1
    f7ae:	4013      	ands	r3, r2
    f7b0:	1e5a      	subs	r2, r3, #1
    f7b2:	4193      	sbcs	r3, r2
    f7b4:	b2da      	uxtb	r2, r3
    f7b6:	4b43      	ldr	r3, [pc, #268]	; (f8c4 <ble_usart_read_callback+0x9bc>)
    f7b8:	701a      	strb	r2, [r3, #0]
						auxControlType = (BLE_MSG[1]&0x0F);
    f7ba:	4b35      	ldr	r3, [pc, #212]	; (f890 <ble_usart_read_callback+0x988>)
    f7bc:	785b      	ldrb	r3, [r3, #1]
    f7be:	220f      	movs	r2, #15
    f7c0:	4013      	ands	r3, r2
    f7c2:	b2da      	uxtb	r2, r3
    f7c4:	4b40      	ldr	r3, [pc, #256]	; (f8c8 <ble_usart_read_callback+0x9c0>)
    f7c6:	701a      	strb	r2, [r3, #0]
						auxTimedDuration = (BLE_MSG[2]&0xFF);
    f7c8:	4b31      	ldr	r3, [pc, #196]	; (f890 <ble_usart_read_callback+0x988>)
    f7ca:	789a      	ldrb	r2, [r3, #2]
    f7cc:	4b3f      	ldr	r3, [pc, #252]	; (f8cc <ble_usart_read_callback+0x9c4>)
    f7ce:	701a      	strb	r2, [r3, #0]
						single_aux_control = (BLE_MSG[3]&0xF0)>>4;
    f7d0:	4b2f      	ldr	r3, [pc, #188]	; (f890 <ble_usart_read_callback+0x988>)
    f7d2:	78db      	ldrb	r3, [r3, #3]
    f7d4:	091b      	lsrs	r3, r3, #4
    f7d6:	b2da      	uxtb	r2, r3
    f7d8:	4b3d      	ldr	r3, [pc, #244]	; (f8d0 <ble_usart_read_callback+0x9c8>)
    f7da:	701a      	strb	r2, [r3, #0]
						single_all_control = (BLE_MSG[3]&0x0F);
    f7dc:	4b2c      	ldr	r3, [pc, #176]	; (f890 <ble_usart_read_callback+0x988>)
    f7de:	78db      	ldrb	r3, [r3, #3]
    f7e0:	220f      	movs	r2, #15
    f7e2:	4013      	ands	r3, r2
    f7e4:	b2da      	uxtb	r2, r3
    f7e6:	4b3b      	ldr	r3, [pc, #236]	; (f8d4 <ble_usart_read_callback+0x9cc>)
    f7e8:	701a      	strb	r2, [r3, #0]
						single_head_control = (BLE_MSG[4]&0xF0)>>4;
    f7ea:	4b29      	ldr	r3, [pc, #164]	; (f890 <ble_usart_read_callback+0x988>)
    f7ec:	791b      	ldrb	r3, [r3, #4]
    f7ee:	091b      	lsrs	r3, r3, #4
    f7f0:	b2da      	uxtb	r2, r3
    f7f2:	4b39      	ldr	r3, [pc, #228]	; (f8d8 <ble_usart_read_callback+0x9d0>)
    f7f4:	701a      	strb	r2, [r3, #0]
						single_side_control = (BLE_MSG[4]&0x0F);
    f7f6:	4b26      	ldr	r3, [pc, #152]	; (f890 <ble_usart_read_callback+0x988>)
    f7f8:	791b      	ldrb	r3, [r3, #4]
    f7fa:	220f      	movs	r2, #15
    f7fc:	4013      	ands	r3, r2
    f7fe:	b2da      	uxtb	r2, r3
    f800:	4b36      	ldr	r3, [pc, #216]	; (f8dc <ble_usart_read_callback+0x9d4>)
    f802:	701a      	strb	r2, [r3, #0]
						single_down_control = (BLE_MSG[5]&0xF0)>>4;
    f804:	4b22      	ldr	r3, [pc, #136]	; (f890 <ble_usart_read_callback+0x988>)
    f806:	795b      	ldrb	r3, [r3, #5]
    f808:	091b      	lsrs	r3, r3, #4
    f80a:	b2da      	uxtb	r2, r3
    f80c:	4b34      	ldr	r3, [pc, #208]	; (f8e0 <ble_usart_read_callback+0x9d8>)
    f80e:	701a      	strb	r2, [r3, #0]
						single_up_control = (BLE_MSG[5]&0x0F);
    f810:	4b1f      	ldr	r3, [pc, #124]	; (f890 <ble_usart_read_callback+0x988>)
    f812:	795b      	ldrb	r3, [r3, #5]
    f814:	220f      	movs	r2, #15
    f816:	4013      	ands	r3, r2
    f818:	b2da      	uxtb	r2, r3
    f81a:	4b32      	ldr	r3, [pc, #200]	; (f8e4 <ble_usart_read_callback+0x9dc>)
    f81c:	701a      	strb	r2, [r3, #0]
						dual_aux_control = (BLE_MSG[6]&0xF0)>>4;
    f81e:	4b1c      	ldr	r3, [pc, #112]	; (f890 <ble_usart_read_callback+0x988>)
    f820:	799b      	ldrb	r3, [r3, #6]
    f822:	091b      	lsrs	r3, r3, #4
    f824:	b2da      	uxtb	r2, r3
    f826:	4b30      	ldr	r3, [pc, #192]	; (f8e8 <ble_usart_read_callback+0x9e0>)
    f828:	701a      	strb	r2, [r3, #0]
						dual_all_control = (BLE_MSG[6]&0x0F);
    f82a:	4b19      	ldr	r3, [pc, #100]	; (f890 <ble_usart_read_callback+0x988>)
    f82c:	799b      	ldrb	r3, [r3, #6]
    f82e:	220f      	movs	r2, #15
    f830:	4013      	ands	r3, r2
    f832:	b2da      	uxtb	r2, r3
    f834:	4b2d      	ldr	r3, [pc, #180]	; (f8ec <ble_usart_read_callback+0x9e4>)
    f836:	701a      	strb	r2, [r3, #0]
						dual_head_control = (BLE_MSG[7]&0xF0)>>4;
    f838:	4b15      	ldr	r3, [pc, #84]	; (f890 <ble_usart_read_callback+0x988>)
    f83a:	79db      	ldrb	r3, [r3, #7]
    f83c:	091b      	lsrs	r3, r3, #4
    f83e:	b2da      	uxtb	r2, r3
    f840:	4b2b      	ldr	r3, [pc, #172]	; (f8f0 <ble_usart_read_callback+0x9e8>)
    f842:	701a      	strb	r2, [r3, #0]
						dual_side_control = (BLE_MSG[7]&0x0F);
    f844:	4b12      	ldr	r3, [pc, #72]	; (f890 <ble_usart_read_callback+0x988>)
    f846:	79db      	ldrb	r3, [r3, #7]
    f848:	220f      	movs	r2, #15
    f84a:	4013      	ands	r3, r2
    f84c:	b2da      	uxtb	r2, r3
    f84e:	4b29      	ldr	r3, [pc, #164]	; (f8f4 <ble_usart_read_callback+0x9ec>)
    f850:	701a      	strb	r2, [r3, #0]
						dual_down_control = (BLE_MSG[8]&0xF0)>>4;
    f852:	4b0f      	ldr	r3, [pc, #60]	; (f890 <ble_usart_read_callback+0x988>)
    f854:	7a1b      	ldrb	r3, [r3, #8]
    f856:	091b      	lsrs	r3, r3, #4
    f858:	b2da      	uxtb	r2, r3
    f85a:	4b27      	ldr	r3, [pc, #156]	; (f8f8 <ble_usart_read_callback+0x9f0>)
    f85c:	701a      	strb	r2, [r3, #0]
						dual_up_control = (BLE_MSG[8]&0x0F);
    f85e:	4b0c      	ldr	r3, [pc, #48]	; (f890 <ble_usart_read_callback+0x988>)
    f860:	7a1b      	ldrb	r3, [r3, #8]
    f862:	220f      	movs	r2, #15
    f864:	4013      	ands	r3, r2
    f866:	b2da      	uxtb	r2, r3
    f868:	4b24      	ldr	r3, [pc, #144]	; (f8fc <ble_usart_read_callback+0x9f4>)
    f86a:	701a      	strb	r2, [r3, #0]
						save_orientation_controls_remote_esc();
    f86c:	4b24      	ldr	r3, [pc, #144]	; (f900 <ble_usart_read_callback+0x9f8>)
    f86e:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    f870:	230f      	movs	r3, #15
    f872:	18fb      	adds	r3, r7, r3
    f874:	2201      	movs	r2, #1
    f876:	701a      	strb	r2, [r3, #0]
						break;
    f878:	46c0      	nop			; (mov r8, r8)
				break;
    f87a:	e11b      	b.n	fab4 <ble_usart_read_callback+0xbac>
			case 12:
				switch(BLE_MSG[0]){
    f87c:	4b04      	ldr	r3, [pc, #16]	; (f890 <ble_usart_read_callback+0x988>)
    f87e:	781b      	ldrb	r3, [r3, #0]
    f880:	2bb1      	cmp	r3, #177	; 0xb1
    f882:	d03f      	beq.n	f904 <ble_usart_read_callback+0x9fc>
						Brightness[MODE_CUSTOM] = ((float)(BLE_MSG[10]))/100;
						save_led_data();
						MESSAGE_HANDLED = true;
						break;
				}//*/
				break;
    f884:	e116      	b.n	fab4 <ble_usart_read_callback+0xbac>
    f886:	46c0      	nop			; (mov r8, r8)
    f888:	200000a3 	.word	0x200000a3
    f88c:	2000001b 	.word	0x2000001b
    f890:	200007b4 	.word	0x200007b4
    f894:	20000325 	.word	0x20000325
    f898:	200000a2 	.word	0x200000a2
    f89c:	20000322 	.word	0x20000322
    f8a0:	20000323 	.word	0x20000323
    f8a4:	20000324 	.word	0x20000324
    f8a8:	00014ee9 	.word	0x00014ee9
    f8ac:	00014891 	.word	0x00014891
    f8b0:	43808000 	.word	0x43808000
    f8b4:	00014121 	.word	0x00014121
    f8b8:	2000001c 	.word	0x2000001c
    f8bc:	0000e099 	.word	0x0000e099
    f8c0:	20000374 	.word	0x20000374
    f8c4:	20000375 	.word	0x20000375
    f8c8:	20000377 	.word	0x20000377
    f8cc:	20000378 	.word	0x20000378
    f8d0:	20000379 	.word	0x20000379
    f8d4:	2000037a 	.word	0x2000037a
    f8d8:	2000037b 	.word	0x2000037b
    f8dc:	2000037c 	.word	0x2000037c
    f8e0:	2000037e 	.word	0x2000037e
    f8e4:	2000037d 	.word	0x2000037d
    f8e8:	2000037f 	.word	0x2000037f
    f8ec:	20000380 	.word	0x20000380
    f8f0:	20000381 	.word	0x20000381
    f8f4:	20000382 	.word	0x20000382
    f8f8:	20000384 	.word	0x20000384
    f8fc:	20000383 	.word	0x20000383
    f900:	0000eb79 	.word	0x0000eb79
						LIGHTS_ON = 1;
    f904:	4bbd      	ldr	r3, [pc, #756]	; (fbfc <ble_usart_read_callback+0xcf4>)
    f906:	2201      	movs	r2, #1
    f908:	701a      	strb	r2, [r3, #0]
						light_mode = MODE_CUSTOM;
    f90a:	4bbd      	ldr	r3, [pc, #756]	; (fc00 <ble_usart_read_callback+0xcf8>)
    f90c:	2208      	movs	r2, #8
    f90e:	701a      	strb	r2, [r3, #0]
						SWITCHES = BLE_MSG[1];
    f910:	4bbc      	ldr	r3, [pc, #752]	; (fc04 <ble_usart_read_callback+0xcfc>)
    f912:	785a      	ldrb	r2, [r3, #1]
    f914:	4bbc      	ldr	r3, [pc, #752]	; (fc08 <ble_usart_read_callback+0xd00>)
    f916:	701a      	strb	r2, [r3, #0]
						SIDELIGHTS = (SWITCHES & 0x10) >> 4;
    f918:	4bbb      	ldr	r3, [pc, #748]	; (fc08 <ble_usart_read_callback+0xd00>)
    f91a:	781b      	ldrb	r3, [r3, #0]
    f91c:	111b      	asrs	r3, r3, #4
    f91e:	b2db      	uxtb	r3, r3
    f920:	2201      	movs	r2, #1
    f922:	4013      	ands	r3, r2
    f924:	b2da      	uxtb	r2, r3
    f926:	4bb9      	ldr	r3, [pc, #740]	; (fc0c <ble_usart_read_callback+0xd04>)
    f928:	701a      	strb	r2, [r3, #0]
						HEADLIGHTS = (SWITCHES & 0x20) >> 5;
    f92a:	4bb7      	ldr	r3, [pc, #732]	; (fc08 <ble_usart_read_callback+0xd00>)
    f92c:	781b      	ldrb	r3, [r3, #0]
    f92e:	115b      	asrs	r3, r3, #5
    f930:	b2db      	uxtb	r3, r3
    f932:	2201      	movs	r2, #1
    f934:	4013      	ands	r3, r2
    f936:	b2da      	uxtb	r2, r3
    f938:	4bb5      	ldr	r3, [pc, #724]	; (fc10 <ble_usart_read_callback+0xd08>)
    f93a:	701a      	strb	r2, [r3, #0]
						LIGHT_CONTROLLED = (SWITCHES & 0x40) >> 6;
    f93c:	4bb2      	ldr	r3, [pc, #712]	; (fc08 <ble_usart_read_callback+0xd00>)
    f93e:	781b      	ldrb	r3, [r3, #0]
    f940:	119b      	asrs	r3, r3, #6
    f942:	b2db      	uxtb	r3, r3
    f944:	2201      	movs	r2, #1
    f946:	4013      	ands	r3, r2
    f948:	b2da      	uxtb	r2, r3
    f94a:	4bb2      	ldr	r3, [pc, #712]	; (fc14 <ble_usart_read_callback+0xd0c>)
    f94c:	701a      	strb	r2, [r3, #0]
						IMU_CONTROLED = (SWITCHES & 0x80) >> 7;
    f94e:	4bae      	ldr	r3, [pc, #696]	; (fc08 <ble_usart_read_callback+0xd00>)
    f950:	781b      	ldrb	r3, [r3, #0]
    f952:	09db      	lsrs	r3, r3, #7
    f954:	b2da      	uxtb	r2, r3
    f956:	4bb0      	ldr	r3, [pc, #704]	; (fc18 <ble_usart_read_callback+0xd10>)
    f958:	701a      	strb	r2, [r3, #0]
						ColorBase[MODE_CUSTOM] = (SWITCHES & 0x0F);
    f95a:	4bab      	ldr	r3, [pc, #684]	; (fc08 <ble_usart_read_callback+0xd00>)
    f95c:	781b      	ldrb	r3, [r3, #0]
    f95e:	220f      	movs	r2, #15
    f960:	4013      	ands	r3, r2
    f962:	b2da      	uxtb	r2, r3
    f964:	4bad      	ldr	r3, [pc, #692]	; (fc1c <ble_usart_read_callback+0xd14>)
    f966:	721a      	strb	r2, [r3, #8]
						RateBase[MODE_CUSTOM] = (BLE_MSG[2] & 0xF0) >> 4;
    f968:	4ba6      	ldr	r3, [pc, #664]	; (fc04 <ble_usart_read_callback+0xcfc>)
    f96a:	789b      	ldrb	r3, [r3, #2]
    f96c:	091b      	lsrs	r3, r3, #4
    f96e:	b2da      	uxtb	r2, r3
    f970:	4bab      	ldr	r3, [pc, #684]	; (fc20 <ble_usart_read_callback+0xd18>)
    f972:	721a      	strb	r2, [r3, #8]
						BrightBase[MODE_CUSTOM] = (BLE_MSG[2] & 0x0F);
    f974:	4ba3      	ldr	r3, [pc, #652]	; (fc04 <ble_usart_read_callback+0xcfc>)
    f976:	789b      	ldrb	r3, [r3, #2]
    f978:	220f      	movs	r2, #15
    f97a:	4013      	ands	r3, r2
    f97c:	b2da      	uxtb	r2, r3
    f97e:	4ba9      	ldr	r3, [pc, #676]	; (fc24 <ble_usart_read_callback+0xd1c>)
    f980:	721a      	strb	r2, [r3, #8]
						Custom_RGB.LR = (uint16_t)((float)BLE_MSG[3] * 257);
    f982:	4ba0      	ldr	r3, [pc, #640]	; (fc04 <ble_usart_read_callback+0xcfc>)
    f984:	78da      	ldrb	r2, [r3, #3]
    f986:	4ba8      	ldr	r3, [pc, #672]	; (fc28 <ble_usart_read_callback+0xd20>)
    f988:	0010      	movs	r0, r2
    f98a:	4798      	blx	r3
    f98c:	1c02      	adds	r2, r0, #0
    f98e:	4ba7      	ldr	r3, [pc, #668]	; (fc2c <ble_usart_read_callback+0xd24>)
    f990:	49a7      	ldr	r1, [pc, #668]	; (fc30 <ble_usart_read_callback+0xd28>)
    f992:	1c10      	adds	r0, r2, #0
    f994:	4798      	blx	r3
    f996:	1c03      	adds	r3, r0, #0
    f998:	1c1a      	adds	r2, r3, #0
    f99a:	4ba6      	ldr	r3, [pc, #664]	; (fc34 <ble_usart_read_callback+0xd2c>)
    f99c:	1c10      	adds	r0, r2, #0
    f99e:	4798      	blx	r3
    f9a0:	0003      	movs	r3, r0
    f9a2:	b29a      	uxth	r2, r3
    f9a4:	4ba4      	ldr	r3, [pc, #656]	; (fc38 <ble_usart_read_callback+0xd30>)
    f9a6:	801a      	strh	r2, [r3, #0]
						Custom_RGB.LG = (uint16_t)((float)BLE_MSG[4] * 257);
    f9a8:	4b96      	ldr	r3, [pc, #600]	; (fc04 <ble_usart_read_callback+0xcfc>)
    f9aa:	791a      	ldrb	r2, [r3, #4]
    f9ac:	4b9e      	ldr	r3, [pc, #632]	; (fc28 <ble_usart_read_callback+0xd20>)
    f9ae:	0010      	movs	r0, r2
    f9b0:	4798      	blx	r3
    f9b2:	1c02      	adds	r2, r0, #0
    f9b4:	4b9d      	ldr	r3, [pc, #628]	; (fc2c <ble_usart_read_callback+0xd24>)
    f9b6:	499e      	ldr	r1, [pc, #632]	; (fc30 <ble_usart_read_callback+0xd28>)
    f9b8:	1c10      	adds	r0, r2, #0
    f9ba:	4798      	blx	r3
    f9bc:	1c03      	adds	r3, r0, #0
    f9be:	1c1a      	adds	r2, r3, #0
    f9c0:	4b9c      	ldr	r3, [pc, #624]	; (fc34 <ble_usart_read_callback+0xd2c>)
    f9c2:	1c10      	adds	r0, r2, #0
    f9c4:	4798      	blx	r3
    f9c6:	0003      	movs	r3, r0
    f9c8:	b29a      	uxth	r2, r3
    f9ca:	4b9b      	ldr	r3, [pc, #620]	; (fc38 <ble_usart_read_callback+0xd30>)
    f9cc:	805a      	strh	r2, [r3, #2]
						Custom_RGB.LB = (uint16_t)((float)BLE_MSG[5] * 257);
    f9ce:	4b8d      	ldr	r3, [pc, #564]	; (fc04 <ble_usart_read_callback+0xcfc>)
    f9d0:	795a      	ldrb	r2, [r3, #5]
    f9d2:	4b95      	ldr	r3, [pc, #596]	; (fc28 <ble_usart_read_callback+0xd20>)
    f9d4:	0010      	movs	r0, r2
    f9d6:	4798      	blx	r3
    f9d8:	1c02      	adds	r2, r0, #0
    f9da:	4b94      	ldr	r3, [pc, #592]	; (fc2c <ble_usart_read_callback+0xd24>)
    f9dc:	4994      	ldr	r1, [pc, #592]	; (fc30 <ble_usart_read_callback+0xd28>)
    f9de:	1c10      	adds	r0, r2, #0
    f9e0:	4798      	blx	r3
    f9e2:	1c03      	adds	r3, r0, #0
    f9e4:	1c1a      	adds	r2, r3, #0
    f9e6:	4b93      	ldr	r3, [pc, #588]	; (fc34 <ble_usart_read_callback+0xd2c>)
    f9e8:	1c10      	adds	r0, r2, #0
    f9ea:	4798      	blx	r3
    f9ec:	0003      	movs	r3, r0
    f9ee:	b29a      	uxth	r2, r3
    f9f0:	4b91      	ldr	r3, [pc, #580]	; (fc38 <ble_usart_read_callback+0xd30>)
    f9f2:	809a      	strh	r2, [r3, #4]
						Custom_RGB.RR = (uint16_t)((float)BLE_MSG[6] * 257);
    f9f4:	4b83      	ldr	r3, [pc, #524]	; (fc04 <ble_usart_read_callback+0xcfc>)
    f9f6:	799a      	ldrb	r2, [r3, #6]
    f9f8:	4b8b      	ldr	r3, [pc, #556]	; (fc28 <ble_usart_read_callback+0xd20>)
    f9fa:	0010      	movs	r0, r2
    f9fc:	4798      	blx	r3
    f9fe:	1c02      	adds	r2, r0, #0
    fa00:	4b8a      	ldr	r3, [pc, #552]	; (fc2c <ble_usart_read_callback+0xd24>)
    fa02:	498b      	ldr	r1, [pc, #556]	; (fc30 <ble_usart_read_callback+0xd28>)
    fa04:	1c10      	adds	r0, r2, #0
    fa06:	4798      	blx	r3
    fa08:	1c03      	adds	r3, r0, #0
    fa0a:	1c1a      	adds	r2, r3, #0
    fa0c:	4b89      	ldr	r3, [pc, #548]	; (fc34 <ble_usart_read_callback+0xd2c>)
    fa0e:	1c10      	adds	r0, r2, #0
    fa10:	4798      	blx	r3
    fa12:	0003      	movs	r3, r0
    fa14:	b29a      	uxth	r2, r3
    fa16:	4b88      	ldr	r3, [pc, #544]	; (fc38 <ble_usart_read_callback+0xd30>)
    fa18:	80da      	strh	r2, [r3, #6]
						Custom_RGB.RG = (uint16_t)((float)BLE_MSG[7] * 257);
    fa1a:	4b7a      	ldr	r3, [pc, #488]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fa1c:	79da      	ldrb	r2, [r3, #7]
    fa1e:	4b82      	ldr	r3, [pc, #520]	; (fc28 <ble_usart_read_callback+0xd20>)
    fa20:	0010      	movs	r0, r2
    fa22:	4798      	blx	r3
    fa24:	1c02      	adds	r2, r0, #0
    fa26:	4b81      	ldr	r3, [pc, #516]	; (fc2c <ble_usart_read_callback+0xd24>)
    fa28:	4981      	ldr	r1, [pc, #516]	; (fc30 <ble_usart_read_callback+0xd28>)
    fa2a:	1c10      	adds	r0, r2, #0
    fa2c:	4798      	blx	r3
    fa2e:	1c03      	adds	r3, r0, #0
    fa30:	1c1a      	adds	r2, r3, #0
    fa32:	4b80      	ldr	r3, [pc, #512]	; (fc34 <ble_usart_read_callback+0xd2c>)
    fa34:	1c10      	adds	r0, r2, #0
    fa36:	4798      	blx	r3
    fa38:	0003      	movs	r3, r0
    fa3a:	b29a      	uxth	r2, r3
    fa3c:	4b7e      	ldr	r3, [pc, #504]	; (fc38 <ble_usart_read_callback+0xd30>)
    fa3e:	811a      	strh	r2, [r3, #8]
						Custom_RGB.RB = (uint16_t)((float)BLE_MSG[8] * 257);
    fa40:	4b70      	ldr	r3, [pc, #448]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fa42:	7a1a      	ldrb	r2, [r3, #8]
    fa44:	4b78      	ldr	r3, [pc, #480]	; (fc28 <ble_usart_read_callback+0xd20>)
    fa46:	0010      	movs	r0, r2
    fa48:	4798      	blx	r3
    fa4a:	1c02      	adds	r2, r0, #0
    fa4c:	4b77      	ldr	r3, [pc, #476]	; (fc2c <ble_usart_read_callback+0xd24>)
    fa4e:	4978      	ldr	r1, [pc, #480]	; (fc30 <ble_usart_read_callback+0xd28>)
    fa50:	1c10      	adds	r0, r2, #0
    fa52:	4798      	blx	r3
    fa54:	1c03      	adds	r3, r0, #0
    fa56:	1c1a      	adds	r2, r3, #0
    fa58:	4b76      	ldr	r3, [pc, #472]	; (fc34 <ble_usart_read_callback+0xd2c>)
    fa5a:	1c10      	adds	r0, r2, #0
    fa5c:	4798      	blx	r3
    fa5e:	0003      	movs	r3, r0
    fa60:	b29a      	uxth	r2, r3
    fa62:	4b75      	ldr	r3, [pc, #468]	; (fc38 <ble_usart_read_callback+0xd30>)
    fa64:	815a      	strh	r2, [r3, #10]
						RateSens[MODE_CUSTOM] = ((float)(BLE_MSG[9]))/100;
    fa66:	4b67      	ldr	r3, [pc, #412]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fa68:	7a5a      	ldrb	r2, [r3, #9]
    fa6a:	4b6f      	ldr	r3, [pc, #444]	; (fc28 <ble_usart_read_callback+0xd20>)
    fa6c:	0010      	movs	r0, r2
    fa6e:	4798      	blx	r3
    fa70:	1c02      	adds	r2, r0, #0
    fa72:	4b72      	ldr	r3, [pc, #456]	; (fc3c <ble_usart_read_callback+0xd34>)
    fa74:	4972      	ldr	r1, [pc, #456]	; (fc40 <ble_usart_read_callback+0xd38>)
    fa76:	1c10      	adds	r0, r2, #0
    fa78:	4798      	blx	r3
    fa7a:	1c03      	adds	r3, r0, #0
    fa7c:	1c1a      	adds	r2, r3, #0
    fa7e:	4b71      	ldr	r3, [pc, #452]	; (fc44 <ble_usart_read_callback+0xd3c>)
    fa80:	621a      	str	r2, [r3, #32]
						Brightness[MODE_CUSTOM] = ((float)(BLE_MSG[10]))/100;
    fa82:	4b60      	ldr	r3, [pc, #384]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fa84:	7a9a      	ldrb	r2, [r3, #10]
    fa86:	4b68      	ldr	r3, [pc, #416]	; (fc28 <ble_usart_read_callback+0xd20>)
    fa88:	0010      	movs	r0, r2
    fa8a:	4798      	blx	r3
    fa8c:	1c02      	adds	r2, r0, #0
    fa8e:	4b6b      	ldr	r3, [pc, #428]	; (fc3c <ble_usart_read_callback+0xd34>)
    fa90:	496b      	ldr	r1, [pc, #428]	; (fc40 <ble_usart_read_callback+0xd38>)
    fa92:	1c10      	adds	r0, r2, #0
    fa94:	4798      	blx	r3
    fa96:	1c03      	adds	r3, r0, #0
    fa98:	1c1a      	adds	r2, r3, #0
    fa9a:	4b6b      	ldr	r3, [pc, #428]	; (fc48 <ble_usart_read_callback+0xd40>)
    fa9c:	621a      	str	r2, [r3, #32]
						save_led_data();
    fa9e:	4b6b      	ldr	r3, [pc, #428]	; (fc4c <ble_usart_read_callback+0xd44>)
    faa0:	4798      	blx	r3
						MESSAGE_HANDLED = true;
    faa2:	230f      	movs	r3, #15
    faa4:	18fb      	adds	r3, r7, r3
    faa6:	2201      	movs	r2, #1
    faa8:	701a      	strb	r2, [r3, #0]
						break;
    faaa:	46c0      	nop			; (mov r8, r8)
				break;
    faac:	e002      	b.n	fab4 <ble_usart_read_callback+0xbac>
				break;
    faae:	46c0      	nop			; (mov r8, r8)
    fab0:	e000      	b.n	fab4 <ble_usart_read_callback+0xbac>
				break;
    fab2:	46c0      	nop			; (mov r8, r8)
		}
		if(MESSAGE_HANDLED || (BLE_MSG[0] == 'O' && BLE_MSG[1] == 'K')) // Check that the message was handled to avoid interrupting a message containing 
    fab4:	230f      	movs	r3, #15
    fab6:	18fb      	adds	r3, r7, r3
    fab8:	781b      	ldrb	r3, [r3, #0]
    faba:	2b00      	cmp	r3, #0
    fabc:	d109      	bne.n	fad2 <ble_usart_read_callback+0xbca>
    fabe:	4b51      	ldr	r3, [pc, #324]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fac0:	781b      	ldrb	r3, [r3, #0]
    fac2:	2b4f      	cmp	r3, #79	; 0x4f
    fac4:	d000      	beq.n	fac8 <ble_usart_read_callback+0xbc0>
    fac6:	e094      	b.n	fbf2 <ble_usart_read_callback+0xcea>
    fac8:	4b4e      	ldr	r3, [pc, #312]	; (fc04 <ble_usart_read_callback+0xcfc>)
    faca:	785b      	ldrb	r3, [r3, #1]
    facc:	2b4b      	cmp	r3, #75	; 0x4b
    face:	d000      	beq.n	fad2 <ble_usart_read_callback+0xbca>
    fad0:	e08f      	b.n	fbf2 <ble_usart_read_callback+0xcea>
			ble_usart_count = 0;
    fad2:	4b5f      	ldr	r3, [pc, #380]	; (fc50 <ble_usart_read_callback+0xd48>)
    fad4:	2200      	movs	r2, #0
    fad6:	601a      	str	r2, [r3, #0]
		ble_usart_count = 0;
	} else if((BLE_MSG[ble_usart_count-7] == 'O' && BLE_MSG[ble_usart_count-6] == 'K' && BLE_MSG[ble_usart_count-5] == '+' && BLE_MSG[ble_usart_count-4] == 'C' && BLE_MSG[ble_usart_count-3] == 'O' && BLE_MSG[ble_usart_count-2] == 'N' && BLE_MSG[ble_usart_count-1] == 'N') ||
				(BLE_MSG[ble_usart_count-8] == 'O' && BLE_MSG[ble_usart_count-7] == 'K' && BLE_MSG[ble_usart_count-6] == '+' && BLE_MSG[ble_usart_count-5] == 'R' && BLE_MSG[ble_usart_count-4] == 'E' && BLE_MSG[ble_usart_count-3] == 'S' && BLE_MSG[ble_usart_count-2] == 'E' && BLE_MSG[ble_usart_count-1] == 'T')){
		ble_usart_count = 0;
	}
}
    fad8:	e08b      	b.n	fbf2 <ble_usart_read_callback+0xcea>
	else if(BLE_MSG[ble_usart_count-3] == 'O' && BLE_MSG[ble_usart_count-2] == 'K' && ble_USART_read_buffer[0] == '+' && OK_EXPECTED)
    fada:	4b5d      	ldr	r3, [pc, #372]	; (fc50 <ble_usart_read_callback+0xd48>)
    fadc:	681b      	ldr	r3, [r3, #0]
    fade:	3b03      	subs	r3, #3
    fae0:	4a48      	ldr	r2, [pc, #288]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fae2:	5cd3      	ldrb	r3, [r2, r3]
    fae4:	2b4f      	cmp	r3, #79	; 0x4f
    fae6:	d118      	bne.n	fb1a <ble_usart_read_callback+0xc12>
    fae8:	4b59      	ldr	r3, [pc, #356]	; (fc50 <ble_usart_read_callback+0xd48>)
    faea:	681b      	ldr	r3, [r3, #0]
    faec:	3b02      	subs	r3, #2
    faee:	4a45      	ldr	r2, [pc, #276]	; (fc04 <ble_usart_read_callback+0xcfc>)
    faf0:	5cd3      	ldrb	r3, [r2, r3]
    faf2:	2b4b      	cmp	r3, #75	; 0x4b
    faf4:	d111      	bne.n	fb1a <ble_usart_read_callback+0xc12>
    faf6:	4b57      	ldr	r3, [pc, #348]	; (fc54 <ble_usart_read_callback+0xd4c>)
    faf8:	781b      	ldrb	r3, [r3, #0]
    fafa:	2b2b      	cmp	r3, #43	; 0x2b
    fafc:	d10d      	bne.n	fb1a <ble_usart_read_callback+0xc12>
    fafe:	4b56      	ldr	r3, [pc, #344]	; (fc58 <ble_usart_read_callback+0xd50>)
    fb00:	781b      	ldrb	r3, [r3, #0]
    fb02:	2b00      	cmp	r3, #0
    fb04:	d009      	beq.n	fb1a <ble_usart_read_callback+0xc12>
		BLE_CONFIGURED = true;
    fb06:	4b55      	ldr	r3, [pc, #340]	; (fc5c <ble_usart_read_callback+0xd54>)
    fb08:	2201      	movs	r2, #1
    fb0a:	701a      	strb	r2, [r3, #0]
		OK_EXPECTED = false;
    fb0c:	4b52      	ldr	r3, [pc, #328]	; (fc58 <ble_usart_read_callback+0xd50>)
    fb0e:	2200      	movs	r2, #0
    fb10:	701a      	strb	r2, [r3, #0]
		ble_usart_count = 0;
    fb12:	4b4f      	ldr	r3, [pc, #316]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb14:	2200      	movs	r2, #0
    fb16:	601a      	str	r2, [r3, #0]
}
    fb18:	e06b      	b.n	fbf2 <ble_usart_read_callback+0xcea>
	} else if((BLE_MSG[ble_usart_count-7] == 'O' && BLE_MSG[ble_usart_count-6] == 'K' && BLE_MSG[ble_usart_count-5] == '+' && BLE_MSG[ble_usart_count-4] == 'C' && BLE_MSG[ble_usart_count-3] == 'O' && BLE_MSG[ble_usart_count-2] == 'N' && BLE_MSG[ble_usart_count-1] == 'N') ||
    fb1a:	4b4d      	ldr	r3, [pc, #308]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb1c:	681b      	ldr	r3, [r3, #0]
    fb1e:	3b07      	subs	r3, #7
    fb20:	4a38      	ldr	r2, [pc, #224]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fb22:	5cd3      	ldrb	r3, [r2, r3]
    fb24:	2b4f      	cmp	r3, #79	; 0x4f
    fb26:	d129      	bne.n	fb7c <ble_usart_read_callback+0xc74>
    fb28:	4b49      	ldr	r3, [pc, #292]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb2a:	681b      	ldr	r3, [r3, #0]
    fb2c:	3b06      	subs	r3, #6
    fb2e:	4a35      	ldr	r2, [pc, #212]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fb30:	5cd3      	ldrb	r3, [r2, r3]
    fb32:	2b4b      	cmp	r3, #75	; 0x4b
    fb34:	d122      	bne.n	fb7c <ble_usart_read_callback+0xc74>
    fb36:	4b46      	ldr	r3, [pc, #280]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb38:	681b      	ldr	r3, [r3, #0]
    fb3a:	3b05      	subs	r3, #5
    fb3c:	4a31      	ldr	r2, [pc, #196]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fb3e:	5cd3      	ldrb	r3, [r2, r3]
    fb40:	2b2b      	cmp	r3, #43	; 0x2b
    fb42:	d11b      	bne.n	fb7c <ble_usart_read_callback+0xc74>
    fb44:	4b42      	ldr	r3, [pc, #264]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb46:	681b      	ldr	r3, [r3, #0]
    fb48:	3b04      	subs	r3, #4
    fb4a:	4a2e      	ldr	r2, [pc, #184]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fb4c:	5cd3      	ldrb	r3, [r2, r3]
    fb4e:	2b43      	cmp	r3, #67	; 0x43
    fb50:	d114      	bne.n	fb7c <ble_usart_read_callback+0xc74>
    fb52:	4b3f      	ldr	r3, [pc, #252]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb54:	681b      	ldr	r3, [r3, #0]
    fb56:	3b03      	subs	r3, #3
    fb58:	4a2a      	ldr	r2, [pc, #168]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fb5a:	5cd3      	ldrb	r3, [r2, r3]
    fb5c:	2b4f      	cmp	r3, #79	; 0x4f
    fb5e:	d10d      	bne.n	fb7c <ble_usart_read_callback+0xc74>
    fb60:	4b3b      	ldr	r3, [pc, #236]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb62:	681b      	ldr	r3, [r3, #0]
    fb64:	3b02      	subs	r3, #2
    fb66:	4a27      	ldr	r2, [pc, #156]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fb68:	5cd3      	ldrb	r3, [r2, r3]
    fb6a:	2b4e      	cmp	r3, #78	; 0x4e
    fb6c:	d106      	bne.n	fb7c <ble_usart_read_callback+0xc74>
    fb6e:	4b38      	ldr	r3, [pc, #224]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb70:	681b      	ldr	r3, [r3, #0]
    fb72:	3b01      	subs	r3, #1
    fb74:	4a23      	ldr	r2, [pc, #140]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fb76:	5cd3      	ldrb	r3, [r2, r3]
    fb78:	2b4e      	cmp	r3, #78	; 0x4e
    fb7a:	d037      	beq.n	fbec <ble_usart_read_callback+0xce4>
				(BLE_MSG[ble_usart_count-8] == 'O' && BLE_MSG[ble_usart_count-7] == 'K' && BLE_MSG[ble_usart_count-6] == '+' && BLE_MSG[ble_usart_count-5] == 'R' && BLE_MSG[ble_usart_count-4] == 'E' && BLE_MSG[ble_usart_count-3] == 'S' && BLE_MSG[ble_usart_count-2] == 'E' && BLE_MSG[ble_usart_count-1] == 'T')){
    fb7c:	4b34      	ldr	r3, [pc, #208]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb7e:	681b      	ldr	r3, [r3, #0]
    fb80:	3b08      	subs	r3, #8
    fb82:	4a20      	ldr	r2, [pc, #128]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fb84:	5cd3      	ldrb	r3, [r2, r3]
	} else if((BLE_MSG[ble_usart_count-7] == 'O' && BLE_MSG[ble_usart_count-6] == 'K' && BLE_MSG[ble_usart_count-5] == '+' && BLE_MSG[ble_usart_count-4] == 'C' && BLE_MSG[ble_usart_count-3] == 'O' && BLE_MSG[ble_usart_count-2] == 'N' && BLE_MSG[ble_usart_count-1] == 'N') ||
    fb86:	2b4f      	cmp	r3, #79	; 0x4f
    fb88:	d133      	bne.n	fbf2 <ble_usart_read_callback+0xcea>
				(BLE_MSG[ble_usart_count-8] == 'O' && BLE_MSG[ble_usart_count-7] == 'K' && BLE_MSG[ble_usart_count-6] == '+' && BLE_MSG[ble_usart_count-5] == 'R' && BLE_MSG[ble_usart_count-4] == 'E' && BLE_MSG[ble_usart_count-3] == 'S' && BLE_MSG[ble_usart_count-2] == 'E' && BLE_MSG[ble_usart_count-1] == 'T')){
    fb8a:	4b31      	ldr	r3, [pc, #196]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb8c:	681b      	ldr	r3, [r3, #0]
    fb8e:	3b07      	subs	r3, #7
    fb90:	4a1c      	ldr	r2, [pc, #112]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fb92:	5cd3      	ldrb	r3, [r2, r3]
    fb94:	2b4b      	cmp	r3, #75	; 0x4b
    fb96:	d12c      	bne.n	fbf2 <ble_usart_read_callback+0xcea>
    fb98:	4b2d      	ldr	r3, [pc, #180]	; (fc50 <ble_usart_read_callback+0xd48>)
    fb9a:	681b      	ldr	r3, [r3, #0]
    fb9c:	3b06      	subs	r3, #6
    fb9e:	4a19      	ldr	r2, [pc, #100]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fba0:	5cd3      	ldrb	r3, [r2, r3]
    fba2:	2b2b      	cmp	r3, #43	; 0x2b
    fba4:	d125      	bne.n	fbf2 <ble_usart_read_callback+0xcea>
    fba6:	4b2a      	ldr	r3, [pc, #168]	; (fc50 <ble_usart_read_callback+0xd48>)
    fba8:	681b      	ldr	r3, [r3, #0]
    fbaa:	3b05      	subs	r3, #5
    fbac:	4a15      	ldr	r2, [pc, #84]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fbae:	5cd3      	ldrb	r3, [r2, r3]
    fbb0:	2b52      	cmp	r3, #82	; 0x52
    fbb2:	d11e      	bne.n	fbf2 <ble_usart_read_callback+0xcea>
    fbb4:	4b26      	ldr	r3, [pc, #152]	; (fc50 <ble_usart_read_callback+0xd48>)
    fbb6:	681b      	ldr	r3, [r3, #0]
    fbb8:	3b04      	subs	r3, #4
    fbba:	4a12      	ldr	r2, [pc, #72]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fbbc:	5cd3      	ldrb	r3, [r2, r3]
    fbbe:	2b45      	cmp	r3, #69	; 0x45
    fbc0:	d117      	bne.n	fbf2 <ble_usart_read_callback+0xcea>
    fbc2:	4b23      	ldr	r3, [pc, #140]	; (fc50 <ble_usart_read_callback+0xd48>)
    fbc4:	681b      	ldr	r3, [r3, #0]
    fbc6:	3b03      	subs	r3, #3
    fbc8:	4a0e      	ldr	r2, [pc, #56]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fbca:	5cd3      	ldrb	r3, [r2, r3]
    fbcc:	2b53      	cmp	r3, #83	; 0x53
    fbce:	d110      	bne.n	fbf2 <ble_usart_read_callback+0xcea>
    fbd0:	4b1f      	ldr	r3, [pc, #124]	; (fc50 <ble_usart_read_callback+0xd48>)
    fbd2:	681b      	ldr	r3, [r3, #0]
    fbd4:	3b02      	subs	r3, #2
    fbd6:	4a0b      	ldr	r2, [pc, #44]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fbd8:	5cd3      	ldrb	r3, [r2, r3]
    fbda:	2b45      	cmp	r3, #69	; 0x45
    fbdc:	d109      	bne.n	fbf2 <ble_usart_read_callback+0xcea>
    fbde:	4b1c      	ldr	r3, [pc, #112]	; (fc50 <ble_usart_read_callback+0xd48>)
    fbe0:	681b      	ldr	r3, [r3, #0]
    fbe2:	3b01      	subs	r3, #1
    fbe4:	4a07      	ldr	r2, [pc, #28]	; (fc04 <ble_usart_read_callback+0xcfc>)
    fbe6:	5cd3      	ldrb	r3, [r2, r3]
    fbe8:	2b54      	cmp	r3, #84	; 0x54
    fbea:	d102      	bne.n	fbf2 <ble_usart_read_callback+0xcea>
		ble_usart_count = 0;
    fbec:	4b18      	ldr	r3, [pc, #96]	; (fc50 <ble_usart_read_callback+0xd48>)
    fbee:	2200      	movs	r2, #0
    fbf0:	601a      	str	r2, [r3, #0]
}
    fbf2:	46c0      	nop			; (mov r8, r8)
    fbf4:	46bd      	mov	sp, r7
    fbf6:	b004      	add	sp, #16
    fbf8:	bd80      	pop	{r7, pc}
    fbfa:	46c0      	nop			; (mov r8, r8)
    fbfc:	200000a3 	.word	0x200000a3
    fc00:	2000001b 	.word	0x2000001b
    fc04:	200007b4 	.word	0x200007b4
    fc08:	20000325 	.word	0x20000325
    fc0c:	200000a2 	.word	0x200000a2
    fc10:	20000322 	.word	0x20000322
    fc14:	20000323 	.word	0x20000323
    fc18:	20000324 	.word	0x20000324
    fc1c:	20000070 	.word	0x20000070
    fc20:	20000088 	.word	0x20000088
    fc24:	2000007c 	.word	0x2000007c
    fc28:	00014ee9 	.word	0x00014ee9
    fc2c:	00014891 	.word	0x00014891
    fc30:	43808000 	.word	0x43808000
    fc34:	00014121 	.word	0x00014121
    fc38:	20000094 	.word	0x20000094
    fc3c:	000144b1 	.word	0x000144b1
    fc40:	42c80000 	.word	0x42c80000
    fc44:	20000028 	.word	0x20000028
    fc48:	2000004c 	.word	0x2000004c
    fc4c:	0000e099 	.word	0x0000e099
    fc50:	200003e0 	.word	0x200003e0
    fc54:	20000cec 	.word	0x20000cec
    fc58:	200003df 	.word	0x200003df
    fc5c:	200003d8 	.word	0x200003d8

0000fc60 <configure_ble_usart>:

// Configure SERCOM5 as USART for BLE module
void configure_ble_usart(int baud)
{
    fc60:	b580      	push	{r7, lr}
    fc62:	b092      	sub	sp, #72	; 0x48
    fc64:	af00      	add	r7, sp, #0
    fc66:	6078      	str	r0, [r7, #4]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    fc68:	2308      	movs	r3, #8
    fc6a:	18fb      	adds	r3, r7, r3
    fc6c:	0018      	movs	r0, r3
    fc6e:	4b17      	ldr	r3, [pc, #92]	; (fccc <configure_ble_usart+0x6c>)
    fc70:	4798      	blx	r3
	config_usart.baudrate    = baud;
    fc72:	687a      	ldr	r2, [r7, #4]
    fc74:	2308      	movs	r3, #8
    fc76:	18fb      	adds	r3, r7, r3
    fc78:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    fc7a:	2308      	movs	r3, #8
    fc7c:	18fb      	adds	r3, r7, r3
    fc7e:	22c4      	movs	r2, #196	; 0xc4
    fc80:	0392      	lsls	r2, r2, #14
    fc82:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    fc84:	2308      	movs	r3, #8
    fc86:	18fb      	adds	r3, r7, r3
    fc88:	2201      	movs	r2, #1
    fc8a:	4252      	negs	r2, r2
    fc8c:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    fc8e:	2308      	movs	r3, #8
    fc90:	18fb      	adds	r3, r7, r3
    fc92:	2201      	movs	r2, #1
    fc94:	4252      	negs	r2, r2
    fc96:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA20C_SERCOM5_PAD2;
    fc98:	2308      	movs	r3, #8
    fc9a:	18fb      	adds	r3, r7, r3
    fc9c:	4a0c      	ldr	r2, [pc, #48]	; (fcd0 <configure_ble_usart+0x70>)
    fc9e:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21C_SERCOM5_PAD3;
    fca0:	2308      	movs	r3, #8
    fca2:	18fb      	adds	r3, r7, r3
    fca4:	4a0b      	ldr	r2, [pc, #44]	; (fcd4 <configure_ble_usart+0x74>)
    fca6:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&ble_usart,SERCOM5, &config_usart) != STATUS_OK)
    fca8:	46c0      	nop			; (mov r8, r8)
    fcaa:	2308      	movs	r3, #8
    fcac:	18fa      	adds	r2, r7, r3
    fcae:	490a      	ldr	r1, [pc, #40]	; (fcd8 <configure_ble_usart+0x78>)
    fcb0:	4b0a      	ldr	r3, [pc, #40]	; (fcdc <configure_ble_usart+0x7c>)
    fcb2:	0018      	movs	r0, r3
    fcb4:	4b0a      	ldr	r3, [pc, #40]	; (fce0 <configure_ble_usart+0x80>)
    fcb6:	4798      	blx	r3
    fcb8:	1e03      	subs	r3, r0, #0
    fcba:	d1f6      	bne.n	fcaa <configure_ble_usart+0x4a>
	{}
	usart_enable(&ble_usart);
    fcbc:	4b07      	ldr	r3, [pc, #28]	; (fcdc <configure_ble_usart+0x7c>)
    fcbe:	0018      	movs	r0, r3
    fcc0:	4b08      	ldr	r3, [pc, #32]	; (fce4 <configure_ble_usart+0x84>)
    fcc2:	4798      	blx	r3
}
    fcc4:	46c0      	nop			; (mov r8, r8)
    fcc6:	46bd      	mov	sp, r7
    fcc8:	b012      	add	sp, #72	; 0x48
    fcca:	bd80      	pop	{r7, pc}
    fccc:	00008f2d 	.word	0x00008f2d
    fcd0:	00140002 	.word	0x00140002
    fcd4:	00150002 	.word	0x00150002
    fcd8:	42001c00 	.word	0x42001c00
    fcdc:	200004a0 	.word	0x200004a0
    fce0:	000060e5 	.word	0x000060e5
    fce4:	00008fed 	.word	0x00008fed

0000fce8 <configure_BLE_module>:

void configure_BLE_module()
{
    fce8:	b590      	push	{r4, r7, lr}
    fcea:	b09b      	sub	sp, #108	; 0x6c
    fcec:	af00      	add	r7, sp, #0
	int baud = 0;
    fcee:	2300      	movs	r3, #0
    fcf0:	667b      	str	r3, [r7, #100]	; 0x64
	int bauds[5] = {9600, 19200, 38400, 57600, 115200};
    fcf2:	232c      	movs	r3, #44	; 0x2c
    fcf4:	18fb      	adds	r3, r7, r3
    fcf6:	4a76      	ldr	r2, [pc, #472]	; (fed0 <configure_BLE_module+0x1e8>)
    fcf8:	ca13      	ldmia	r2!, {r0, r1, r4}
    fcfa:	c313      	stmia	r3!, {r0, r1, r4}
    fcfc:	ca03      	ldmia	r2!, {r0, r1}
    fcfe:	c303      	stmia	r3!, {r0, r1}
	while(1){
		configure_ble_usart(bauds[baud]);
    fd00:	232c      	movs	r3, #44	; 0x2c
    fd02:	18fb      	adds	r3, r7, r3
    fd04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    fd06:	0092      	lsls	r2, r2, #2
    fd08:	58d3      	ldr	r3, [r2, r3]
    fd0a:	0018      	movs	r0, r3
    fd0c:	4b71      	ldr	r3, [pc, #452]	; (fed4 <configure_BLE_module+0x1ec>)
    fd0e:	4798      	blx	r3
		configure_BLE_usart_callbacks();
    fd10:	4b71      	ldr	r3, [pc, #452]	; (fed8 <configure_BLE_module+0x1f0>)
    fd12:	4798      	blx	r3
		usart_read_buffer_job(&ble_usart, (uint8_t *)ble_USART_read_buffer, (uint16_t)1);
    fd14:	4971      	ldr	r1, [pc, #452]	; (fedc <configure_BLE_module+0x1f4>)
    fd16:	4b72      	ldr	r3, [pc, #456]	; (fee0 <configure_BLE_module+0x1f8>)
    fd18:	2201      	movs	r2, #1
    fd1a:	0018      	movs	r0, r3
    fd1c:	4b71      	ldr	r3, [pc, #452]	; (fee4 <configure_BLE_module+0x1fc>)
    fd1e:	4798      	blx	r3

		baud += 1;
    fd20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fd22:	3301      	adds	r3, #1
    fd24:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud > 4)
    fd26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fd28:	2b04      	cmp	r3, #4
    fd2a:	dd01      	ble.n	fd30 <configure_BLE_module+0x48>
			baud = 0;
    fd2c:	2300      	movs	r3, #0
    fd2e:	667b      	str	r3, [r7, #100]	; 0x64
			
		for(int i = 0; i < 10000; ++i);
    fd30:	2300      	movs	r3, #0
    fd32:	663b      	str	r3, [r7, #96]	; 0x60
    fd34:	e002      	b.n	fd3c <configure_BLE_module+0x54>
    fd36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fd38:	3301      	adds	r3, #1
    fd3a:	663b      	str	r3, [r7, #96]	; 0x60
    fd3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fd3e:	4a6a      	ldr	r2, [pc, #424]	; (fee8 <configure_BLE_module+0x200>)
    fd40:	4293      	cmp	r3, r2
    fd42:	ddf8      	ble.n	fd36 <configure_BLE_module+0x4e>
		else if(BLE_BAUD == 38400)
			strcpy(string1,"AT+BAUD2");
		else if(BLE_BAUD == 57600)
			strcpy(string1,"AT+BAUD3");
		else if(BLE_BAUD == 115200)
			strcpy(string1,"AT+BAUD4");
    fd44:	2324      	movs	r3, #36	; 0x24
    fd46:	18fb      	adds	r3, r7, r3
    fd48:	4a68      	ldr	r2, [pc, #416]	; (feec <configure_BLE_module+0x204>)
    fd4a:	ca03      	ldmia	r2!, {r0, r1}
    fd4c:	c303      	stmia	r3!, {r0, r1}
    fd4e:	7812      	ldrb	r2, [r2, #0]
    fd50:	701a      	strb	r2, [r3, #0]
		OK_EXPECTED = true;
    fd52:	4b67      	ldr	r3, [pc, #412]	; (fef0 <configure_BLE_module+0x208>)
    fd54:	2201      	movs	r2, #1
    fd56:	701a      	strb	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string1, sizeof(string1))!=STATUS_OK){}
    fd58:	46c0      	nop			; (mov r8, r8)
    fd5a:	2324      	movs	r3, #36	; 0x24
    fd5c:	18f9      	adds	r1, r7, r3
    fd5e:	4b60      	ldr	r3, [pc, #384]	; (fee0 <configure_BLE_module+0x1f8>)
    fd60:	2208      	movs	r2, #8
    fd62:	0018      	movs	r0, r3
    fd64:	4b63      	ldr	r3, [pc, #396]	; (fef4 <configure_BLE_module+0x20c>)
    fd66:	4798      	blx	r3
    fd68:	1e03      	subs	r3, r0, #0
    fd6a:	d1f6      	bne.n	fd5a <configure_BLE_module+0x72>
		for(int i = 0; i < 25000; ++i);
    fd6c:	2300      	movs	r3, #0
    fd6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    fd70:	e002      	b.n	fd78 <configure_BLE_module+0x90>
    fd72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    fd74:	3301      	adds	r3, #1
    fd76:	65fb      	str	r3, [r7, #92]	; 0x5c
    fd78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    fd7a:	4a5f      	ldr	r2, [pc, #380]	; (fef8 <configure_BLE_module+0x210>)
    fd7c:	4293      	cmp	r3, r2
    fd7e:	ddf8      	ble.n	fd72 <configure_BLE_module+0x8a>
		
		OK_EXPECTED = true;
    fd80:	4b5b      	ldr	r3, [pc, #364]	; (fef0 <configure_BLE_module+0x208>)
    fd82:	2201      	movs	r2, #1
    fd84:	701a      	strb	r2, [r3, #0]
		uint8_t string2[14] = "AT+NAMETelTail";
    fd86:	2314      	movs	r3, #20
    fd88:	18fb      	adds	r3, r7, r3
    fd8a:	4a5c      	ldr	r2, [pc, #368]	; (fefc <configure_BLE_module+0x214>)
    fd8c:	ca13      	ldmia	r2!, {r0, r1, r4}
    fd8e:	c313      	stmia	r3!, {r0, r1, r4}
    fd90:	8812      	ldrh	r2, [r2, #0]
    fd92:	801a      	strh	r2, [r3, #0]
		while(usart_write_buffer_wait(&ble_usart, string2, sizeof(string2))!=STATUS_OK){}
    fd94:	46c0      	nop			; (mov r8, r8)
    fd96:	2314      	movs	r3, #20
    fd98:	18f9      	adds	r1, r7, r3
    fd9a:	4b51      	ldr	r3, [pc, #324]	; (fee0 <configure_BLE_module+0x1f8>)
    fd9c:	220e      	movs	r2, #14
    fd9e:	0018      	movs	r0, r3
    fda0:	4b54      	ldr	r3, [pc, #336]	; (fef4 <configure_BLE_module+0x20c>)
    fda2:	4798      	blx	r3
    fda4:	1e03      	subs	r3, r0, #0
    fda6:	d1f6      	bne.n	fd96 <configure_BLE_module+0xae>
		for(int i = 0; i < 25000; ++i);
    fda8:	2300      	movs	r3, #0
    fdaa:	65bb      	str	r3, [r7, #88]	; 0x58
    fdac:	e002      	b.n	fdb4 <configure_BLE_module+0xcc>
    fdae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    fdb0:	3301      	adds	r3, #1
    fdb2:	65bb      	str	r3, [r7, #88]	; 0x58
    fdb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    fdb6:	4a50      	ldr	r2, [pc, #320]	; (fef8 <configure_BLE_module+0x210>)
    fdb8:	4293      	cmp	r3, r2
    fdba:	ddf8      	ble.n	fdae <configure_BLE_module+0xc6>
		
		OK_EXPECTED = true;
    fdbc:	4b4c      	ldr	r3, [pc, #304]	; (fef0 <configure_BLE_module+0x208>)
    fdbe:	2201      	movs	r2, #1
    fdc0:	701a      	strb	r2, [r3, #0]
		uint8_t string3[8] = "AT+POWE3"; // Default = 2
    fdc2:	230c      	movs	r3, #12
    fdc4:	18fb      	adds	r3, r7, r3
    fdc6:	4a4e      	ldr	r2, [pc, #312]	; (ff00 <configure_BLE_module+0x218>)
    fdc8:	ca03      	ldmia	r2!, {r0, r1}
    fdca:	c303      	stmia	r3!, {r0, r1}
		while(usart_write_buffer_wait(&ble_usart, string3, sizeof(string3))!=STATUS_OK){}
    fdcc:	46c0      	nop			; (mov r8, r8)
    fdce:	230c      	movs	r3, #12
    fdd0:	18f9      	adds	r1, r7, r3
    fdd2:	4b43      	ldr	r3, [pc, #268]	; (fee0 <configure_BLE_module+0x1f8>)
    fdd4:	2208      	movs	r2, #8
    fdd6:	0018      	movs	r0, r3
    fdd8:	4b46      	ldr	r3, [pc, #280]	; (fef4 <configure_BLE_module+0x20c>)
    fdda:	4798      	blx	r3
    fddc:	1e03      	subs	r3, r0, #0
    fdde:	d1f6      	bne.n	fdce <configure_BLE_module+0xe6>
		for(int i = 0; i < 25000; ++i);
    fde0:	2300      	movs	r3, #0
    fde2:	657b      	str	r3, [r7, #84]	; 0x54
    fde4:	e002      	b.n	fdec <configure_BLE_module+0x104>
    fde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    fde8:	3301      	adds	r3, #1
    fdea:	657b      	str	r3, [r7, #84]	; 0x54
    fdec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    fdee:	4a42      	ldr	r2, [pc, #264]	; (fef8 <configure_BLE_module+0x210>)
    fdf0:	4293      	cmp	r3, r2
    fdf2:	ddf8      	ble.n	fde6 <configure_BLE_module+0xfe>
		
		if(!BLE_CONFIGURED){
    fdf4:	4b43      	ldr	r3, [pc, #268]	; (ff04 <configure_BLE_module+0x21c>)
    fdf6:	781b      	ldrb	r3, [r3, #0]
    fdf8:	2201      	movs	r2, #1
    fdfa:	4053      	eors	r3, r2
    fdfc:	b2db      	uxtb	r3, r3
    fdfe:	2b00      	cmp	r3, #0
    fe00:	d00e      	beq.n	fe20 <configure_BLE_module+0x138>
			usart_disable(&ble_usart);
    fe02:	4b37      	ldr	r3, [pc, #220]	; (fee0 <configure_BLE_module+0x1f8>)
    fe04:	0018      	movs	r0, r3
    fe06:	4b40      	ldr	r3, [pc, #256]	; (ff08 <configure_BLE_module+0x220>)
    fe08:	4798      	blx	r3
			for(int i = 0; i < 10000; ++i);
    fe0a:	2300      	movs	r3, #0
    fe0c:	653b      	str	r3, [r7, #80]	; 0x50
    fe0e:	e002      	b.n	fe16 <configure_BLE_module+0x12e>
    fe10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    fe12:	3301      	adds	r3, #1
    fe14:	653b      	str	r3, [r7, #80]	; 0x50
    fe16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    fe18:	4a33      	ldr	r2, [pc, #204]	; (fee8 <configure_BLE_module+0x200>)
    fe1a:	4293      	cmp	r3, r2
    fe1c:	ddf8      	ble.n	fe10 <configure_BLE_module+0x128>
	while(1){
    fe1e:	e76f      	b.n	fd00 <configure_BLE_module+0x18>
		}
		else{
			uint8_t string4[8] = "AT+RESET";
    fe20:	1d3b      	adds	r3, r7, #4
    fe22:	4a3a      	ldr	r2, [pc, #232]	; (ff0c <configure_BLE_module+0x224>)
    fe24:	ca03      	ldmia	r2!, {r0, r1}
    fe26:	c303      	stmia	r3!, {r0, r1}
			while(usart_write_buffer_wait(&ble_usart, string4, sizeof(string4))!=STATUS_OK){}
    fe28:	46c0      	nop			; (mov r8, r8)
    fe2a:	1d39      	adds	r1, r7, #4
    fe2c:	4b2c      	ldr	r3, [pc, #176]	; (fee0 <configure_BLE_module+0x1f8>)
    fe2e:	2208      	movs	r2, #8
    fe30:	0018      	movs	r0, r3
    fe32:	4b30      	ldr	r3, [pc, #192]	; (fef4 <configure_BLE_module+0x20c>)
    fe34:	4798      	blx	r3
    fe36:	1e03      	subs	r3, r0, #0
    fe38:	d1f7      	bne.n	fe2a <configure_BLE_module+0x142>
			for(int i = 0; i < 25000; ++i);
    fe3a:	2300      	movs	r3, #0
    fe3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    fe3e:	e002      	b.n	fe46 <configure_BLE_module+0x15e>
    fe40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    fe42:	3301      	adds	r3, #1
    fe44:	64fb      	str	r3, [r7, #76]	; 0x4c
    fe46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    fe48:	4a2b      	ldr	r2, [pc, #172]	; (fef8 <configure_BLE_module+0x210>)
    fe4a:	4293      	cmp	r3, r2
    fe4c:	ddf8      	ble.n	fe40 <configure_BLE_module+0x158>
			usart_disable(&ble_usart);
    fe4e:	4b24      	ldr	r3, [pc, #144]	; (fee0 <configure_BLE_module+0x1f8>)
    fe50:	0018      	movs	r0, r3
    fe52:	4b2d      	ldr	r3, [pc, #180]	; (ff08 <configure_BLE_module+0x220>)
    fe54:	4798      	blx	r3
			for(int i = 0; i < 500000; ++i);
    fe56:	2300      	movs	r3, #0
    fe58:	64bb      	str	r3, [r7, #72]	; 0x48
    fe5a:	e002      	b.n	fe62 <configure_BLE_module+0x17a>
    fe5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fe5e:	3301      	adds	r3, #1
    fe60:	64bb      	str	r3, [r7, #72]	; 0x48
    fe62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fe64:	4a2a      	ldr	r2, [pc, #168]	; (ff10 <configure_BLE_module+0x228>)
    fe66:	4293      	cmp	r3, r2
    fe68:	ddf8      	ble.n	fe5c <configure_BLE_module+0x174>
			configure_ble_usart(BLE_BAUD);
    fe6a:	23e1      	movs	r3, #225	; 0xe1
    fe6c:	025b      	lsls	r3, r3, #9
    fe6e:	0018      	movs	r0, r3
    fe70:	4b18      	ldr	r3, [pc, #96]	; (fed4 <configure_BLE_module+0x1ec>)
    fe72:	4798      	blx	r3
			for(int i = 0; i < 5000; ++i);
    fe74:	2300      	movs	r3, #0
    fe76:	647b      	str	r3, [r7, #68]	; 0x44
    fe78:	e002      	b.n	fe80 <configure_BLE_module+0x198>
    fe7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fe7c:	3301      	adds	r3, #1
    fe7e:	647b      	str	r3, [r7, #68]	; 0x44
    fe80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fe82:	4a24      	ldr	r2, [pc, #144]	; (ff14 <configure_BLE_module+0x22c>)
    fe84:	4293      	cmp	r3, r2
    fe86:	ddf8      	ble.n	fe7a <configure_BLE_module+0x192>
			uint8_t string5[2] = "AT";
    fe88:	003b      	movs	r3, r7
    fe8a:	4a23      	ldr	r2, [pc, #140]	; (ff18 <configure_BLE_module+0x230>)
    fe8c:	801a      	strh	r2, [r3, #0]
			while(usart_write_buffer_wait(&ble_usart, string5, sizeof(string5))!=STATUS_OK){}
    fe8e:	46c0      	nop			; (mov r8, r8)
    fe90:	0039      	movs	r1, r7
    fe92:	4b13      	ldr	r3, [pc, #76]	; (fee0 <configure_BLE_module+0x1f8>)
    fe94:	2202      	movs	r2, #2
    fe96:	0018      	movs	r0, r3
    fe98:	4b16      	ldr	r3, [pc, #88]	; (fef4 <configure_BLE_module+0x20c>)
    fe9a:	4798      	blx	r3
    fe9c:	1e03      	subs	r3, r0, #0
    fe9e:	d1f7      	bne.n	fe90 <configure_BLE_module+0x1a8>
			for(int i = 0; i < 10000; ++i);
    fea0:	2300      	movs	r3, #0
    fea2:	643b      	str	r3, [r7, #64]	; 0x40
    fea4:	e002      	b.n	feac <configure_BLE_module+0x1c4>
    fea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fea8:	3301      	adds	r3, #1
    feaa:	643b      	str	r3, [r7, #64]	; 0x40
    feac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    feae:	4a0e      	ldr	r2, [pc, #56]	; (fee8 <configure_BLE_module+0x200>)
    feb0:	4293      	cmp	r3, r2
    feb2:	ddf8      	ble.n	fea6 <configure_BLE_module+0x1be>
			configure_BLE_usart_callbacks();
    feb4:	4b08      	ldr	r3, [pc, #32]	; (fed8 <configure_BLE_module+0x1f0>)
    feb6:	4798      	blx	r3
			usart_read_buffer_job(&ble_usart, (uint8_t *)ble_USART_read_buffer, (uint16_t)1);
    feb8:	4908      	ldr	r1, [pc, #32]	; (fedc <configure_BLE_module+0x1f4>)
    feba:	4b09      	ldr	r3, [pc, #36]	; (fee0 <configure_BLE_module+0x1f8>)
    febc:	2201      	movs	r2, #1
    febe:	0018      	movs	r0, r3
    fec0:	4b08      	ldr	r3, [pc, #32]	; (fee4 <configure_BLE_module+0x1fc>)
    fec2:	4798      	blx	r3
			break;
    fec4:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    fec6:	46c0      	nop			; (mov r8, r8)
    fec8:	46bd      	mov	sp, r7
    feca:	b01b      	add	sp, #108	; 0x6c
    fecc:	bd90      	pop	{r4, r7, pc}
    fece:	46c0      	nop			; (mov r8, r8)
    fed0:	000172d4 	.word	0x000172d4
    fed4:	0000fc61 	.word	0x0000fc61
    fed8:	0000ff1d 	.word	0x0000ff1d
    fedc:	20000cec 	.word	0x20000cec
    fee0:	200004a0 	.word	0x200004a0
    fee4:	00006615 	.word	0x00006615
    fee8:	0000270f 	.word	0x0000270f
    feec:	000172c8 	.word	0x000172c8
    fef0:	200003df 	.word	0x200003df
    fef4:	000063bd 	.word	0x000063bd
    fef8:	000061a7 	.word	0x000061a7
    fefc:	000172e8 	.word	0x000172e8
    ff00:	000172f8 	.word	0x000172f8
    ff04:	200003d8 	.word	0x200003d8
    ff08:	00009035 	.word	0x00009035
    ff0c:	00017304 	.word	0x00017304
    ff10:	0007a11f 	.word	0x0007a11f
    ff14:	00001387 	.word	0x00001387
    ff18:	00005441 	.word	0x00005441

0000ff1c <configure_BLE_usart_callbacks>:

// Configure SERCOM callback for recieving a buffer frame
void configure_BLE_usart_callbacks(void)
{
    ff1c:	b580      	push	{r7, lr}
    ff1e:	af00      	add	r7, sp, #0
	usart_register_callback(&ble_usart, ble_usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    ff20:	4906      	ldr	r1, [pc, #24]	; (ff3c <configure_BLE_usart_callbacks+0x20>)
    ff22:	4b07      	ldr	r3, [pc, #28]	; (ff40 <configure_BLE_usart_callbacks+0x24>)
    ff24:	2201      	movs	r2, #1
    ff26:	0018      	movs	r0, r3
    ff28:	4b06      	ldr	r3, [pc, #24]	; (ff44 <configure_BLE_usart_callbacks+0x28>)
    ff2a:	4798      	blx	r3
	usart_enable_callback(&ble_usart, USART_CALLBACK_BUFFER_RECEIVED);
    ff2c:	4b04      	ldr	r3, [pc, #16]	; (ff40 <configure_BLE_usart_callbacks+0x24>)
    ff2e:	2101      	movs	r1, #1
    ff30:	0018      	movs	r0, r3
    ff32:	4b05      	ldr	r3, [pc, #20]	; (ff48 <configure_BLE_usart_callbacks+0x2c>)
    ff34:	4798      	blx	r3
}
    ff36:	46c0      	nop			; (mov r8, r8)
    ff38:	46bd      	mov	sp, r7
    ff3a:	bd80      	pop	{r7, pc}
    ff3c:	0000ef09 	.word	0x0000ef09
    ff40:	200004a0 	.word	0x200004a0
    ff44:	000065cd 	.word	0x000065cd
    ff48:	00009081 	.word	0x00009081

0000ff4c <configure_ADC>:

// Configure the light sensor port as an input
void configure_ADC(void)
{
    ff4c:	b580      	push	{r7, lr}
    ff4e:	b08e      	sub	sp, #56	; 0x38
    ff50:	af00      	add	r7, sp, #0
	for(int i = 0; i < LGHTsamples; ++i){
    ff52:	2300      	movs	r3, #0
    ff54:	637b      	str	r3, [r7, #52]	; 0x34
    ff56:	e007      	b.n	ff68 <configure_ADC+0x1c>
		LGHTaverage[i] = 0;
    ff58:	4b1a      	ldr	r3, [pc, #104]	; (ffc4 <configure_ADC+0x78>)
    ff5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ff5c:	0052      	lsls	r2, r2, #1
    ff5e:	2100      	movs	r1, #0
    ff60:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < LGHTsamples; ++i){
    ff62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ff64:	3301      	adds	r3, #1
    ff66:	637b      	str	r3, [r7, #52]	; 0x34
    ff68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ff6a:	2b95      	cmp	r3, #149	; 0x95
    ff6c:	ddf4      	ble.n	ff58 <configure_ADC+0xc>
	}

	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    ff6e:	1d3b      	adds	r3, r7, #4
    ff70:	0018      	movs	r0, r3
    ff72:	4b15      	ldr	r3, [pc, #84]	; (ffc8 <configure_ADC+0x7c>)
    ff74:	4798      	blx	r3
	config_adc.reference = ADC_REFERENCE_INTVCC1;
    ff76:	1d3b      	adds	r3, r7, #4
    ff78:	2202      	movs	r2, #2
    ff7a:	705a      	strb	r2, [r3, #1]
	config_adc.resolution = ADC_RESOLUTION_16BIT;
    ff7c:	1d3b      	adds	r3, r7, #4
    ff7e:	2210      	movs	r2, #16
    ff80:	711a      	strb	r2, [r3, #4]
	config_adc.differential_mode = DISABLE;
    ff82:	1d3b      	adds	r3, r7, #4
    ff84:	2200      	movs	r2, #0
    ff86:	74da      	strb	r2, [r3, #19]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    ff88:	1d3b      	adds	r3, r7, #4
    ff8a:	22c0      	movs	r2, #192	; 0xc0
    ff8c:	0152      	lsls	r2, r2, #5
    ff8e:	81da      	strh	r2, [r3, #14]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN16;
    ff90:	1d3b      	adds	r3, r7, #4
    ff92:	2210      	movs	r2, #16
    ff94:	731a      	strb	r2, [r3, #12]
	config_adc.freerunning = DISABLE;
    ff96:	1d3b      	adds	r3, r7, #4
    ff98:	2200      	movs	r2, #0
    ff9a:	751a      	strb	r2, [r3, #20]
	config_adc.run_in_standby = ENABLE;
    ff9c:	1d3b      	adds	r3, r7, #4
    ff9e:	2201      	movs	r2, #1
    ffa0:	755a      	strb	r2, [r3, #21]
	config_adc.left_adjust = false;
    ffa2:	1d3b      	adds	r3, r7, #4
    ffa4:	2200      	movs	r2, #0
    ffa6:	749a      	strb	r2, [r3, #18]
	adc_init(&adc1, ADC, &config_adc);
    ffa8:	1d3a      	adds	r2, r7, #4
    ffaa:	4908      	ldr	r1, [pc, #32]	; (ffcc <configure_ADC+0x80>)
    ffac:	4b08      	ldr	r3, [pc, #32]	; (ffd0 <configure_ADC+0x84>)
    ffae:	0018      	movs	r0, r3
    ffb0:	4b08      	ldr	r3, [pc, #32]	; (ffd4 <configure_ADC+0x88>)
    ffb2:	4798      	blx	r3
	adc_enable(&adc1);
    ffb4:	4b06      	ldr	r3, [pc, #24]	; (ffd0 <configure_ADC+0x84>)
    ffb6:	0018      	movs	r0, r3
    ffb8:	4b07      	ldr	r3, [pc, #28]	; (ffd8 <configure_ADC+0x8c>)
    ffba:	4798      	blx	r3
}
    ffbc:	46c0      	nop			; (mov r8, r8)
    ffbe:	46bd      	mov	sp, r7
    ffc0:	b00e      	add	sp, #56	; 0x38
    ffc2:	bd80      	pop	{r7, pc}
    ffc4:	200007c4 	.word	0x200007c4
    ffc8:	00002219 	.word	0x00002219
    ffcc:	42004000 	.word	0x42004000
    ffd0:	2000099c 	.word	0x2000099c
    ffd4:	00002869 	.word	0x00002869
    ffd8:	00008ac1 	.word	0x00008ac1

0000ffdc <configure_port_pins>:

// Configure the LED selection port as output
void configure_port_pins(void)
{
    ffdc:	b580      	push	{r7, lr}
    ffde:	b082      	sub	sp, #8
    ffe0:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    ffe2:	1d3b      	adds	r3, r7, #4
    ffe4:	0018      	movs	r0, r3
    ffe6:	4b13      	ldr	r3, [pc, #76]	; (10034 <configure_port_pins+0x58>)
    ffe8:	4798      	blx	r3
	
	config_port_pin.powersave = false;
    ffea:	1d3b      	adds	r3, r7, #4
    ffec:	2200      	movs	r2, #0
    ffee:	709a      	strb	r2, [r3, #2]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    fff0:	1d3b      	adds	r3, r7, #4
    fff2:	2200      	movs	r2, #0
    fff4:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    fff6:	1d3b      	adds	r3, r7, #4
    fff8:	2201      	movs	r2, #1
    fffa:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PPM_IN, &config_port_pin);
    fffc:	1d3b      	adds	r3, r7, #4
    fffe:	0019      	movs	r1, r3
   10000:	2022      	movs	r0, #34	; 0x22
   10002:	4b0d      	ldr	r3, [pc, #52]	; (10038 <configure_port_pins+0x5c>)
   10004:	4798      	blx	r3
	
	config_port_pin.powersave = false;
   10006:	1d3b      	adds	r3, r7, #4
   10008:	2200      	movs	r2, #0
   1000a:	709a      	strb	r2, [r3, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
   1000c:	1d3b      	adds	r3, r7, #4
   1000e:	2200      	movs	r2, #0
   10010:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   10012:	1d3b      	adds	r3, r7, #4
   10014:	2201      	movs	r2, #1
   10016:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(AUX_PIN, &config_port_pin);
   10018:	1d3b      	adds	r3, r7, #4
   1001a:	0019      	movs	r1, r3
   1001c:	2008      	movs	r0, #8
   1001e:	4b06      	ldr	r3, [pc, #24]	; (10038 <configure_port_pins+0x5c>)
   10020:	4798      	blx	r3
	port_pin_set_output_level(AUX_PIN,true);
   10022:	2101      	movs	r1, #1
   10024:	2008      	movs	r0, #8
   10026:	4b05      	ldr	r3, [pc, #20]	; (1003c <configure_port_pins+0x60>)
   10028:	4798      	blx	r3
}
   1002a:	46c0      	nop			; (mov r8, r8)
   1002c:	46bd      	mov	sp, r7
   1002e:	b002      	add	sp, #8
   10030:	bd80      	pop	{r7, pc}
   10032:	46c0      	nop			; (mov r8, r8)
   10034:	00008b2d 	.word	0x00008b2d
   10038:	00007111 	.word	0x00007111
   1003c:	00008b95 	.word	0x00008b95

00010040 <configure_i2c_slave>:
	}
}

// Configure SERCOM1 as I2C slave for VESC communication
void configure_i2c_slave(void)
{	
   10040:	b580      	push	{r7, lr}
   10042:	b08a      	sub	sp, #40	; 0x28
   10044:	af00      	add	r7, sp, #0
	/* Create and initialize config_i2c_slave structure */
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
   10046:	003b      	movs	r3, r7
   10048:	0018      	movs	r0, r3
   1004a:	4b0f      	ldr	r3, [pc, #60]	; (10088 <configure_i2c_slave+0x48>)
   1004c:	4798      	blx	r3
	/* Change address and address_mode */
	config_i2c_slave.address        = SLAVE_ADDRESS;
   1004e:	003b      	movs	r3, r7
   10050:	2212      	movs	r2, #18
   10052:	819a      	strh	r2, [r3, #12]
	config_i2c_slave.address_mode   = I2C_SLAVE_ADDRESS_MODE_MASK;
   10054:	003b      	movs	r3, r7
   10056:	2200      	movs	r2, #0
   10058:	815a      	strh	r2, [r3, #10]
	config_i2c_slave.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
   1005a:	003b      	movs	r3, r7
   1005c:	4a0b      	ldr	r2, [pc, #44]	; (1008c <configure_i2c_slave+0x4c>)
   1005e:	61da      	str	r2, [r3, #28]
	config_i2c_slave.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
   10060:	003b      	movs	r3, r7
   10062:	4a0b      	ldr	r2, [pc, #44]	; (10090 <configure_i2c_slave+0x50>)
   10064:	621a      	str	r2, [r3, #32]
	config_i2c_slave.generator_source = GCLK_GENERATOR_0;
   10066:	003b      	movs	r3, r7
   10068:	2200      	movs	r2, #0
   1006a:	765a      	strb	r2, [r3, #25]
	/* Initialize and enable device with config_i2c_slave */
	i2c_slave_init(&i2c_slave_instance, SERCOM1, &config_i2c_slave);
   1006c:	003a      	movs	r2, r7
   1006e:	4909      	ldr	r1, [pc, #36]	; (10094 <configure_i2c_slave+0x54>)
   10070:	4b09      	ldr	r3, [pc, #36]	; (10098 <configure_i2c_slave+0x58>)
   10072:	0018      	movs	r0, r3
   10074:	4b09      	ldr	r3, [pc, #36]	; (1009c <configure_i2c_slave+0x5c>)
   10076:	4798      	blx	r3
	i2c_slave_enable(&i2c_slave_instance);
   10078:	4b07      	ldr	r3, [pc, #28]	; (10098 <configure_i2c_slave+0x58>)
   1007a:	0018      	movs	r0, r3
   1007c:	4b08      	ldr	r3, [pc, #32]	; (100a0 <configure_i2c_slave+0x60>)
   1007e:	4798      	blx	r3
}
   10080:	46c0      	nop			; (mov r8, r8)
   10082:	46bd      	mov	sp, r7
   10084:	b00a      	add	sp, #40	; 0x28
   10086:	bd80      	pop	{r7, pc}
   10088:	00008dcd 	.word	0x00008dcd
   1008c:	00100002 	.word	0x00100002
   10090:	00110002 	.word	0x00110002
   10094:	42000c00 	.word	0x42000c00
   10098:	20000e00 	.word	0x20000e00
   1009c:	000044b5 	.word	0x000044b5
   100a0:	00008e4d 	.word	0x00008e4d

000100a4 <i2c_write_request_callback>:

void i2c_write_request_callback(struct i2c_slave_module *const module)
{
   100a4:	b580      	push	{r7, lr}
   100a6:	b082      	sub	sp, #8
   100a8:	af00      	add	r7, sp, #0
   100aa:	6078      	str	r0, [r7, #4]
	/* Init i2c packet. */
	packet.data_length = SLAVE_READ_DATA_LENGTH;
   100ac:	4bae      	ldr	r3, [pc, #696]	; (10368 <i2c_write_request_callback+0x2c4>)
   100ae:	221e      	movs	r2, #30
   100b0:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_read_buffer;
   100b2:	4bad      	ldr	r3, [pc, #692]	; (10368 <i2c_write_request_callback+0x2c4>)
   100b4:	4aad      	ldr	r2, [pc, #692]	; (1036c <i2c_write_request_callback+0x2c8>)
   100b6:	605a      	str	r2, [r3, #4]
	
	if(FIRST_MESSAGE == 1){
   100b8:	4bad      	ldr	r3, [pc, #692]	; (10370 <i2c_write_request_callback+0x2cc>)
   100ba:	781b      	ldrb	r3, [r3, #0]
   100bc:	2b01      	cmp	r3, #1
   100be:	d105      	bne.n	100cc <i2c_write_request_callback+0x28>
		FIRST_MESSAGE = 0;
   100c0:	4bab      	ldr	r3, [pc, #684]	; (10370 <i2c_write_request_callback+0x2cc>)
   100c2:	2200      	movs	r2, #0
   100c4:	701a      	strb	r2, [r3, #0]
		GET_LIMITS = 1; // Read the limits on first message to set lighting variables
   100c6:	4bab      	ldr	r3, [pc, #684]	; (10374 <i2c_write_request_callback+0x2d0>)
   100c8:	2201      	movs	r2, #1
   100ca:	701a      	strb	r2, [r3, #0]
	}
	i2c_slave_read_packet_job(module, &packet);
   100cc:	4aa6      	ldr	r2, [pc, #664]	; (10368 <i2c_write_request_callback+0x2c4>)
   100ce:	687b      	ldr	r3, [r7, #4]
   100d0:	0011      	movs	r1, r2
   100d2:	0018      	movs	r0, r3
   100d4:	4ba8      	ldr	r3, [pc, #672]	; (10378 <i2c_write_request_callback+0x2d4>)
   100d6:	4798      	blx	r3
		if(I2C_slave_read_buffer[0] == 0x8D && I2C_slave_read_buffer[28] == 0xAD) {
   100d8:	4ba4      	ldr	r3, [pc, #656]	; (1036c <i2c_write_request_callback+0x2c8>)
   100da:	781b      	ldrb	r3, [r3, #0]
   100dc:	2b8d      	cmp	r3, #141	; 0x8d
   100de:	d000      	beq.n	100e2 <i2c_write_request_callback+0x3e>
   100e0:	e090      	b.n	10204 <i2c_write_request_callback+0x160>
   100e2:	4ba2      	ldr	r3, [pc, #648]	; (1036c <i2c_write_request_callback+0x2c8>)
   100e4:	7f1b      	ldrb	r3, [r3, #28]
   100e6:	2bad      	cmp	r3, #173	; 0xad
   100e8:	d000      	beq.n	100ec <i2c_write_request_callback+0x48>
   100ea:	e08b      	b.n	10204 <i2c_write_request_callback+0x160>
			mcconf_limits.motor_current_max = I2C_slave_read_buffer[1];
   100ec:	4b9f      	ldr	r3, [pc, #636]	; (1036c <i2c_write_request_callback+0x2c8>)
   100ee:	785b      	ldrb	r3, [r3, #1]
   100f0:	001a      	movs	r2, r3
   100f2:	4ba2      	ldr	r3, [pc, #648]	; (1037c <i2c_write_request_callback+0x2d8>)
   100f4:	601a      	str	r2, [r3, #0]
			mcconf_limits.motor_current_min = I2C_slave_read_buffer[2];
   100f6:	4b9d      	ldr	r3, [pc, #628]	; (1036c <i2c_write_request_callback+0x2c8>)
   100f8:	789b      	ldrb	r3, [r3, #2]
   100fa:	001a      	movs	r2, r3
   100fc:	4b9f      	ldr	r3, [pc, #636]	; (1037c <i2c_write_request_callback+0x2d8>)
   100fe:	605a      	str	r2, [r3, #4]
			mcconf_limits.input_current_max = I2C_slave_read_buffer[3];
   10100:	4b9a      	ldr	r3, [pc, #616]	; (1036c <i2c_write_request_callback+0x2c8>)
   10102:	78db      	ldrb	r3, [r3, #3]
   10104:	001a      	movs	r2, r3
   10106:	4b9d      	ldr	r3, [pc, #628]	; (1037c <i2c_write_request_callback+0x2d8>)
   10108:	609a      	str	r2, [r3, #8]
			mcconf_limits.input_current_min = I2C_slave_read_buffer[4];
   1010a:	4b98      	ldr	r3, [pc, #608]	; (1036c <i2c_write_request_callback+0x2c8>)
   1010c:	791b      	ldrb	r3, [r3, #4]
   1010e:	001a      	movs	r2, r3
   10110:	4b9a      	ldr	r3, [pc, #616]	; (1037c <i2c_write_request_callback+0x2d8>)
   10112:	60da      	str	r2, [r3, #12]
			mcconf_limits.abs_current_max = I2C_slave_read_buffer[5];
   10114:	4b95      	ldr	r3, [pc, #596]	; (1036c <i2c_write_request_callback+0x2c8>)
   10116:	795b      	ldrb	r3, [r3, #5]
   10118:	001a      	movs	r2, r3
   1011a:	4b98      	ldr	r3, [pc, #608]	; (1037c <i2c_write_request_callback+0x2d8>)
   1011c:	611a      	str	r2, [r3, #16]
			mcconf_limits.max_vin = I2C_slave_read_buffer[6];
   1011e:	4b93      	ldr	r3, [pc, #588]	; (1036c <i2c_write_request_callback+0x2c8>)
   10120:	799b      	ldrb	r3, [r3, #6]
   10122:	001a      	movs	r2, r3
   10124:	4b95      	ldr	r3, [pc, #596]	; (1037c <i2c_write_request_callback+0x2d8>)
   10126:	629a      	str	r2, [r3, #40]	; 0x28
			mcconf_limits.min_vin = I2C_slave_read_buffer[7];
   10128:	4b90      	ldr	r3, [pc, #576]	; (1036c <i2c_write_request_callback+0x2c8>)
   1012a:	79db      	ldrb	r3, [r3, #7]
   1012c:	001a      	movs	r2, r3
   1012e:	4b93      	ldr	r3, [pc, #588]	; (1037c <i2c_write_request_callback+0x2d8>)
   10130:	625a      	str	r2, [r3, #36]	; 0x24
			mcconf_limits.battery_cut_start = I2C_slave_read_buffer[8];
   10132:	4b8e      	ldr	r3, [pc, #568]	; (1036c <i2c_write_request_callback+0x2c8>)
   10134:	7a1a      	ldrb	r2, [r3, #8]
   10136:	4b92      	ldr	r3, [pc, #584]	; (10380 <i2c_write_request_callback+0x2dc>)
   10138:	0010      	movs	r0, r2
   1013a:	4798      	blx	r3
   1013c:	1c02      	adds	r2, r0, #0
   1013e:	4b8f      	ldr	r3, [pc, #572]	; (1037c <i2c_write_request_callback+0x2d8>)
   10140:	62da      	str	r2, [r3, #44]	; 0x2c
			mcconf_limits.battery_cut_end = I2C_slave_read_buffer[9];
   10142:	4b8a      	ldr	r3, [pc, #552]	; (1036c <i2c_write_request_callback+0x2c8>)
   10144:	7a5a      	ldrb	r2, [r3, #9]
   10146:	4b8e      	ldr	r3, [pc, #568]	; (10380 <i2c_write_request_callback+0x2dc>)
   10148:	0010      	movs	r0, r2
   1014a:	4798      	blx	r3
   1014c:	1c02      	adds	r2, r0, #0
   1014e:	4b8b      	ldr	r3, [pc, #556]	; (1037c <i2c_write_request_callback+0x2d8>)
   10150:	631a      	str	r2, [r3, #48]	; 0x30
			mcconf_limits.max_erpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   10152:	4b86      	ldr	r3, [pc, #536]	; (1036c <i2c_write_request_callback+0x2c8>)
   10154:	7a9b      	ldrb	r3, [r3, #10]
   10156:	001a      	movs	r2, r3
   10158:	4b84      	ldr	r3, [pc, #528]	; (1036c <i2c_write_request_callback+0x2c8>)
   1015a:	7adb      	ldrb	r3, [r3, #11]
   1015c:	021b      	lsls	r3, r3, #8
   1015e:	431a      	orrs	r2, r3
   10160:	4b82      	ldr	r3, [pc, #520]	; (1036c <i2c_write_request_callback+0x2c8>)
   10162:	7b1b      	ldrb	r3, [r3, #12]
   10164:	041b      	lsls	r3, r3, #16
   10166:	431a      	orrs	r2, r3
   10168:	4b84      	ldr	r3, [pc, #528]	; (1037c <i2c_write_request_callback+0x2d8>)
   1016a:	619a      	str	r2, [r3, #24]
			mcconf_limits.min_erpm = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   1016c:	4b7f      	ldr	r3, [pc, #508]	; (1036c <i2c_write_request_callback+0x2c8>)
   1016e:	7b5b      	ldrb	r3, [r3, #13]
   10170:	001a      	movs	r2, r3
   10172:	4b7e      	ldr	r3, [pc, #504]	; (1036c <i2c_write_request_callback+0x2c8>)
   10174:	7b9b      	ldrb	r3, [r3, #14]
   10176:	021b      	lsls	r3, r3, #8
   10178:	431a      	orrs	r2, r3
   1017a:	4b7c      	ldr	r3, [pc, #496]	; (1036c <i2c_write_request_callback+0x2c8>)
   1017c:	7bdb      	ldrb	r3, [r3, #15]
   1017e:	041b      	lsls	r3, r3, #16
   10180:	431a      	orrs	r2, r3
   10182:	4b7e      	ldr	r3, [pc, #504]	; (1037c <i2c_write_request_callback+0x2d8>)
   10184:	615a      	str	r2, [r3, #20]
			mcconf_limits.max_erpm_fbrake = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   10186:	4b79      	ldr	r3, [pc, #484]	; (1036c <i2c_write_request_callback+0x2c8>)
   10188:	7c1b      	ldrb	r3, [r3, #16]
   1018a:	001a      	movs	r2, r3
   1018c:	4b77      	ldr	r3, [pc, #476]	; (1036c <i2c_write_request_callback+0x2c8>)
   1018e:	7c5b      	ldrb	r3, [r3, #17]
   10190:	021b      	lsls	r3, r3, #8
   10192:	431a      	orrs	r2, r3
   10194:	4b75      	ldr	r3, [pc, #468]	; (1036c <i2c_write_request_callback+0x2c8>)
   10196:	7c9b      	ldrb	r3, [r3, #18]
   10198:	041b      	lsls	r3, r3, #16
   1019a:	431a      	orrs	r2, r3
   1019c:	4b77      	ldr	r3, [pc, #476]	; (1037c <i2c_write_request_callback+0x2d8>)
   1019e:	61da      	str	r2, [r3, #28]
			mcconf_limits.max_erpm_fbrake_cc = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   101a0:	4b72      	ldr	r3, [pc, #456]	; (1036c <i2c_write_request_callback+0x2c8>)
   101a2:	7cdb      	ldrb	r3, [r3, #19]
   101a4:	001a      	movs	r2, r3
   101a6:	4b71      	ldr	r3, [pc, #452]	; (1036c <i2c_write_request_callback+0x2c8>)
   101a8:	7d1b      	ldrb	r3, [r3, #20]
   101aa:	021b      	lsls	r3, r3, #8
   101ac:	431a      	orrs	r2, r3
   101ae:	4b6f      	ldr	r3, [pc, #444]	; (1036c <i2c_write_request_callback+0x2c8>)
   101b0:	7d5b      	ldrb	r3, [r3, #21]
   101b2:	041b      	lsls	r3, r3, #16
   101b4:	431a      	orrs	r2, r3
   101b6:	4b71      	ldr	r3, [pc, #452]	; (1037c <i2c_write_request_callback+0x2d8>)
   101b8:	621a      	str	r2, [r3, #32]
			mcconf_limits.temp_fet_start = I2C_slave_read_buffer[22];
   101ba:	4b6c      	ldr	r3, [pc, #432]	; (1036c <i2c_write_request_callback+0x2c8>)
   101bc:	7d9b      	ldrb	r3, [r3, #22]
   101be:	001a      	movs	r2, r3
   101c0:	4b6e      	ldr	r3, [pc, #440]	; (1037c <i2c_write_request_callback+0x2d8>)
   101c2:	635a      	str	r2, [r3, #52]	; 0x34
			mcconf_limits.temp_fet_end = I2C_slave_read_buffer[23];
   101c4:	4b69      	ldr	r3, [pc, #420]	; (1036c <i2c_write_request_callback+0x2c8>)
   101c6:	7ddb      	ldrb	r3, [r3, #23]
   101c8:	001a      	movs	r2, r3
   101ca:	4b6c      	ldr	r3, [pc, #432]	; (1037c <i2c_write_request_callback+0x2d8>)
   101cc:	639a      	str	r2, [r3, #56]	; 0x38
			mcconf_limits.temp_motor_start = I2C_slave_read_buffer[24];
   101ce:	4b67      	ldr	r3, [pc, #412]	; (1036c <i2c_write_request_callback+0x2c8>)
   101d0:	7e1b      	ldrb	r3, [r3, #24]
   101d2:	001a      	movs	r2, r3
   101d4:	4b69      	ldr	r3, [pc, #420]	; (1037c <i2c_write_request_callback+0x2d8>)
   101d6:	63da      	str	r2, [r3, #60]	; 0x3c
			mcconf_limits.temp_motor_end = I2C_slave_read_buffer[25];
   101d8:	4b64      	ldr	r3, [pc, #400]	; (1036c <i2c_write_request_callback+0x2c8>)
   101da:	7e5b      	ldrb	r3, [r3, #25]
   101dc:	001a      	movs	r2, r3
   101de:	4b67      	ldr	r3, [pc, #412]	; (1037c <i2c_write_request_callback+0x2d8>)
   101e0:	641a      	str	r2, [r3, #64]	; 0x40
			mcconf_limits.max_duty = I2C_slave_read_buffer[26];
   101e2:	4b62      	ldr	r3, [pc, #392]	; (1036c <i2c_write_request_callback+0x2c8>)
   101e4:	7e9b      	ldrb	r3, [r3, #26]
   101e6:	001a      	movs	r2, r3
   101e8:	4b64      	ldr	r3, [pc, #400]	; (1037c <i2c_write_request_callback+0x2d8>)
   101ea:	649a      	str	r2, [r3, #72]	; 0x48
			mcconf_limits.min_duty = I2C_slave_read_buffer[27];
   101ec:	4b5f      	ldr	r3, [pc, #380]	; (1036c <i2c_write_request_callback+0x2c8>)
   101ee:	7edb      	ldrb	r3, [r3, #27]
   101f0:	001a      	movs	r2, r3
   101f2:	4b62      	ldr	r3, [pc, #392]	; (1037c <i2c_write_request_callback+0x2d8>)
   101f4:	645a      	str	r2, [r3, #68]	; 0x44
			SEND_LIMITS = 1;
   101f6:	4b63      	ldr	r3, [pc, #396]	; (10384 <i2c_write_request_callback+0x2e0>)
   101f8:	2201      	movs	r2, #1
   101fa:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 0;
   101fc:	4b62      	ldr	r3, [pc, #392]	; (10388 <i2c_write_request_callback+0x2e4>)
   101fe:	2200      	movs	r2, #0
   10200:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
		}
}
   10202:	e0ad      	b.n	10360 <i2c_write_request_callback+0x2bc>
		} else if(I2C_slave_read_buffer[0] == 0xDD && I2C_slave_read_buffer[29] == 0xAD) {
   10204:	4b59      	ldr	r3, [pc, #356]	; (1036c <i2c_write_request_callback+0x2c8>)
   10206:	781b      	ldrb	r3, [r3, #0]
   10208:	2bdd      	cmp	r3, #221	; 0xdd
   1020a:	d000      	beq.n	1020e <i2c_write_request_callback+0x16a>
   1020c:	e0a8      	b.n	10360 <i2c_write_request_callback+0x2bc>
   1020e:	4b57      	ldr	r3, [pc, #348]	; (1036c <i2c_write_request_callback+0x2c8>)
   10210:	7f5b      	ldrb	r3, [r3, #29]
   10212:	2bad      	cmp	r3, #173	; 0xad
   10214:	d000      	beq.n	10218 <i2c_write_request_callback+0x174>
   10216:	e0a3      	b.n	10360 <i2c_write_request_callback+0x2bc>
			latest_vesc_vals.avg_input_current = I2C_slave_read_buffer[1];
   10218:	4b54      	ldr	r3, [pc, #336]	; (1036c <i2c_write_request_callback+0x2c8>)
   1021a:	785b      	ldrb	r3, [r3, #1]
   1021c:	001a      	movs	r2, r3
   1021e:	4b5b      	ldr	r3, [pc, #364]	; (1038c <i2c_write_request_callback+0x2e8>)
   10220:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.avg_input_current += (I2C_slave_read_buffer[2] << 8);
   10222:	4b5a      	ldr	r3, [pc, #360]	; (1038c <i2c_write_request_callback+0x2e8>)
   10224:	689a      	ldr	r2, [r3, #8]
   10226:	4b51      	ldr	r3, [pc, #324]	; (1036c <i2c_write_request_callback+0x2c8>)
   10228:	789b      	ldrb	r3, [r3, #2]
   1022a:	021b      	lsls	r3, r3, #8
   1022c:	18d2      	adds	r2, r2, r3
   1022e:	4b57      	ldr	r3, [pc, #348]	; (1038c <i2c_write_request_callback+0x2e8>)
   10230:	609a      	str	r2, [r3, #8]
			latest_vesc_vals.INPUT_VOLTAGE = I2C_slave_read_buffer[3];
   10232:	4b4e      	ldr	r3, [pc, #312]	; (1036c <i2c_write_request_callback+0x2c8>)
   10234:	78db      	ldrb	r3, [r3, #3]
   10236:	b21a      	sxth	r2, r3
   10238:	4b54      	ldr	r3, [pc, #336]	; (1038c <i2c_write_request_callback+0x2e8>)
   1023a:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.INPUT_VOLTAGE += (I2C_slave_read_buffer[4] << 8);
   1023c:	4b53      	ldr	r3, [pc, #332]	; (1038c <i2c_write_request_callback+0x2e8>)
   1023e:	2214      	movs	r2, #20
   10240:	5e9b      	ldrsh	r3, [r3, r2]
   10242:	b29a      	uxth	r2, r3
   10244:	4b49      	ldr	r3, [pc, #292]	; (1036c <i2c_write_request_callback+0x2c8>)
   10246:	791b      	ldrb	r3, [r3, #4]
   10248:	b29b      	uxth	r3, r3
   1024a:	021b      	lsls	r3, r3, #8
   1024c:	b29b      	uxth	r3, r3
   1024e:	18d3      	adds	r3, r2, r3
   10250:	b29b      	uxth	r3, r3
   10252:	b21a      	sxth	r2, r3
   10254:	4b4d      	ldr	r3, [pc, #308]	; (1038c <i2c_write_request_callback+0x2e8>)
   10256:	829a      	strh	r2, [r3, #20]
			latest_vesc_vals.avg_motor_current = I2C_slave_read_buffer[5];
   10258:	4b44      	ldr	r3, [pc, #272]	; (1036c <i2c_write_request_callback+0x2c8>)
   1025a:	795b      	ldrb	r3, [r3, #5]
   1025c:	001a      	movs	r2, r3
   1025e:	4b4b      	ldr	r3, [pc, #300]	; (1038c <i2c_write_request_callback+0x2e8>)
   10260:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.avg_motor_current += (I2C_slave_read_buffer[6] << 8);
   10262:	4b4a      	ldr	r3, [pc, #296]	; (1038c <i2c_write_request_callback+0x2e8>)
   10264:	685a      	ldr	r2, [r3, #4]
   10266:	4b41      	ldr	r3, [pc, #260]	; (1036c <i2c_write_request_callback+0x2c8>)
   10268:	799b      	ldrb	r3, [r3, #6]
   1026a:	021b      	lsls	r3, r3, #8
   1026c:	18d2      	adds	r2, r2, r3
   1026e:	4b47      	ldr	r3, [pc, #284]	; (1038c <i2c_write_request_callback+0x2e8>)
   10270:	605a      	str	r2, [r3, #4]
			latest_vesc_vals.temp_fet_filtered = I2C_slave_read_buffer[7];
   10272:	4b3e      	ldr	r3, [pc, #248]	; (1036c <i2c_write_request_callback+0x2c8>)
   10274:	79db      	ldrb	r3, [r3, #7]
   10276:	b21a      	sxth	r2, r3
   10278:	4b44      	ldr	r3, [pc, #272]	; (1038c <i2c_write_request_callback+0x2e8>)
   1027a:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.temp_fet_filtered += (I2C_slave_read_buffer[8] << 8);
   1027c:	4b43      	ldr	r3, [pc, #268]	; (1038c <i2c_write_request_callback+0x2e8>)
   1027e:	2200      	movs	r2, #0
   10280:	5e9b      	ldrsh	r3, [r3, r2]
   10282:	b29a      	uxth	r2, r3
   10284:	4b39      	ldr	r3, [pc, #228]	; (1036c <i2c_write_request_callback+0x2c8>)
   10286:	7a1b      	ldrb	r3, [r3, #8]
   10288:	b29b      	uxth	r3, r3
   1028a:	021b      	lsls	r3, r3, #8
   1028c:	b29b      	uxth	r3, r3
   1028e:	18d3      	adds	r3, r2, r3
   10290:	b29b      	uxth	r3, r3
   10292:	b21a      	sxth	r2, r3
   10294:	4b3d      	ldr	r3, [pc, #244]	; (1038c <i2c_write_request_callback+0x2e8>)
   10296:	801a      	strh	r2, [r3, #0]
			latest_vesc_vals.duty_cycle = I2C_slave_read_buffer[9];
   10298:	4b34      	ldr	r3, [pc, #208]	; (1036c <i2c_write_request_callback+0x2c8>)
   1029a:	7a5b      	ldrb	r3, [r3, #9]
   1029c:	b21a      	sxth	r2, r3
   1029e:	4b3b      	ldr	r3, [pc, #236]	; (1038c <i2c_write_request_callback+0x2e8>)
   102a0:	819a      	strh	r2, [r3, #12]
			latest_vesc_vals.rpm = (I2C_slave_read_buffer[10] | (I2C_slave_read_buffer[11] << 8) | (I2C_slave_read_buffer[12] << 16));
   102a2:	4b32      	ldr	r3, [pc, #200]	; (1036c <i2c_write_request_callback+0x2c8>)
   102a4:	7a9b      	ldrb	r3, [r3, #10]
   102a6:	001a      	movs	r2, r3
   102a8:	4b30      	ldr	r3, [pc, #192]	; (1036c <i2c_write_request_callback+0x2c8>)
   102aa:	7adb      	ldrb	r3, [r3, #11]
   102ac:	021b      	lsls	r3, r3, #8
   102ae:	431a      	orrs	r2, r3
   102b0:	4b2e      	ldr	r3, [pc, #184]	; (1036c <i2c_write_request_callback+0x2c8>)
   102b2:	7b1b      	ldrb	r3, [r3, #12]
   102b4:	041b      	lsls	r3, r3, #16
   102b6:	431a      	orrs	r2, r3
   102b8:	4b34      	ldr	r3, [pc, #208]	; (1038c <i2c_write_request_callback+0x2e8>)
   102ba:	611a      	str	r2, [r3, #16]
			latest_vesc_vals.amp_hours = (I2C_slave_read_buffer[13] | (I2C_slave_read_buffer[14] << 8) | (I2C_slave_read_buffer[15] << 16));
   102bc:	4b2b      	ldr	r3, [pc, #172]	; (1036c <i2c_write_request_callback+0x2c8>)
   102be:	7b5b      	ldrb	r3, [r3, #13]
   102c0:	001a      	movs	r2, r3
   102c2:	4b2a      	ldr	r3, [pc, #168]	; (1036c <i2c_write_request_callback+0x2c8>)
   102c4:	7b9b      	ldrb	r3, [r3, #14]
   102c6:	021b      	lsls	r3, r3, #8
   102c8:	431a      	orrs	r2, r3
   102ca:	4b28      	ldr	r3, [pc, #160]	; (1036c <i2c_write_request_callback+0x2c8>)
   102cc:	7bdb      	ldrb	r3, [r3, #15]
   102ce:	041b      	lsls	r3, r3, #16
   102d0:	431a      	orrs	r2, r3
   102d2:	4b2e      	ldr	r3, [pc, #184]	; (1038c <i2c_write_request_callback+0x2e8>)
   102d4:	619a      	str	r2, [r3, #24]
			latest_vesc_vals.amp_hours_charged = (I2C_slave_read_buffer[16] | (I2C_slave_read_buffer[17] << 8) | (I2C_slave_read_buffer[18] << 16));
   102d6:	4b25      	ldr	r3, [pc, #148]	; (1036c <i2c_write_request_callback+0x2c8>)
   102d8:	7c1b      	ldrb	r3, [r3, #16]
   102da:	001a      	movs	r2, r3
   102dc:	4b23      	ldr	r3, [pc, #140]	; (1036c <i2c_write_request_callback+0x2c8>)
   102de:	7c5b      	ldrb	r3, [r3, #17]
   102e0:	021b      	lsls	r3, r3, #8
   102e2:	431a      	orrs	r2, r3
   102e4:	4b21      	ldr	r3, [pc, #132]	; (1036c <i2c_write_request_callback+0x2c8>)
   102e6:	7c9b      	ldrb	r3, [r3, #18]
   102e8:	041b      	lsls	r3, r3, #16
   102ea:	431a      	orrs	r2, r3
   102ec:	4b27      	ldr	r3, [pc, #156]	; (1038c <i2c_write_request_callback+0x2e8>)
   102ee:	61da      	str	r2, [r3, #28]
			latest_vesc_vals.watt_hours = (I2C_slave_read_buffer[19] | (I2C_slave_read_buffer[20] << 8) | (I2C_slave_read_buffer[21] << 16));
   102f0:	4b1e      	ldr	r3, [pc, #120]	; (1036c <i2c_write_request_callback+0x2c8>)
   102f2:	7cdb      	ldrb	r3, [r3, #19]
   102f4:	001a      	movs	r2, r3
   102f6:	4b1d      	ldr	r3, [pc, #116]	; (1036c <i2c_write_request_callback+0x2c8>)
   102f8:	7d1b      	ldrb	r3, [r3, #20]
   102fa:	021b      	lsls	r3, r3, #8
   102fc:	431a      	orrs	r2, r3
   102fe:	4b1b      	ldr	r3, [pc, #108]	; (1036c <i2c_write_request_callback+0x2c8>)
   10300:	7d5b      	ldrb	r3, [r3, #21]
   10302:	041b      	lsls	r3, r3, #16
   10304:	431a      	orrs	r2, r3
   10306:	4b21      	ldr	r3, [pc, #132]	; (1038c <i2c_write_request_callback+0x2e8>)
   10308:	621a      	str	r2, [r3, #32]
			latest_vesc_vals.watt_hours_charged = (I2C_slave_read_buffer[22] | (I2C_slave_read_buffer[23] << 8) | (I2C_slave_read_buffer[24] << 16));
   1030a:	4b18      	ldr	r3, [pc, #96]	; (1036c <i2c_write_request_callback+0x2c8>)
   1030c:	7d9b      	ldrb	r3, [r3, #22]
   1030e:	001a      	movs	r2, r3
   10310:	4b16      	ldr	r3, [pc, #88]	; (1036c <i2c_write_request_callback+0x2c8>)
   10312:	7ddb      	ldrb	r3, [r3, #23]
   10314:	021b      	lsls	r3, r3, #8
   10316:	431a      	orrs	r2, r3
   10318:	4b14      	ldr	r3, [pc, #80]	; (1036c <i2c_write_request_callback+0x2c8>)
   1031a:	7e1b      	ldrb	r3, [r3, #24]
   1031c:	041b      	lsls	r3, r3, #16
   1031e:	431a      	orrs	r2, r3
   10320:	4b1a      	ldr	r3, [pc, #104]	; (1038c <i2c_write_request_callback+0x2e8>)
   10322:	625a      	str	r2, [r3, #36]	; 0x24
			remote_x = I2C_slave_read_buffer[25];
   10324:	4b11      	ldr	r3, [pc, #68]	; (1036c <i2c_write_request_callback+0x2c8>)
   10326:	7e5a      	ldrb	r2, [r3, #25]
   10328:	4b19      	ldr	r3, [pc, #100]	; (10390 <i2c_write_request_callback+0x2ec>)
   1032a:	701a      	strb	r2, [r3, #0]
			remote_y = I2C_slave_read_buffer[26];
   1032c:	4b0f      	ldr	r3, [pc, #60]	; (1036c <i2c_write_request_callback+0x2c8>)
   1032e:	7e9a      	ldrb	r2, [r3, #26]
   10330:	4b18      	ldr	r3, [pc, #96]	; (10394 <i2c_write_request_callback+0x2f0>)
   10332:	701a      	strb	r2, [r3, #0]
			remote_type = (I2C_slave_read_buffer[27] & 0x6) >> 1; // needs to change to conform with new use of remote_type
   10334:	4b0d      	ldr	r3, [pc, #52]	; (1036c <i2c_write_request_callback+0x2c8>)
   10336:	7edb      	ldrb	r3, [r3, #27]
   10338:	105b      	asrs	r3, r3, #1
   1033a:	b2db      	uxtb	r3, r3
   1033c:	2203      	movs	r2, #3
   1033e:	4013      	ands	r3, r2
   10340:	b2da      	uxtb	r2, r3
   10342:	4b15      	ldr	r3, [pc, #84]	; (10398 <i2c_write_request_callback+0x2f4>)
   10344:	701a      	strb	r2, [r3, #0]
			remote_btn_state = I2C_slave_read_buffer[27] & 0x1;
   10346:	4b09      	ldr	r3, [pc, #36]	; (1036c <i2c_write_request_callback+0x2c8>)
   10348:	7edb      	ldrb	r3, [r3, #27]
   1034a:	2201      	movs	r2, #1
   1034c:	4013      	ands	r3, r2
   1034e:	b2da      	uxtb	r2, r3
   10350:	4b12      	ldr	r3, [pc, #72]	; (1039c <i2c_write_request_callback+0x2f8>)
   10352:	701a      	strb	r2, [r3, #0]
			latest_vesc_vals.fault = I2C_slave_read_buffer[28];
   10354:	4b05      	ldr	r3, [pc, #20]	; (1036c <i2c_write_request_callback+0x2c8>)
   10356:	7f1b      	ldrb	r3, [r3, #28]
   10358:	b259      	sxtb	r1, r3
   1035a:	4b0c      	ldr	r3, [pc, #48]	; (1038c <i2c_write_request_callback+0x2e8>)
   1035c:	222c      	movs	r2, #44	; 0x2c
   1035e:	5499      	strb	r1, [r3, r2]
}
   10360:	46c0      	nop			; (mov r8, r8)
   10362:	46bd      	mov	sp, r7
   10364:	b002      	add	sp, #8
   10366:	bd80      	pop	{r7, pc}
   10368:	200003a8 	.word	0x200003a8
   1036c:	20000794 	.word	0x20000794
   10370:	200000e5 	.word	0x200000e5
   10374:	20000019 	.word	0x20000019
   10378:	0000473b 	.word	0x0000473b
   1037c:	20000db4 	.word	0x20000db4
   10380:	00014ee9 	.word	0x00014ee9
   10384:	2000030e 	.word	0x2000030e
   10388:	200000e4 	.word	0x200000e4
   1038c:	20000940 	.word	0x20000940
   10390:	2000030b 	.word	0x2000030b
   10394:	2000030a 	.word	0x2000030a
   10398:	20000308 	.word	0x20000308
   1039c:	2000030c 	.word	0x2000030c

000103a0 <i2c_read_request_callback>:

uint8_t app_remote_check = 0;
void i2c_read_request_callback(struct i2c_slave_module *const module)
{
   103a0:	b580      	push	{r7, lr}
   103a2:	b082      	sub	sp, #8
   103a4:	af00      	add	r7, sp, #0
   103a6:	6078      	str	r0, [r7, #4]
	I2C_slave_write_buffer[0] = AppRemoteY;
   103a8:	4b10      	ldr	r3, [pc, #64]	; (103ec <i2c_read_request_callback+0x4c>)
   103aa:	781a      	ldrb	r2, [r3, #0]
   103ac:	4b10      	ldr	r3, [pc, #64]	; (103f0 <i2c_read_request_callback+0x50>)
   103ae:	701a      	strb	r2, [r3, #0]
	I2C_slave_write_buffer[1] = GET_LIMITS;
   103b0:	4b10      	ldr	r3, [pc, #64]	; (103f4 <i2c_read_request_callback+0x54>)
   103b2:	781a      	ldrb	r2, [r3, #0]
   103b4:	4b0e      	ldr	r3, [pc, #56]	; (103f0 <i2c_read_request_callback+0x50>)
   103b6:	705a      	strb	r2, [r3, #1]
	I2C_slave_write_buffer[2] = app_remote_check;
   103b8:	4b0f      	ldr	r3, [pc, #60]	; (103f8 <i2c_read_request_callback+0x58>)
   103ba:	781a      	ldrb	r2, [r3, #0]
   103bc:	4b0c      	ldr	r3, [pc, #48]	; (103f0 <i2c_read_request_callback+0x50>)
   103be:	709a      	strb	r2, [r3, #2]

	/* Init i2c packet. */
	packet.data_length = SLAVE_WRITE_DATA_LENGTH;
   103c0:	4b0e      	ldr	r3, [pc, #56]	; (103fc <i2c_read_request_callback+0x5c>)
   103c2:	2203      	movs	r2, #3
   103c4:	801a      	strh	r2, [r3, #0]
	packet.data        = I2C_slave_write_buffer;
   103c6:	4b0d      	ldr	r3, [pc, #52]	; (103fc <i2c_read_request_callback+0x5c>)
   103c8:	4a09      	ldr	r2, [pc, #36]	; (103f0 <i2c_read_request_callback+0x50>)
   103ca:	605a      	str	r2, [r3, #4]
	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &packet);
   103cc:	4a0b      	ldr	r2, [pc, #44]	; (103fc <i2c_read_request_callback+0x5c>)
   103ce:	687b      	ldr	r3, [r7, #4]
   103d0:	0011      	movs	r1, r2
   103d2:	0018      	movs	r0, r3
   103d4:	4b0a      	ldr	r3, [pc, #40]	; (10400 <i2c_read_request_callback+0x60>)
   103d6:	4798      	blx	r3
	NEW_REMOTE_DATA = 0;
   103d8:	4b0a      	ldr	r3, [pc, #40]	; (10404 <i2c_read_request_callback+0x64>)
   103da:	2200      	movs	r2, #0
   103dc:	701a      	strb	r2, [r3, #0]

	GET_LIMITS = 0;
   103de:	4b05      	ldr	r3, [pc, #20]	; (103f4 <i2c_read_request_callback+0x54>)
   103e0:	2200      	movs	r2, #0
   103e2:	701a      	strb	r2, [r3, #0]
}
   103e4:	46c0      	nop			; (mov r8, r8)
   103e6:	46bd      	mov	sp, r7
   103e8:	b002      	add	sp, #8
   103ea:	bd80      	pop	{r7, pc}
   103ec:	200000e6 	.word	0x200000e6
   103f0:	20000978 	.word	0x20000978
   103f4:	20000019 	.word	0x20000019
   103f8:	200003e4 	.word	0x200003e4
   103fc:	200003a8 	.word	0x200003a8
   10400:	00004787 	.word	0x00004787
   10404:	200003d9 	.word	0x200003d9

00010408 <configure_i2c_slave_callbacks>:


void configure_i2c_slave_callbacks(void)
{
   10408:	b580      	push	{r7, lr}
   1040a:	af00      	add	r7, sp, #0
	/* Register and enable callback functions */
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback, I2C_SLAVE_CALLBACK_READ_REQUEST);
   1040c:	490c      	ldr	r1, [pc, #48]	; (10440 <configure_i2c_slave_callbacks+0x38>)
   1040e:	4b0d      	ldr	r3, [pc, #52]	; (10444 <configure_i2c_slave_callbacks+0x3c>)
   10410:	2202      	movs	r2, #2
   10412:	0018      	movs	r0, r3
   10414:	4b0c      	ldr	r3, [pc, #48]	; (10448 <configure_i2c_slave_callbacks+0x40>)
   10416:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_READ_REQUEST);
   10418:	4b0a      	ldr	r3, [pc, #40]	; (10444 <configure_i2c_slave_callbacks+0x3c>)
   1041a:	2102      	movs	r1, #2
   1041c:	0018      	movs	r0, r3
   1041e:	4b0b      	ldr	r3, [pc, #44]	; (1044c <configure_i2c_slave_callbacks+0x44>)
   10420:	4798      	blx	r3

	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   10422:	490b      	ldr	r1, [pc, #44]	; (10450 <configure_i2c_slave_callbacks+0x48>)
   10424:	4b07      	ldr	r3, [pc, #28]	; (10444 <configure_i2c_slave_callbacks+0x3c>)
   10426:	2203      	movs	r2, #3
   10428:	0018      	movs	r0, r3
   1042a:	4b07      	ldr	r3, [pc, #28]	; (10448 <configure_i2c_slave_callbacks+0x40>)
   1042c:	4798      	blx	r3
	i2c_slave_enable_callback(&i2c_slave_instance, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
   1042e:	4b05      	ldr	r3, [pc, #20]	; (10444 <configure_i2c_slave_callbacks+0x3c>)
   10430:	2103      	movs	r1, #3
   10432:	0018      	movs	r0, r3
   10434:	4b05      	ldr	r3, [pc, #20]	; (1044c <configure_i2c_slave_callbacks+0x44>)
   10436:	4798      	blx	r3
}
   10438:	46c0      	nop			; (mov r8, r8)
   1043a:	46bd      	mov	sp, r7
   1043c:	bd80      	pop	{r7, pc}
   1043e:	46c0      	nop			; (mov r8, r8)
   10440:	000103a1 	.word	0x000103a1
   10444:	20000e00 	.word	0x20000e00
   10448:	000046f1 	.word	0x000046f1
   1044c:	00008e95 	.word	0x00008e95
   10450:	000100a5 	.word	0x000100a5

00010454 <configure_eeprom>:

void configure_eeprom(void)
{
   10454:	b590      	push	{r4, r7, lr}
   10456:	b083      	sub	sp, #12
   10458:	af00      	add	r7, sp, #0
	/* Setup EEPROM emulator service */
	enum status_code error_code = eeprom_emulator_init();
   1045a:	1dfc      	adds	r4, r7, #7
   1045c:	4b0a      	ldr	r3, [pc, #40]	; (10488 <configure_eeprom+0x34>)
   1045e:	4798      	blx	r3
   10460:	0003      	movs	r3, r0
   10462:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY) {
   10464:	1dfb      	adds	r3, r7, #7
   10466:	781b      	ldrb	r3, [r3, #0]
   10468:	2b16      	cmp	r3, #22
   1046a:	d100      	bne.n	1046e <configure_eeprom+0x1a>
		while (true) {
   1046c:	e7fe      	b.n	1046c <configure_eeprom+0x18>
			/* No EEPROM section has been set in the device's fuses */
		}
	}
	else if (error_code != STATUS_OK) {
   1046e:	1dfb      	adds	r3, r7, #7
   10470:	781b      	ldrb	r3, [r3, #0]
   10472:	2b00      	cmp	r3, #0
   10474:	d003      	beq.n	1047e <configure_eeprom+0x2a>
		/* Erase the emulated EEPROM memory (assume it is unformatted or
		 * irrecoverably corrupt) */
		eeprom_emulator_erase_memory();
   10476:	4b05      	ldr	r3, [pc, #20]	; (1048c <configure_eeprom+0x38>)
   10478:	4798      	blx	r3
		eeprom_emulator_init();
   1047a:	4b03      	ldr	r3, [pc, #12]	; (10488 <configure_eeprom+0x34>)
   1047c:	4798      	blx	r3
	}
}
   1047e:	46c0      	nop			; (mov r8, r8)
   10480:	46bd      	mov	sp, r7
   10482:	b003      	add	sp, #12
   10484:	bd90      	pop	{r4, r7, pc}
   10486:	46c0      	nop			; (mov r8, r8)
   10488:	0000862d 	.word	0x0000862d
   1048c:	00008715 	.word	0x00008715

00010490 <main>:




int main (void)
{
   10490:	b5f0      	push	{r4, r5, r6, r7, lr}
   10492:	b099      	sub	sp, #100	; 0x64
   10494:	af00      	add	r7, sp, #0
	system_init();
   10496:	4bd5      	ldr	r3, [pc, #852]	; (107ec <main+0x35c>)
   10498:	4798      	blx	r3
	configure_tc(); // Configure millis timer
   1049a:	4bd5      	ldr	r3, [pc, #852]	; (107f0 <main+0x360>)
   1049c:	4798      	blx	r3
	
	// Configure Devices
	configure_ADC();
   1049e:	4bd5      	ldr	r3, [pc, #852]	; (107f4 <main+0x364>)
   104a0:	4798      	blx	r3
	configure_LED_PWM();
   104a2:	4bd5      	ldr	r3, [pc, #852]	; (107f8 <main+0x368>)
   104a4:	4798      	blx	r3
	configure_port_pins();
   104a6:	4bd5      	ldr	r3, [pc, #852]	; (107fc <main+0x36c>)
   104a8:	4798      	blx	r3
	//ERROR_LEDs(2); // Uncomment for testing SAM-BA and LED output functionality
	configure_BLE_module(); // Blocks when no BLE module is installed
   104aa:	4bd5      	ldr	r3, [pc, #852]	; (10800 <main+0x370>)
   104ac:	4798      	blx	r3
	initIMU();
   104ae:	4bd5      	ldr	r3, [pc, #852]	; (10804 <main+0x374>)
   104b0:	4798      	blx	r3
	if(!beginIMU()) ERROR_LEDs(0);
   104b2:	4bd5      	ldr	r3, [pc, #852]	; (10808 <main+0x378>)
   104b4:	4798      	blx	r3
   104b6:	1e03      	subs	r3, r0, #0
   104b8:	d102      	bne.n	104c0 <main+0x30>
   104ba:	2000      	movs	r0, #0
   104bc:	4bd3      	ldr	r3, [pc, #844]	; (1080c <main+0x37c>)
   104be:	4798      	blx	r3
	initKalman(0.1, 0.1, 0.5);
   104c0:	22fc      	movs	r2, #252	; 0xfc
   104c2:	0592      	lsls	r2, r2, #22
   104c4:	49d2      	ldr	r1, [pc, #840]	; (10810 <main+0x380>)
   104c6:	4bd2      	ldr	r3, [pc, #840]	; (10810 <main+0x380>)
   104c8:	1c18      	adds	r0, r3, #0
   104ca:	4bd2      	ldr	r3, [pc, #840]	; (10814 <main+0x384>)
   104cc:	4798      	blx	r3
	  
	configure_eeprom();
   104ce:	4bd2      	ldr	r3, [pc, #840]	; (10818 <main+0x388>)
   104d0:	4798      	blx	r3
	restore_led_data();
   104d2:	4bd2      	ldr	r3, [pc, #840]	; (1081c <main+0x38c>)
   104d4:	4798      	blx	r3
	restore_orientation_controls_remote_esc();
   104d6:	4bd2      	ldr	r3, [pc, #840]	; (10820 <main+0x390>)
   104d8:	4798      	blx	r3
	restore_cal_data(true);
   104da:	2001      	movs	r0, #1
   104dc:	4bd1      	ldr	r3, [pc, #836]	; (10824 <main+0x394>)
   104de:	4798      	blx	r3

	setConstBases();
   104e0:	4bd1      	ldr	r3, [pc, #836]	; (10828 <main+0x398>)
   104e2:	4798      	blx	r3

	if(esc_comms == COMMS_I2C){
   104e4:	4bd1      	ldr	r3, [pc, #836]	; (1082c <main+0x39c>)
   104e6:	781b      	ldrb	r3, [r3, #0]
   104e8:	2b01      	cmp	r3, #1
   104ea:	d104      	bne.n	104f6 <main+0x66>
		configure_i2c_slave();
   104ec:	4bd0      	ldr	r3, [pc, #832]	; (10830 <main+0x3a0>)
   104ee:	4798      	blx	r3
		configure_i2c_slave_callbacks();
   104f0:	4bd0      	ldr	r3, [pc, #832]	; (10834 <main+0x3a4>)
   104f2:	4798      	blx	r3
   104f4:	e010      	b.n	10518 <main+0x88>

	} else if(esc_comms == COMMS_UART){
   104f6:	4bcd      	ldr	r3, [pc, #820]	; (1082c <main+0x39c>)
   104f8:	781b      	ldrb	r3, [r3, #0]
   104fa:	2b02      	cmp	r3, #2
   104fc:	d10c      	bne.n	10518 <main+0x88>
		configure_vesc_usart();
   104fe:	4bce      	ldr	r3, [pc, #824]	; (10838 <main+0x3a8>)
   10500:	4798      	blx	r3
		configure_vesc_usart_callbacks();
   10502:	4bce      	ldr	r3, [pc, #824]	; (1083c <main+0x3ac>)
   10504:	4798      	blx	r3

		vesc_uart_expected_bytes = VESC_UART_BYTES_START;  // Start listening for start byte
   10506:	4bce      	ldr	r3, [pc, #824]	; (10840 <main+0x3b0>)
   10508:	2200      	movs	r2, #0
   1050a:	701a      	strb	r2, [r3, #0]
		usart_read_buffer_job(&vesc_usart, &vesc_revieve_packet.start, (uint16_t)1);
   1050c:	49cd      	ldr	r1, [pc, #820]	; (10844 <main+0x3b4>)
   1050e:	4bce      	ldr	r3, [pc, #824]	; (10848 <main+0x3b8>)
   10510:	2201      	movs	r2, #1
   10512:	0018      	movs	r0, r3
   10514:	4bcd      	ldr	r3, [pc, #820]	; (1084c <main+0x3bc>)
   10516:	4798      	blx	r3
	}
	
	////////////////////////////////////////////

	configured_comms = esc_comms;
   10518:	4bc4      	ldr	r3, [pc, #784]	; (1082c <main+0x39c>)
   1051a:	781a      	ldrb	r2, [r3, #0]
   1051c:	4bcc      	ldr	r3, [pc, #816]	; (10850 <main+0x3c0>)
   1051e:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < ACCELsamples; ++i){
   10520:	2300      	movs	r3, #0
   10522:	65fb      	str	r3, [r7, #92]	; 0x5c
   10524:	e007      	b.n	10536 <main+0xa6>
		AXaverage[i] = 0;
   10526:	4bcb      	ldr	r3, [pc, #812]	; (10854 <main+0x3c4>)
   10528:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1052a:	0052      	lsls	r2, r2, #1
   1052c:	2100      	movs	r1, #0
   1052e:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ACCELsamples; ++i){
   10530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   10532:	3301      	adds	r3, #1
   10534:	65fb      	str	r3, [r7, #92]	; 0x5c
   10536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   10538:	2b0e      	cmp	r3, #14
   1053a:	ddf4      	ble.n	10526 <main+0x96>
	}
	
	for(int i = 0; i < ACCELsamples; ++i){
   1053c:	2300      	movs	r3, #0
   1053e:	65bb      	str	r3, [r7, #88]	; 0x58
   10540:	e007      	b.n	10552 <main+0xc2>
		AYaverage[i] = 0;
   10542:	4bc5      	ldr	r3, [pc, #788]	; (10858 <main+0x3c8>)
   10544:	6dba      	ldr	r2, [r7, #88]	; 0x58
   10546:	0052      	lsls	r2, r2, #1
   10548:	2100      	movs	r1, #0
   1054a:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ACCELsamples; ++i){
   1054c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1054e:	3301      	adds	r3, #1
   10550:	65bb      	str	r3, [r7, #88]	; 0x58
   10552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   10554:	2b0e      	cmp	r3, #14
   10556:	ddf4      	ble.n	10542 <main+0xb2>
	}
	
	for(int i = 0; i < ACCELsamples; ++i){
   10558:	2300      	movs	r3, #0
   1055a:	657b      	str	r3, [r7, #84]	; 0x54
   1055c:	e007      	b.n	1056e <main+0xde>
		AZaverage[i] = 0;
   1055e:	4bbf      	ldr	r3, [pc, #764]	; (1085c <main+0x3cc>)
   10560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   10562:	0052      	lsls	r2, r2, #1
   10564:	2100      	movs	r1, #0
   10566:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ACCELsamples; ++i){
   10568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1056a:	3301      	adds	r3, #1
   1056c:	657b      	str	r3, [r7, #84]	; 0x54
   1056e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   10570:	2b0e      	cmp	r3, #14
   10572:	ddf4      	ble.n	1055e <main+0xce>
	}

	for(int i = 0; i < SLAVE_READ_DATA_LENGTH; ++i){
   10574:	2300      	movs	r3, #0
   10576:	653b      	str	r3, [r7, #80]	; 0x50
   10578:	e007      	b.n	1058a <main+0xfa>
		I2C_slave_read_buffer[i] = 0;
   1057a:	4ab9      	ldr	r2, [pc, #740]	; (10860 <main+0x3d0>)
   1057c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1057e:	18d3      	adds	r3, r2, r3
   10580:	2200      	movs	r2, #0
   10582:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SLAVE_READ_DATA_LENGTH; ++i){
   10584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   10586:	3301      	adds	r3, #1
   10588:	653b      	str	r3, [r7, #80]	; 0x50
   1058a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1058c:	2b1d      	cmp	r3, #29
   1058e:	ddf4      	ble.n	1057a <main+0xea>
	}

	for(int i = 0; i < SLAVE_WRITE_DATA_LENGTH; ++i){
   10590:	2300      	movs	r3, #0
   10592:	64fb      	str	r3, [r7, #76]	; 0x4c
   10594:	e007      	b.n	105a6 <main+0x116>
		I2C_slave_write_buffer[i] = 0;
   10596:	4ab3      	ldr	r2, [pc, #716]	; (10864 <main+0x3d4>)
   10598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1059a:	18d3      	adds	r3, r2, r3
   1059c:	2200      	movs	r2, #0
   1059e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SLAVE_WRITE_DATA_LENGTH; ++i){
   105a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   105a2:	3301      	adds	r3, #1
   105a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   105a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   105a8:	2b02      	cmp	r3, #2
   105aa:	ddf4      	ble.n	10596 <main+0x106>
	}

	// Initialize local variables used in main
	for(int i = 0; i < 44; ++i){
   105ac:	2300      	movs	r3, #0
   105ae:	64bb      	str	r3, [r7, #72]	; 0x48
   105b0:	e007      	b.n	105c2 <main+0x132>
		ble_write_buffer[i] = 0;
   105b2:	4aad      	ldr	r2, [pc, #692]	; (10868 <main+0x3d8>)
   105b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   105b6:	18d3      	adds	r3, r2, r3
   105b8:	2200      	movs	r2, #0
   105ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 44; ++i){
   105bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   105be:	3301      	adds	r3, #1
   105c0:	64bb      	str	r3, [r7, #72]	; 0x48
   105c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   105c4:	2b2b      	cmp	r3, #43	; 0x2b
   105c6:	ddf4      	ble.n	105b2 <main+0x122>
	}
	VescRemoteX = VescRemoteY = 128;
   105c8:	4ba8      	ldr	r3, [pc, #672]	; (1086c <main+0x3dc>)
   105ca:	2280      	movs	r2, #128	; 0x80
   105cc:	701a      	strb	r2, [r3, #0]
   105ce:	4ba7      	ldr	r3, [pc, #668]	; (1086c <main+0x3dc>)
   105d0:	781a      	ldrb	r2, [r3, #0]
   105d2:	4ba7      	ldr	r3, [pc, #668]	; (10870 <main+0x3e0>)
   105d4:	701a      	strb	r2, [r3, #0]

	float heading = 0;
   105d6:	2300      	movs	r3, #0
   105d8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t headingTime = 0;
   105da:	2300      	movs	r3, #0
   105dc:	623b      	str	r3, [r7, #32]
	uint32_t lheadingTime = 0;
   105de:	2300      	movs	r3, #0
   105e0:	643b      	str	r3, [r7, #64]	; 0x40

	int BLE_TX_INDEX = 0;
   105e2:	2300      	movs	r3, #0
   105e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t BLE_TX_DELAY = 15;
   105e6:	231e      	movs	r3, #30
   105e8:	18fb      	adds	r3, r7, r3
   105ea:	220f      	movs	r2, #15
   105ec:	801a      	strh	r2, [r3, #0]
	uint32_t BLE_TX_TIME = 0;
   105ee:	2300      	movs	r3, #0
   105f0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t BLE_DUMMY_TIME = 0;
   105f2:	2300      	movs	r3, #0
   105f4:	637b      	str	r3, [r7, #52]	; 0x34

	mcconf_limits.max_erpm = 1000000;
   105f6:	4b9f      	ldr	r3, [pc, #636]	; (10874 <main+0x3e4>)
   105f8:	4a9f      	ldr	r2, [pc, #636]	; (10878 <main+0x3e8>)
   105fa:	619a      	str	r2, [r3, #24]
	mcconf_limits.min_erpm = -1000000;
   105fc:	4b9d      	ldr	r3, [pc, #628]	; (10874 <main+0x3e4>)
   105fe:	4a9f      	ldr	r2, [pc, #636]	; (1087c <main+0x3ec>)
   10600:	615a      	str	r2, [r3, #20]

	////////////////////////////////////////////

	while(1)
	{
		if(configured_comms != esc_comms)
   10602:	4b93      	ldr	r3, [pc, #588]	; (10850 <main+0x3c0>)
   10604:	781a      	ldrb	r2, [r3, #0]
   10606:	4b89      	ldr	r3, [pc, #548]	; (1082c <main+0x39c>)
   10608:	781b      	ldrb	r3, [r3, #0]
   1060a:	429a      	cmp	r2, r3
   1060c:	d002      	beq.n	10614 <main+0x184>
		{
			// TODO: Deconfigure old comms and configure new comms
			ERROR_LEDs(5);
   1060e:	2005      	movs	r0, #5
   10610:	4b7e      	ldr	r3, [pc, #504]	; (1080c <main+0x37c>)
   10612:	4798      	blx	r3
		}

		if(esc_comms == COMMS_UART){
   10614:	4b85      	ldr	r3, [pc, #532]	; (1082c <main+0x39c>)
   10616:	781b      	ldrb	r3, [r3, #0]
   10618:	2b02      	cmp	r3, #2
   1061a:	d116      	bne.n	1064a <main+0x1ba>
			if(ESC_FW_READ){
   1061c:	4b98      	ldr	r3, [pc, #608]	; (10880 <main+0x3f0>)
   1061e:	781b      	ldrb	r3, [r3, #0]
   10620:	2b00      	cmp	r3, #0
   10622:	d010      	beq.n	10646 <main+0x1b6>
				if(GET_LIMITS) {
   10624:	4b97      	ldr	r3, [pc, #604]	; (10884 <main+0x3f4>)
   10626:	781b      	ldrb	r3, [r3, #0]
   10628:	2b00      	cmp	r3, #0
   1062a:	d002      	beq.n	10632 <main+0x1a2>
					vesc_get_mcconf();
   1062c:	4b96      	ldr	r3, [pc, #600]	; (10888 <main+0x3f8>)
   1062e:	4798      	blx	r3
   10630:	e00b      	b.n	1064a <main+0x1ba>
				} else if(SEND_CONTINUOUS){
   10632:	4b96      	ldr	r3, [pc, #600]	; (1088c <main+0x3fc>)
   10634:	781b      	ldrb	r3, [r3, #0]
   10636:	2b00      	cmp	r3, #0
   10638:	d007      	beq.n	1064a <main+0x1ba>
					READ_VESC_VALS = true;
   1063a:	4b95      	ldr	r3, [pc, #596]	; (10890 <main+0x400>)
   1063c:	2201      	movs	r2, #1
   1063e:	701a      	strb	r2, [r3, #0]
					vesc_read_all();
   10640:	4b94      	ldr	r3, [pc, #592]	; (10894 <main+0x404>)
   10642:	4798      	blx	r3
   10644:	e001      	b.n	1064a <main+0x1ba>
				}
			} else{
				detect_vesc_firmware();
   10646:	4b94      	ldr	r3, [pc, #592]	; (10898 <main+0x408>)
   10648:	4798      	blx	r3
			}
		}

		readAccel();
   1064a:	4b94      	ldr	r3, [pc, #592]	; (1089c <main+0x40c>)
   1064c:	4798      	blx	r3
		readGyro();
   1064e:	4b94      	ldr	r3, [pc, #592]	; (108a0 <main+0x410>)
   10650:	4798      	blx	r3
		readMag();
   10652:	4b94      	ldr	r3, [pc, #592]	; (108a4 <main+0x414>)
   10654:	4798      	blx	r3

		// All IMU measurements are corrected to orient power to front and connectors up
		CorrectIMUvalues(ORIENTATION[0], ORIENTATION[1]);
   10656:	4b94      	ldr	r3, [pc, #592]	; (108a8 <main+0x418>)
   10658:	781a      	ldrb	r2, [r3, #0]
   1065a:	4b93      	ldr	r3, [pc, #588]	; (108a8 <main+0x418>)
   1065c:	785b      	ldrb	r3, [r3, #1]
   1065e:	0019      	movs	r1, r3
   10660:	0010      	movs	r0, r2
   10662:	4b92      	ldr	r3, [pc, #584]	; (108ac <main+0x41c>)
   10664:	4798      	blx	r3


		if(abs(axKalman - cax) < 10000)
   10666:	4b92      	ldr	r3, [pc, #584]	; (108b0 <main+0x420>)
   10668:	681c      	ldr	r4, [r3, #0]
   1066a:	4b92      	ldr	r3, [pc, #584]	; (108b4 <main+0x424>)
   1066c:	2200      	movs	r2, #0
   1066e:	5e9a      	ldrsh	r2, [r3, r2]
   10670:	4b91      	ldr	r3, [pc, #580]	; (108b8 <main+0x428>)
   10672:	0010      	movs	r0, r2
   10674:	4798      	blx	r3
   10676:	1c02      	adds	r2, r0, #0
   10678:	4b90      	ldr	r3, [pc, #576]	; (108bc <main+0x42c>)
   1067a:	1c11      	adds	r1, r2, #0
   1067c:	1c20      	adds	r0, r4, #0
   1067e:	4798      	blx	r3
   10680:	1c03      	adds	r3, r0, #0
   10682:	1c1a      	adds	r2, r3, #0
   10684:	4b8e      	ldr	r3, [pc, #568]	; (108c0 <main+0x430>)
   10686:	1c10      	adds	r0, r2, #0
   10688:	4798      	blx	r3
   1068a:	0002      	movs	r2, r0
   1068c:	4b8d      	ldr	r3, [pc, #564]	; (108c4 <main+0x434>)
   1068e:	429a      	cmp	r2, r3
   10690:	db29      	blt.n	106e6 <main+0x256>
   10692:	4b87      	ldr	r3, [pc, #540]	; (108b0 <main+0x420>)
   10694:	681c      	ldr	r4, [r3, #0]
   10696:	4b87      	ldr	r3, [pc, #540]	; (108b4 <main+0x424>)
   10698:	2200      	movs	r2, #0
   1069a:	5e9a      	ldrsh	r2, [r3, r2]
   1069c:	4b86      	ldr	r3, [pc, #536]	; (108b8 <main+0x428>)
   1069e:	0010      	movs	r0, r2
   106a0:	4798      	blx	r3
   106a2:	1c02      	adds	r2, r0, #0
   106a4:	4b85      	ldr	r3, [pc, #532]	; (108bc <main+0x42c>)
   106a6:	1c11      	adds	r1, r2, #0
   106a8:	1c20      	adds	r0, r4, #0
   106aa:	4798      	blx	r3
   106ac:	1c03      	adds	r3, r0, #0
   106ae:	1c1a      	adds	r2, r3, #0
   106b0:	4b83      	ldr	r3, [pc, #524]	; (108c0 <main+0x430>)
   106b2:	1c10      	adds	r0, r2, #0
   106b4:	4798      	blx	r3
   106b6:	0002      	movs	r2, r0
   106b8:	4b83      	ldr	r3, [pc, #524]	; (108c8 <main+0x438>)
   106ba:	429a      	cmp	r2, r3
   106bc:	dc13      	bgt.n	106e6 <main+0x256>
		{
			avgAX = averageAX();
   106be:	4b83      	ldr	r3, [pc, #524]	; (108cc <main+0x43c>)
   106c0:	4798      	blx	r3
   106c2:	0003      	movs	r3, r0
   106c4:	001a      	movs	r2, r3
   106c6:	4b82      	ldr	r3, [pc, #520]	; (108d0 <main+0x440>)
   106c8:	801a      	strh	r2, [r3, #0]
			axKalman = updateKalman(avgAX, ax_kalman);
   106ca:	4b81      	ldr	r3, [pc, #516]	; (108d0 <main+0x440>)
   106cc:	2200      	movs	r2, #0
   106ce:	5e9a      	ldrsh	r2, [r3, r2]
   106d0:	4b79      	ldr	r3, [pc, #484]	; (108b8 <main+0x428>)
   106d2:	0010      	movs	r0, r2
   106d4:	4798      	blx	r3
   106d6:	1c03      	adds	r3, r0, #0
   106d8:	2100      	movs	r1, #0
   106da:	1c18      	adds	r0, r3, #0
   106dc:	4b7d      	ldr	r3, [pc, #500]	; (108d4 <main+0x444>)
   106de:	4798      	blx	r3
   106e0:	1c02      	adds	r2, r0, #0
   106e2:	4b73      	ldr	r3, [pc, #460]	; (108b0 <main+0x420>)
   106e4:	601a      	str	r2, [r3, #0]
		}
		avgAY = averageAY();
   106e6:	4b7c      	ldr	r3, [pc, #496]	; (108d8 <main+0x448>)
   106e8:	4798      	blx	r3
   106ea:	0003      	movs	r3, r0
   106ec:	001a      	movs	r2, r3
   106ee:	4b7b      	ldr	r3, [pc, #492]	; (108dc <main+0x44c>)
   106f0:	801a      	strh	r2, [r3, #0]
		
		//getLightSens(&light_sens);
		//uint16_t raw_light = getLightSens();
		//light_sens = updateKalman(raw_light, light_kalman);
		
		ayKalman = updateKalman(avgAY, ay_kalman);
   106f2:	4b7a      	ldr	r3, [pc, #488]	; (108dc <main+0x44c>)
   106f4:	2200      	movs	r2, #0
   106f6:	5e9a      	ldrsh	r2, [r3, r2]
   106f8:	4b6f      	ldr	r3, [pc, #444]	; (108b8 <main+0x428>)
   106fa:	0010      	movs	r0, r2
   106fc:	4798      	blx	r3
   106fe:	1c03      	adds	r3, r0, #0
   10700:	2101      	movs	r1, #1
   10702:	1c18      	adds	r0, r3, #0
   10704:	4b73      	ldr	r3, [pc, #460]	; (108d4 <main+0x444>)
   10706:	4798      	blx	r3
   10708:	1c02      	adds	r2, r0, #0
   1070a:	4b75      	ldr	r3, [pc, #468]	; (108e0 <main+0x450>)
   1070c:	601a      	str	r2, [r3, #0]
		azKalman = updateKalman(caz, az_kalman);
   1070e:	4b75      	ldr	r3, [pc, #468]	; (108e4 <main+0x454>)
   10710:	2200      	movs	r2, #0
   10712:	5e9a      	ldrsh	r2, [r3, r2]
   10714:	4b68      	ldr	r3, [pc, #416]	; (108b8 <main+0x428>)
   10716:	0010      	movs	r0, r2
   10718:	4798      	blx	r3
   1071a:	1c03      	adds	r3, r0, #0
   1071c:	2102      	movs	r1, #2
   1071e:	1c18      	adds	r0, r3, #0
   10720:	4b6c      	ldr	r3, [pc, #432]	; (108d4 <main+0x444>)
   10722:	4798      	blx	r3
   10724:	1c02      	adds	r2, r0, #0
   10726:	4b70      	ldr	r3, [pc, #448]	; (108e8 <main+0x458>)
   10728:	601a      	str	r2, [r3, #0]
		//avgAZ = averageAZ();
		gxKalman = calcGyro(cgx);//(uint16_t)(updateKalman(calcGyro(cgx), gx_kalman)*10);
   1072a:	4b70      	ldr	r3, [pc, #448]	; (108ec <main+0x45c>)
   1072c:	2200      	movs	r2, #0
   1072e:	5e9b      	ldrsh	r3, [r3, r2]
   10730:	0018      	movs	r0, r3
   10732:	4b6f      	ldr	r3, [pc, #444]	; (108f0 <main+0x460>)
   10734:	4798      	blx	r3
   10736:	1c02      	adds	r2, r0, #0
   10738:	4b6e      	ldr	r3, [pc, #440]	; (108f4 <main+0x464>)
   1073a:	601a      	str	r2, [r3, #0]
		gyKalman = calcGyro(cgy);//(uint16_t)(updateKalman(calcGyro(cgy), gy_kalman)*10);
   1073c:	4b6e      	ldr	r3, [pc, #440]	; (108f8 <main+0x468>)
   1073e:	2200      	movs	r2, #0
   10740:	5e9b      	ldrsh	r3, [r3, r2]
   10742:	0018      	movs	r0, r3
   10744:	4b6a      	ldr	r3, [pc, #424]	; (108f0 <main+0x460>)
   10746:	4798      	blx	r3
   10748:	1c02      	adds	r2, r0, #0
   1074a:	4b6c      	ldr	r3, [pc, #432]	; (108fc <main+0x46c>)
   1074c:	601a      	str	r2, [r3, #0]
		gzKalman = calcGyro(cgz);//(updateKalman(calcGyro(cgz), gz_kalman));
   1074e:	4b6c      	ldr	r3, [pc, #432]	; (10900 <main+0x470>)
   10750:	2200      	movs	r2, #0
   10752:	5e9b      	ldrsh	r3, [r3, r2]
   10754:	0018      	movs	r0, r3
   10756:	4b66      	ldr	r3, [pc, #408]	; (108f0 <main+0x460>)
   10758:	4798      	blx	r3
   1075a:	1c02      	adds	r2, r0, #0
   1075c:	4b69      	ldr	r3, [pc, #420]	; (10904 <main+0x474>)
   1075e:	601a      	str	r2, [r3, #0]

		if(axKalman > kalmanAX_max)
   10760:	4b53      	ldr	r3, [pc, #332]	; (108b0 <main+0x420>)
   10762:	681a      	ldr	r2, [r3, #0]
   10764:	4b68      	ldr	r3, [pc, #416]	; (10908 <main+0x478>)
   10766:	6819      	ldr	r1, [r3, #0]
   10768:	4b68      	ldr	r3, [pc, #416]	; (1090c <main+0x47c>)
   1076a:	1c10      	adds	r0, r2, #0
   1076c:	4798      	blx	r3
   1076e:	1e03      	subs	r3, r0, #0
   10770:	d004      	beq.n	1077c <main+0x2ec>
			kalmanAX_max = axKalman;
   10772:	4b4f      	ldr	r3, [pc, #316]	; (108b0 <main+0x420>)
   10774:	681a      	ldr	r2, [r3, #0]
   10776:	4b64      	ldr	r3, [pc, #400]	; (10908 <main+0x478>)
   10778:	601a      	str	r2, [r3, #0]
   1077a:	e00c      	b.n	10796 <main+0x306>
		else if(axKalman < kalmanAX_min)
   1077c:	4b4c      	ldr	r3, [pc, #304]	; (108b0 <main+0x420>)
   1077e:	681a      	ldr	r2, [r3, #0]
   10780:	4b63      	ldr	r3, [pc, #396]	; (10910 <main+0x480>)
   10782:	6819      	ldr	r1, [r3, #0]
   10784:	4b63      	ldr	r3, [pc, #396]	; (10914 <main+0x484>)
   10786:	1c10      	adds	r0, r2, #0
   10788:	4798      	blx	r3
   1078a:	1e03      	subs	r3, r0, #0
   1078c:	d003      	beq.n	10796 <main+0x306>
			kalmanAX_min = axKalman;
   1078e:	4b48      	ldr	r3, [pc, #288]	; (108b0 <main+0x420>)
   10790:	681a      	ldr	r2, [r3, #0]
   10792:	4b5f      	ldr	r3, [pc, #380]	; (10910 <main+0x480>)
   10794:	601a      	str	r2, [r3, #0]

		if(ayKalman > kalmanAY_max)
   10796:	4b52      	ldr	r3, [pc, #328]	; (108e0 <main+0x450>)
   10798:	681a      	ldr	r2, [r3, #0]
   1079a:	4b5f      	ldr	r3, [pc, #380]	; (10918 <main+0x488>)
   1079c:	6819      	ldr	r1, [r3, #0]
   1079e:	4b5b      	ldr	r3, [pc, #364]	; (1090c <main+0x47c>)
   107a0:	1c10      	adds	r0, r2, #0
   107a2:	4798      	blx	r3
   107a4:	1e03      	subs	r3, r0, #0
   107a6:	d004      	beq.n	107b2 <main+0x322>
			kalmanAY_max = ayKalman;
   107a8:	4b4d      	ldr	r3, [pc, #308]	; (108e0 <main+0x450>)
   107aa:	681a      	ldr	r2, [r3, #0]
   107ac:	4b5a      	ldr	r3, [pc, #360]	; (10918 <main+0x488>)
   107ae:	601a      	str	r2, [r3, #0]
   107b0:	e00c      	b.n	107cc <main+0x33c>
		else if(ayKalman < kalmanAY_min)
   107b2:	4b4b      	ldr	r3, [pc, #300]	; (108e0 <main+0x450>)
   107b4:	681a      	ldr	r2, [r3, #0]
   107b6:	4b59      	ldr	r3, [pc, #356]	; (1091c <main+0x48c>)
   107b8:	6819      	ldr	r1, [r3, #0]
   107ba:	4b56      	ldr	r3, [pc, #344]	; (10914 <main+0x484>)
   107bc:	1c10      	adds	r0, r2, #0
   107be:	4798      	blx	r3
   107c0:	1e03      	subs	r3, r0, #0
   107c2:	d003      	beq.n	107cc <main+0x33c>
			kalmanAY_min = ayKalman;
   107c4:	4b46      	ldr	r3, [pc, #280]	; (108e0 <main+0x450>)
   107c6:	681a      	ldr	r2, [r3, #0]
   107c8:	4b54      	ldr	r3, [pc, #336]	; (1091c <main+0x48c>)
   107ca:	601a      	str	r2, [r3, #0]

		if(azKalman > kalmanAZ_max)
   107cc:	4b46      	ldr	r3, [pc, #280]	; (108e8 <main+0x458>)
   107ce:	681a      	ldr	r2, [r3, #0]
   107d0:	4b53      	ldr	r3, [pc, #332]	; (10920 <main+0x490>)
   107d2:	6819      	ldr	r1, [r3, #0]
   107d4:	4b4d      	ldr	r3, [pc, #308]	; (1090c <main+0x47c>)
   107d6:	1c10      	adds	r0, r2, #0
   107d8:	4798      	blx	r3
   107da:	1e03      	subs	r3, r0, #0
   107dc:	d100      	bne.n	107e0 <main+0x350>
   107de:	e0a1      	b.n	10924 <main+0x494>
			kalmanAZ_max = azKalman;
   107e0:	4b41      	ldr	r3, [pc, #260]	; (108e8 <main+0x458>)
   107e2:	681a      	ldr	r2, [r3, #0]
   107e4:	4b4e      	ldr	r3, [pc, #312]	; (10920 <main+0x490>)
   107e6:	601a      	str	r2, [r3, #0]
   107e8:	e0a9      	b.n	1093e <main+0x4ae>
   107ea:	46c0      	nop			; (mov r8, r8)
   107ec:	00007e71 	.word	0x00007e71
   107f0:	0000ae89 	.word	0x0000ae89
   107f4:	0000ff4d 	.word	0x0000ff4d
   107f8:	0000af39 	.word	0x0000af39
   107fc:	0000ffdd 	.word	0x0000ffdd
   10800:	0000fce9 	.word	0x0000fce9
   10804:	000091d1 	.word	0x000091d1
   10808:	00009335 	.word	0x00009335
   1080c:	0000b405 	.word	0x0000b405
   10810:	3dcccccd 	.word	0x3dcccccd
   10814:	0001390d 	.word	0x0001390d
   10818:	00010455 	.word	0x00010455
   1081c:	0000e375 	.word	0x0000e375
   10820:	0000ecf9 	.word	0x0000ecf9
   10824:	0000e9c1 	.word	0x0000e9c1
   10828:	0000b35d 	.word	0x0000b35d
   1082c:	20000310 	.word	0x20000310
   10830:	00010041 	.word	0x00010041
   10834:	00010409 	.word	0x00010409
   10838:	0000b6c5 	.word	0x0000b6c5
   1083c:	0000b969 	.word	0x0000b969
   10840:	20000371 	.word	0x20000371
   10844:	20000ac4 	.word	0x20000ac4
   10848:	20000704 	.word	0x20000704
   1084c:	00006615 	.word	0x00006615
   10850:	200003a4 	.word	0x200003a4
   10854:	20000a40 	.word	0x20000a40
   10858:	20000a04 	.word	0x20000a04
   1085c:	2000097c 	.word	0x2000097c
   10860:	20000794 	.word	0x20000794
   10864:	20000978 	.word	0x20000978
   10868:	20000910 	.word	0x20000910
   1086c:	20000373 	.word	0x20000373
   10870:	20000372 	.word	0x20000372
   10874:	20000db4 	.word	0x20000db4
   10878:	000f4240 	.word	0x000f4240
   1087c:	fff0bdc0 	.word	0xfff0bdc0
   10880:	2000030f 	.word	0x2000030f
   10884:	20000019 	.word	0x20000019
   10888:	0000cda5 	.word	0x0000cda5
   1088c:	200000e4 	.word	0x200000e4
   10890:	2000036b 	.word	0x2000036b
   10894:	0000d02d 	.word	0x0000d02d
   10898:	0000d1a9 	.word	0x0000d1a9
   1089c:	00009a39 	.word	0x00009a39
   108a0:	00009b71 	.word	0x00009b71
   108a4:	00009b05 	.word	0x00009b05
   108a8:	20000004 	.word	0x20000004
   108ac:	0000a2f5 	.word	0x0000a2f5
   108b0:	200003c0 	.word	0x200003c0
   108b4:	200002fc 	.word	0x200002fc
   108b8:	00014e49 	.word	0x00014e49
   108bc:	00014ad1 	.word	0x00014ad1
   108c0:	00014e09 	.word	0x00014e09
   108c4:	ffffd8f1 	.word	0xffffd8f1
   108c8:	0000270f 	.word	0x0000270f
   108cc:	0001362d 	.word	0x0001362d
   108d0:	200003bc 	.word	0x200003bc
   108d4:	000139e5 	.word	0x000139e5
   108d8:	000136ad 	.word	0x000136ad
   108dc:	200003be 	.word	0x200003be
   108e0:	200003c4 	.word	0x200003c4
   108e4:	20000300 	.word	0x20000300
   108e8:	200003c8 	.word	0x200003c8
   108ec:	200002f6 	.word	0x200002f6
   108f0:	00009c3d 	.word	0x00009c3d
   108f4:	200003cc 	.word	0x200003cc
   108f8:	200002f8 	.word	0x200002f8
   108fc:	200003d0 	.word	0x200003d0
   10900:	200002fa 	.word	0x200002fa
   10904:	200003d4 	.word	0x200003d4
   10908:	200000b8 	.word	0x200000b8
   1090c:	000140a5 	.word	0x000140a5
   10910:	200000b4 	.word	0x200000b4
   10914:	0001407d 	.word	0x0001407d
   10918:	200000c0 	.word	0x200000c0
   1091c:	200000bc 	.word	0x200000bc
   10920:	200000c8 	.word	0x200000c8
		else if(azKalman < kalmanAZ_min)
   10924:	4be0      	ldr	r3, [pc, #896]	; (10ca8 <main+0x818>)
   10926:	681a      	ldr	r2, [r3, #0]
   10928:	4be0      	ldr	r3, [pc, #896]	; (10cac <main+0x81c>)
   1092a:	6819      	ldr	r1, [r3, #0]
   1092c:	4be0      	ldr	r3, [pc, #896]	; (10cb0 <main+0x820>)
   1092e:	1c10      	adds	r0, r2, #0
   10930:	4798      	blx	r3
   10932:	1e03      	subs	r3, r0, #0
   10934:	d003      	beq.n	1093e <main+0x4ae>
			kalmanAZ_min = azKalman;
   10936:	4bdc      	ldr	r3, [pc, #880]	; (10ca8 <main+0x818>)
   10938:	681a      	ldr	r2, [r3, #0]
   1093a:	4bdc      	ldr	r3, [pc, #880]	; (10cac <main+0x81c>)
   1093c:	601a      	str	r2, [r3, #0]
			
		if(gxKalman > kalmanGX_max)
   1093e:	4bdd      	ldr	r3, [pc, #884]	; (10cb4 <main+0x824>)
   10940:	681a      	ldr	r2, [r3, #0]
   10942:	4bdd      	ldr	r3, [pc, #884]	; (10cb8 <main+0x828>)
   10944:	6819      	ldr	r1, [r3, #0]
   10946:	4bdd      	ldr	r3, [pc, #884]	; (10cbc <main+0x82c>)
   10948:	1c10      	adds	r0, r2, #0
   1094a:	4798      	blx	r3
   1094c:	1e03      	subs	r3, r0, #0
   1094e:	d004      	beq.n	1095a <main+0x4ca>
			kalmanGX_max = gxKalman;
   10950:	4bd8      	ldr	r3, [pc, #864]	; (10cb4 <main+0x824>)
   10952:	681a      	ldr	r2, [r3, #0]
   10954:	4bd8      	ldr	r3, [pc, #864]	; (10cb8 <main+0x828>)
   10956:	601a      	str	r2, [r3, #0]
   10958:	e00c      	b.n	10974 <main+0x4e4>
		else if(gxKalman < kalmanGX_min)
   1095a:	4bd6      	ldr	r3, [pc, #856]	; (10cb4 <main+0x824>)
   1095c:	681a      	ldr	r2, [r3, #0]
   1095e:	4bd8      	ldr	r3, [pc, #864]	; (10cc0 <main+0x830>)
   10960:	6819      	ldr	r1, [r3, #0]
   10962:	4bd3      	ldr	r3, [pc, #844]	; (10cb0 <main+0x820>)
   10964:	1c10      	adds	r0, r2, #0
   10966:	4798      	blx	r3
   10968:	1e03      	subs	r3, r0, #0
   1096a:	d003      	beq.n	10974 <main+0x4e4>
			kalmanGX_min = gxKalman;
   1096c:	4bd1      	ldr	r3, [pc, #836]	; (10cb4 <main+0x824>)
   1096e:	681a      	ldr	r2, [r3, #0]
   10970:	4bd3      	ldr	r3, [pc, #844]	; (10cc0 <main+0x830>)
   10972:	601a      	str	r2, [r3, #0]

		if(gyKalman > kalmanGY_max)
   10974:	4bd3      	ldr	r3, [pc, #844]	; (10cc4 <main+0x834>)
   10976:	681a      	ldr	r2, [r3, #0]
   10978:	4bd3      	ldr	r3, [pc, #844]	; (10cc8 <main+0x838>)
   1097a:	6819      	ldr	r1, [r3, #0]
   1097c:	4bcf      	ldr	r3, [pc, #828]	; (10cbc <main+0x82c>)
   1097e:	1c10      	adds	r0, r2, #0
   10980:	4798      	blx	r3
   10982:	1e03      	subs	r3, r0, #0
   10984:	d004      	beq.n	10990 <main+0x500>
			kalmanGY_max = gyKalman;
   10986:	4bcf      	ldr	r3, [pc, #828]	; (10cc4 <main+0x834>)
   10988:	681a      	ldr	r2, [r3, #0]
   1098a:	4bcf      	ldr	r3, [pc, #828]	; (10cc8 <main+0x838>)
   1098c:	601a      	str	r2, [r3, #0]
   1098e:	e00c      	b.n	109aa <main+0x51a>
		else if(gyKalman < kalmanGY_min)
   10990:	4bcc      	ldr	r3, [pc, #816]	; (10cc4 <main+0x834>)
   10992:	681a      	ldr	r2, [r3, #0]
   10994:	4bcd      	ldr	r3, [pc, #820]	; (10ccc <main+0x83c>)
   10996:	6819      	ldr	r1, [r3, #0]
   10998:	4bc5      	ldr	r3, [pc, #788]	; (10cb0 <main+0x820>)
   1099a:	1c10      	adds	r0, r2, #0
   1099c:	4798      	blx	r3
   1099e:	1e03      	subs	r3, r0, #0
   109a0:	d003      	beq.n	109aa <main+0x51a>
			kalmanGY_min = gyKalman;
   109a2:	4bc8      	ldr	r3, [pc, #800]	; (10cc4 <main+0x834>)
   109a4:	681a      	ldr	r2, [r3, #0]
   109a6:	4bc9      	ldr	r3, [pc, #804]	; (10ccc <main+0x83c>)
   109a8:	601a      	str	r2, [r3, #0]

		if(gzKalman > kalmanAZ_max)
   109aa:	4bc9      	ldr	r3, [pc, #804]	; (10cd0 <main+0x840>)
   109ac:	681a      	ldr	r2, [r3, #0]
   109ae:	4bc9      	ldr	r3, [pc, #804]	; (10cd4 <main+0x844>)
   109b0:	6819      	ldr	r1, [r3, #0]
   109b2:	4bc2      	ldr	r3, [pc, #776]	; (10cbc <main+0x82c>)
   109b4:	1c10      	adds	r0, r2, #0
   109b6:	4798      	blx	r3
   109b8:	1e03      	subs	r3, r0, #0
   109ba:	d004      	beq.n	109c6 <main+0x536>
			kalmanGZ_max = gzKalman;
   109bc:	4bc4      	ldr	r3, [pc, #784]	; (10cd0 <main+0x840>)
   109be:	681a      	ldr	r2, [r3, #0]
   109c0:	4bc5      	ldr	r3, [pc, #788]	; (10cd8 <main+0x848>)
   109c2:	601a      	str	r2, [r3, #0]
   109c4:	e00c      	b.n	109e0 <main+0x550>
		else if(gzKalman < kalmanGZ_min)
   109c6:	4bc2      	ldr	r3, [pc, #776]	; (10cd0 <main+0x840>)
   109c8:	681a      	ldr	r2, [r3, #0]
   109ca:	4bc4      	ldr	r3, [pc, #784]	; (10cdc <main+0x84c>)
   109cc:	6819      	ldr	r1, [r3, #0]
   109ce:	4bb8      	ldr	r3, [pc, #736]	; (10cb0 <main+0x820>)
   109d0:	1c10      	adds	r0, r2, #0
   109d2:	4798      	blx	r3
   109d4:	1e03      	subs	r3, r0, #0
   109d6:	d003      	beq.n	109e0 <main+0x550>
			kalmanGZ_min = gzKalman;
   109d8:	4bbd      	ldr	r3, [pc, #756]	; (10cd0 <main+0x840>)
   109da:	681a      	ldr	r2, [r3, #0]
   109dc:	4bbf      	ldr	r3, [pc, #764]	; (10cdc <main+0x84c>)
   109de:	601a      	str	r2, [r3, #0]

		headingTime = millis();
   109e0:	4bbf      	ldr	r3, [pc, #764]	; (10ce0 <main+0x850>)
   109e2:	4798      	blx	r3
   109e4:	0003      	movs	r3, r0
   109e6:	623b      	str	r3, [r7, #32]
		if(abs(gzKalman) >= 0.5){
   109e8:	4bb9      	ldr	r3, [pc, #740]	; (10cd0 <main+0x840>)
   109ea:	681a      	ldr	r2, [r3, #0]
   109ec:	4bbd      	ldr	r3, [pc, #756]	; (10ce4 <main+0x854>)
   109ee:	1c10      	adds	r0, r2, #0
   109f0:	4798      	blx	r3
   109f2:	0003      	movs	r3, r0
   109f4:	17d9      	asrs	r1, r3, #31
   109f6:	185a      	adds	r2, r3, r1
   109f8:	404a      	eors	r2, r1
   109fa:	4bbb      	ldr	r3, [pc, #748]	; (10ce8 <main+0x858>)
   109fc:	0010      	movs	r0, r2
   109fe:	4798      	blx	r3
   10a00:	4cba      	ldr	r4, [pc, #744]	; (10cec <main+0x85c>)
   10a02:	2200      	movs	r2, #0
   10a04:	4bba      	ldr	r3, [pc, #744]	; (10cf0 <main+0x860>)
   10a06:	47a0      	blx	r4
   10a08:	1e03      	subs	r3, r0, #0
   10a0a:	d039      	beq.n	10a80 <main+0x5f0>
			if(headingTime < lheadingTime){
   10a0c:	6a3a      	ldr	r2, [r7, #32]
   10a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10a10:	429a      	cmp	r2, r3
   10a12:	d21b      	bcs.n	10a4c <main+0x5bc>
				heading += (gzKalman) * (((float)(headingTime + (0xFFFFFFFF - lheadingTime)))/1000);
   10a14:	6a3a      	ldr	r2, [r7, #32]
   10a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10a18:	1ad3      	subs	r3, r2, r3
   10a1a:	1e5a      	subs	r2, r3, #1
   10a1c:	4bb5      	ldr	r3, [pc, #724]	; (10cf4 <main+0x864>)
   10a1e:	0010      	movs	r0, r2
   10a20:	4798      	blx	r3
   10a22:	1c02      	adds	r2, r0, #0
   10a24:	4bb4      	ldr	r3, [pc, #720]	; (10cf8 <main+0x868>)
   10a26:	49b5      	ldr	r1, [pc, #724]	; (10cfc <main+0x86c>)
   10a28:	1c10      	adds	r0, r2, #0
   10a2a:	4798      	blx	r3
   10a2c:	1c03      	adds	r3, r0, #0
   10a2e:	1c18      	adds	r0, r3, #0
   10a30:	4ba7      	ldr	r3, [pc, #668]	; (10cd0 <main+0x840>)
   10a32:	681a      	ldr	r2, [r3, #0]
   10a34:	4bb2      	ldr	r3, [pc, #712]	; (10d00 <main+0x870>)
   10a36:	1c11      	adds	r1, r2, #0
   10a38:	4798      	blx	r3
   10a3a:	1c03      	adds	r3, r0, #0
   10a3c:	1c1a      	adds	r2, r3, #0
   10a3e:	4bb1      	ldr	r3, [pc, #708]	; (10d04 <main+0x874>)
   10a40:	1c11      	adds	r1, r2, #0
   10a42:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10a44:	4798      	blx	r3
   10a46:	1c03      	adds	r3, r0, #0
   10a48:	647b      	str	r3, [r7, #68]	; 0x44
   10a4a:	e019      	b.n	10a80 <main+0x5f0>
			}
			else
				heading += (gzKalman) * (((float)(headingTime - lheadingTime))/1000);
   10a4c:	6a3a      	ldr	r2, [r7, #32]
   10a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10a50:	1ad2      	subs	r2, r2, r3
   10a52:	4ba8      	ldr	r3, [pc, #672]	; (10cf4 <main+0x864>)
   10a54:	0010      	movs	r0, r2
   10a56:	4798      	blx	r3
   10a58:	1c02      	adds	r2, r0, #0
   10a5a:	4ba7      	ldr	r3, [pc, #668]	; (10cf8 <main+0x868>)
   10a5c:	49a7      	ldr	r1, [pc, #668]	; (10cfc <main+0x86c>)
   10a5e:	1c10      	adds	r0, r2, #0
   10a60:	4798      	blx	r3
   10a62:	1c03      	adds	r3, r0, #0
   10a64:	1c18      	adds	r0, r3, #0
   10a66:	4b9a      	ldr	r3, [pc, #616]	; (10cd0 <main+0x840>)
   10a68:	681a      	ldr	r2, [r3, #0]
   10a6a:	4ba5      	ldr	r3, [pc, #660]	; (10d00 <main+0x870>)
   10a6c:	1c11      	adds	r1, r2, #0
   10a6e:	4798      	blx	r3
   10a70:	1c03      	adds	r3, r0, #0
   10a72:	1c1a      	adds	r2, r3, #0
   10a74:	4ba3      	ldr	r3, [pc, #652]	; (10d04 <main+0x874>)
   10a76:	1c11      	adds	r1, r2, #0
   10a78:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10a7a:	4798      	blx	r3
   10a7c:	1c03      	adds	r3, r0, #0
   10a7e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		lheadingTime = headingTime;
   10a80:	6a3b      	ldr	r3, [r7, #32]
   10a82:	643b      	str	r3, [r7, #64]	; 0x40
		if(heading < 0)
   10a84:	4b8a      	ldr	r3, [pc, #552]	; (10cb0 <main+0x820>)
   10a86:	2100      	movs	r1, #0
   10a88:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10a8a:	4798      	blx	r3
   10a8c:	1e03      	subs	r3, r0, #0
   10a8e:	d006      	beq.n	10a9e <main+0x60e>
			heading = 360 + heading;
   10a90:	4b9c      	ldr	r3, [pc, #624]	; (10d04 <main+0x874>)
   10a92:	499d      	ldr	r1, [pc, #628]	; (10d08 <main+0x878>)
   10a94:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10a96:	4798      	blx	r3
   10a98:	1c03      	adds	r3, r0, #0
   10a9a:	647b      	str	r3, [r7, #68]	; 0x44
   10a9c:	e00b      	b.n	10ab6 <main+0x626>
		else if(heading > 360)
   10a9e:	4b87      	ldr	r3, [pc, #540]	; (10cbc <main+0x82c>)
   10aa0:	4999      	ldr	r1, [pc, #612]	; (10d08 <main+0x878>)
   10aa2:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10aa4:	4798      	blx	r3
   10aa6:	1e03      	subs	r3, r0, #0
   10aa8:	d005      	beq.n	10ab6 <main+0x626>
			heading = heading - 360;
   10aaa:	4b98      	ldr	r3, [pc, #608]	; (10d0c <main+0x87c>)
   10aac:	4996      	ldr	r1, [pc, #600]	; (10d08 <main+0x878>)
   10aae:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10ab0:	4798      	blx	r3
   10ab2:	1c03      	adds	r3, r0, #0
   10ab4:	647b      	str	r3, [r7, #68]	; 0x44

		
		if(BLE_TX_TIME>millis())
   10ab6:	4b8a      	ldr	r3, [pc, #552]	; (10ce0 <main+0x850>)
   10ab8:	4798      	blx	r3
   10aba:	0002      	movs	r2, r0
   10abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10abe:	429a      	cmp	r2, r3
   10ac0:	d201      	bcs.n	10ac6 <main+0x636>
			BLE_TX_TIME = 0;
   10ac2:	2300      	movs	r3, #0
   10ac4:	63bb      	str	r3, [r7, #56]	; 0x38

		if(SEND_CONTINUOUS && app_remote_check == 0 &&((millis()-BLE_TX_TIME) >= BLE_TX_DELAY))
   10ac6:	4b92      	ldr	r3, [pc, #584]	; (10d10 <main+0x880>)
   10ac8:	781b      	ldrb	r3, [r3, #0]
   10aca:	2b00      	cmp	r3, #0
   10acc:	d100      	bne.n	10ad0 <main+0x640>
   10ace:	e2a3      	b.n	11018 <main+0xb88>
   10ad0:	4b90      	ldr	r3, [pc, #576]	; (10d14 <main+0x884>)
   10ad2:	781b      	ldrb	r3, [r3, #0]
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d000      	beq.n	10ada <main+0x64a>
   10ad8:	e29e      	b.n	11018 <main+0xb88>
   10ada:	4b81      	ldr	r3, [pc, #516]	; (10ce0 <main+0x850>)
   10adc:	4798      	blx	r3
   10ade:	0002      	movs	r2, r0
   10ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10ae2:	1ad2      	subs	r2, r2, r3
   10ae4:	231e      	movs	r3, #30
   10ae6:	18fb      	adds	r3, r7, r3
   10ae8:	881b      	ldrh	r3, [r3, #0]
   10aea:	429a      	cmp	r2, r3
   10aec:	d200      	bcs.n	10af0 <main+0x660>
   10aee:	e293      	b.n	11018 <main+0xb88>
		{
			switch(BLE_TX_INDEX){
   10af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10af2:	2b01      	cmp	r3, #1
   10af4:	d071      	beq.n	10bda <main+0x74a>
   10af6:	dc02      	bgt.n	10afe <main+0x66e>
   10af8:	2b00      	cmp	r3, #0
   10afa:	d007      	beq.n	10b0c <main+0x67c>
   10afc:	e257      	b.n	10fae <main+0xb1e>
   10afe:	2b02      	cmp	r3, #2
   10b00:	d100      	bne.n	10b04 <main+0x674>
   10b02:	e113      	b.n	10d2c <main+0x89c>
   10b04:	2b03      	cmp	r3, #3
   10b06:	d100      	bne.n	10b0a <main+0x67a>
   10b08:	e1be      	b.n	10e88 <main+0x9f8>
   10b0a:	e250      	b.n	10fae <main+0xb1e>
				case 0:
					ble_write_buffer[0] = 0x11;
   10b0c:	4b82      	ldr	r3, [pc, #520]	; (10d18 <main+0x888>)
   10b0e:	2211      	movs	r2, #17
   10b10:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = latest_vesc_vals.avg_input_current & 0xFF;
   10b12:	4b82      	ldr	r3, [pc, #520]	; (10d1c <main+0x88c>)
   10b14:	689b      	ldr	r3, [r3, #8]
   10b16:	b2da      	uxtb	r2, r3
   10b18:	4b7f      	ldr	r3, [pc, #508]	; (10d18 <main+0x888>)
   10b1a:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.avg_input_current & 0xFF00) >> 8;
   10b1c:	4b7f      	ldr	r3, [pc, #508]	; (10d1c <main+0x88c>)
   10b1e:	689b      	ldr	r3, [r3, #8]
   10b20:	121b      	asrs	r3, r3, #8
   10b22:	b2da      	uxtb	r2, r3
   10b24:	4b7c      	ldr	r3, [pc, #496]	; (10d18 <main+0x888>)
   10b26:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x12;
   10b28:	4b7b      	ldr	r3, [pc, #492]	; (10d18 <main+0x888>)
   10b2a:	2212      	movs	r2, #18
   10b2c:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = latest_vesc_vals.INPUT_VOLTAGE;
   10b2e:	4b7b      	ldr	r3, [pc, #492]	; (10d1c <main+0x88c>)
   10b30:	2214      	movs	r2, #20
   10b32:	5e9b      	ldrsh	r3, [r3, r2]
   10b34:	b2da      	uxtb	r2, r3
   10b36:	4b78      	ldr	r3, [pc, #480]	; (10d18 <main+0x888>)
   10b38:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.INPUT_VOLTAGE & 0xFF00) >> 8;
   10b3a:	4b78      	ldr	r3, [pc, #480]	; (10d1c <main+0x88c>)
   10b3c:	2214      	movs	r2, #20
   10b3e:	5e9b      	ldrsh	r3, [r3, r2]
   10b40:	121b      	asrs	r3, r3, #8
   10b42:	b2da      	uxtb	r2, r3
   10b44:	4b74      	ldr	r3, [pc, #464]	; (10d18 <main+0x888>)
   10b46:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x13;
   10b48:	4b73      	ldr	r3, [pc, #460]	; (10d18 <main+0x888>)
   10b4a:	2213      	movs	r2, #19
   10b4c:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = latest_vesc_vals.avg_motor_current;
   10b4e:	4b73      	ldr	r3, [pc, #460]	; (10d1c <main+0x88c>)
   10b50:	685b      	ldr	r3, [r3, #4]
   10b52:	b2da      	uxtb	r2, r3
   10b54:	4b70      	ldr	r3, [pc, #448]	; (10d18 <main+0x888>)
   10b56:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (latest_vesc_vals.avg_motor_current & 0xFF00) >> 8;
   10b58:	4b70      	ldr	r3, [pc, #448]	; (10d1c <main+0x88c>)
   10b5a:	685b      	ldr	r3, [r3, #4]
   10b5c:	121b      	asrs	r3, r3, #8
   10b5e:	b2da      	uxtb	r2, r3
   10b60:	4b6d      	ldr	r3, [pc, #436]	; (10d18 <main+0x888>)
   10b62:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x14;
   10b64:	4b6c      	ldr	r3, [pc, #432]	; (10d18 <main+0x888>)
   10b66:	2214      	movs	r2, #20
   10b68:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = latest_vesc_vals.temp_fet_filtered;
   10b6a:	4b6c      	ldr	r3, [pc, #432]	; (10d1c <main+0x88c>)
   10b6c:	2200      	movs	r2, #0
   10b6e:	5e9b      	ldrsh	r3, [r3, r2]
   10b70:	b2da      	uxtb	r2, r3
   10b72:	4b69      	ldr	r3, [pc, #420]	; (10d18 <main+0x888>)
   10b74:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.temp_fet_filtered & 0xFF00) >> 8;
   10b76:	4b69      	ldr	r3, [pc, #420]	; (10d1c <main+0x88c>)
   10b78:	2200      	movs	r2, #0
   10b7a:	5e9b      	ldrsh	r3, [r3, r2]
   10b7c:	121b      	asrs	r3, r3, #8
   10b7e:	b2da      	uxtb	r2, r3
   10b80:	4b65      	ldr	r3, [pc, #404]	; (10d18 <main+0x888>)
   10b82:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x15;
   10b84:	4b64      	ldr	r3, [pc, #400]	; (10d18 <main+0x888>)
   10b86:	2215      	movs	r2, #21
   10b88:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = latest_vesc_vals.duty_cycle;
   10b8a:	4b64      	ldr	r3, [pc, #400]	; (10d1c <main+0x88c>)
   10b8c:	220c      	movs	r2, #12
   10b8e:	5e9b      	ldrsh	r3, [r3, r2]
   10b90:	b2da      	uxtb	r2, r3
   10b92:	4b61      	ldr	r3, [pc, #388]	; (10d18 <main+0x888>)
   10b94:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.duty_cycle & 0xFF00) >> 8;
   10b96:	4b61      	ldr	r3, [pc, #388]	; (10d1c <main+0x88c>)
   10b98:	220c      	movs	r2, #12
   10b9a:	5e9b      	ldrsh	r3, [r3, r2]
   10b9c:	121b      	asrs	r3, r3, #8
   10b9e:	b2da      	uxtb	r2, r3
   10ba0:	4b5d      	ldr	r3, [pc, #372]	; (10d18 <main+0x888>)
   10ba2:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x16;
   10ba4:	4b5c      	ldr	r3, [pc, #368]	; (10d18 <main+0x888>)
   10ba6:	2216      	movs	r2, #22
   10ba8:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = (latest_vesc_vals.rpm & 0xFF);
   10baa:	4b5c      	ldr	r3, [pc, #368]	; (10d1c <main+0x88c>)
   10bac:	691b      	ldr	r3, [r3, #16]
   10bae:	b2da      	uxtb	r2, r3
   10bb0:	4b59      	ldr	r3, [pc, #356]	; (10d18 <main+0x888>)
   10bb2:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = (latest_vesc_vals.rpm & 0xFF00) >> 8;
   10bb4:	4b59      	ldr	r3, [pc, #356]	; (10d1c <main+0x88c>)
   10bb6:	691b      	ldr	r3, [r3, #16]
   10bb8:	121b      	asrs	r3, r3, #8
   10bba:	b2da      	uxtb	r2, r3
   10bbc:	4b56      	ldr	r3, [pc, #344]	; (10d18 <main+0x888>)
   10bbe:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = (latest_vesc_vals.rpm & 0xFF0000) >> 16;
   10bc0:	4b56      	ldr	r3, [pc, #344]	; (10d1c <main+0x88c>)
   10bc2:	691b      	ldr	r3, [r3, #16]
   10bc4:	141b      	asrs	r3, r3, #16
   10bc6:	b2da      	uxtb	r2, r3
   10bc8:	4b53      	ldr	r3, [pc, #332]	; (10d18 <main+0x888>)
   10bca:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_wait(&ble_usart, ble_write_buffer, 19);
   10bcc:	4952      	ldr	r1, [pc, #328]	; (10d18 <main+0x888>)
   10bce:	4b54      	ldr	r3, [pc, #336]	; (10d20 <main+0x890>)
   10bd0:	2213      	movs	r2, #19
   10bd2:	0018      	movs	r0, r3
   10bd4:	4b53      	ldr	r3, [pc, #332]	; (10d24 <main+0x894>)
   10bd6:	4798      	blx	r3
					break;
   10bd8:	e1e9      	b.n	10fae <main+0xb1e>
				case 1:
					ble_write_buffer[0] = 0x17;
   10bda:	4b4f      	ldr	r3, [pc, #316]	; (10d18 <main+0x888>)
   10bdc:	2217      	movs	r2, #23
   10bde:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = (latest_vesc_vals.amp_hours & 0xFF);
   10be0:	4b4e      	ldr	r3, [pc, #312]	; (10d1c <main+0x88c>)
   10be2:	699b      	ldr	r3, [r3, #24]
   10be4:	b2da      	uxtb	r2, r3
   10be6:	4b4c      	ldr	r3, [pc, #304]	; (10d18 <main+0x888>)
   10be8:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = (latest_vesc_vals.amp_hours & 0xFF00) >> 8;
   10bea:	4b4c      	ldr	r3, [pc, #304]	; (10d1c <main+0x88c>)
   10bec:	699b      	ldr	r3, [r3, #24]
   10bee:	121b      	asrs	r3, r3, #8
   10bf0:	b2da      	uxtb	r2, r3
   10bf2:	4b49      	ldr	r3, [pc, #292]	; (10d18 <main+0x888>)
   10bf4:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = (latest_vesc_vals.amp_hours & 0xFF0000) >> 16;
   10bf6:	4b49      	ldr	r3, [pc, #292]	; (10d1c <main+0x88c>)
   10bf8:	699b      	ldr	r3, [r3, #24]
   10bfa:	141b      	asrs	r3, r3, #16
   10bfc:	b2da      	uxtb	r2, r3
   10bfe:	4b46      	ldr	r3, [pc, #280]	; (10d18 <main+0x888>)
   10c00:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = 0x18;
   10c02:	4b45      	ldr	r3, [pc, #276]	; (10d18 <main+0x888>)
   10c04:	2218      	movs	r2, #24
   10c06:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = (latest_vesc_vals.amp_hours_charged & 0xFF);
   10c08:	4b44      	ldr	r3, [pc, #272]	; (10d1c <main+0x88c>)
   10c0a:	69db      	ldr	r3, [r3, #28]
   10c0c:	b2da      	uxtb	r2, r3
   10c0e:	4b42      	ldr	r3, [pc, #264]	; (10d18 <main+0x888>)
   10c10:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (latest_vesc_vals.amp_hours_charged & 0xFF00) >> 8;
   10c12:	4b42      	ldr	r3, [pc, #264]	; (10d1c <main+0x88c>)
   10c14:	69db      	ldr	r3, [r3, #28]
   10c16:	121b      	asrs	r3, r3, #8
   10c18:	b2da      	uxtb	r2, r3
   10c1a:	4b3f      	ldr	r3, [pc, #252]	; (10d18 <main+0x888>)
   10c1c:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = (latest_vesc_vals.amp_hours_charged & 0xFF0000) >> 16;
   10c1e:	4b3f      	ldr	r3, [pc, #252]	; (10d1c <main+0x88c>)
   10c20:	69db      	ldr	r3, [r3, #28]
   10c22:	141b      	asrs	r3, r3, #16
   10c24:	b2da      	uxtb	r2, r3
   10c26:	4b3c      	ldr	r3, [pc, #240]	; (10d18 <main+0x888>)
   10c28:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = 0x19;
   10c2a:	4b3b      	ldr	r3, [pc, #236]	; (10d18 <main+0x888>)
   10c2c:	2219      	movs	r2, #25
   10c2e:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = (latest_vesc_vals.watt_hours & 0xFF);
   10c30:	4b3a      	ldr	r3, [pc, #232]	; (10d1c <main+0x88c>)
   10c32:	6a1b      	ldr	r3, [r3, #32]
   10c34:	b2da      	uxtb	r2, r3
   10c36:	4b38      	ldr	r3, [pc, #224]	; (10d18 <main+0x888>)
   10c38:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (latest_vesc_vals.watt_hours & 0xFF00) >> 8;
   10c3a:	4b38      	ldr	r3, [pc, #224]	; (10d1c <main+0x88c>)
   10c3c:	6a1b      	ldr	r3, [r3, #32]
   10c3e:	121b      	asrs	r3, r3, #8
   10c40:	b2da      	uxtb	r2, r3
   10c42:	4b35      	ldr	r3, [pc, #212]	; (10d18 <main+0x888>)
   10c44:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (latest_vesc_vals.watt_hours & 0xFF0000) >> 16;
   10c46:	4b35      	ldr	r3, [pc, #212]	; (10d1c <main+0x88c>)
   10c48:	6a1b      	ldr	r3, [r3, #32]
   10c4a:	141b      	asrs	r3, r3, #16
   10c4c:	b2da      	uxtb	r2, r3
   10c4e:	4b32      	ldr	r3, [pc, #200]	; (10d18 <main+0x888>)
   10c50:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x1A;
   10c52:	4b31      	ldr	r3, [pc, #196]	; (10d18 <main+0x888>)
   10c54:	221a      	movs	r2, #26
   10c56:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (latest_vesc_vals.watt_hours_charged & 0xFF);
   10c58:	4b30      	ldr	r3, [pc, #192]	; (10d1c <main+0x88c>)
   10c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10c5c:	b2da      	uxtb	r2, r3
   10c5e:	4b2e      	ldr	r3, [pc, #184]	; (10d18 <main+0x888>)
   10c60:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (latest_vesc_vals.watt_hours_charged & 0xFF00) >> 8;
   10c62:	4b2e      	ldr	r3, [pc, #184]	; (10d1c <main+0x88c>)
   10c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10c66:	121b      	asrs	r3, r3, #8
   10c68:	b2da      	uxtb	r2, r3
   10c6a:	4b2b      	ldr	r3, [pc, #172]	; (10d18 <main+0x888>)
   10c6c:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = (latest_vesc_vals.watt_hours_charged & 0xFF0000) >> 16;
   10c6e:	4b2b      	ldr	r3, [pc, #172]	; (10d1c <main+0x88c>)
   10c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10c72:	141b      	asrs	r3, r3, #16
   10c74:	b2da      	uxtb	r2, r3
   10c76:	4b28      	ldr	r3, [pc, #160]	; (10d18 <main+0x888>)
   10c78:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x1B;
   10c7a:	4b27      	ldr	r3, [pc, #156]	; (10d18 <main+0x888>)
   10c7c:	221b      	movs	r2, #27
   10c7e:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = latest_vesc_vals.fault;
   10c80:	4b26      	ldr	r3, [pc, #152]	; (10d1c <main+0x88c>)
   10c82:	222c      	movs	r2, #44	; 0x2c
   10c84:	569b      	ldrsb	r3, [r3, r2]
   10c86:	b2da      	uxtb	r2, r3
   10c88:	4b23      	ldr	r3, [pc, #140]	; (10d18 <main+0x888>)
   10c8a:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = 0x21;
   10c8c:	4b22      	ldr	r3, [pc, #136]	; (10d18 <main+0x888>)
   10c8e:	2221      	movs	r2, #33	; 0x21
   10c90:	749a      	strb	r2, [r3, #18]
					ble_write_buffer[19] = remote_x;
   10c92:	4b25      	ldr	r3, [pc, #148]	; (10d28 <main+0x898>)
   10c94:	781a      	ldrb	r2, [r3, #0]
   10c96:	4b20      	ldr	r3, [pc, #128]	; (10d18 <main+0x888>)
   10c98:	74da      	strb	r2, [r3, #19]
					usart_write_buffer_wait(&ble_usart, ble_write_buffer, 20);
   10c9a:	491f      	ldr	r1, [pc, #124]	; (10d18 <main+0x888>)
   10c9c:	4b20      	ldr	r3, [pc, #128]	; (10d20 <main+0x890>)
   10c9e:	2214      	movs	r2, #20
   10ca0:	0018      	movs	r0, r3
   10ca2:	4b20      	ldr	r3, [pc, #128]	; (10d24 <main+0x894>)
   10ca4:	4798      	blx	r3
					break;
   10ca6:	e182      	b.n	10fae <main+0xb1e>
   10ca8:	200003c8 	.word	0x200003c8
   10cac:	200000c4 	.word	0x200000c4
   10cb0:	0001407d 	.word	0x0001407d
   10cb4:	200003cc 	.word	0x200003cc
   10cb8:	200000d0 	.word	0x200000d0
   10cbc:	000140a5 	.word	0x000140a5
   10cc0:	200000cc 	.word	0x200000cc
   10cc4:	200003d0 	.word	0x200003d0
   10cc8:	200000d8 	.word	0x200000d8
   10ccc:	200000d4 	.word	0x200000d4
   10cd0:	200003d4 	.word	0x200003d4
   10cd4:	200000c8 	.word	0x200000c8
   10cd8:	200000e0 	.word	0x200000e0
   10cdc:	200000dc 	.word	0x200000dc
   10ce0:	0000aee1 	.word	0x0000aee1
   10ce4:	00014e09 	.word	0x00014e09
   10ce8:	00016991 	.word	0x00016991
   10cec:	00014045 	.word	0x00014045
   10cf0:	3fe00000 	.word	0x3fe00000
   10cf4:	00014ee9 	.word	0x00014ee9
   10cf8:	000144b1 	.word	0x000144b1
   10cfc:	447a0000 	.word	0x447a0000
   10d00:	00014891 	.word	0x00014891
   10d04:	0001418d 	.word	0x0001418d
   10d08:	43b40000 	.word	0x43b40000
   10d0c:	00014ad1 	.word	0x00014ad1
   10d10:	200000e4 	.word	0x200000e4
   10d14:	200003e4 	.word	0x200003e4
   10d18:	20000910 	.word	0x20000910
   10d1c:	20000940 	.word	0x20000940
   10d20:	200004a0 	.word	0x200004a0
   10d24:	000063bd 	.word	0x000063bd
   10d28:	2000030b 	.word	0x2000030b
				case 2:
					ble_write_buffer[0] = 0x2E;
   10d2c:	4ba6      	ldr	r3, [pc, #664]	; (10fc8 <main+0xb38>)
   10d2e:	222e      	movs	r2, #46	; 0x2e
   10d30:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(heading*10) & 0xFF); // Heading
   10d32:	4ba6      	ldr	r3, [pc, #664]	; (10fcc <main+0xb3c>)
   10d34:	49a6      	ldr	r1, [pc, #664]	; (10fd0 <main+0xb40>)
   10d36:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10d38:	4798      	blx	r3
   10d3a:	1c03      	adds	r3, r0, #0
   10d3c:	1c1a      	adds	r2, r3, #0
   10d3e:	4ba5      	ldr	r3, [pc, #660]	; (10fd4 <main+0xb44>)
   10d40:	1c10      	adds	r0, r2, #0
   10d42:	4798      	blx	r3
   10d44:	0003      	movs	r3, r0
   10d46:	b29b      	uxth	r3, r3
   10d48:	b2da      	uxtb	r2, r3
   10d4a:	4b9f      	ldr	r3, [pc, #636]	; (10fc8 <main+0xb38>)
   10d4c:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(heading*10) & 0xFF00) >> 8; // Heading
   10d4e:	4b9f      	ldr	r3, [pc, #636]	; (10fcc <main+0xb3c>)
   10d50:	499f      	ldr	r1, [pc, #636]	; (10fd0 <main+0xb40>)
   10d52:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10d54:	4798      	blx	r3
   10d56:	1c03      	adds	r3, r0, #0
   10d58:	1c1a      	adds	r2, r3, #0
   10d5a:	4b9e      	ldr	r3, [pc, #632]	; (10fd4 <main+0xb44>)
   10d5c:	1c10      	adds	r0, r2, #0
   10d5e:	4798      	blx	r3
   10d60:	0003      	movs	r3, r0
   10d62:	b29b      	uxth	r3, r3
   10d64:	0a1b      	lsrs	r3, r3, #8
   10d66:	b29b      	uxth	r3, r3
   10d68:	b2da      	uxtb	r2, r3
   10d6a:	4b97      	ldr	r3, [pc, #604]	; (10fc8 <main+0xb38>)
   10d6c:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x22;
   10d6e:	4b96      	ldr	r3, [pc, #600]	; (10fc8 <main+0xb38>)
   10d70:	2222      	movs	r2, #34	; 0x22
   10d72:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = remote_y;
   10d74:	4b98      	ldr	r3, [pc, #608]	; (10fd8 <main+0xb48>)
   10d76:	781a      	ldrb	r2, [r3, #0]
   10d78:	4b93      	ldr	r3, [pc, #588]	; (10fc8 <main+0xb38>)
   10d7a:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = 0x23;
   10d7c:	4b92      	ldr	r3, [pc, #584]	; (10fc8 <main+0xb38>)
   10d7e:	2223      	movs	r2, #35	; 0x23
   10d80:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = (remote_btn_state | (REMOTE_TYPE << 1));
   10d82:	4b96      	ldr	r3, [pc, #600]	; (10fdc <main+0xb4c>)
   10d84:	781b      	ldrb	r3, [r3, #0]
   10d86:	005b      	lsls	r3, r3, #1
   10d88:	b25a      	sxtb	r2, r3
   10d8a:	4b95      	ldr	r3, [pc, #596]	; (10fe0 <main+0xb50>)
   10d8c:	781b      	ldrb	r3, [r3, #0]
   10d8e:	b25b      	sxtb	r3, r3
   10d90:	4313      	orrs	r3, r2
   10d92:	b25b      	sxtb	r3, r3
   10d94:	b2da      	uxtb	r2, r3
   10d96:	4b8c      	ldr	r3, [pc, #560]	; (10fc8 <main+0xb38>)
   10d98:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = 0x24;
   10d9a:	4b8b      	ldr	r3, [pc, #556]	; (10fc8 <main+0xb38>)
   10d9c:	2224      	movs	r2, #36	; 0x24
   10d9e:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = ((uint16_t)axKalman & 0xFF); // Accel X
   10da0:	4b90      	ldr	r3, [pc, #576]	; (10fe4 <main+0xb54>)
   10da2:	681a      	ldr	r2, [r3, #0]
   10da4:	4b8b      	ldr	r3, [pc, #556]	; (10fd4 <main+0xb44>)
   10da6:	1c10      	adds	r0, r2, #0
   10da8:	4798      	blx	r3
   10daa:	0003      	movs	r3, r0
   10dac:	b29b      	uxth	r3, r3
   10dae:	b2da      	uxtb	r2, r3
   10db0:	4b85      	ldr	r3, [pc, #532]	; (10fc8 <main+0xb38>)
   10db2:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = ((uint16_t)axKalman & 0xFF00) >> 8; // Accel X
   10db4:	4b8b      	ldr	r3, [pc, #556]	; (10fe4 <main+0xb54>)
   10db6:	681a      	ldr	r2, [r3, #0]
   10db8:	4b86      	ldr	r3, [pc, #536]	; (10fd4 <main+0xb44>)
   10dba:	1c10      	adds	r0, r2, #0
   10dbc:	4798      	blx	r3
   10dbe:	0003      	movs	r3, r0
   10dc0:	b29b      	uxth	r3, r3
   10dc2:	0a1b      	lsrs	r3, r3, #8
   10dc4:	b29b      	uxth	r3, r3
   10dc6:	b2da      	uxtb	r2, r3
   10dc8:	4b7f      	ldr	r3, [pc, #508]	; (10fc8 <main+0xb38>)
   10dca:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = 0x25;
   10dcc:	4b7e      	ldr	r3, [pc, #504]	; (10fc8 <main+0xb38>)
   10dce:	2225      	movs	r2, #37	; 0x25
   10dd0:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = ((uint16_t)ayKalman & 0xFF); // Accel Y
   10dd2:	4b85      	ldr	r3, [pc, #532]	; (10fe8 <main+0xb58>)
   10dd4:	681a      	ldr	r2, [r3, #0]
   10dd6:	4b7f      	ldr	r3, [pc, #508]	; (10fd4 <main+0xb44>)
   10dd8:	1c10      	adds	r0, r2, #0
   10dda:	4798      	blx	r3
   10ddc:	0003      	movs	r3, r0
   10dde:	b29b      	uxth	r3, r3
   10de0:	b2da      	uxtb	r2, r3
   10de2:	4b79      	ldr	r3, [pc, #484]	; (10fc8 <main+0xb38>)
   10de4:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = ((uint16_t)ayKalman & 0xFF00) >> 8; // Accel Y
   10de6:	4b80      	ldr	r3, [pc, #512]	; (10fe8 <main+0xb58>)
   10de8:	681a      	ldr	r2, [r3, #0]
   10dea:	4b7a      	ldr	r3, [pc, #488]	; (10fd4 <main+0xb44>)
   10dec:	1c10      	adds	r0, r2, #0
   10dee:	4798      	blx	r3
   10df0:	0003      	movs	r3, r0
   10df2:	b29b      	uxth	r3, r3
   10df4:	0a1b      	lsrs	r3, r3, #8
   10df6:	b29b      	uxth	r3, r3
   10df8:	b2da      	uxtb	r2, r3
   10dfa:	4b73      	ldr	r3, [pc, #460]	; (10fc8 <main+0xb38>)
   10dfc:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = 0x26;
   10dfe:	4b72      	ldr	r3, [pc, #456]	; (10fc8 <main+0xb38>)
   10e00:	2226      	movs	r2, #38	; 0x26
   10e02:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = ((uint16_t)azKalman & 0xFF); // Accel Z
   10e04:	4b79      	ldr	r3, [pc, #484]	; (10fec <main+0xb5c>)
   10e06:	681a      	ldr	r2, [r3, #0]
   10e08:	4b72      	ldr	r3, [pc, #456]	; (10fd4 <main+0xb44>)
   10e0a:	1c10      	adds	r0, r2, #0
   10e0c:	4798      	blx	r3
   10e0e:	0003      	movs	r3, r0
   10e10:	b29b      	uxth	r3, r3
   10e12:	b2da      	uxtb	r2, r3
   10e14:	4b6c      	ldr	r3, [pc, #432]	; (10fc8 <main+0xb38>)
   10e16:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = ((uint16_t)azKalman & 0xFF00) >> 8; // Accel Z
   10e18:	4b74      	ldr	r3, [pc, #464]	; (10fec <main+0xb5c>)
   10e1a:	681a      	ldr	r2, [r3, #0]
   10e1c:	4b6d      	ldr	r3, [pc, #436]	; (10fd4 <main+0xb44>)
   10e1e:	1c10      	adds	r0, r2, #0
   10e20:	4798      	blx	r3
   10e22:	0003      	movs	r3, r0
   10e24:	b29b      	uxth	r3, r3
   10e26:	0a1b      	lsrs	r3, r3, #8
   10e28:	b29b      	uxth	r3, r3
   10e2a:	b2da      	uxtb	r2, r3
   10e2c:	4b66      	ldr	r3, [pc, #408]	; (10fc8 <main+0xb38>)
   10e2e:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = 0x27;
   10e30:	4b65      	ldr	r3, [pc, #404]	; (10fc8 <main+0xb38>)
   10e32:	2227      	movs	r2, #39	; 0x27
   10e34:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((uint16_t)(gxKalman*10) & 0xFF); // Gyro X
   10e36:	4b6e      	ldr	r3, [pc, #440]	; (10ff0 <main+0xb60>)
   10e38:	681a      	ldr	r2, [r3, #0]
   10e3a:	4b64      	ldr	r3, [pc, #400]	; (10fcc <main+0xb3c>)
   10e3c:	4964      	ldr	r1, [pc, #400]	; (10fd0 <main+0xb40>)
   10e3e:	1c10      	adds	r0, r2, #0
   10e40:	4798      	blx	r3
   10e42:	1c03      	adds	r3, r0, #0
   10e44:	1c1a      	adds	r2, r3, #0
   10e46:	4b63      	ldr	r3, [pc, #396]	; (10fd4 <main+0xb44>)
   10e48:	1c10      	adds	r0, r2, #0
   10e4a:	4798      	blx	r3
   10e4c:	0003      	movs	r3, r0
   10e4e:	b29b      	uxth	r3, r3
   10e50:	b2da      	uxtb	r2, r3
   10e52:	4b5d      	ldr	r3, [pc, #372]	; (10fc8 <main+0xb38>)
   10e54:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = ((uint16_t)(gxKalman*10) & 0xFF00) >> 8; // Gyro X
   10e56:	4b66      	ldr	r3, [pc, #408]	; (10ff0 <main+0xb60>)
   10e58:	681a      	ldr	r2, [r3, #0]
   10e5a:	4b5c      	ldr	r3, [pc, #368]	; (10fcc <main+0xb3c>)
   10e5c:	495c      	ldr	r1, [pc, #368]	; (10fd0 <main+0xb40>)
   10e5e:	1c10      	adds	r0, r2, #0
   10e60:	4798      	blx	r3
   10e62:	1c03      	adds	r3, r0, #0
   10e64:	1c1a      	adds	r2, r3, #0
   10e66:	4b5b      	ldr	r3, [pc, #364]	; (10fd4 <main+0xb44>)
   10e68:	1c10      	adds	r0, r2, #0
   10e6a:	4798      	blx	r3
   10e6c:	0003      	movs	r3, r0
   10e6e:	b29b      	uxth	r3, r3
   10e70:	0a1b      	lsrs	r3, r3, #8
   10e72:	b29b      	uxth	r3, r3
   10e74:	b2da      	uxtb	r2, r3
   10e76:	4b54      	ldr	r3, [pc, #336]	; (10fc8 <main+0xb38>)
   10e78:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_wait(&ble_usart, ble_write_buffer, 19);
   10e7a:	4953      	ldr	r1, [pc, #332]	; (10fc8 <main+0xb38>)
   10e7c:	4b5d      	ldr	r3, [pc, #372]	; (10ff4 <main+0xb64>)
   10e7e:	2213      	movs	r2, #19
   10e80:	0018      	movs	r0, r3
   10e82:	4b5d      	ldr	r3, [pc, #372]	; (10ff8 <main+0xb68>)
   10e84:	4798      	blx	r3
					break;
   10e86:	e092      	b.n	10fae <main+0xb1e>
				case 3:
					ble_write_buffer[0] = 0x28;
   10e88:	4b4f      	ldr	r3, [pc, #316]	; (10fc8 <main+0xb38>)
   10e8a:	2228      	movs	r2, #40	; 0x28
   10e8c:	701a      	strb	r2, [r3, #0]
					ble_write_buffer[1] = ((uint16_t)(gyKalman*10) & 0xFF); // Gyro Y
   10e8e:	4b5b      	ldr	r3, [pc, #364]	; (10ffc <main+0xb6c>)
   10e90:	681a      	ldr	r2, [r3, #0]
   10e92:	4b4e      	ldr	r3, [pc, #312]	; (10fcc <main+0xb3c>)
   10e94:	494e      	ldr	r1, [pc, #312]	; (10fd0 <main+0xb40>)
   10e96:	1c10      	adds	r0, r2, #0
   10e98:	4798      	blx	r3
   10e9a:	1c03      	adds	r3, r0, #0
   10e9c:	1c1a      	adds	r2, r3, #0
   10e9e:	4b4d      	ldr	r3, [pc, #308]	; (10fd4 <main+0xb44>)
   10ea0:	1c10      	adds	r0, r2, #0
   10ea2:	4798      	blx	r3
   10ea4:	0003      	movs	r3, r0
   10ea6:	b29b      	uxth	r3, r3
   10ea8:	b2da      	uxtb	r2, r3
   10eaa:	4b47      	ldr	r3, [pc, #284]	; (10fc8 <main+0xb38>)
   10eac:	705a      	strb	r2, [r3, #1]
					ble_write_buffer[2] = ((uint16_t)(gyKalman*10) & 0xFF00) >> 8; // Gyro Y
   10eae:	4b53      	ldr	r3, [pc, #332]	; (10ffc <main+0xb6c>)
   10eb0:	681a      	ldr	r2, [r3, #0]
   10eb2:	4b46      	ldr	r3, [pc, #280]	; (10fcc <main+0xb3c>)
   10eb4:	4946      	ldr	r1, [pc, #280]	; (10fd0 <main+0xb40>)
   10eb6:	1c10      	adds	r0, r2, #0
   10eb8:	4798      	blx	r3
   10eba:	1c03      	adds	r3, r0, #0
   10ebc:	1c1a      	adds	r2, r3, #0
   10ebe:	4b45      	ldr	r3, [pc, #276]	; (10fd4 <main+0xb44>)
   10ec0:	1c10      	adds	r0, r2, #0
   10ec2:	4798      	blx	r3
   10ec4:	0003      	movs	r3, r0
   10ec6:	b29b      	uxth	r3, r3
   10ec8:	0a1b      	lsrs	r3, r3, #8
   10eca:	b29b      	uxth	r3, r3
   10ecc:	b2da      	uxtb	r2, r3
   10ece:	4b3e      	ldr	r3, [pc, #248]	; (10fc8 <main+0xb38>)
   10ed0:	709a      	strb	r2, [r3, #2]
					ble_write_buffer[3] = 0x29;
   10ed2:	4b3d      	ldr	r3, [pc, #244]	; (10fc8 <main+0xb38>)
   10ed4:	2229      	movs	r2, #41	; 0x29
   10ed6:	70da      	strb	r2, [r3, #3]
					ble_write_buffer[4] = ((uint16_t)(gzKalman*10) & 0xFF); // Gyro Z
   10ed8:	4b49      	ldr	r3, [pc, #292]	; (11000 <main+0xb70>)
   10eda:	681a      	ldr	r2, [r3, #0]
   10edc:	4b3b      	ldr	r3, [pc, #236]	; (10fcc <main+0xb3c>)
   10ede:	493c      	ldr	r1, [pc, #240]	; (10fd0 <main+0xb40>)
   10ee0:	1c10      	adds	r0, r2, #0
   10ee2:	4798      	blx	r3
   10ee4:	1c03      	adds	r3, r0, #0
   10ee6:	1c1a      	adds	r2, r3, #0
   10ee8:	4b3a      	ldr	r3, [pc, #232]	; (10fd4 <main+0xb44>)
   10eea:	1c10      	adds	r0, r2, #0
   10eec:	4798      	blx	r3
   10eee:	0003      	movs	r3, r0
   10ef0:	b29b      	uxth	r3, r3
   10ef2:	b2da      	uxtb	r2, r3
   10ef4:	4b34      	ldr	r3, [pc, #208]	; (10fc8 <main+0xb38>)
   10ef6:	711a      	strb	r2, [r3, #4]
					ble_write_buffer[5] = ((uint16_t)(gzKalman*10) & 0xFF00) >> 8; // Gyro Z
   10ef8:	4b41      	ldr	r3, [pc, #260]	; (11000 <main+0xb70>)
   10efa:	681a      	ldr	r2, [r3, #0]
   10efc:	4b33      	ldr	r3, [pc, #204]	; (10fcc <main+0xb3c>)
   10efe:	4934      	ldr	r1, [pc, #208]	; (10fd0 <main+0xb40>)
   10f00:	1c10      	adds	r0, r2, #0
   10f02:	4798      	blx	r3
   10f04:	1c03      	adds	r3, r0, #0
   10f06:	1c1a      	adds	r2, r3, #0
   10f08:	4b32      	ldr	r3, [pc, #200]	; (10fd4 <main+0xb44>)
   10f0a:	1c10      	adds	r0, r2, #0
   10f0c:	4798      	blx	r3
   10f0e:	0003      	movs	r3, r0
   10f10:	b29b      	uxth	r3, r3
   10f12:	0a1b      	lsrs	r3, r3, #8
   10f14:	b29b      	uxth	r3, r3
   10f16:	b2da      	uxtb	r2, r3
   10f18:	4b2b      	ldr	r3, [pc, #172]	; (10fc8 <main+0xb38>)
   10f1a:	715a      	strb	r2, [r3, #5]
					ble_write_buffer[6] = 0x2A;
   10f1c:	4b2a      	ldr	r3, [pc, #168]	; (10fc8 <main+0xb38>)
   10f1e:	222a      	movs	r2, #42	; 0x2a
   10f20:	719a      	strb	r2, [r3, #6]
					ble_write_buffer[7] = ((mx) & 0xFF); // Compass X
   10f22:	4b38      	ldr	r3, [pc, #224]	; (11004 <main+0xb74>)
   10f24:	2200      	movs	r2, #0
   10f26:	5e9b      	ldrsh	r3, [r3, r2]
   10f28:	b2da      	uxtb	r2, r3
   10f2a:	4b27      	ldr	r3, [pc, #156]	; (10fc8 <main+0xb38>)
   10f2c:	71da      	strb	r2, [r3, #7]
					ble_write_buffer[8] = (mx & 0xFF00) >> 8; // Compass X
   10f2e:	4b35      	ldr	r3, [pc, #212]	; (11004 <main+0xb74>)
   10f30:	2200      	movs	r2, #0
   10f32:	5e9b      	ldrsh	r3, [r3, r2]
   10f34:	121b      	asrs	r3, r3, #8
   10f36:	b2da      	uxtb	r2, r3
   10f38:	4b23      	ldr	r3, [pc, #140]	; (10fc8 <main+0xb38>)
   10f3a:	721a      	strb	r2, [r3, #8]
					ble_write_buffer[9] = 0x2B;
   10f3c:	4b22      	ldr	r3, [pc, #136]	; (10fc8 <main+0xb38>)
   10f3e:	222b      	movs	r2, #43	; 0x2b
   10f40:	725a      	strb	r2, [r3, #9]
					ble_write_buffer[10] = (my & 0xFF); // Compass Y
   10f42:	4b31      	ldr	r3, [pc, #196]	; (11008 <main+0xb78>)
   10f44:	2200      	movs	r2, #0
   10f46:	5e9b      	ldrsh	r3, [r3, r2]
   10f48:	b2da      	uxtb	r2, r3
   10f4a:	4b1f      	ldr	r3, [pc, #124]	; (10fc8 <main+0xb38>)
   10f4c:	729a      	strb	r2, [r3, #10]
					ble_write_buffer[11] = (my & 0xFF00) >> 8; // Compass Y
   10f4e:	4b2e      	ldr	r3, [pc, #184]	; (11008 <main+0xb78>)
   10f50:	2200      	movs	r2, #0
   10f52:	5e9b      	ldrsh	r3, [r3, r2]
   10f54:	121b      	asrs	r3, r3, #8
   10f56:	b2da      	uxtb	r2, r3
   10f58:	4b1b      	ldr	r3, [pc, #108]	; (10fc8 <main+0xb38>)
   10f5a:	72da      	strb	r2, [r3, #11]
					ble_write_buffer[12] = 0x2C;
   10f5c:	4b1a      	ldr	r3, [pc, #104]	; (10fc8 <main+0xb38>)
   10f5e:	222c      	movs	r2, #44	; 0x2c
   10f60:	731a      	strb	r2, [r3, #12]
					ble_write_buffer[13] = (mz & 0xFF); // Compass Z
   10f62:	4b2a      	ldr	r3, [pc, #168]	; (1100c <main+0xb7c>)
   10f64:	2200      	movs	r2, #0
   10f66:	5e9b      	ldrsh	r3, [r3, r2]
   10f68:	b2da      	uxtb	r2, r3
   10f6a:	4b17      	ldr	r3, [pc, #92]	; (10fc8 <main+0xb38>)
   10f6c:	735a      	strb	r2, [r3, #13]
					ble_write_buffer[14] = (mz & 0xFF00) >> 8; // Compass Z
   10f6e:	4b27      	ldr	r3, [pc, #156]	; (1100c <main+0xb7c>)
   10f70:	2200      	movs	r2, #0
   10f72:	5e9b      	ldrsh	r3, [r3, r2]
   10f74:	121b      	asrs	r3, r3, #8
   10f76:	b2da      	uxtb	r2, r3
   10f78:	4b13      	ldr	r3, [pc, #76]	; (10fc8 <main+0xb38>)
   10f7a:	739a      	strb	r2, [r3, #14]
					ble_write_buffer[15] = 0x2D;
   10f7c:	4b12      	ldr	r3, [pc, #72]	; (10fc8 <main+0xb38>)
   10f7e:	222d      	movs	r2, #45	; 0x2d
   10f80:	73da      	strb	r2, [r3, #15]
					ble_write_buffer[16] = ((int)(light_sens) & 0xFF); // Light Sensor
   10f82:	4b23      	ldr	r3, [pc, #140]	; (11010 <main+0xb80>)
   10f84:	881b      	ldrh	r3, [r3, #0]
   10f86:	b2da      	uxtb	r2, r3
   10f88:	4b0f      	ldr	r3, [pc, #60]	; (10fc8 <main+0xb38>)
   10f8a:	741a      	strb	r2, [r3, #16]
					ble_write_buffer[17] = ((int)(light_sens) & 0xFF00) >> 8; // Light Sensor
   10f8c:	4b20      	ldr	r3, [pc, #128]	; (11010 <main+0xb80>)
   10f8e:	881b      	ldrh	r3, [r3, #0]
   10f90:	0a1b      	lsrs	r3, r3, #8
   10f92:	b29b      	uxth	r3, r3
   10f94:	b2da      	uxtb	r2, r3
   10f96:	4b0c      	ldr	r3, [pc, #48]	; (10fc8 <main+0xb38>)
   10f98:	745a      	strb	r2, [r3, #17]
					ble_write_buffer[18] = 0xDE;
   10f9a:	4b0b      	ldr	r3, [pc, #44]	; (10fc8 <main+0xb38>)
   10f9c:	22de      	movs	r2, #222	; 0xde
   10f9e:	749a      	strb	r2, [r3, #18]
					usart_write_buffer_wait(&ble_usart, ble_write_buffer, 19);
   10fa0:	4909      	ldr	r1, [pc, #36]	; (10fc8 <main+0xb38>)
   10fa2:	4b14      	ldr	r3, [pc, #80]	; (10ff4 <main+0xb64>)
   10fa4:	2213      	movs	r2, #19
   10fa6:	0018      	movs	r0, r3
   10fa8:	4b13      	ldr	r3, [pc, #76]	; (10ff8 <main+0xb68>)
   10faa:	4798      	blx	r3
					break;
   10fac:	46c0      	nop			; (mov r8, r8)
			}
			BLE_TX_INDEX++;
   10fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10fb0:	3301      	adds	r3, #1
   10fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(BLE_TX_INDEX > 3)
   10fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10fb6:	2b03      	cmp	r3, #3
   10fb8:	dd01      	ble.n	10fbe <main+0xb2e>
				BLE_TX_INDEX = 0;
   10fba:	2300      	movs	r3, #0
   10fbc:	63fb      	str	r3, [r7, #60]	; 0x3c

			BLE_TX_TIME = millis(); // Placed at end of transmit to provide accurate message timing
   10fbe:	4b15      	ldr	r3, [pc, #84]	; (11014 <main+0xb84>)
   10fc0:	4798      	blx	r3
   10fc2:	0003      	movs	r3, r0
   10fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   10fc6:	e04a      	b.n	1105e <main+0xbce>
   10fc8:	20000910 	.word	0x20000910
   10fcc:	00014891 	.word	0x00014891
   10fd0:	41200000 	.word	0x41200000
   10fd4:	00014121 	.word	0x00014121
   10fd8:	2000030a 	.word	0x2000030a
   10fdc:	200000b0 	.word	0x200000b0
   10fe0:	2000030c 	.word	0x2000030c
   10fe4:	200003c0 	.word	0x200003c0
   10fe8:	200003c4 	.word	0x200003c4
   10fec:	200003c8 	.word	0x200003c8
   10ff0:	200003cc 	.word	0x200003cc
   10ff4:	200004a0 	.word	0x200004a0
   10ff8:	000063bd 	.word	0x000063bd
   10ffc:	200003d0 	.word	0x200003d0
   11000:	200003d4 	.word	0x200003d4
   11004:	200002f0 	.word	0x200002f0
   11008:	200002f2 	.word	0x200002f2
   1100c:	200002f4 	.word	0x200002f4
   11010:	200003b2 	.word	0x200003b2
   11014:	0000aee1 	.word	0x0000aee1
		}
		else
		{
			// Use a dummy delay that mimics the delay of the BLE send
			// commands to keep the timing of the light sections the same
			while((millis()-BLE_DUMMY_TIME) < BLE_TX_DELAY + (1.0/BLE_BAUD)*20.0){}
   11018:	46c0      	nop			; (mov r8, r8)
   1101a:	4bf2      	ldr	r3, [pc, #968]	; (113e4 <main+0xf54>)
   1101c:	4798      	blx	r3
   1101e:	0002      	movs	r2, r0
   11020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11022:	1ad2      	subs	r2, r2, r3
   11024:	4bf0      	ldr	r3, [pc, #960]	; (113e8 <main+0xf58>)
   11026:	0010      	movs	r0, r2
   11028:	4798      	blx	r3
   1102a:	0005      	movs	r5, r0
   1102c:	000e      	movs	r6, r1
   1102e:	231e      	movs	r3, #30
   11030:	18fb      	adds	r3, r7, r3
   11032:	881a      	ldrh	r2, [r3, #0]
   11034:	4bed      	ldr	r3, [pc, #948]	; (113ec <main+0xf5c>)
   11036:	0010      	movs	r0, r2
   11038:	4798      	blx	r3
   1103a:	4ced      	ldr	r4, [pc, #948]	; (113f0 <main+0xf60>)
   1103c:	4aed      	ldr	r2, [pc, #948]	; (113f4 <main+0xf64>)
   1103e:	4bee      	ldr	r3, [pc, #952]	; (113f8 <main+0xf68>)
   11040:	47a0      	blx	r4
   11042:	0003      	movs	r3, r0
   11044:	000c      	movs	r4, r1
   11046:	001a      	movs	r2, r3
   11048:	0023      	movs	r3, r4
   1104a:	4cec      	ldr	r4, [pc, #944]	; (113fc <main+0xf6c>)
   1104c:	0028      	movs	r0, r5
   1104e:	0031      	movs	r1, r6
   11050:	47a0      	blx	r4
   11052:	1e03      	subs	r3, r0, #0
   11054:	d1e1      	bne.n	1101a <main+0xb8a>
			BLE_DUMMY_TIME = millis();
   11056:	4be3      	ldr	r3, [pc, #908]	; (113e4 <main+0xf54>)
   11058:	4798      	blx	r3
   1105a:	0003      	movs	r3, r0
   1105c:	637b      	str	r3, [r7, #52]	; 0x34
		}

		
		////////////////////////////   Handle Limits Request   ////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LIMITS)
   1105e:	4be8      	ldr	r3, [pc, #928]	; (11400 <main+0xf70>)
   11060:	781b      	ldrb	r3, [r3, #0]
   11062:	2b00      	cmp	r3, #0
   11064:	d100      	bne.n	11068 <main+0xbd8>
   11066:	e12d      	b.n	112c4 <main+0xe34>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11068:	46c0      	nop			; (mov r8, r8)
   1106a:	4bde      	ldr	r3, [pc, #888]	; (113e4 <main+0xf54>)
   1106c:	4798      	blx	r3
   1106e:	0002      	movs	r2, r0
   11070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11072:	1ad3      	subs	r3, r2, r3
   11074:	221e      	movs	r2, #30
   11076:	18ba      	adds	r2, r7, r2
   11078:	8812      	ldrh	r2, [r2, #0]
   1107a:	0052      	lsls	r2, r2, #1
   1107c:	4293      	cmp	r3, r2
   1107e:	d3f4      	bcc.n	1106a <main+0xbda>
			BLE_TX_TIME = millis();
   11080:	4bd8      	ldr	r3, [pc, #864]	; (113e4 <main+0xf54>)
   11082:	4798      	blx	r3
   11084:	0003      	movs	r3, r0
   11086:	63bb      	str	r3, [r7, #56]	; 0x38

			ble_write_buffer[0] = 0x41;
   11088:	4bde      	ldr	r3, [pc, #888]	; (11404 <main+0xf74>)
   1108a:	2241      	movs	r2, #65	; 0x41
   1108c:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.motor_current_max;
   1108e:	4bde      	ldr	r3, [pc, #888]	; (11408 <main+0xf78>)
   11090:	681b      	ldr	r3, [r3, #0]
   11092:	b2da      	uxtb	r2, r3
   11094:	4bdb      	ldr	r3, [pc, #876]	; (11404 <main+0xf74>)
   11096:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x42;
   11098:	4bda      	ldr	r3, [pc, #872]	; (11404 <main+0xf74>)
   1109a:	2242      	movs	r2, #66	; 0x42
   1109c:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.motor_current_min;
   1109e:	4bda      	ldr	r3, [pc, #872]	; (11408 <main+0xf78>)
   110a0:	685b      	ldr	r3, [r3, #4]
   110a2:	b2da      	uxtb	r2, r3
   110a4:	4bd7      	ldr	r3, [pc, #860]	; (11404 <main+0xf74>)
   110a6:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x43;
   110a8:	4bd6      	ldr	r3, [pc, #856]	; (11404 <main+0xf74>)
   110aa:	2243      	movs	r2, #67	; 0x43
   110ac:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.input_current_max;
   110ae:	4bd6      	ldr	r3, [pc, #856]	; (11408 <main+0xf78>)
   110b0:	689b      	ldr	r3, [r3, #8]
   110b2:	b2da      	uxtb	r2, r3
   110b4:	4bd3      	ldr	r3, [pc, #844]	; (11404 <main+0xf74>)
   110b6:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x44;
   110b8:	4bd2      	ldr	r3, [pc, #840]	; (11404 <main+0xf74>)
   110ba:	2244      	movs	r2, #68	; 0x44
   110bc:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.input_current_min;
   110be:	4bd2      	ldr	r3, [pc, #840]	; (11408 <main+0xf78>)
   110c0:	68db      	ldr	r3, [r3, #12]
   110c2:	b2da      	uxtb	r2, r3
   110c4:	4bcf      	ldr	r3, [pc, #828]	; (11404 <main+0xf74>)
   110c6:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x45;
   110c8:	4bce      	ldr	r3, [pc, #824]	; (11404 <main+0xf74>)
   110ca:	2245      	movs	r2, #69	; 0x45
   110cc:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.abs_current_max;
   110ce:	4bce      	ldr	r3, [pc, #824]	; (11408 <main+0xf78>)
   110d0:	691b      	ldr	r3, [r3, #16]
   110d2:	b2da      	uxtb	r2, r3
   110d4:	4bcb      	ldr	r3, [pc, #812]	; (11404 <main+0xf74>)
   110d6:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x46;
   110d8:	4bca      	ldr	r3, [pc, #808]	; (11404 <main+0xf74>)
   110da:	2246      	movs	r2, #70	; 0x46
   110dc:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.max_vin;
   110de:	4bca      	ldr	r3, [pc, #808]	; (11408 <main+0xf78>)
   110e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   110e2:	b2da      	uxtb	r2, r3
   110e4:	4bc7      	ldr	r3, [pc, #796]	; (11404 <main+0xf74>)
   110e6:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   110e8:	49c6      	ldr	r1, [pc, #792]	; (11404 <main+0xf74>)
   110ea:	4bc8      	ldr	r3, [pc, #800]	; (1140c <main+0xf7c>)
   110ec:	220c      	movs	r2, #12
   110ee:	0018      	movs	r0, r3
   110f0:	4bc7      	ldr	r3, [pc, #796]	; (11410 <main+0xf80>)
   110f2:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   110f4:	46c0      	nop			; (mov r8, r8)
   110f6:	4bbb      	ldr	r3, [pc, #748]	; (113e4 <main+0xf54>)
   110f8:	4798      	blx	r3
   110fa:	0002      	movs	r2, r0
   110fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   110fe:	1ad3      	subs	r3, r2, r3
   11100:	221e      	movs	r2, #30
   11102:	18ba      	adds	r2, r7, r2
   11104:	8812      	ldrh	r2, [r2, #0]
   11106:	0052      	lsls	r2, r2, #1
   11108:	4293      	cmp	r3, r2
   1110a:	d3f4      	bcc.n	110f6 <main+0xc66>
			BLE_TX_TIME = millis();
   1110c:	4bb5      	ldr	r3, [pc, #724]	; (113e4 <main+0xf54>)
   1110e:	4798      	blx	r3
   11110:	0003      	movs	r3, r0
   11112:	63bb      	str	r3, [r7, #56]	; 0x38

			ble_write_buffer[0] = 0x48;
   11114:	4bbb      	ldr	r3, [pc, #748]	; (11404 <main+0xf74>)
   11116:	2248      	movs	r2, #72	; 0x48
   11118:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.battery_cut_start;
   1111a:	4bbb      	ldr	r3, [pc, #748]	; (11408 <main+0xf78>)
   1111c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1111e:	4bbd      	ldr	r3, [pc, #756]	; (11414 <main+0xf84>)
   11120:	1c10      	adds	r0, r2, #0
   11122:	4798      	blx	r3
   11124:	0003      	movs	r3, r0
   11126:	b2da      	uxtb	r2, r3
   11128:	4bb6      	ldr	r3, [pc, #728]	; (11404 <main+0xf74>)
   1112a:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x49;
   1112c:	4bb5      	ldr	r3, [pc, #724]	; (11404 <main+0xf74>)
   1112e:	2249      	movs	r2, #73	; 0x49
   11130:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.battery_cut_end;
   11132:	4bb5      	ldr	r3, [pc, #724]	; (11408 <main+0xf78>)
   11134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   11136:	4bb7      	ldr	r3, [pc, #732]	; (11414 <main+0xf84>)
   11138:	1c10      	adds	r0, r2, #0
   1113a:	4798      	blx	r3
   1113c:	0003      	movs	r3, r0
   1113e:	b2da      	uxtb	r2, r3
   11140:	4bb0      	ldr	r3, [pc, #704]	; (11404 <main+0xf74>)
   11142:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4A;
   11144:	4baf      	ldr	r3, [pc, #700]	; (11404 <main+0xf74>)
   11146:	224a      	movs	r2, #74	; 0x4a
   11148:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (mcconf_limits.max_erpm & 0xFF);
   1114a:	4baf      	ldr	r3, [pc, #700]	; (11408 <main+0xf78>)
   1114c:	699b      	ldr	r3, [r3, #24]
   1114e:	b2da      	uxtb	r2, r3
   11150:	4bac      	ldr	r3, [pc, #688]	; (11404 <main+0xf74>)
   11152:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (mcconf_limits.max_erpm & 0xFF00) >> 8;
   11154:	4bac      	ldr	r3, [pc, #688]	; (11408 <main+0xf78>)
   11156:	699b      	ldr	r3, [r3, #24]
   11158:	121b      	asrs	r3, r3, #8
   1115a:	b2da      	uxtb	r2, r3
   1115c:	4ba9      	ldr	r3, [pc, #676]	; (11404 <main+0xf74>)
   1115e:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (mcconf_limits.max_erpm & 0xFF0000) >> 16;
   11160:	4ba9      	ldr	r3, [pc, #676]	; (11408 <main+0xf78>)
   11162:	699b      	ldr	r3, [r3, #24]
   11164:	141b      	asrs	r3, r3, #16
   11166:	b2da      	uxtb	r2, r3
   11168:	4ba6      	ldr	r3, [pc, #664]	; (11404 <main+0xf74>)
   1116a:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4B;
   1116c:	4ba5      	ldr	r3, [pc, #660]	; (11404 <main+0xf74>)
   1116e:	224b      	movs	r2, #75	; 0x4b
   11170:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (mcconf_limits.min_erpm & 0xFF);
   11172:	4ba5      	ldr	r3, [pc, #660]	; (11408 <main+0xf78>)
   11174:	695b      	ldr	r3, [r3, #20]
   11176:	b2da      	uxtb	r2, r3
   11178:	4ba2      	ldr	r3, [pc, #648]	; (11404 <main+0xf74>)
   1117a:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (mcconf_limits.min_erpm & 0xFF00) >> 8;
   1117c:	4ba2      	ldr	r3, [pc, #648]	; (11408 <main+0xf78>)
   1117e:	695b      	ldr	r3, [r3, #20]
   11180:	121b      	asrs	r3, r3, #8
   11182:	b2da      	uxtb	r2, r3
   11184:	4b9f      	ldr	r3, [pc, #636]	; (11404 <main+0xf74>)
   11186:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (mcconf_limits.min_erpm & 0xFF0000) >> 16;
   11188:	4b9f      	ldr	r3, [pc, #636]	; (11408 <main+0xf78>)
   1118a:	695b      	ldr	r3, [r3, #20]
   1118c:	141b      	asrs	r3, r3, #16
   1118e:	b2da      	uxtb	r2, r3
   11190:	4b9c      	ldr	r3, [pc, #624]	; (11404 <main+0xf74>)
   11192:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   11194:	499b      	ldr	r1, [pc, #620]	; (11404 <main+0xf74>)
   11196:	4b9d      	ldr	r3, [pc, #628]	; (1140c <main+0xf7c>)
   11198:	220c      	movs	r2, #12
   1119a:	0018      	movs	r0, r3
   1119c:	4b9c      	ldr	r3, [pc, #624]	; (11410 <main+0xf80>)
   1119e:	4798      	blx	r3

			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   111a0:	46c0      	nop			; (mov r8, r8)
   111a2:	4b90      	ldr	r3, [pc, #576]	; (113e4 <main+0xf54>)
   111a4:	4798      	blx	r3
   111a6:	0002      	movs	r2, r0
   111a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   111aa:	1ad3      	subs	r3, r2, r3
   111ac:	221e      	movs	r2, #30
   111ae:	18ba      	adds	r2, r7, r2
   111b0:	8812      	ldrh	r2, [r2, #0]
   111b2:	0052      	lsls	r2, r2, #1
   111b4:	4293      	cmp	r3, r2
   111b6:	d3f4      	bcc.n	111a2 <main+0xd12>
			BLE_TX_TIME = millis();
   111b8:	4b8a      	ldr	r3, [pc, #552]	; (113e4 <main+0xf54>)
   111ba:	4798      	blx	r3
   111bc:	0003      	movs	r3, r0
   111be:	63bb      	str	r3, [r7, #56]	; 0x38

			ble_write_buffer[0] = 0x4C;
   111c0:	4b90      	ldr	r3, [pc, #576]	; (11404 <main+0xf74>)
   111c2:	224c      	movs	r2, #76	; 0x4c
   111c4:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((mcconf_limits.max_erpm_fbrake) & 0xFF);
   111c6:	4b90      	ldr	r3, [pc, #576]	; (11408 <main+0xf78>)
   111c8:	69db      	ldr	r3, [r3, #28]
   111ca:	b2da      	uxtb	r2, r3
   111cc:	4b8d      	ldr	r3, [pc, #564]	; (11404 <main+0xf74>)
   111ce:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ((mcconf_limits.max_erpm_fbrake) & 0xFF00) >> 8;
   111d0:	4b8d      	ldr	r3, [pc, #564]	; (11408 <main+0xf78>)
   111d2:	69db      	ldr	r3, [r3, #28]
   111d4:	121b      	asrs	r3, r3, #8
   111d6:	b2da      	uxtb	r2, r3
   111d8:	4b8a      	ldr	r3, [pc, #552]	; (11404 <main+0xf74>)
   111da:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((mcconf_limits.max_erpm_fbrake) & 0xFF0000) >> 16;
   111dc:	4b8a      	ldr	r3, [pc, #552]	; (11408 <main+0xf78>)
   111de:	69db      	ldr	r3, [r3, #28]
   111e0:	141b      	asrs	r3, r3, #16
   111e2:	b2da      	uxtb	r2, r3
   111e4:	4b87      	ldr	r3, [pc, #540]	; (11404 <main+0xf74>)
   111e6:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x4D;
   111e8:	4b86      	ldr	r3, [pc, #536]	; (11404 <main+0xf74>)
   111ea:	224d      	movs	r2, #77	; 0x4d
   111ec:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF);
   111ee:	4b86      	ldr	r3, [pc, #536]	; (11408 <main+0xf78>)
   111f0:	6a1b      	ldr	r3, [r3, #32]
   111f2:	b2da      	uxtb	r2, r3
   111f4:	4b83      	ldr	r3, [pc, #524]	; (11404 <main+0xf74>)
   111f6:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF00) >> 8;
   111f8:	4b83      	ldr	r3, [pc, #524]	; (11408 <main+0xf78>)
   111fa:	6a1b      	ldr	r3, [r3, #32]
   111fc:	121b      	asrs	r3, r3, #8
   111fe:	b2da      	uxtb	r2, r3
   11200:	4b80      	ldr	r3, [pc, #512]	; (11404 <main+0xf74>)
   11202:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((mcconf_limits.max_erpm_fbrake_cc) & 0xFF0000) >> 16;
   11204:	4b80      	ldr	r3, [pc, #512]	; (11408 <main+0xf78>)
   11206:	6a1b      	ldr	r3, [r3, #32]
   11208:	141b      	asrs	r3, r3, #16
   1120a:	b2da      	uxtb	r2, r3
   1120c:	4b7d      	ldr	r3, [pc, #500]	; (11404 <main+0xf74>)
   1120e:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x4E;
   11210:	4b7c      	ldr	r3, [pc, #496]	; (11404 <main+0xf74>)
   11212:	224e      	movs	r2, #78	; 0x4e
   11214:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.temp_fet_start;
   11216:	4b7c      	ldr	r3, [pc, #496]	; (11408 <main+0xf78>)
   11218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1121a:	b2da      	uxtb	r2, r3
   1121c:	4b79      	ldr	r3, [pc, #484]	; (11404 <main+0xf74>)
   1121e:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x4F;
   11220:	4b78      	ldr	r3, [pc, #480]	; (11404 <main+0xf74>)
   11222:	224f      	movs	r2, #79	; 0x4f
   11224:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = mcconf_limits.temp_fet_end;
   11226:	4b78      	ldr	r3, [pc, #480]	; (11408 <main+0xf78>)
   11228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1122a:	b2da      	uxtb	r2, r3
   1122c:	4b75      	ldr	r3, [pc, #468]	; (11404 <main+0xf74>)
   1122e:	72da      	strb	r2, [r3, #11]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 12);
   11230:	4974      	ldr	r1, [pc, #464]	; (11404 <main+0xf74>)
   11232:	4b76      	ldr	r3, [pc, #472]	; (1140c <main+0xf7c>)
   11234:	220c      	movs	r2, #12
   11236:	0018      	movs	r0, r3
   11238:	4b75      	ldr	r3, [pc, #468]	; (11410 <main+0xf80>)
   1123a:	4798      	blx	r3

			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   1123c:	46c0      	nop			; (mov r8, r8)
   1123e:	4b69      	ldr	r3, [pc, #420]	; (113e4 <main+0xf54>)
   11240:	4798      	blx	r3
   11242:	0002      	movs	r2, r0
   11244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11246:	1ad3      	subs	r3, r2, r3
   11248:	221e      	movs	r2, #30
   1124a:	18ba      	adds	r2, r7, r2
   1124c:	8812      	ldrh	r2, [r2, #0]
   1124e:	0052      	lsls	r2, r2, #1
   11250:	4293      	cmp	r3, r2
   11252:	d3f4      	bcc.n	1123e <main+0xdae>
			BLE_TX_TIME = millis();
   11254:	4b63      	ldr	r3, [pc, #396]	; (113e4 <main+0xf54>)
   11256:	4798      	blx	r3
   11258:	0003      	movs	r3, r0
   1125a:	63bb      	str	r3, [r7, #56]	; 0x38

			ble_write_buffer[0] = 0x50;
   1125c:	4b69      	ldr	r3, [pc, #420]	; (11404 <main+0xf74>)
   1125e:	2250      	movs	r2, #80	; 0x50
   11260:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = mcconf_limits.temp_motor_start;
   11262:	4b69      	ldr	r3, [pc, #420]	; (11408 <main+0xf78>)
   11264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   11266:	b2da      	uxtb	r2, r3
   11268:	4b66      	ldr	r3, [pc, #408]	; (11404 <main+0xf74>)
   1126a:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x51;
   1126c:	4b65      	ldr	r3, [pc, #404]	; (11404 <main+0xf74>)
   1126e:	2251      	movs	r2, #81	; 0x51
   11270:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = mcconf_limits.temp_motor_end;
   11272:	4b65      	ldr	r3, [pc, #404]	; (11408 <main+0xf78>)
   11274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11276:	b2da      	uxtb	r2, r3
   11278:	4b62      	ldr	r3, [pc, #392]	; (11404 <main+0xf74>)
   1127a:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x52;
   1127c:	4b61      	ldr	r3, [pc, #388]	; (11404 <main+0xf74>)
   1127e:	2252      	movs	r2, #82	; 0x52
   11280:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = mcconf_limits.max_duty;
   11282:	4b61      	ldr	r3, [pc, #388]	; (11408 <main+0xf78>)
   11284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11286:	b2da      	uxtb	r2, r3
   11288:	4b5e      	ldr	r3, [pc, #376]	; (11404 <main+0xf74>)
   1128a:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x53;
   1128c:	4b5d      	ldr	r3, [pc, #372]	; (11404 <main+0xf74>)
   1128e:	2253      	movs	r2, #83	; 0x53
   11290:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = mcconf_limits.min_duty;
   11292:	4b5d      	ldr	r3, [pc, #372]	; (11408 <main+0xf78>)
   11294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11296:	b2da      	uxtb	r2, r3
   11298:	4b5a      	ldr	r3, [pc, #360]	; (11404 <main+0xf74>)
   1129a:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x47;
   1129c:	4b59      	ldr	r3, [pc, #356]	; (11404 <main+0xf74>)
   1129e:	2247      	movs	r2, #71	; 0x47
   112a0:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = mcconf_limits.min_vin;
   112a2:	4b59      	ldr	r3, [pc, #356]	; (11408 <main+0xf78>)
   112a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   112a6:	b2da      	uxtb	r2, r3
   112a8:	4b56      	ldr	r3, [pc, #344]	; (11404 <main+0xf74>)
   112aa:	725a      	strb	r2, [r3, #9]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 10);
   112ac:	4955      	ldr	r1, [pc, #340]	; (11404 <main+0xf74>)
   112ae:	4b57      	ldr	r3, [pc, #348]	; (1140c <main+0xf7c>)
   112b0:	220a      	movs	r2, #10
   112b2:	0018      	movs	r0, r3
   112b4:	4b56      	ldr	r3, [pc, #344]	; (11410 <main+0xf80>)
   112b6:	4798      	blx	r3

			SEND_LIMITS = 0;
   112b8:	4b51      	ldr	r3, [pc, #324]	; (11400 <main+0xf70>)
   112ba:	2200      	movs	r2, #0
   112bc:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   112be:	4b56      	ldr	r3, [pc, #344]	; (11418 <main+0xf88>)
   112c0:	2201      	movs	r2, #1
   112c2:	701a      	strb	r2, [r3, #0]
		}

		
		////////////////////////   Handle Sensor Params Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_SENSORS)
   112c4:	4b55      	ldr	r3, [pc, #340]	; (1141c <main+0xf8c>)
   112c6:	781b      	ldrb	r3, [r3, #0]
   112c8:	2b00      	cmp	r3, #0
   112ca:	d100      	bne.n	112ce <main+0xe3e>
   112cc:	e161      	b.n	11592 <main+0x1102>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   112ce:	46c0      	nop			; (mov r8, r8)
   112d0:	4b44      	ldr	r3, [pc, #272]	; (113e4 <main+0xf54>)
   112d2:	4798      	blx	r3
   112d4:	0002      	movs	r2, r0
   112d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   112d8:	1ad3      	subs	r3, r2, r3
   112da:	221e      	movs	r2, #30
   112dc:	18ba      	adds	r2, r7, r2
   112de:	8812      	ldrh	r2, [r2, #0]
   112e0:	0052      	lsls	r2, r2, #1
   112e2:	4293      	cmp	r3, r2
   112e4:	d3f4      	bcc.n	112d0 <main+0xe40>
			BLE_TX_TIME = millis();
   112e6:	4b3f      	ldr	r3, [pc, #252]	; (113e4 <main+0xf54>)
   112e8:	4798      	blx	r3
   112ea:	0003      	movs	r3, r0
   112ec:	63bb      	str	r3, [r7, #56]	; 0x38

			ble_write_buffer[0] = 0x61;
   112ee:	4b45      	ldr	r3, [pc, #276]	; (11404 <main+0xf74>)
   112f0:	2261      	movs	r2, #97	; 0x61
   112f2:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(err_estimate[ax_kalman]) & 0xFF); // Accel X estimated error
   112f4:	4b4a      	ldr	r3, [pc, #296]	; (11420 <main+0xf90>)
   112f6:	681a      	ldr	r2, [r3, #0]
   112f8:	4b46      	ldr	r3, [pc, #280]	; (11414 <main+0xf84>)
   112fa:	1c10      	adds	r0, r2, #0
   112fc:	4798      	blx	r3
   112fe:	0003      	movs	r3, r0
   11300:	b29b      	uxth	r3, r3
   11302:	b2da      	uxtb	r2, r3
   11304:	4b3f      	ldr	r3, [pc, #252]	; (11404 <main+0xf74>)
   11306:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x62;
   11308:	4b3e      	ldr	r3, [pc, #248]	; (11404 <main+0xf74>)
   1130a:	2262      	movs	r2, #98	; 0x62
   1130c:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(err_estimate[ay_kalman]) & 0xFF); // AccelY estimated error
   1130e:	4b44      	ldr	r3, [pc, #272]	; (11420 <main+0xf90>)
   11310:	685a      	ldr	r2, [r3, #4]
   11312:	4b40      	ldr	r3, [pc, #256]	; (11414 <main+0xf84>)
   11314:	1c10      	adds	r0, r2, #0
   11316:	4798      	blx	r3
   11318:	0003      	movs	r3, r0
   1131a:	b29b      	uxth	r3, r3
   1131c:	b2da      	uxtb	r2, r3
   1131e:	4b39      	ldr	r3, [pc, #228]	; (11404 <main+0xf74>)
   11320:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x63;
   11322:	4b38      	ldr	r3, [pc, #224]	; (11404 <main+0xf74>)
   11324:	2263      	movs	r2, #99	; 0x63
   11326:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(err_estimate[az_kalman]) & 0xFF); // Accel Z estimated error
   11328:	4b3d      	ldr	r3, [pc, #244]	; (11420 <main+0xf90>)
   1132a:	689a      	ldr	r2, [r3, #8]
   1132c:	4b39      	ldr	r3, [pc, #228]	; (11414 <main+0xf84>)
   1132e:	1c10      	adds	r0, r2, #0
   11330:	4798      	blx	r3
   11332:	0003      	movs	r3, r0
   11334:	b29b      	uxth	r3, r3
   11336:	b2da      	uxtb	r2, r3
   11338:	4b32      	ldr	r3, [pc, #200]	; (11404 <main+0xf74>)
   1133a:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x64;
   1133c:	4b31      	ldr	r3, [pc, #196]	; (11404 <main+0xf74>)
   1133e:	2264      	movs	r2, #100	; 0x64
   11340:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(err_estimate[gx_kalman]) & 0xFF); // Gyro X estimated error
   11342:	4b37      	ldr	r3, [pc, #220]	; (11420 <main+0xf90>)
   11344:	68da      	ldr	r2, [r3, #12]
   11346:	4b33      	ldr	r3, [pc, #204]	; (11414 <main+0xf84>)
   11348:	1c10      	adds	r0, r2, #0
   1134a:	4798      	blx	r3
   1134c:	0003      	movs	r3, r0
   1134e:	b29b      	uxth	r3, r3
   11350:	b2da      	uxtb	r2, r3
   11352:	4b2c      	ldr	r3, [pc, #176]	; (11404 <main+0xf74>)
   11354:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x65;
   11356:	4b2b      	ldr	r3, [pc, #172]	; (11404 <main+0xf74>)
   11358:	2265      	movs	r2, #101	; 0x65
   1135a:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(err_estimate[gy_kalman]) & 0xFF); // Gyro Y estimated error
   1135c:	4b30      	ldr	r3, [pc, #192]	; (11420 <main+0xf90>)
   1135e:	691a      	ldr	r2, [r3, #16]
   11360:	4b2c      	ldr	r3, [pc, #176]	; (11414 <main+0xf84>)
   11362:	1c10      	adds	r0, r2, #0
   11364:	4798      	blx	r3
   11366:	0003      	movs	r3, r0
   11368:	b29b      	uxth	r3, r3
   1136a:	b2da      	uxtb	r2, r3
   1136c:	4b25      	ldr	r3, [pc, #148]	; (11404 <main+0xf74>)
   1136e:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x66;
   11370:	4b24      	ldr	r3, [pc, #144]	; (11404 <main+0xf74>)
   11372:	2266      	movs	r2, #102	; 0x66
   11374:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(err_estimate[gz_kalman]) & 0xFF); // Gyro Z estimated error
   11376:	4b2a      	ldr	r3, [pc, #168]	; (11420 <main+0xf90>)
   11378:	695a      	ldr	r2, [r3, #20]
   1137a:	4b26      	ldr	r3, [pc, #152]	; (11414 <main+0xf84>)
   1137c:	1c10      	adds	r0, r2, #0
   1137e:	4798      	blx	r3
   11380:	0003      	movs	r3, r0
   11382:	b29b      	uxth	r3, r3
   11384:	b2da      	uxtb	r2, r3
   11386:	4b1f      	ldr	r3, [pc, #124]	; (11404 <main+0xf74>)
   11388:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x67;
   1138a:	4b1e      	ldr	r3, [pc, #120]	; (11404 <main+0xf74>)
   1138c:	2267      	movs	r2, #103	; 0x67
   1138e:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(err_estimate[light_kalman]) & 0xFF); // Light Sensor estimated error
   11390:	4b23      	ldr	r3, [pc, #140]	; (11420 <main+0xf90>)
   11392:	699a      	ldr	r2, [r3, #24]
   11394:	4b1f      	ldr	r3, [pc, #124]	; (11414 <main+0xf84>)
   11396:	1c10      	adds	r0, r2, #0
   11398:	4798      	blx	r3
   1139a:	0003      	movs	r3, r0
   1139c:	b29b      	uxth	r3, r3
   1139e:	b2da      	uxtb	r2, r3
   113a0:	4b18      	ldr	r3, [pc, #96]	; (11404 <main+0xf74>)
   113a2:	735a      	strb	r2, [r3, #13]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   113a4:	4917      	ldr	r1, [pc, #92]	; (11404 <main+0xf74>)
   113a6:	4b19      	ldr	r3, [pc, #100]	; (1140c <main+0xf7c>)
   113a8:	220e      	movs	r2, #14
   113aa:	0018      	movs	r0, r3
   113ac:	4b18      	ldr	r3, [pc, #96]	; (11410 <main+0xf80>)
   113ae:	4798      	blx	r3
		
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   113b0:	46c0      	nop			; (mov r8, r8)
   113b2:	4b0c      	ldr	r3, [pc, #48]	; (113e4 <main+0xf54>)
   113b4:	4798      	blx	r3
   113b6:	0002      	movs	r2, r0
   113b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113ba:	1ad3      	subs	r3, r2, r3
   113bc:	221e      	movs	r2, #30
   113be:	18ba      	adds	r2, r7, r2
   113c0:	8812      	ldrh	r2, [r2, #0]
   113c2:	0052      	lsls	r2, r2, #1
   113c4:	4293      	cmp	r3, r2
   113c6:	d3f4      	bcc.n	113b2 <main+0xf22>
			BLE_TX_TIME = millis();
   113c8:	4b06      	ldr	r3, [pc, #24]	; (113e4 <main+0xf54>)
   113ca:	4798      	blx	r3
   113cc:	0003      	movs	r3, r0
   113ce:	63bb      	str	r3, [r7, #56]	; 0x38

			ble_write_buffer[0] = 0x68;
   113d0:	4b0c      	ldr	r3, [pc, #48]	; (11404 <main+0xf74>)
   113d2:	2268      	movs	r2, #104	; 0x68
   113d4:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ((uint16_t)(q[ax_kalman]*100.0) & 0xFF); // Accel X Sensitivity
   113d6:	4b13      	ldr	r3, [pc, #76]	; (11424 <main+0xf94>)
   113d8:	681a      	ldr	r2, [r3, #0]
   113da:	4b13      	ldr	r3, [pc, #76]	; (11428 <main+0xf98>)
   113dc:	1c10      	adds	r0, r2, #0
   113de:	4798      	blx	r3
   113e0:	e024      	b.n	1142c <main+0xf9c>
   113e2:	46c0      	nop			; (mov r8, r8)
   113e4:	0000aee1 	.word	0x0000aee1
   113e8:	00016a15 	.word	0x00016a15
   113ec:	00016991 	.word	0x00016991
   113f0:	00014f75 	.word	0x00014f75
   113f4:	16c16c17 	.word	0x16c16c17
   113f8:	3f26c16c 	.word	0x3f26c16c
   113fc:	00014009 	.word	0x00014009
   11400:	2000030e 	.word	0x2000030e
   11404:	20000910 	.word	0x20000910
   11408:	20000db4 	.word	0x20000db4
   1140c:	200004a0 	.word	0x200004a0
   11410:	000063bd 	.word	0x000063bd
   11414:	00014121 	.word	0x00014121
   11418:	200000e4 	.word	0x200000e4
   1141c:	200003da 	.word	0x200003da
   11420:	200009ac 	.word	0x200009ac
   11424:	20000d98 	.word	0x20000d98
   11428:	00016a85 	.word	0x00016a85
   1142c:	4cf8      	ldr	r4, [pc, #992]	; (11810 <main+0x1380>)
   1142e:	2200      	movs	r2, #0
   11430:	4bf8      	ldr	r3, [pc, #992]	; (11814 <main+0x1384>)
   11432:	47a0      	blx	r4
   11434:	0003      	movs	r3, r0
   11436:	000c      	movs	r4, r1
   11438:	0019      	movs	r1, r3
   1143a:	0022      	movs	r2, r4
   1143c:	4bf6      	ldr	r3, [pc, #984]	; (11818 <main+0x1388>)
   1143e:	0008      	movs	r0, r1
   11440:	0011      	movs	r1, r2
   11442:	4798      	blx	r3
   11444:	0003      	movs	r3, r0
   11446:	b29b      	uxth	r3, r3
   11448:	b2da      	uxtb	r2, r3
   1144a:	4bf4      	ldr	r3, [pc, #976]	; (1181c <main+0x138c>)
   1144c:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = 0x69;
   1144e:	4bf3      	ldr	r3, [pc, #972]	; (1181c <main+0x138c>)
   11450:	2269      	movs	r2, #105	; 0x69
   11452:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = ((uint16_t)(q[ay_kalman]*100.0) & 0xFF); // Accel Y Sensitivity
   11454:	4bf2      	ldr	r3, [pc, #968]	; (11820 <main+0x1390>)
   11456:	685a      	ldr	r2, [r3, #4]
   11458:	4bf2      	ldr	r3, [pc, #968]	; (11824 <main+0x1394>)
   1145a:	1c10      	adds	r0, r2, #0
   1145c:	4798      	blx	r3
   1145e:	4cec      	ldr	r4, [pc, #944]	; (11810 <main+0x1380>)
   11460:	2200      	movs	r2, #0
   11462:	4bec      	ldr	r3, [pc, #944]	; (11814 <main+0x1384>)
   11464:	47a0      	blx	r4
   11466:	0003      	movs	r3, r0
   11468:	000c      	movs	r4, r1
   1146a:	0019      	movs	r1, r3
   1146c:	0022      	movs	r2, r4
   1146e:	4bea      	ldr	r3, [pc, #936]	; (11818 <main+0x1388>)
   11470:	0008      	movs	r0, r1
   11472:	0011      	movs	r1, r2
   11474:	4798      	blx	r3
   11476:	0003      	movs	r3, r0
   11478:	b29b      	uxth	r3, r3
   1147a:	b2da      	uxtb	r2, r3
   1147c:	4be7      	ldr	r3, [pc, #924]	; (1181c <main+0x138c>)
   1147e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = 0x6A;
   11480:	4be6      	ldr	r3, [pc, #920]	; (1181c <main+0x138c>)
   11482:	226a      	movs	r2, #106	; 0x6a
   11484:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = ((uint16_t)(q[az_kalman]*100.0) & 0xFF); // Accel Z Sensitivity
   11486:	4be6      	ldr	r3, [pc, #920]	; (11820 <main+0x1390>)
   11488:	689a      	ldr	r2, [r3, #8]
   1148a:	4be6      	ldr	r3, [pc, #920]	; (11824 <main+0x1394>)
   1148c:	1c10      	adds	r0, r2, #0
   1148e:	4798      	blx	r3
   11490:	4cdf      	ldr	r4, [pc, #892]	; (11810 <main+0x1380>)
   11492:	2200      	movs	r2, #0
   11494:	4bdf      	ldr	r3, [pc, #892]	; (11814 <main+0x1384>)
   11496:	47a0      	blx	r4
   11498:	0003      	movs	r3, r0
   1149a:	000c      	movs	r4, r1
   1149c:	0019      	movs	r1, r3
   1149e:	0022      	movs	r2, r4
   114a0:	4bdd      	ldr	r3, [pc, #884]	; (11818 <main+0x1388>)
   114a2:	0008      	movs	r0, r1
   114a4:	0011      	movs	r1, r2
   114a6:	4798      	blx	r3
   114a8:	0003      	movs	r3, r0
   114aa:	b29b      	uxth	r3, r3
   114ac:	b2da      	uxtb	r2, r3
   114ae:	4bdb      	ldr	r3, [pc, #876]	; (1181c <main+0x138c>)
   114b0:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = 0x6B;
   114b2:	4bda      	ldr	r3, [pc, #872]	; (1181c <main+0x138c>)
   114b4:	226b      	movs	r2, #107	; 0x6b
   114b6:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = ((uint16_t)(q[gx_kalman]*100.0) & 0xFF); // Gyro X Sensitivity
   114b8:	4bd9      	ldr	r3, [pc, #868]	; (11820 <main+0x1390>)
   114ba:	68da      	ldr	r2, [r3, #12]
   114bc:	4bd9      	ldr	r3, [pc, #868]	; (11824 <main+0x1394>)
   114be:	1c10      	adds	r0, r2, #0
   114c0:	4798      	blx	r3
   114c2:	4cd3      	ldr	r4, [pc, #844]	; (11810 <main+0x1380>)
   114c4:	2200      	movs	r2, #0
   114c6:	4bd3      	ldr	r3, [pc, #844]	; (11814 <main+0x1384>)
   114c8:	47a0      	blx	r4
   114ca:	0003      	movs	r3, r0
   114cc:	000c      	movs	r4, r1
   114ce:	0019      	movs	r1, r3
   114d0:	0022      	movs	r2, r4
   114d2:	4bd1      	ldr	r3, [pc, #836]	; (11818 <main+0x1388>)
   114d4:	0008      	movs	r0, r1
   114d6:	0011      	movs	r1, r2
   114d8:	4798      	blx	r3
   114da:	0003      	movs	r3, r0
   114dc:	b29b      	uxth	r3, r3
   114de:	b2da      	uxtb	r2, r3
   114e0:	4bce      	ldr	r3, [pc, #824]	; (1181c <main+0x138c>)
   114e2:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = 0x6C;
   114e4:	4bcd      	ldr	r3, [pc, #820]	; (1181c <main+0x138c>)
   114e6:	226c      	movs	r2, #108	; 0x6c
   114e8:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = ((uint16_t)(q[gy_kalman]*100.0) & 0xFF); // Gyro Y Sensitivity
   114ea:	4bcd      	ldr	r3, [pc, #820]	; (11820 <main+0x1390>)
   114ec:	691a      	ldr	r2, [r3, #16]
   114ee:	4bcd      	ldr	r3, [pc, #820]	; (11824 <main+0x1394>)
   114f0:	1c10      	adds	r0, r2, #0
   114f2:	4798      	blx	r3
   114f4:	4cc6      	ldr	r4, [pc, #792]	; (11810 <main+0x1380>)
   114f6:	2200      	movs	r2, #0
   114f8:	4bc6      	ldr	r3, [pc, #792]	; (11814 <main+0x1384>)
   114fa:	47a0      	blx	r4
   114fc:	0003      	movs	r3, r0
   114fe:	000c      	movs	r4, r1
   11500:	0019      	movs	r1, r3
   11502:	0022      	movs	r2, r4
   11504:	4bc4      	ldr	r3, [pc, #784]	; (11818 <main+0x1388>)
   11506:	0008      	movs	r0, r1
   11508:	0011      	movs	r1, r2
   1150a:	4798      	blx	r3
   1150c:	0003      	movs	r3, r0
   1150e:	b29b      	uxth	r3, r3
   11510:	b2da      	uxtb	r2, r3
   11512:	4bc2      	ldr	r3, [pc, #776]	; (1181c <main+0x138c>)
   11514:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = 0x6D;
   11516:	4bc1      	ldr	r3, [pc, #772]	; (1181c <main+0x138c>)
   11518:	226d      	movs	r2, #109	; 0x6d
   1151a:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = ((uint16_t)(q[gz_kalman]*100.0) & 0xFF); // Gyro Z Sensitivity
   1151c:	4bc0      	ldr	r3, [pc, #768]	; (11820 <main+0x1390>)
   1151e:	695a      	ldr	r2, [r3, #20]
   11520:	4bc0      	ldr	r3, [pc, #768]	; (11824 <main+0x1394>)
   11522:	1c10      	adds	r0, r2, #0
   11524:	4798      	blx	r3
   11526:	4cba      	ldr	r4, [pc, #744]	; (11810 <main+0x1380>)
   11528:	2200      	movs	r2, #0
   1152a:	4bba      	ldr	r3, [pc, #744]	; (11814 <main+0x1384>)
   1152c:	47a0      	blx	r4
   1152e:	0003      	movs	r3, r0
   11530:	000c      	movs	r4, r1
   11532:	0019      	movs	r1, r3
   11534:	0022      	movs	r2, r4
   11536:	4bb8      	ldr	r3, [pc, #736]	; (11818 <main+0x1388>)
   11538:	0008      	movs	r0, r1
   1153a:	0011      	movs	r1, r2
   1153c:	4798      	blx	r3
   1153e:	0003      	movs	r3, r0
   11540:	b29b      	uxth	r3, r3
   11542:	b2da      	uxtb	r2, r3
   11544:	4bb5      	ldr	r3, [pc, #724]	; (1181c <main+0x138c>)
   11546:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = 0x6E;
   11548:	4bb4      	ldr	r3, [pc, #720]	; (1181c <main+0x138c>)
   1154a:	226e      	movs	r2, #110	; 0x6e
   1154c:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = ((uint16_t)(q[light_kalman]*100.0) & 0xFF); // Light Sensitivity
   1154e:	4bb4      	ldr	r3, [pc, #720]	; (11820 <main+0x1390>)
   11550:	699a      	ldr	r2, [r3, #24]
   11552:	4bb4      	ldr	r3, [pc, #720]	; (11824 <main+0x1394>)
   11554:	1c10      	adds	r0, r2, #0
   11556:	4798      	blx	r3
   11558:	4cad      	ldr	r4, [pc, #692]	; (11810 <main+0x1380>)
   1155a:	2200      	movs	r2, #0
   1155c:	4bad      	ldr	r3, [pc, #692]	; (11814 <main+0x1384>)
   1155e:	47a0      	blx	r4
   11560:	0003      	movs	r3, r0
   11562:	000c      	movs	r4, r1
   11564:	0019      	movs	r1, r3
   11566:	0022      	movs	r2, r4
   11568:	4bab      	ldr	r3, [pc, #684]	; (11818 <main+0x1388>)
   1156a:	0008      	movs	r0, r1
   1156c:	0011      	movs	r1, r2
   1156e:	4798      	blx	r3
   11570:	0003      	movs	r3, r0
   11572:	b29b      	uxth	r3, r3
   11574:	b2da      	uxtb	r2, r3
   11576:	4ba9      	ldr	r3, [pc, #676]	; (1181c <main+0x138c>)
   11578:	735a      	strb	r2, [r3, #13]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 14);
   1157a:	49a8      	ldr	r1, [pc, #672]	; (1181c <main+0x138c>)
   1157c:	4baa      	ldr	r3, [pc, #680]	; (11828 <main+0x1398>)
   1157e:	220e      	movs	r2, #14
   11580:	0018      	movs	r0, r3
   11582:	4baa      	ldr	r3, [pc, #680]	; (1182c <main+0x139c>)
   11584:	4798      	blx	r3

			SEND_SENSORS = 0;
   11586:	4baa      	ldr	r3, [pc, #680]	; (11830 <main+0x13a0>)
   11588:	2200      	movs	r2, #0
   1158a:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   1158c:	4ba9      	ldr	r3, [pc, #676]	; (11834 <main+0x13a4>)
   1158e:	2201      	movs	r2, #1
   11590:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle LED Params Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_LED_CHARS)
   11592:	4ba9      	ldr	r3, [pc, #676]	; (11838 <main+0x13a8>)
   11594:	781b      	ldrb	r3, [r3, #0]
   11596:	2b00      	cmp	r3, #0
   11598:	d100      	bne.n	1159c <main+0x110c>
   1159a:	e27d      	b.n	11a98 <main+0x1608>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   1159c:	46c0      	nop			; (mov r8, r8)
   1159e:	4ba7      	ldr	r3, [pc, #668]	; (1183c <main+0x13ac>)
   115a0:	4798      	blx	r3
   115a2:	0002      	movs	r2, r0
   115a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   115a6:	1ad3      	subs	r3, r2, r3
   115a8:	221e      	movs	r2, #30
   115aa:	18ba      	adds	r2, r7, r2
   115ac:	8812      	ldrh	r2, [r2, #0]
   115ae:	0052      	lsls	r2, r2, #1
   115b0:	4293      	cmp	r3, r2
   115b2:	d3f4      	bcc.n	1159e <main+0x110e>
			BLE_TX_TIME = millis();
   115b4:	4ba1      	ldr	r3, [pc, #644]	; (1183c <main+0x13ac>)
   115b6:	4798      	blx	r3
   115b8:	0003      	movs	r3, r0
   115ba:	63bb      	str	r3, [r7, #56]	; 0x38

			uint8_t led_mode_switches = ((light_mode << 4) | (HEADLIGHTS << 3) | (SIDELIGHTS << 2) | (LIGHT_CONTROLLED << 1) | IMU_CONTROLED);
   115bc:	4ba0      	ldr	r3, [pc, #640]	; (11840 <main+0x13b0>)
   115be:	781b      	ldrb	r3, [r3, #0]
   115c0:	011b      	lsls	r3, r3, #4
   115c2:	b25a      	sxtb	r2, r3
   115c4:	4b9f      	ldr	r3, [pc, #636]	; (11844 <main+0x13b4>)
   115c6:	781b      	ldrb	r3, [r3, #0]
   115c8:	00db      	lsls	r3, r3, #3
   115ca:	b25b      	sxtb	r3, r3
   115cc:	4313      	orrs	r3, r2
   115ce:	b25a      	sxtb	r2, r3
   115d0:	4b9d      	ldr	r3, [pc, #628]	; (11848 <main+0x13b8>)
   115d2:	781b      	ldrb	r3, [r3, #0]
   115d4:	009b      	lsls	r3, r3, #2
   115d6:	b25b      	sxtb	r3, r3
   115d8:	4313      	orrs	r3, r2
   115da:	b25a      	sxtb	r2, r3
   115dc:	4b9b      	ldr	r3, [pc, #620]	; (1184c <main+0x13bc>)
   115de:	781b      	ldrb	r3, [r3, #0]
   115e0:	005b      	lsls	r3, r3, #1
   115e2:	b25b      	sxtb	r3, r3
   115e4:	4313      	orrs	r3, r2
   115e6:	b25a      	sxtb	r2, r3
   115e8:	4b99      	ldr	r3, [pc, #612]	; (11850 <main+0x13c0>)
   115ea:	781b      	ldrb	r3, [r3, #0]
   115ec:	b25b      	sxtb	r3, r3
   115ee:	4313      	orrs	r3, r2
   115f0:	b25a      	sxtb	r2, r3
   115f2:	231d      	movs	r3, #29
   115f4:	18fb      	adds	r3, r7, r3
   115f6:	701a      	strb	r2, [r3, #0]

			// Global LED Settings
			ble_write_buffer[0] = 0x31;
   115f8:	4b88      	ldr	r3, [pc, #544]	; (1181c <main+0x138c>)
   115fa:	2231      	movs	r2, #49	; 0x31
   115fc:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = led_mode_switches; // Current switch states
   115fe:	4b87      	ldr	r3, [pc, #540]	; (1181c <main+0x138c>)
   11600:	221d      	movs	r2, #29
   11602:	18ba      	adds	r2, r7, r2
   11604:	7812      	ldrb	r2, [r2, #0]
   11606:	705a      	strb	r2, [r3, #1]
			// Static
			ble_write_buffer[2] = 0x32;
   11608:	4b84      	ldr	r3, [pc, #528]	; (1181c <main+0x138c>)
   1160a:	2232      	movs	r2, #50	; 0x32
   1160c:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)((float)Static_RGB.LR / 655.35);
   1160e:	4b91      	ldr	r3, [pc, #580]	; (11854 <main+0x13c4>)
   11610:	881a      	ldrh	r2, [r3, #0]
   11612:	4b91      	ldr	r3, [pc, #580]	; (11858 <main+0x13c8>)
   11614:	0010      	movs	r0, r2
   11616:	4798      	blx	r3
   11618:	1c02      	adds	r2, r0, #0
   1161a:	4b82      	ldr	r3, [pc, #520]	; (11824 <main+0x1394>)
   1161c:	1c10      	adds	r0, r2, #0
   1161e:	4798      	blx	r3
   11620:	4c8e      	ldr	r4, [pc, #568]	; (1185c <main+0x13cc>)
   11622:	4a8f      	ldr	r2, [pc, #572]	; (11860 <main+0x13d0>)
   11624:	4b8f      	ldr	r3, [pc, #572]	; (11864 <main+0x13d4>)
   11626:	47a0      	blx	r4
   11628:	0003      	movs	r3, r0
   1162a:	000c      	movs	r4, r1
   1162c:	0019      	movs	r1, r3
   1162e:	0022      	movs	r2, r4
   11630:	4b79      	ldr	r3, [pc, #484]	; (11818 <main+0x1388>)
   11632:	0008      	movs	r0, r1
   11634:	0011      	movs	r1, r2
   11636:	4798      	blx	r3
   11638:	0003      	movs	r3, r0
   1163a:	b2da      	uxtb	r2, r3
   1163c:	4b77      	ldr	r3, [pc, #476]	; (1181c <main+0x138c>)
   1163e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((float)Static_RGB.LG / 655.35);
   11640:	4b84      	ldr	r3, [pc, #528]	; (11854 <main+0x13c4>)
   11642:	885a      	ldrh	r2, [r3, #2]
   11644:	4b84      	ldr	r3, [pc, #528]	; (11858 <main+0x13c8>)
   11646:	0010      	movs	r0, r2
   11648:	4798      	blx	r3
   1164a:	1c02      	adds	r2, r0, #0
   1164c:	4b75      	ldr	r3, [pc, #468]	; (11824 <main+0x1394>)
   1164e:	1c10      	adds	r0, r2, #0
   11650:	4798      	blx	r3
   11652:	4c82      	ldr	r4, [pc, #520]	; (1185c <main+0x13cc>)
   11654:	4a82      	ldr	r2, [pc, #520]	; (11860 <main+0x13d0>)
   11656:	4b83      	ldr	r3, [pc, #524]	; (11864 <main+0x13d4>)
   11658:	47a0      	blx	r4
   1165a:	0003      	movs	r3, r0
   1165c:	000c      	movs	r4, r1
   1165e:	0019      	movs	r1, r3
   11660:	0022      	movs	r2, r4
   11662:	4b6d      	ldr	r3, [pc, #436]	; (11818 <main+0x1388>)
   11664:	0008      	movs	r0, r1
   11666:	0011      	movs	r1, r2
   11668:	4798      	blx	r3
   1166a:	0003      	movs	r3, r0
   1166c:	b2da      	uxtb	r2, r3
   1166e:	4b6b      	ldr	r3, [pc, #428]	; (1181c <main+0x138c>)
   11670:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((float)Static_RGB.LB / 655.35);
   11672:	4b78      	ldr	r3, [pc, #480]	; (11854 <main+0x13c4>)
   11674:	889a      	ldrh	r2, [r3, #4]
   11676:	4b78      	ldr	r3, [pc, #480]	; (11858 <main+0x13c8>)
   11678:	0010      	movs	r0, r2
   1167a:	4798      	blx	r3
   1167c:	1c02      	adds	r2, r0, #0
   1167e:	4b69      	ldr	r3, [pc, #420]	; (11824 <main+0x1394>)
   11680:	1c10      	adds	r0, r2, #0
   11682:	4798      	blx	r3
   11684:	4c75      	ldr	r4, [pc, #468]	; (1185c <main+0x13cc>)
   11686:	4a76      	ldr	r2, [pc, #472]	; (11860 <main+0x13d0>)
   11688:	4b76      	ldr	r3, [pc, #472]	; (11864 <main+0x13d4>)
   1168a:	47a0      	blx	r4
   1168c:	0003      	movs	r3, r0
   1168e:	000c      	movs	r4, r1
   11690:	0019      	movs	r1, r3
   11692:	0022      	movs	r2, r4
   11694:	4b60      	ldr	r3, [pc, #384]	; (11818 <main+0x1388>)
   11696:	0008      	movs	r0, r1
   11698:	0011      	movs	r1, r2
   1169a:	4798      	blx	r3
   1169c:	0003      	movs	r3, r0
   1169e:	b2da      	uxtb	r2, r3
   116a0:	4b5e      	ldr	r3, [pc, #376]	; (1181c <main+0x138c>)
   116a2:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)((float)Static_RGB.RR / 655.35);
   116a4:	4b6b      	ldr	r3, [pc, #428]	; (11854 <main+0x13c4>)
   116a6:	88da      	ldrh	r2, [r3, #6]
   116a8:	4b6b      	ldr	r3, [pc, #428]	; (11858 <main+0x13c8>)
   116aa:	0010      	movs	r0, r2
   116ac:	4798      	blx	r3
   116ae:	1c02      	adds	r2, r0, #0
   116b0:	4b5c      	ldr	r3, [pc, #368]	; (11824 <main+0x1394>)
   116b2:	1c10      	adds	r0, r2, #0
   116b4:	4798      	blx	r3
   116b6:	4c69      	ldr	r4, [pc, #420]	; (1185c <main+0x13cc>)
   116b8:	4a69      	ldr	r2, [pc, #420]	; (11860 <main+0x13d0>)
   116ba:	4b6a      	ldr	r3, [pc, #424]	; (11864 <main+0x13d4>)
   116bc:	47a0      	blx	r4
   116be:	0003      	movs	r3, r0
   116c0:	000c      	movs	r4, r1
   116c2:	0019      	movs	r1, r3
   116c4:	0022      	movs	r2, r4
   116c6:	4b54      	ldr	r3, [pc, #336]	; (11818 <main+0x1388>)
   116c8:	0008      	movs	r0, r1
   116ca:	0011      	movs	r1, r2
   116cc:	4798      	blx	r3
   116ce:	0003      	movs	r3, r0
   116d0:	b2da      	uxtb	r2, r3
   116d2:	4b52      	ldr	r3, [pc, #328]	; (1181c <main+0x138c>)
   116d4:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Static_RGB.RG / 655.35);
   116d6:	4b5f      	ldr	r3, [pc, #380]	; (11854 <main+0x13c4>)
   116d8:	891a      	ldrh	r2, [r3, #8]
   116da:	4b5f      	ldr	r3, [pc, #380]	; (11858 <main+0x13c8>)
   116dc:	0010      	movs	r0, r2
   116de:	4798      	blx	r3
   116e0:	1c02      	adds	r2, r0, #0
   116e2:	4b50      	ldr	r3, [pc, #320]	; (11824 <main+0x1394>)
   116e4:	1c10      	adds	r0, r2, #0
   116e6:	4798      	blx	r3
   116e8:	4c5c      	ldr	r4, [pc, #368]	; (1185c <main+0x13cc>)
   116ea:	4a5d      	ldr	r2, [pc, #372]	; (11860 <main+0x13d0>)
   116ec:	4b5d      	ldr	r3, [pc, #372]	; (11864 <main+0x13d4>)
   116ee:	47a0      	blx	r4
   116f0:	0003      	movs	r3, r0
   116f2:	000c      	movs	r4, r1
   116f4:	0019      	movs	r1, r3
   116f6:	0022      	movs	r2, r4
   116f8:	4b47      	ldr	r3, [pc, #284]	; (11818 <main+0x1388>)
   116fa:	0008      	movs	r0, r1
   116fc:	0011      	movs	r1, r2
   116fe:	4798      	blx	r3
   11700:	0003      	movs	r3, r0
   11702:	b2da      	uxtb	r2, r3
   11704:	4b45      	ldr	r3, [pc, #276]	; (1181c <main+0x138c>)
   11706:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Static_RGB.RB / 655.35);
   11708:	4b52      	ldr	r3, [pc, #328]	; (11854 <main+0x13c4>)
   1170a:	895a      	ldrh	r2, [r3, #10]
   1170c:	4b52      	ldr	r3, [pc, #328]	; (11858 <main+0x13c8>)
   1170e:	0010      	movs	r0, r2
   11710:	4798      	blx	r3
   11712:	1c02      	adds	r2, r0, #0
   11714:	4b43      	ldr	r3, [pc, #268]	; (11824 <main+0x1394>)
   11716:	1c10      	adds	r0, r2, #0
   11718:	4798      	blx	r3
   1171a:	4c50      	ldr	r4, [pc, #320]	; (1185c <main+0x13cc>)
   1171c:	4a50      	ldr	r2, [pc, #320]	; (11860 <main+0x13d0>)
   1171e:	4b51      	ldr	r3, [pc, #324]	; (11864 <main+0x13d4>)
   11720:	47a0      	blx	r4
   11722:	0003      	movs	r3, r0
   11724:	000c      	movs	r4, r1
   11726:	0019      	movs	r1, r3
   11728:	0022      	movs	r2, r4
   1172a:	4b3b      	ldr	r3, [pc, #236]	; (11818 <main+0x1388>)
   1172c:	0008      	movs	r0, r1
   1172e:	0011      	movs	r1, r2
   11730:	4798      	blx	r3
   11732:	0003      	movs	r3, r0
   11734:	b2da      	uxtb	r2, r3
   11736:	4b39      	ldr	r3, [pc, #228]	; (1181c <main+0x138c>)
   11738:	721a      	strb	r2, [r3, #8]
			// Color Cycle
			ble_write_buffer[9] = 0x33;
   1173a:	4b38      	ldr	r3, [pc, #224]	; (1181c <main+0x138c>)
   1173c:	2233      	movs	r2, #51	; 0x33
   1173e:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)(RateSens[MODE_COLOR_CYCLE] * 100);
   11740:	4b49      	ldr	r3, [pc, #292]	; (11868 <main+0x13d8>)
   11742:	685a      	ldr	r2, [r3, #4]
   11744:	4b49      	ldr	r3, [pc, #292]	; (1186c <main+0x13dc>)
   11746:	494a      	ldr	r1, [pc, #296]	; (11870 <main+0x13e0>)
   11748:	1c10      	adds	r0, r2, #0
   1174a:	4798      	blx	r3
   1174c:	1c03      	adds	r3, r0, #0
   1174e:	1c1a      	adds	r2, r3, #0
   11750:	4b48      	ldr	r3, [pc, #288]	; (11874 <main+0x13e4>)
   11752:	1c10      	adds	r0, r2, #0
   11754:	4798      	blx	r3
   11756:	0003      	movs	r3, r0
   11758:	b2da      	uxtb	r2, r3
   1175a:	4b30      	ldr	r3, [pc, #192]	; (1181c <main+0x138c>)
   1175c:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)(Brightness[MODE_COLOR_CYCLE] * 100);
   1175e:	4b46      	ldr	r3, [pc, #280]	; (11878 <main+0x13e8>)
   11760:	685a      	ldr	r2, [r3, #4]
   11762:	4b42      	ldr	r3, [pc, #264]	; (1186c <main+0x13dc>)
   11764:	4942      	ldr	r1, [pc, #264]	; (11870 <main+0x13e0>)
   11766:	1c10      	adds	r0, r2, #0
   11768:	4798      	blx	r3
   1176a:	1c03      	adds	r3, r0, #0
   1176c:	1c1a      	adds	r2, r3, #0
   1176e:	4b41      	ldr	r3, [pc, #260]	; (11874 <main+0x13e4>)
   11770:	1c10      	adds	r0, r2, #0
   11772:	4798      	blx	r3
   11774:	0003      	movs	r3, r0
   11776:	b2da      	uxtb	r2, r3
   11778:	4b28      	ldr	r3, [pc, #160]	; (1181c <main+0x138c>)
   1177a:	72da      	strb	r2, [r3, #11]
			// Compass Cycle
			ble_write_buffer[12] = 0x34;
   1177c:	4b27      	ldr	r3, [pc, #156]	; (1181c <main+0x138c>)
   1177e:	2234      	movs	r2, #52	; 0x34
   11780:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = (uint8_t)(Brightness[MODE_COMPASS_CYCLE] * 100);
   11782:	4b3d      	ldr	r3, [pc, #244]	; (11878 <main+0x13e8>)
   11784:	689a      	ldr	r2, [r3, #8]
   11786:	4b39      	ldr	r3, [pc, #228]	; (1186c <main+0x13dc>)
   11788:	4939      	ldr	r1, [pc, #228]	; (11870 <main+0x13e0>)
   1178a:	1c10      	adds	r0, r2, #0
   1178c:	4798      	blx	r3
   1178e:	1c03      	adds	r3, r0, #0
   11790:	1c1a      	adds	r2, r3, #0
   11792:	4b38      	ldr	r3, [pc, #224]	; (11874 <main+0x13e4>)
   11794:	1c10      	adds	r0, r2, #0
   11796:	4798      	blx	r3
   11798:	0003      	movs	r3, r0
   1179a:	b2da      	uxtb	r2, r3
   1179c:	4b1f      	ldr	r3, [pc, #124]	; (1181c <main+0x138c>)
   1179e:	735a      	strb	r2, [r3, #13]
			// Throttle Based
			ble_write_buffer[14] = 0x35;
   117a0:	4b1e      	ldr	r3, [pc, #120]	; (1181c <main+0x138c>)
   117a2:	2235      	movs	r2, #53	; 0x35
   117a4:	739a      	strb	r2, [r3, #14]
			ble_write_buffer[15] = (uint8_t)(RateSens[MODE_THROTTLE] * 100);
   117a6:	4b30      	ldr	r3, [pc, #192]	; (11868 <main+0x13d8>)
   117a8:	68da      	ldr	r2, [r3, #12]
   117aa:	4b30      	ldr	r3, [pc, #192]	; (1186c <main+0x13dc>)
   117ac:	4930      	ldr	r1, [pc, #192]	; (11870 <main+0x13e0>)
   117ae:	1c10      	adds	r0, r2, #0
   117b0:	4798      	blx	r3
   117b2:	1c03      	adds	r3, r0, #0
   117b4:	1c1a      	adds	r2, r3, #0
   117b6:	4b2f      	ldr	r3, [pc, #188]	; (11874 <main+0x13e4>)
   117b8:	1c10      	adds	r0, r2, #0
   117ba:	4798      	blx	r3
   117bc:	0003      	movs	r3, r0
   117be:	b2da      	uxtb	r2, r3
   117c0:	4b16      	ldr	r3, [pc, #88]	; (1181c <main+0x138c>)
   117c2:	73da      	strb	r2, [r3, #15]
			ble_write_buffer[16] = (uint8_t)(Brightness[MODE_THROTTLE] * 100);
   117c4:	4b2c      	ldr	r3, [pc, #176]	; (11878 <main+0x13e8>)
   117c6:	68da      	ldr	r2, [r3, #12]
   117c8:	4b28      	ldr	r3, [pc, #160]	; (1186c <main+0x13dc>)
   117ca:	4929      	ldr	r1, [pc, #164]	; (11870 <main+0x13e0>)
   117cc:	1c10      	adds	r0, r2, #0
   117ce:	4798      	blx	r3
   117d0:	1c03      	adds	r3, r0, #0
   117d2:	1c1a      	adds	r2, r3, #0
   117d4:	4b27      	ldr	r3, [pc, #156]	; (11874 <main+0x13e4>)
   117d6:	1c10      	adds	r0, r2, #0
   117d8:	4798      	blx	r3
   117da:	0003      	movs	r3, r0
   117dc:	b2da      	uxtb	r2, r3
   117de:	4b0f      	ldr	r3, [pc, #60]	; (1181c <main+0x138c>)
   117e0:	741a      	strb	r2, [r3, #16]
			// RPM Based
			ble_write_buffer[17] = 0x36;
   117e2:	4b0e      	ldr	r3, [pc, #56]	; (1181c <main+0x138c>)
   117e4:	2236      	movs	r2, #54	; 0x36
   117e6:	745a      	strb	r2, [r3, #17]
			ble_write_buffer[18] = (uint8_t)(RateSens[MODE_RPM_CYCLE] * 100);
   117e8:	4b1f      	ldr	r3, [pc, #124]	; (11868 <main+0x13d8>)
   117ea:	691a      	ldr	r2, [r3, #16]
   117ec:	4b1f      	ldr	r3, [pc, #124]	; (1186c <main+0x13dc>)
   117ee:	4920      	ldr	r1, [pc, #128]	; (11870 <main+0x13e0>)
   117f0:	1c10      	adds	r0, r2, #0
   117f2:	4798      	blx	r3
   117f4:	1c03      	adds	r3, r0, #0
   117f6:	1c1a      	adds	r2, r3, #0
   117f8:	4b1e      	ldr	r3, [pc, #120]	; (11874 <main+0x13e4>)
   117fa:	1c10      	adds	r0, r2, #0
   117fc:	4798      	blx	r3
   117fe:	0003      	movs	r3, r0
   11800:	b2da      	uxtb	r2, r3
   11802:	4b06      	ldr	r3, [pc, #24]	; (1181c <main+0x138c>)
   11804:	749a      	strb	r2, [r3, #18]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 19);
   11806:	4905      	ldr	r1, [pc, #20]	; (1181c <main+0x138c>)
   11808:	4b07      	ldr	r3, [pc, #28]	; (11828 <main+0x1398>)
   1180a:	2213      	movs	r2, #19
   1180c:	0018      	movs	r0, r3
   1180e:	e035      	b.n	1187c <main+0x13ec>
   11810:	00015dfd 	.word	0x00015dfd
   11814:	40590000 	.word	0x40590000
   11818:	00014151 	.word	0x00014151
   1181c:	20000910 	.word	0x20000910
   11820:	20000d98 	.word	0x20000d98
   11824:	00016a85 	.word	0x00016a85
   11828:	200004a0 	.word	0x200004a0
   1182c:	000063bd 	.word	0x000063bd
   11830:	200003da 	.word	0x200003da
   11834:	200000e4 	.word	0x200000e4
   11838:	200003b0 	.word	0x200003b0
   1183c:	0000aee1 	.word	0x0000aee1
   11840:	2000001b 	.word	0x2000001b
   11844:	20000322 	.word	0x20000322
   11848:	200000a2 	.word	0x200000a2
   1184c:	20000323 	.word	0x20000323
   11850:	20000324 	.word	0x20000324
   11854:	2000001c 	.word	0x2000001c
   11858:	00014ee9 	.word	0x00014ee9
   1185c:	00015595 	.word	0x00015595
   11860:	cccccccd 	.word	0xcccccccd
   11864:	40847acc 	.word	0x40847acc
   11868:	20000028 	.word	0x20000028
   1186c:	00014891 	.word	0x00014891
   11870:	42c80000 	.word	0x42c80000
   11874:	00014121 	.word	0x00014121
   11878:	2000004c 	.word	0x2000004c
   1187c:	4bf1      	ldr	r3, [pc, #964]	; (11c44 <main+0x17b4>)
   1187e:	4798      	blx	r3
			
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11880:	46c0      	nop			; (mov r8, r8)
   11882:	4bf1      	ldr	r3, [pc, #964]	; (11c48 <main+0x17b8>)
   11884:	4798      	blx	r3
   11886:	0002      	movs	r2, r0
   11888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1188a:	1ad3      	subs	r3, r2, r3
   1188c:	221e      	movs	r2, #30
   1188e:	18ba      	adds	r2, r7, r2
   11890:	8812      	ldrh	r2, [r2, #0]
   11892:	0052      	lsls	r2, r2, #1
   11894:	4293      	cmp	r3, r2
   11896:	d3f4      	bcc.n	11882 <main+0x13f2>
			BLE_TX_TIME = millis();
   11898:	4beb      	ldr	r3, [pc, #940]	; (11c48 <main+0x17b8>)
   1189a:	4798      	blx	r3
   1189c:	0003      	movs	r3, r0
   1189e:	63bb      	str	r3, [r7, #56]	; 0x38

			// X Accel Based
			ble_write_buffer[0] = 0x37;
   118a0:	4bea      	ldr	r3, [pc, #936]	; (11c4c <main+0x17bc>)
   118a2:	2237      	movs	r2, #55	; 0x37
   118a4:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(RateSens[MODE_X_ACCEL] * 100);
   118a6:	4bea      	ldr	r3, [pc, #936]	; (11c50 <main+0x17c0>)
   118a8:	699a      	ldr	r2, [r3, #24]
   118aa:	4bea      	ldr	r3, [pc, #936]	; (11c54 <main+0x17c4>)
   118ac:	49ea      	ldr	r1, [pc, #936]	; (11c58 <main+0x17c8>)
   118ae:	1c10      	adds	r0, r2, #0
   118b0:	4798      	blx	r3
   118b2:	1c03      	adds	r3, r0, #0
   118b4:	1c1a      	adds	r2, r3, #0
   118b6:	4be9      	ldr	r3, [pc, #932]	; (11c5c <main+0x17cc>)
   118b8:	1c10      	adds	r0, r2, #0
   118ba:	4798      	blx	r3
   118bc:	0003      	movs	r3, r0
   118be:	b2da      	uxtb	r2, r3
   118c0:	4be2      	ldr	r3, [pc, #904]	; (11c4c <main+0x17bc>)
   118c2:	705a      	strb	r2, [r3, #1]
			// Y Accel Based
			ble_write_buffer[2] = 0x38;
   118c4:	4be1      	ldr	r3, [pc, #900]	; (11c4c <main+0x17bc>)
   118c6:	2238      	movs	r2, #56	; 0x38
   118c8:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)(Brightness[MODE_Y_ACCEL] * 100);
   118ca:	4be5      	ldr	r3, [pc, #916]	; (11c60 <main+0x17d0>)
   118cc:	69da      	ldr	r2, [r3, #28]
   118ce:	4be1      	ldr	r3, [pc, #900]	; (11c54 <main+0x17c4>)
   118d0:	49e1      	ldr	r1, [pc, #900]	; (11c58 <main+0x17c8>)
   118d2:	1c10      	adds	r0, r2, #0
   118d4:	4798      	blx	r3
   118d6:	1c03      	adds	r3, r0, #0
   118d8:	1c1a      	adds	r2, r3, #0
   118da:	4be0      	ldr	r3, [pc, #896]	; (11c5c <main+0x17cc>)
   118dc:	1c10      	adds	r0, r2, #0
   118de:	4798      	blx	r3
   118e0:	0003      	movs	r3, r0
   118e2:	b2da      	uxtb	r2, r3
   118e4:	4bd9      	ldr	r3, [pc, #868]	; (11c4c <main+0x17bc>)
   118e6:	70da      	strb	r2, [r3, #3]
			// Custom
			uint8_t color_bright_base = (ColorBase[MODE_CUSTOM] << 4) | BrightBase[MODE_CUSTOM];
   118e8:	4bde      	ldr	r3, [pc, #888]	; (11c64 <main+0x17d4>)
   118ea:	7a1b      	ldrb	r3, [r3, #8]
   118ec:	011b      	lsls	r3, r3, #4
   118ee:	b25a      	sxtb	r2, r3
   118f0:	4bdd      	ldr	r3, [pc, #884]	; (11c68 <main+0x17d8>)
   118f2:	7a1b      	ldrb	r3, [r3, #8]
   118f4:	b25b      	sxtb	r3, r3
   118f6:	4313      	orrs	r3, r2
   118f8:	b25a      	sxtb	r2, r3
   118fa:	231c      	movs	r3, #28
   118fc:	18fb      	adds	r3, r7, r3
   118fe:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[4] = 0x39;
   11900:	4bd2      	ldr	r3, [pc, #840]	; (11c4c <main+0x17bc>)
   11902:	2239      	movs	r2, #57	; 0x39
   11904:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = color_bright_base;
   11906:	4bd1      	ldr	r3, [pc, #836]	; (11c4c <main+0x17bc>)
   11908:	221c      	movs	r2, #28
   1190a:	18ba      	adds	r2, r7, r2
   1190c:	7812      	ldrb	r2, [r2, #0]
   1190e:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = RateBase[MODE_CUSTOM];
   11910:	4bd6      	ldr	r3, [pc, #856]	; (11c6c <main+0x17dc>)
   11912:	7a1a      	ldrb	r2, [r3, #8]
   11914:	4bcd      	ldr	r3, [pc, #820]	; (11c4c <main+0x17bc>)
   11916:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((float)Custom_RGB.LR / 655.35);
   11918:	4bd5      	ldr	r3, [pc, #852]	; (11c70 <main+0x17e0>)
   1191a:	881a      	ldrh	r2, [r3, #0]
   1191c:	4bd5      	ldr	r3, [pc, #852]	; (11c74 <main+0x17e4>)
   1191e:	0010      	movs	r0, r2
   11920:	4798      	blx	r3
   11922:	1c02      	adds	r2, r0, #0
   11924:	4bd4      	ldr	r3, [pc, #848]	; (11c78 <main+0x17e8>)
   11926:	1c10      	adds	r0, r2, #0
   11928:	4798      	blx	r3
   1192a:	4cd4      	ldr	r4, [pc, #848]	; (11c7c <main+0x17ec>)
   1192c:	4ad4      	ldr	r2, [pc, #848]	; (11c80 <main+0x17f0>)
   1192e:	4bd5      	ldr	r3, [pc, #852]	; (11c84 <main+0x17f4>)
   11930:	47a0      	blx	r4
   11932:	0003      	movs	r3, r0
   11934:	000c      	movs	r4, r1
   11936:	0019      	movs	r1, r3
   11938:	0022      	movs	r2, r4
   1193a:	4bd3      	ldr	r3, [pc, #844]	; (11c88 <main+0x17f8>)
   1193c:	0008      	movs	r0, r1
   1193e:	0011      	movs	r1, r2
   11940:	4798      	blx	r3
   11942:	0003      	movs	r3, r0
   11944:	b2da      	uxtb	r2, r3
   11946:	4bc1      	ldr	r3, [pc, #772]	; (11c4c <main+0x17bc>)
   11948:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((float)Custom_RGB.LG / 655.35);
   1194a:	4bc9      	ldr	r3, [pc, #804]	; (11c70 <main+0x17e0>)
   1194c:	885a      	ldrh	r2, [r3, #2]
   1194e:	4bc9      	ldr	r3, [pc, #804]	; (11c74 <main+0x17e4>)
   11950:	0010      	movs	r0, r2
   11952:	4798      	blx	r3
   11954:	1c02      	adds	r2, r0, #0
   11956:	4bc8      	ldr	r3, [pc, #800]	; (11c78 <main+0x17e8>)
   11958:	1c10      	adds	r0, r2, #0
   1195a:	4798      	blx	r3
   1195c:	4cc7      	ldr	r4, [pc, #796]	; (11c7c <main+0x17ec>)
   1195e:	4ac8      	ldr	r2, [pc, #800]	; (11c80 <main+0x17f0>)
   11960:	4bc8      	ldr	r3, [pc, #800]	; (11c84 <main+0x17f4>)
   11962:	47a0      	blx	r4
   11964:	0003      	movs	r3, r0
   11966:	000c      	movs	r4, r1
   11968:	0019      	movs	r1, r3
   1196a:	0022      	movs	r2, r4
   1196c:	4bc6      	ldr	r3, [pc, #792]	; (11c88 <main+0x17f8>)
   1196e:	0008      	movs	r0, r1
   11970:	0011      	movs	r1, r2
   11972:	4798      	blx	r3
   11974:	0003      	movs	r3, r0
   11976:	b2da      	uxtb	r2, r3
   11978:	4bb4      	ldr	r3, [pc, #720]	; (11c4c <main+0x17bc>)
   1197a:	721a      	strb	r2, [r3, #8]
			ble_write_buffer[9] = (uint8_t)((float)Custom_RGB.LB / 655.35);
   1197c:	4bbc      	ldr	r3, [pc, #752]	; (11c70 <main+0x17e0>)
   1197e:	889a      	ldrh	r2, [r3, #4]
   11980:	4bbc      	ldr	r3, [pc, #752]	; (11c74 <main+0x17e4>)
   11982:	0010      	movs	r0, r2
   11984:	4798      	blx	r3
   11986:	1c02      	adds	r2, r0, #0
   11988:	4bbb      	ldr	r3, [pc, #748]	; (11c78 <main+0x17e8>)
   1198a:	1c10      	adds	r0, r2, #0
   1198c:	4798      	blx	r3
   1198e:	4cbb      	ldr	r4, [pc, #748]	; (11c7c <main+0x17ec>)
   11990:	4abb      	ldr	r2, [pc, #748]	; (11c80 <main+0x17f0>)
   11992:	4bbc      	ldr	r3, [pc, #752]	; (11c84 <main+0x17f4>)
   11994:	47a0      	blx	r4
   11996:	0003      	movs	r3, r0
   11998:	000c      	movs	r4, r1
   1199a:	0019      	movs	r1, r3
   1199c:	0022      	movs	r2, r4
   1199e:	4bba      	ldr	r3, [pc, #744]	; (11c88 <main+0x17f8>)
   119a0:	0008      	movs	r0, r1
   119a2:	0011      	movs	r1, r2
   119a4:	4798      	blx	r3
   119a6:	0003      	movs	r3, r0
   119a8:	b2da      	uxtb	r2, r3
   119aa:	4ba8      	ldr	r3, [pc, #672]	; (11c4c <main+0x17bc>)
   119ac:	725a      	strb	r2, [r3, #9]
			ble_write_buffer[10] = (uint8_t)((float)Custom_RGB.RR / 655.35);
   119ae:	4bb0      	ldr	r3, [pc, #704]	; (11c70 <main+0x17e0>)
   119b0:	88da      	ldrh	r2, [r3, #6]
   119b2:	4bb0      	ldr	r3, [pc, #704]	; (11c74 <main+0x17e4>)
   119b4:	0010      	movs	r0, r2
   119b6:	4798      	blx	r3
   119b8:	1c02      	adds	r2, r0, #0
   119ba:	4baf      	ldr	r3, [pc, #700]	; (11c78 <main+0x17e8>)
   119bc:	1c10      	adds	r0, r2, #0
   119be:	4798      	blx	r3
   119c0:	4cae      	ldr	r4, [pc, #696]	; (11c7c <main+0x17ec>)
   119c2:	4aaf      	ldr	r2, [pc, #700]	; (11c80 <main+0x17f0>)
   119c4:	4baf      	ldr	r3, [pc, #700]	; (11c84 <main+0x17f4>)
   119c6:	47a0      	blx	r4
   119c8:	0003      	movs	r3, r0
   119ca:	000c      	movs	r4, r1
   119cc:	0019      	movs	r1, r3
   119ce:	0022      	movs	r2, r4
   119d0:	4bad      	ldr	r3, [pc, #692]	; (11c88 <main+0x17f8>)
   119d2:	0008      	movs	r0, r1
   119d4:	0011      	movs	r1, r2
   119d6:	4798      	blx	r3
   119d8:	0003      	movs	r3, r0
   119da:	b2da      	uxtb	r2, r3
   119dc:	4b9b      	ldr	r3, [pc, #620]	; (11c4c <main+0x17bc>)
   119de:	729a      	strb	r2, [r3, #10]
			ble_write_buffer[11] = (uint8_t)((float)Custom_RGB.RG / 655.35);
   119e0:	4ba3      	ldr	r3, [pc, #652]	; (11c70 <main+0x17e0>)
   119e2:	891a      	ldrh	r2, [r3, #8]
   119e4:	4ba3      	ldr	r3, [pc, #652]	; (11c74 <main+0x17e4>)
   119e6:	0010      	movs	r0, r2
   119e8:	4798      	blx	r3
   119ea:	1c02      	adds	r2, r0, #0
   119ec:	4ba2      	ldr	r3, [pc, #648]	; (11c78 <main+0x17e8>)
   119ee:	1c10      	adds	r0, r2, #0
   119f0:	4798      	blx	r3
   119f2:	4ca2      	ldr	r4, [pc, #648]	; (11c7c <main+0x17ec>)
   119f4:	4aa2      	ldr	r2, [pc, #648]	; (11c80 <main+0x17f0>)
   119f6:	4ba3      	ldr	r3, [pc, #652]	; (11c84 <main+0x17f4>)
   119f8:	47a0      	blx	r4
   119fa:	0003      	movs	r3, r0
   119fc:	000c      	movs	r4, r1
   119fe:	0019      	movs	r1, r3
   11a00:	0022      	movs	r2, r4
   11a02:	4ba1      	ldr	r3, [pc, #644]	; (11c88 <main+0x17f8>)
   11a04:	0008      	movs	r0, r1
   11a06:	0011      	movs	r1, r2
   11a08:	4798      	blx	r3
   11a0a:	0003      	movs	r3, r0
   11a0c:	b2da      	uxtb	r2, r3
   11a0e:	4b8f      	ldr	r3, [pc, #572]	; (11c4c <main+0x17bc>)
   11a10:	72da      	strb	r2, [r3, #11]
			ble_write_buffer[12] = (uint8_t)((float)Custom_RGB.RB / 655.35);
   11a12:	4b97      	ldr	r3, [pc, #604]	; (11c70 <main+0x17e0>)
   11a14:	895a      	ldrh	r2, [r3, #10]
   11a16:	4b97      	ldr	r3, [pc, #604]	; (11c74 <main+0x17e4>)
   11a18:	0010      	movs	r0, r2
   11a1a:	4798      	blx	r3
   11a1c:	1c02      	adds	r2, r0, #0
   11a1e:	4b96      	ldr	r3, [pc, #600]	; (11c78 <main+0x17e8>)
   11a20:	1c10      	adds	r0, r2, #0
   11a22:	4798      	blx	r3
   11a24:	4c95      	ldr	r4, [pc, #596]	; (11c7c <main+0x17ec>)
   11a26:	4a96      	ldr	r2, [pc, #600]	; (11c80 <main+0x17f0>)
   11a28:	4b96      	ldr	r3, [pc, #600]	; (11c84 <main+0x17f4>)
   11a2a:	47a0      	blx	r4
   11a2c:	0003      	movs	r3, r0
   11a2e:	000c      	movs	r4, r1
   11a30:	0019      	movs	r1, r3
   11a32:	0022      	movs	r2, r4
   11a34:	4b94      	ldr	r3, [pc, #592]	; (11c88 <main+0x17f8>)
   11a36:	0008      	movs	r0, r1
   11a38:	0011      	movs	r1, r2
   11a3a:	4798      	blx	r3
   11a3c:	0003      	movs	r3, r0
   11a3e:	b2da      	uxtb	r2, r3
   11a40:	4b82      	ldr	r3, [pc, #520]	; (11c4c <main+0x17bc>)
   11a42:	731a      	strb	r2, [r3, #12]
			ble_write_buffer[13] = (uint8_t)(RateSens[MODE_CUSTOM] * 100);
   11a44:	4b82      	ldr	r3, [pc, #520]	; (11c50 <main+0x17c0>)
   11a46:	6a1a      	ldr	r2, [r3, #32]
   11a48:	4b82      	ldr	r3, [pc, #520]	; (11c54 <main+0x17c4>)
   11a4a:	4983      	ldr	r1, [pc, #524]	; (11c58 <main+0x17c8>)
   11a4c:	1c10      	adds	r0, r2, #0
   11a4e:	4798      	blx	r3
   11a50:	1c03      	adds	r3, r0, #0
   11a52:	1c1a      	adds	r2, r3, #0
   11a54:	4b81      	ldr	r3, [pc, #516]	; (11c5c <main+0x17cc>)
   11a56:	1c10      	adds	r0, r2, #0
   11a58:	4798      	blx	r3
   11a5a:	0003      	movs	r3, r0
   11a5c:	b2da      	uxtb	r2, r3
   11a5e:	4b7b      	ldr	r3, [pc, #492]	; (11c4c <main+0x17bc>)
   11a60:	735a      	strb	r2, [r3, #13]
			ble_write_buffer[14] = (uint8_t)(Brightness[MODE_CUSTOM] * 100);
   11a62:	4b7f      	ldr	r3, [pc, #508]	; (11c60 <main+0x17d0>)
   11a64:	6a1a      	ldr	r2, [r3, #32]
   11a66:	4b7b      	ldr	r3, [pc, #492]	; (11c54 <main+0x17c4>)
   11a68:	497b      	ldr	r1, [pc, #492]	; (11c58 <main+0x17c8>)
   11a6a:	1c10      	adds	r0, r2, #0
   11a6c:	4798      	blx	r3
   11a6e:	1c03      	adds	r3, r0, #0
   11a70:	1c1a      	adds	r2, r3, #0
   11a72:	4b7a      	ldr	r3, [pc, #488]	; (11c5c <main+0x17cc>)
   11a74:	1c10      	adds	r0, r2, #0
   11a76:	4798      	blx	r3
   11a78:	0003      	movs	r3, r0
   11a7a:	b2da      	uxtb	r2, r3
   11a7c:	4b73      	ldr	r3, [pc, #460]	; (11c4c <main+0x17bc>)
   11a7e:	739a      	strb	r2, [r3, #14]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 15);
   11a80:	4972      	ldr	r1, [pc, #456]	; (11c4c <main+0x17bc>)
   11a82:	4b82      	ldr	r3, [pc, #520]	; (11c8c <main+0x17fc>)
   11a84:	220f      	movs	r2, #15
   11a86:	0018      	movs	r0, r3
   11a88:	4b6e      	ldr	r3, [pc, #440]	; (11c44 <main+0x17b4>)
   11a8a:	4798      	blx	r3

			SEND_LED_CHARS = 0;
   11a8c:	4b80      	ldr	r3, [pc, #512]	; (11c90 <main+0x1800>)
   11a8e:	2200      	movs	r2, #0
   11a90:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11a92:	4b80      	ldr	r3, [pc, #512]	; (11c94 <main+0x1804>)
   11a94:	2201      	movs	r2, #1
   11a96:	701a      	strb	r2, [r3, #0]
		}
		

		//////////////////////////   Handle Orientation Request   /////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ORIENTAION_CONFIG)
   11a98:	4b7f      	ldr	r3, [pc, #508]	; (11c98 <main+0x1808>)
   11a9a:	781b      	ldrb	r3, [r3, #0]
   11a9c:	2b00      	cmp	r3, #0
   11a9e:	d026      	beq.n	11aee <main+0x165e>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11aa0:	46c0      	nop			; (mov r8, r8)
   11aa2:	4b69      	ldr	r3, [pc, #420]	; (11c48 <main+0x17b8>)
   11aa4:	4798      	blx	r3
   11aa6:	0002      	movs	r2, r0
   11aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11aaa:	1ad3      	subs	r3, r2, r3
   11aac:	221e      	movs	r2, #30
   11aae:	18ba      	adds	r2, r7, r2
   11ab0:	8812      	ldrh	r2, [r2, #0]
   11ab2:	0052      	lsls	r2, r2, #1
   11ab4:	4293      	cmp	r3, r2
   11ab6:	d3f4      	bcc.n	11aa2 <main+0x1612>
			BLE_TX_TIME = millis();
   11ab8:	4b63      	ldr	r3, [pc, #396]	; (11c48 <main+0x17b8>)
   11aba:	4798      	blx	r3
   11abc:	0003      	movs	r3, r0
   11abe:	63bb      	str	r3, [r7, #56]	; 0x38

			// Global LED Settings
			ble_write_buffer[0] = 0x71;
   11ac0:	4b62      	ldr	r3, [pc, #392]	; (11c4c <main+0x17bc>)
   11ac2:	2271      	movs	r2, #113	; 0x71
   11ac4:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = ORIENTATION[0]; // Connectors Orientation
   11ac6:	4b75      	ldr	r3, [pc, #468]	; (11c9c <main+0x180c>)
   11ac8:	781a      	ldrb	r2, [r3, #0]
   11aca:	4b60      	ldr	r3, [pc, #384]	; (11c4c <main+0x17bc>)
   11acc:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = ORIENTATION[1]; // Power Orientation
   11ace:	4b73      	ldr	r3, [pc, #460]	; (11c9c <main+0x180c>)
   11ad0:	785a      	ldrb	r2, [r3, #1]
   11ad2:	4b5e      	ldr	r3, [pc, #376]	; (11c4c <main+0x17bc>)
   11ad4:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   11ad6:	495d      	ldr	r1, [pc, #372]	; (11c4c <main+0x17bc>)
   11ad8:	4b6c      	ldr	r3, [pc, #432]	; (11c8c <main+0x17fc>)
   11ada:	2203      	movs	r2, #3
   11adc:	0018      	movs	r0, r3
   11ade:	4b59      	ldr	r3, [pc, #356]	; (11c44 <main+0x17b4>)
   11ae0:	4798      	blx	r3


			SEND_ORIENTAION_CONFIG = 0;
   11ae2:	4b6d      	ldr	r3, [pc, #436]	; (11c98 <main+0x1808>)
   11ae4:	2200      	movs	r2, #0
   11ae6:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11ae8:	4b6a      	ldr	r3, [pc, #424]	; (11c94 <main+0x1804>)
   11aea:	2201      	movs	r2, #1
   11aec:	701a      	strb	r2, [r3, #0]
		}


		///////////////////////////   Handle Controls Request   ///////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_CONTROLS_CONFIG)
   11aee:	4b6c      	ldr	r3, [pc, #432]	; (11ca0 <main+0x1810>)
   11af0:	781b      	ldrb	r3, [r3, #0]
   11af2:	2b00      	cmp	r3, #0
   11af4:	d07c      	beq.n	11bf0 <main+0x1760>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11af6:	46c0      	nop			; (mov r8, r8)
   11af8:	4b53      	ldr	r3, [pc, #332]	; (11c48 <main+0x17b8>)
   11afa:	4798      	blx	r3
   11afc:	0002      	movs	r2, r0
   11afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11b00:	1ad3      	subs	r3, r2, r3
   11b02:	221e      	movs	r2, #30
   11b04:	18ba      	adds	r2, r7, r2
   11b06:	8812      	ldrh	r2, [r2, #0]
   11b08:	0052      	lsls	r2, r2, #1
   11b0a:	4293      	cmp	r3, r2
   11b0c:	d3f4      	bcc.n	11af8 <main+0x1668>
			BLE_TX_TIME = millis();
   11b0e:	4b4e      	ldr	r3, [pc, #312]	; (11c48 <main+0x17b8>)
   11b10:	4798      	blx	r3
   11b12:	0003      	movs	r3, r0
   11b14:	63bb      	str	r3, [r7, #56]	; 0x38

			// Global LED Settings
			ble_write_buffer[0] = 0x81;
   11b16:	4b4d      	ldr	r3, [pc, #308]	; (11c4c <main+0x17bc>)
   11b18:	2281      	movs	r2, #129	; 0x81
   11b1a:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((AUX_ENABLED << 7) | (TURN_ENABLED << 6) | auxControlType);
   11b1c:	4b61      	ldr	r3, [pc, #388]	; (11ca4 <main+0x1814>)
   11b1e:	781b      	ldrb	r3, [r3, #0]
   11b20:	01db      	lsls	r3, r3, #7
   11b22:	b25a      	sxtb	r2, r3
   11b24:	4b60      	ldr	r3, [pc, #384]	; (11ca8 <main+0x1818>)
   11b26:	781b      	ldrb	r3, [r3, #0]
   11b28:	019b      	lsls	r3, r3, #6
   11b2a:	b25b      	sxtb	r3, r3
   11b2c:	4313      	orrs	r3, r2
   11b2e:	b25a      	sxtb	r2, r3
   11b30:	4b5e      	ldr	r3, [pc, #376]	; (11cac <main+0x181c>)
   11b32:	781b      	ldrb	r3, [r3, #0]
   11b34:	b25b      	sxtb	r3, r3
   11b36:	4313      	orrs	r3, r2
   11b38:	b25b      	sxtb	r3, r3
   11b3a:	b2da      	uxtb	r2, r3
   11b3c:	4b43      	ldr	r3, [pc, #268]	; (11c4c <main+0x17bc>)
   11b3e:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)auxTimedDuration;
   11b40:	4b5b      	ldr	r3, [pc, #364]	; (11cb0 <main+0x1820>)
   11b42:	781a      	ldrb	r2, [r3, #0]
   11b44:	4b41      	ldr	r3, [pc, #260]	; (11c4c <main+0x17bc>)
   11b46:	709a      	strb	r2, [r3, #2]
			ble_write_buffer[3] = (uint8_t)((single_aux_control << 4) | single_all_control);
   11b48:	4b5a      	ldr	r3, [pc, #360]	; (11cb4 <main+0x1824>)
   11b4a:	781b      	ldrb	r3, [r3, #0]
   11b4c:	011b      	lsls	r3, r3, #4
   11b4e:	b25a      	sxtb	r2, r3
   11b50:	4b59      	ldr	r3, [pc, #356]	; (11cb8 <main+0x1828>)
   11b52:	781b      	ldrb	r3, [r3, #0]
   11b54:	b25b      	sxtb	r3, r3
   11b56:	4313      	orrs	r3, r2
   11b58:	b25b      	sxtb	r3, r3
   11b5a:	b2da      	uxtb	r2, r3
   11b5c:	4b3b      	ldr	r3, [pc, #236]	; (11c4c <main+0x17bc>)
   11b5e:	70da      	strb	r2, [r3, #3]
			ble_write_buffer[4] = (uint8_t)((single_head_control << 4) | single_side_control);
   11b60:	4b56      	ldr	r3, [pc, #344]	; (11cbc <main+0x182c>)
   11b62:	781b      	ldrb	r3, [r3, #0]
   11b64:	011b      	lsls	r3, r3, #4
   11b66:	b25a      	sxtb	r2, r3
   11b68:	4b55      	ldr	r3, [pc, #340]	; (11cc0 <main+0x1830>)
   11b6a:	781b      	ldrb	r3, [r3, #0]
   11b6c:	b25b      	sxtb	r3, r3
   11b6e:	4313      	orrs	r3, r2
   11b70:	b25b      	sxtb	r3, r3
   11b72:	b2da      	uxtb	r2, r3
   11b74:	4b35      	ldr	r3, [pc, #212]	; (11c4c <main+0x17bc>)
   11b76:	711a      	strb	r2, [r3, #4]
			ble_write_buffer[5] = (uint8_t)((single_down_control << 4) | single_up_control);
   11b78:	4b52      	ldr	r3, [pc, #328]	; (11cc4 <main+0x1834>)
   11b7a:	781b      	ldrb	r3, [r3, #0]
   11b7c:	011b      	lsls	r3, r3, #4
   11b7e:	b25a      	sxtb	r2, r3
   11b80:	4b51      	ldr	r3, [pc, #324]	; (11cc8 <main+0x1838>)
   11b82:	781b      	ldrb	r3, [r3, #0]
   11b84:	b25b      	sxtb	r3, r3
   11b86:	4313      	orrs	r3, r2
   11b88:	b25b      	sxtb	r3, r3
   11b8a:	b2da      	uxtb	r2, r3
   11b8c:	4b2f      	ldr	r3, [pc, #188]	; (11c4c <main+0x17bc>)
   11b8e:	715a      	strb	r2, [r3, #5]
			ble_write_buffer[6] = (uint8_t)((dual_aux_control << 4) | dual_all_control);
   11b90:	4b4e      	ldr	r3, [pc, #312]	; (11ccc <main+0x183c>)
   11b92:	781b      	ldrb	r3, [r3, #0]
   11b94:	011b      	lsls	r3, r3, #4
   11b96:	b25a      	sxtb	r2, r3
   11b98:	4b4d      	ldr	r3, [pc, #308]	; (11cd0 <main+0x1840>)
   11b9a:	781b      	ldrb	r3, [r3, #0]
   11b9c:	b25b      	sxtb	r3, r3
   11b9e:	4313      	orrs	r3, r2
   11ba0:	b25b      	sxtb	r3, r3
   11ba2:	b2da      	uxtb	r2, r3
   11ba4:	4b29      	ldr	r3, [pc, #164]	; (11c4c <main+0x17bc>)
   11ba6:	719a      	strb	r2, [r3, #6]
			ble_write_buffer[7] = (uint8_t)((dual_head_control << 4) | dual_side_control);
   11ba8:	4b4a      	ldr	r3, [pc, #296]	; (11cd4 <main+0x1844>)
   11baa:	781b      	ldrb	r3, [r3, #0]
   11bac:	011b      	lsls	r3, r3, #4
   11bae:	b25a      	sxtb	r2, r3
   11bb0:	4b49      	ldr	r3, [pc, #292]	; (11cd8 <main+0x1848>)
   11bb2:	781b      	ldrb	r3, [r3, #0]
   11bb4:	b25b      	sxtb	r3, r3
   11bb6:	4313      	orrs	r3, r2
   11bb8:	b25b      	sxtb	r3, r3
   11bba:	b2da      	uxtb	r2, r3
   11bbc:	4b23      	ldr	r3, [pc, #140]	; (11c4c <main+0x17bc>)
   11bbe:	71da      	strb	r2, [r3, #7]
			ble_write_buffer[8] = (uint8_t)((dual_down_control << 4) | dual_up_control);
   11bc0:	4b46      	ldr	r3, [pc, #280]	; (11cdc <main+0x184c>)
   11bc2:	781b      	ldrb	r3, [r3, #0]
   11bc4:	011b      	lsls	r3, r3, #4
   11bc6:	b25a      	sxtb	r2, r3
   11bc8:	4b45      	ldr	r3, [pc, #276]	; (11ce0 <main+0x1850>)
   11bca:	781b      	ldrb	r3, [r3, #0]
   11bcc:	b25b      	sxtb	r3, r3
   11bce:	4313      	orrs	r3, r2
   11bd0:	b25b      	sxtb	r3, r3
   11bd2:	b2da      	uxtb	r2, r3
   11bd4:	4b1d      	ldr	r3, [pc, #116]	; (11c4c <main+0x17bc>)
   11bd6:	721a      	strb	r2, [r3, #8]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 9);
   11bd8:	491c      	ldr	r1, [pc, #112]	; (11c4c <main+0x17bc>)
   11bda:	4b2c      	ldr	r3, [pc, #176]	; (11c8c <main+0x17fc>)
   11bdc:	2209      	movs	r2, #9
   11bde:	0018      	movs	r0, r3
   11be0:	4b18      	ldr	r3, [pc, #96]	; (11c44 <main+0x17b4>)
   11be2:	4798      	blx	r3

			SEND_CONTROLS_CONFIG = 0;
   11be4:	4b2e      	ldr	r3, [pc, #184]	; (11ca0 <main+0x1810>)
   11be6:	2200      	movs	r2, #0
   11be8:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11bea:	4b2a      	ldr	r3, [pc, #168]	; (11c94 <main+0x1804>)
   11bec:	2201      	movs	r2, #1
   11bee:	701a      	strb	r2, [r3, #0]
		}


		/////////////////////////   Handle Remote Config Request   ////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_REMOTE_CONFIG)
   11bf0:	4b3c      	ldr	r3, [pc, #240]	; (11ce4 <main+0x1854>)
   11bf2:	781b      	ldrb	r3, [r3, #0]
   11bf4:	2b00      	cmp	r3, #0
   11bf6:	d100      	bne.n	11bfa <main+0x176a>
   11bf8:	e087      	b.n	11d0a <main+0x187a>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11bfa:	46c0      	nop			; (mov r8, r8)
   11bfc:	4b12      	ldr	r3, [pc, #72]	; (11c48 <main+0x17b8>)
   11bfe:	4798      	blx	r3
   11c00:	0002      	movs	r2, r0
   11c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11c04:	1ad3      	subs	r3, r2, r3
   11c06:	221e      	movs	r2, #30
   11c08:	18ba      	adds	r2, r7, r2
   11c0a:	8812      	ldrh	r2, [r2, #0]
   11c0c:	0052      	lsls	r2, r2, #1
   11c0e:	4293      	cmp	r3, r2
   11c10:	d3f4      	bcc.n	11bfc <main+0x176c>
			BLE_TX_TIME = millis();
   11c12:	4b0d      	ldr	r3, [pc, #52]	; (11c48 <main+0x17b8>)
   11c14:	4798      	blx	r3
   11c16:	0003      	movs	r3, r0
   11c18:	63bb      	str	r3, [r7, #56]	; 0x38

			// Global LED Settings
			ble_write_buffer[0] = 0x72;
   11c1a:	4b0c      	ldr	r3, [pc, #48]	; (11c4c <main+0x17bc>)
   11c1c:	2272      	movs	r2, #114	; 0x72
   11c1e:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)((remote_type << 4) | button_type);
   11c20:	4b31      	ldr	r3, [pc, #196]	; (11ce8 <main+0x1858>)
   11c22:	781b      	ldrb	r3, [r3, #0]
   11c24:	011b      	lsls	r3, r3, #4
   11c26:	b25a      	sxtb	r2, r3
   11c28:	4b30      	ldr	r3, [pc, #192]	; (11cec <main+0x185c>)
   11c2a:	781b      	ldrb	r3, [r3, #0]
   11c2c:	b25b      	sxtb	r3, r3
   11c2e:	4313      	orrs	r3, r2
   11c30:	b25b      	sxtb	r3, r3
   11c32:	b2da      	uxtb	r2, r3
   11c34:	4b05      	ldr	r3, [pc, #20]	; (11c4c <main+0x17bc>)
   11c36:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)(deadzone);
   11c38:	4b2d      	ldr	r3, [pc, #180]	; (11cf0 <main+0x1860>)
   11c3a:	781a      	ldrb	r2, [r3, #0]
   11c3c:	4b03      	ldr	r3, [pc, #12]	; (11c4c <main+0x17bc>)
   11c3e:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   11c40:	4902      	ldr	r1, [pc, #8]	; (11c4c <main+0x17bc>)
   11c42:	e057      	b.n	11cf4 <main+0x1864>
   11c44:	000063bd 	.word	0x000063bd
   11c48:	0000aee1 	.word	0x0000aee1
   11c4c:	20000910 	.word	0x20000910
   11c50:	20000028 	.word	0x20000028
   11c54:	00014891 	.word	0x00014891
   11c58:	42c80000 	.word	0x42c80000
   11c5c:	00014121 	.word	0x00014121
   11c60:	2000004c 	.word	0x2000004c
   11c64:	20000070 	.word	0x20000070
   11c68:	2000007c 	.word	0x2000007c
   11c6c:	20000088 	.word	0x20000088
   11c70:	20000094 	.word	0x20000094
   11c74:	00014ee9 	.word	0x00014ee9
   11c78:	00016a85 	.word	0x00016a85
   11c7c:	00015595 	.word	0x00015595
   11c80:	cccccccd 	.word	0xcccccccd
   11c84:	40847acc 	.word	0x40847acc
   11c88:	00014151 	.word	0x00014151
   11c8c:	200004a0 	.word	0x200004a0
   11c90:	200003b0 	.word	0x200003b0
   11c94:	200000e4 	.word	0x200000e4
   11c98:	200003db 	.word	0x200003db
   11c9c:	20000004 	.word	0x20000004
   11ca0:	200003dc 	.word	0x200003dc
   11ca4:	20000374 	.word	0x20000374
   11ca8:	20000375 	.word	0x20000375
   11cac:	20000377 	.word	0x20000377
   11cb0:	20000378 	.word	0x20000378
   11cb4:	20000379 	.word	0x20000379
   11cb8:	2000037a 	.word	0x2000037a
   11cbc:	2000037b 	.word	0x2000037b
   11cc0:	2000037c 	.word	0x2000037c
   11cc4:	2000037e 	.word	0x2000037e
   11cc8:	2000037d 	.word	0x2000037d
   11ccc:	2000037f 	.word	0x2000037f
   11cd0:	20000380 	.word	0x20000380
   11cd4:	20000381 	.word	0x20000381
   11cd8:	20000382 	.word	0x20000382
   11cdc:	20000384 	.word	0x20000384
   11ce0:	20000383 	.word	0x20000383
   11ce4:	200003dd 	.word	0x200003dd
   11ce8:	20000308 	.word	0x20000308
   11cec:	20000309 	.word	0x20000309
   11cf0:	20000018 	.word	0x20000018
   11cf4:	4bd3      	ldr	r3, [pc, #844]	; (12044 <main+0x1bb4>)
   11cf6:	2203      	movs	r2, #3
   11cf8:	0018      	movs	r0, r3
   11cfa:	4bd3      	ldr	r3, [pc, #844]	; (12048 <main+0x1bb8>)
   11cfc:	4798      	blx	r3

			SEND_REMOTE_CONFIG = 0;
   11cfe:	4bd3      	ldr	r3, [pc, #844]	; (1204c <main+0x1bbc>)
   11d00:	2200      	movs	r2, #0
   11d02:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11d04:	4bd2      	ldr	r3, [pc, #840]	; (12050 <main+0x1bc0>)
   11d06:	2201      	movs	r2, #1
   11d08:	701a      	strb	r2, [r3, #0]
		}


		//////////////////////////   Handle ESC Config Request   //////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(SEND_ESC_CONFIG)
   11d0a:	4bd2      	ldr	r3, [pc, #840]	; (12054 <main+0x1bc4>)
   11d0c:	781b      	ldrb	r3, [r3, #0]
   11d0e:	2b00      	cmp	r3, #0
   11d10:	d02e      	beq.n	11d70 <main+0x18e0>
		{
			while((millis()-BLE_TX_TIME) < BLE_TX_DELAY*2){}
   11d12:	46c0      	nop			; (mov r8, r8)
   11d14:	4bd0      	ldr	r3, [pc, #832]	; (12058 <main+0x1bc8>)
   11d16:	4798      	blx	r3
   11d18:	0002      	movs	r2, r0
   11d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11d1c:	1ad3      	subs	r3, r2, r3
   11d1e:	221e      	movs	r2, #30
   11d20:	18ba      	adds	r2, r7, r2
   11d22:	8812      	ldrh	r2, [r2, #0]
   11d24:	0052      	lsls	r2, r2, #1
   11d26:	4293      	cmp	r3, r2
   11d28:	d3f4      	bcc.n	11d14 <main+0x1884>
			BLE_TX_TIME = millis();
   11d2a:	4bcb      	ldr	r3, [pc, #812]	; (12058 <main+0x1bc8>)
   11d2c:	4798      	blx	r3
   11d2e:	0003      	movs	r3, r0
   11d30:	63bb      	str	r3, [r7, #56]	; 0x38

			// Global LED Settings
			ble_write_buffer[0] = 0x73;
   11d32:	4bca      	ldr	r3, [pc, #808]	; (1205c <main+0x1bcc>)
   11d34:	2273      	movs	r2, #115	; 0x73
   11d36:	701a      	strb	r2, [r3, #0]
			ble_write_buffer[1] = (uint8_t)(esc_fw);
   11d38:	4bc9      	ldr	r3, [pc, #804]	; (12060 <main+0x1bd0>)
   11d3a:	781a      	ldrb	r2, [r3, #0]
   11d3c:	4bc7      	ldr	r3, [pc, #796]	; (1205c <main+0x1bcc>)
   11d3e:	705a      	strb	r2, [r3, #1]
			ble_write_buffer[2] = (uint8_t)((esc_comms << 4) | UART_baud);
   11d40:	4bc8      	ldr	r3, [pc, #800]	; (12064 <main+0x1bd4>)
   11d42:	781b      	ldrb	r3, [r3, #0]
   11d44:	011b      	lsls	r3, r3, #4
   11d46:	b25a      	sxtb	r2, r3
   11d48:	4bc7      	ldr	r3, [pc, #796]	; (12068 <main+0x1bd8>)
   11d4a:	781b      	ldrb	r3, [r3, #0]
   11d4c:	b25b      	sxtb	r3, r3
   11d4e:	4313      	orrs	r3, r2
   11d50:	b25b      	sxtb	r3, r3
   11d52:	b2da      	uxtb	r2, r3
   11d54:	4bc1      	ldr	r3, [pc, #772]	; (1205c <main+0x1bcc>)
   11d56:	709a      	strb	r2, [r3, #2]
			usart_write_buffer_wait(&ble_usart, ble_write_buffer, 3);
   11d58:	49c0      	ldr	r1, [pc, #768]	; (1205c <main+0x1bcc>)
   11d5a:	4bba      	ldr	r3, [pc, #744]	; (12044 <main+0x1bb4>)
   11d5c:	2203      	movs	r2, #3
   11d5e:	0018      	movs	r0, r3
   11d60:	4bb9      	ldr	r3, [pc, #740]	; (12048 <main+0x1bb8>)
   11d62:	4798      	blx	r3

			SEND_ESC_CONFIG = 0;
   11d64:	4bbb      	ldr	r3, [pc, #748]	; (12054 <main+0x1bc4>)
   11d66:	2200      	movs	r2, #0
   11d68:	701a      	strb	r2, [r3, #0]
			SEND_CONTINUOUS = 1;
   11d6a:	4bb9      	ldr	r3, [pc, #740]	; (12050 <main+0x1bc0>)
   11d6c:	2201      	movs	r2, #1
   11d6e:	701a      	strb	r2, [r3, #0]
		}
		

		////////////////////////////////   LED Controls   /////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		HandleUserInput();
   11d70:	4bbe      	ldr	r3, [pc, #760]	; (1206c <main+0x1bdc>)
   11d72:	4798      	blx	r3


		//////////////////////////////////   LED MODES   //////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////
		if(sensorControl() && LIGHTS_ON){
   11d74:	4bbe      	ldr	r3, [pc, #760]	; (12070 <main+0x1be0>)
   11d76:	4798      	blx	r3
   11d78:	1e03      	subs	r3, r0, #0
   11d7a:	d101      	bne.n	11d80 <main+0x18f0>
   11d7c:	f001 fc1d 	bl	135ba <main+0x312a>
   11d80:	4bbc      	ldr	r3, [pc, #752]	; (12074 <main+0x1be4>)
   11d82:	781b      	ldrb	r3, [r3, #0]
   11d84:	2b00      	cmp	r3, #0
   11d86:	d101      	bne.n	11d8c <main+0x18fc>
   11d88:	f001 fc17 	bl	135ba <main+0x312a>
			if(SIDELIGHTS && lightControlSide()){
   11d8c:	4bba      	ldr	r3, [pc, #744]	; (12078 <main+0x1be8>)
   11d8e:	781b      	ldrb	r3, [r3, #0]
   11d90:	2b00      	cmp	r3, #0
   11d92:	d101      	bne.n	11d98 <main+0x1908>
   11d94:	f001 fba8 	bl	134e8 <main+0x3058>
   11d98:	4bb8      	ldr	r3, [pc, #736]	; (1207c <main+0x1bec>)
   11d9a:	4798      	blx	r3
   11d9c:	1e03      	subs	r3, r0, #0
   11d9e:	d101      	bne.n	11da4 <main+0x1914>
   11da0:	f001 fba2 	bl	134e8 <main+0x3058>
			// brightness is a value from 0 to 1
			static float output_brightness = 0;

			// Variable for controlling the rate or sensitivity in applicable modes
			// brightness is a value from 0 to 1
			float output_rate_sens = 0;
   11da4:	2300      	movs	r3, #0
   11da6:	633b      	str	r3, [r7, #48]	; 0x30

			switch(RateBase[light_mode]){ // Set the value to be used for rate or sensitivity in the side LED algorithm
   11da8:	4bb5      	ldr	r3, [pc, #724]	; (12080 <main+0x1bf0>)
   11daa:	781b      	ldrb	r3, [r3, #0]
   11dac:	001a      	movs	r2, r3
   11dae:	4bb5      	ldr	r3, [pc, #724]	; (12084 <main+0x1bf4>)
   11db0:	5c9b      	ldrb	r3, [r3, r2]
   11db2:	2b07      	cmp	r3, #7
   11db4:	d900      	bls.n	11db8 <main+0x1928>
   11db6:	e0c7      	b.n	11f48 <main+0x1ab8>
   11db8:	009a      	lsls	r2, r3, #2
   11dba:	4bb3      	ldr	r3, [pc, #716]	; (12088 <main+0x1bf8>)
   11dbc:	18d3      	adds	r3, r2, r3
   11dbe:	681b      	ldr	r3, [r3, #0]
   11dc0:	469f      	mov	pc, r3
				case RATE_STATIC:
				{
					output_rate_sens = RateSens[light_mode];
   11dc2:	4baf      	ldr	r3, [pc, #700]	; (12080 <main+0x1bf0>)
   11dc4:	781b      	ldrb	r3, [r3, #0]
   11dc6:	001a      	movs	r2, r3
   11dc8:	4bb0      	ldr	r3, [pc, #704]	; (1208c <main+0x1bfc>)
   11dca:	0092      	lsls	r2, r2, #2
   11dcc:	58d3      	ldr	r3, [r2, r3]
   11dce:	633b      	str	r3, [r7, #48]	; 0x30
					break;
   11dd0:	e0ba      	b.n	11f48 <main+0x1ab8>
				}
				case RATE_YAW_RATE:
				{
					if(gzKalman < 0)
   11dd2:	4baf      	ldr	r3, [pc, #700]	; (12090 <main+0x1c00>)
   11dd4:	681a      	ldr	r2, [r3, #0]
   11dd6:	4baf      	ldr	r3, [pc, #700]	; (12094 <main+0x1c04>)
   11dd8:	2100      	movs	r1, #0
   11dda:	1c10      	adds	r0, r2, #0
   11ddc:	4798      	blx	r3
   11dde:	1e03      	subs	r3, r0, #0
   11de0:	d009      	beq.n	11df6 <main+0x1966>
						output_rate_sens = gzKalman/kalmanGZ_min;
   11de2:	4bab      	ldr	r3, [pc, #684]	; (12090 <main+0x1c00>)
   11de4:	681a      	ldr	r2, [r3, #0]
   11de6:	4bac      	ldr	r3, [pc, #688]	; (12098 <main+0x1c08>)
   11de8:	6819      	ldr	r1, [r3, #0]
   11dea:	4bac      	ldr	r3, [pc, #688]	; (1209c <main+0x1c0c>)
   11dec:	1c10      	adds	r0, r2, #0
   11dee:	4798      	blx	r3
   11df0:	1c03      	adds	r3, r0, #0
   11df2:	633b      	str	r3, [r7, #48]	; 0x30
					else
						output_rate_sens = gzKalman/kalmanGZ_max;
					break;
   11df4:	e0a8      	b.n	11f48 <main+0x1ab8>
						output_rate_sens = gzKalman/kalmanGZ_max;
   11df6:	4ba6      	ldr	r3, [pc, #664]	; (12090 <main+0x1c00>)
   11df8:	681a      	ldr	r2, [r3, #0]
   11dfa:	4ba9      	ldr	r3, [pc, #676]	; (120a0 <main+0x1c10>)
   11dfc:	6819      	ldr	r1, [r3, #0]
   11dfe:	4ba7      	ldr	r3, [pc, #668]	; (1209c <main+0x1c0c>)
   11e00:	1c10      	adds	r0, r2, #0
   11e02:	4798      	blx	r3
   11e04:	1c03      	adds	r3, r0, #0
   11e06:	633b      	str	r3, [r7, #48]	; 0x30
					break;
   11e08:	e09e      	b.n	11f48 <main+0x1ab8>
				}
				case RATE_ROLL_RATE:
				{
					if(gyKalman < 0)
   11e0a:	4ba6      	ldr	r3, [pc, #664]	; (120a4 <main+0x1c14>)
   11e0c:	681a      	ldr	r2, [r3, #0]
   11e0e:	4ba1      	ldr	r3, [pc, #644]	; (12094 <main+0x1c04>)
   11e10:	2100      	movs	r1, #0
   11e12:	1c10      	adds	r0, r2, #0
   11e14:	4798      	blx	r3
   11e16:	1e03      	subs	r3, r0, #0
   11e18:	d009      	beq.n	11e2e <main+0x199e>
						output_rate_sens = gyKalman/kalmanGY_min;
   11e1a:	4ba2      	ldr	r3, [pc, #648]	; (120a4 <main+0x1c14>)
   11e1c:	681a      	ldr	r2, [r3, #0]
   11e1e:	4ba2      	ldr	r3, [pc, #648]	; (120a8 <main+0x1c18>)
   11e20:	6819      	ldr	r1, [r3, #0]
   11e22:	4b9e      	ldr	r3, [pc, #632]	; (1209c <main+0x1c0c>)
   11e24:	1c10      	adds	r0, r2, #0
   11e26:	4798      	blx	r3
   11e28:	1c03      	adds	r3, r0, #0
   11e2a:	633b      	str	r3, [r7, #48]	; 0x30
					else
						output_rate_sens = gyKalman/kalmanGY_max;
					break;
   11e2c:	e08c      	b.n	11f48 <main+0x1ab8>
						output_rate_sens = gyKalman/kalmanGY_max;
   11e2e:	4b9d      	ldr	r3, [pc, #628]	; (120a4 <main+0x1c14>)
   11e30:	681a      	ldr	r2, [r3, #0]
   11e32:	4b9e      	ldr	r3, [pc, #632]	; (120ac <main+0x1c1c>)
   11e34:	6819      	ldr	r1, [r3, #0]
   11e36:	4b99      	ldr	r3, [pc, #612]	; (1209c <main+0x1c0c>)
   11e38:	1c10      	adds	r0, r2, #0
   11e3a:	4798      	blx	r3
   11e3c:	1c03      	adds	r3, r0, #0
   11e3e:	633b      	str	r3, [r7, #48]	; 0x30
					break;
   11e40:	e082      	b.n	11f48 <main+0x1ab8>
				}
				case RATE_RPM:
				{
					output_rate_sens = (((float)latest_vesc_vals.rpm)/mcconf_limits.max_erpm);
   11e42:	4b9b      	ldr	r3, [pc, #620]	; (120b0 <main+0x1c20>)
   11e44:	691a      	ldr	r2, [r3, #16]
   11e46:	4b9b      	ldr	r3, [pc, #620]	; (120b4 <main+0x1c24>)
   11e48:	0010      	movs	r0, r2
   11e4a:	4798      	blx	r3
   11e4c:	1c04      	adds	r4, r0, #0
   11e4e:	4b9a      	ldr	r3, [pc, #616]	; (120b8 <main+0x1c28>)
   11e50:	699a      	ldr	r2, [r3, #24]
   11e52:	4b98      	ldr	r3, [pc, #608]	; (120b4 <main+0x1c24>)
   11e54:	0010      	movs	r0, r2
   11e56:	4798      	blx	r3
   11e58:	1c02      	adds	r2, r0, #0
   11e5a:	4b90      	ldr	r3, [pc, #576]	; (1209c <main+0x1c0c>)
   11e5c:	1c11      	adds	r1, r2, #0
   11e5e:	1c20      	adds	r0, r4, #0
   11e60:	4798      	blx	r3
   11e62:	1c03      	adds	r3, r0, #0
   11e64:	633b      	str	r3, [r7, #48]	; 0x30
					break;
   11e66:	e06f      	b.n	11f48 <main+0x1ab8>
				}
				case RATE_THROTTLE:
				{
					float temp_y = remote_y - 43;
   11e68:	4b94      	ldr	r3, [pc, #592]	; (120bc <main+0x1c2c>)
   11e6a:	781b      	ldrb	r3, [r3, #0]
   11e6c:	3b2b      	subs	r3, #43	; 0x2b
   11e6e:	001a      	movs	r2, r3
   11e70:	4b90      	ldr	r3, [pc, #576]	; (120b4 <main+0x1c24>)
   11e72:	0010      	movs	r0, r2
   11e74:	4798      	blx	r3
   11e76:	1c03      	adds	r3, r0, #0
   11e78:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(temp_y < 0 )
   11e7a:	4b86      	ldr	r3, [pc, #536]	; (12094 <main+0x1c04>)
   11e7c:	2100      	movs	r1, #0
   11e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11e80:	4798      	blx	r3
   11e82:	1e03      	subs	r3, r0, #0
   11e84:	d005      	beq.n	11e92 <main+0x1a02>
						temp_y = 255+temp_y;
   11e86:	4b8e      	ldr	r3, [pc, #568]	; (120c0 <main+0x1c30>)
   11e88:	498e      	ldr	r1, [pc, #568]	; (120c4 <main+0x1c34>)
   11e8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11e8c:	4798      	blx	r3
   11e8e:	1c03      	adds	r3, r0, #0
   11e90:	62fb      	str	r3, [r7, #44]	; 0x2c
					output_rate_sens = temp_y/255.0;
   11e92:	4b82      	ldr	r3, [pc, #520]	; (1209c <main+0x1c0c>)
   11e94:	498b      	ldr	r1, [pc, #556]	; (120c4 <main+0x1c34>)
   11e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11e98:	4798      	blx	r3
   11e9a:	1c03      	adds	r3, r0, #0
   11e9c:	633b      	str	r3, [r7, #48]	; 0x30
				}
				break;
   11e9e:	e053      	b.n	11f48 <main+0x1ab8>
				case RATE_X_ACCEL:
				{
					if(axKalman < 0)
   11ea0:	4b89      	ldr	r3, [pc, #548]	; (120c8 <main+0x1c38>)
   11ea2:	681a      	ldr	r2, [r3, #0]
   11ea4:	4b7b      	ldr	r3, [pc, #492]	; (12094 <main+0x1c04>)
   11ea6:	2100      	movs	r1, #0
   11ea8:	1c10      	adds	r0, r2, #0
   11eaa:	4798      	blx	r3
   11eac:	1e03      	subs	r3, r0, #0
   11eae:	d009      	beq.n	11ec4 <main+0x1a34>
						output_rate_sens = axKalman/kalmanAX_min;
   11eb0:	4b85      	ldr	r3, [pc, #532]	; (120c8 <main+0x1c38>)
   11eb2:	681a      	ldr	r2, [r3, #0]
   11eb4:	4b85      	ldr	r3, [pc, #532]	; (120cc <main+0x1c3c>)
   11eb6:	6819      	ldr	r1, [r3, #0]
   11eb8:	4b78      	ldr	r3, [pc, #480]	; (1209c <main+0x1c0c>)
   11eba:	1c10      	adds	r0, r2, #0
   11ebc:	4798      	blx	r3
   11ebe:	1c03      	adds	r3, r0, #0
   11ec0:	633b      	str	r3, [r7, #48]	; 0x30
					else
						output_rate_sens = axKalman/kalmanAX_max;
					break;
   11ec2:	e041      	b.n	11f48 <main+0x1ab8>
						output_rate_sens = axKalman/kalmanAX_max;
   11ec4:	4b80      	ldr	r3, [pc, #512]	; (120c8 <main+0x1c38>)
   11ec6:	681a      	ldr	r2, [r3, #0]
   11ec8:	4b81      	ldr	r3, [pc, #516]	; (120d0 <main+0x1c40>)
   11eca:	6819      	ldr	r1, [r3, #0]
   11ecc:	4b73      	ldr	r3, [pc, #460]	; (1209c <main+0x1c0c>)
   11ece:	1c10      	adds	r0, r2, #0
   11ed0:	4798      	blx	r3
   11ed2:	1c03      	adds	r3, r0, #0
   11ed4:	633b      	str	r3, [r7, #48]	; 0x30
					break;
   11ed6:	e037      	b.n	11f48 <main+0x1ab8>
				}
				case RATE_Y_ACCEL:
				{
					if(ayKalman < 0)
   11ed8:	4b7e      	ldr	r3, [pc, #504]	; (120d4 <main+0x1c44>)
   11eda:	681a      	ldr	r2, [r3, #0]
   11edc:	4b6d      	ldr	r3, [pc, #436]	; (12094 <main+0x1c04>)
   11ede:	2100      	movs	r1, #0
   11ee0:	1c10      	adds	r0, r2, #0
   11ee2:	4798      	blx	r3
   11ee4:	1e03      	subs	r3, r0, #0
   11ee6:	d009      	beq.n	11efc <main+0x1a6c>
						output_rate_sens = ayKalman/kalmanAY_min;
   11ee8:	4b7a      	ldr	r3, [pc, #488]	; (120d4 <main+0x1c44>)
   11eea:	681a      	ldr	r2, [r3, #0]
   11eec:	4b7a      	ldr	r3, [pc, #488]	; (120d8 <main+0x1c48>)
   11eee:	6819      	ldr	r1, [r3, #0]
   11ef0:	4b6a      	ldr	r3, [pc, #424]	; (1209c <main+0x1c0c>)
   11ef2:	1c10      	adds	r0, r2, #0
   11ef4:	4798      	blx	r3
   11ef6:	1c03      	adds	r3, r0, #0
   11ef8:	633b      	str	r3, [r7, #48]	; 0x30
					else
						output_rate_sens = ayKalman/kalmanAY_max;
					break;
   11efa:	e025      	b.n	11f48 <main+0x1ab8>
						output_rate_sens = ayKalman/kalmanAY_max;
   11efc:	4b75      	ldr	r3, [pc, #468]	; (120d4 <main+0x1c44>)
   11efe:	681a      	ldr	r2, [r3, #0]
   11f00:	4b76      	ldr	r3, [pc, #472]	; (120dc <main+0x1c4c>)
   11f02:	6819      	ldr	r1, [r3, #0]
   11f04:	4b65      	ldr	r3, [pc, #404]	; (1209c <main+0x1c0c>)
   11f06:	1c10      	adds	r0, r2, #0
   11f08:	4798      	blx	r3
   11f0a:	1c03      	adds	r3, r0, #0
   11f0c:	633b      	str	r3, [r7, #48]	; 0x30
					break;
   11f0e:	e01b      	b.n	11f48 <main+0x1ab8>
				}
				case RATE_Z_ACCEL:
				{
					if(azKalman < 0)
   11f10:	4b73      	ldr	r3, [pc, #460]	; (120e0 <main+0x1c50>)
   11f12:	681a      	ldr	r2, [r3, #0]
   11f14:	4b5f      	ldr	r3, [pc, #380]	; (12094 <main+0x1c04>)
   11f16:	2100      	movs	r1, #0
   11f18:	1c10      	adds	r0, r2, #0
   11f1a:	4798      	blx	r3
   11f1c:	1e03      	subs	r3, r0, #0
   11f1e:	d009      	beq.n	11f34 <main+0x1aa4>
						output_rate_sens = azKalman/kalmanAZ_min;
   11f20:	4b6f      	ldr	r3, [pc, #444]	; (120e0 <main+0x1c50>)
   11f22:	681a      	ldr	r2, [r3, #0]
   11f24:	4b6f      	ldr	r3, [pc, #444]	; (120e4 <main+0x1c54>)
   11f26:	6819      	ldr	r1, [r3, #0]
   11f28:	4b5c      	ldr	r3, [pc, #368]	; (1209c <main+0x1c0c>)
   11f2a:	1c10      	adds	r0, r2, #0
   11f2c:	4798      	blx	r3
   11f2e:	1c03      	adds	r3, r0, #0
   11f30:	633b      	str	r3, [r7, #48]	; 0x30
					else
						output_rate_sens = azKalman/kalmanAZ_max;
					break;
   11f32:	e008      	b.n	11f46 <main+0x1ab6>
						output_rate_sens = azKalman/kalmanAZ_max;
   11f34:	4b6a      	ldr	r3, [pc, #424]	; (120e0 <main+0x1c50>)
   11f36:	681a      	ldr	r2, [r3, #0]
   11f38:	4b6b      	ldr	r3, [pc, #428]	; (120e8 <main+0x1c58>)
   11f3a:	6819      	ldr	r1, [r3, #0]
   11f3c:	4b57      	ldr	r3, [pc, #348]	; (1209c <main+0x1c0c>)
   11f3e:	1c10      	adds	r0, r2, #0
   11f40:	4798      	blx	r3
   11f42:	1c03      	adds	r3, r0, #0
   11f44:	633b      	str	r3, [r7, #48]	; 0x30
					break;
   11f46:	46c0      	nop			; (mov r8, r8)
				}
			}
	
			if(output_rate_sens < 0)
   11f48:	4b52      	ldr	r3, [pc, #328]	; (12094 <main+0x1c04>)
   11f4a:	2100      	movs	r1, #0
   11f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   11f4e:	4798      	blx	r3
   11f50:	1e03      	subs	r3, r0, #0
   11f52:	d002      	beq.n	11f5a <main+0x1aca>
				output_rate_sens = 0;
   11f54:	2300      	movs	r3, #0
   11f56:	633b      	str	r3, [r7, #48]	; 0x30
   11f58:	e009      	b.n	11f6e <main+0x1ade>
			else if(output_rate_sens > 1)
   11f5a:	4b64      	ldr	r3, [pc, #400]	; (120ec <main+0x1c5c>)
   11f5c:	21fe      	movs	r1, #254	; 0xfe
   11f5e:	0589      	lsls	r1, r1, #22
   11f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
   11f62:	4798      	blx	r3
   11f64:	1e03      	subs	r3, r0, #0
   11f66:	d002      	beq.n	11f6e <main+0x1ade>
				output_rate_sens = 1;
   11f68:	23fe      	movs	r3, #254	; 0xfe
   11f6a:	059b      	lsls	r3, r3, #22
   11f6c:	633b      	str	r3, [r7, #48]	; 0x30

			switch(BrightBase[light_mode]){ // Set the Brightness of the side LEDs
   11f6e:	4b44      	ldr	r3, [pc, #272]	; (12080 <main+0x1bf0>)
   11f70:	781b      	ldrb	r3, [r3, #0]
   11f72:	001a      	movs	r2, r3
   11f74:	4b5e      	ldr	r3, [pc, #376]	; (120f0 <main+0x1c60>)
   11f76:	5c9b      	ldrb	r3, [r3, r2]
   11f78:	2b08      	cmp	r3, #8
   11f7a:	d900      	bls.n	11f7e <main+0x1aee>
   11f7c:	e181      	b.n	12282 <main+0x1df2>
   11f7e:	009a      	lsls	r2, r3, #2
   11f80:	4b5c      	ldr	r3, [pc, #368]	; (120f4 <main+0x1c64>)
   11f82:	18d3      	adds	r3, r2, r3
   11f84:	681b      	ldr	r3, [r3, #0]
   11f86:	469f      	mov	pc, r3
				case BRIGHT_STATIC:
				{
					output_brightness = Brightness[light_mode];
   11f88:	4b3d      	ldr	r3, [pc, #244]	; (12080 <main+0x1bf0>)
   11f8a:	781b      	ldrb	r3, [r3, #0]
   11f8c:	001a      	movs	r2, r3
   11f8e:	4b5a      	ldr	r3, [pc, #360]	; (120f8 <main+0x1c68>)
   11f90:	0092      	lsls	r2, r2, #2
   11f92:	58d2      	ldr	r2, [r2, r3]
   11f94:	4b59      	ldr	r3, [pc, #356]	; (120fc <main+0x1c6c>)
   11f96:	601a      	str	r2, [r3, #0]
					break;
   11f98:	e173      	b.n	12282 <main+0x1df2>
				}
				case BRIGHT_YAW_RATE:
				{
					if(gzKalman < 0)
   11f9a:	4b3d      	ldr	r3, [pc, #244]	; (12090 <main+0x1c00>)
   11f9c:	681a      	ldr	r2, [r3, #0]
   11f9e:	4b3d      	ldr	r3, [pc, #244]	; (12094 <main+0x1c04>)
   11fa0:	2100      	movs	r1, #0
   11fa2:	1c10      	adds	r0, r2, #0
   11fa4:	4798      	blx	r3
   11fa6:	1e03      	subs	r3, r0, #0
   11fa8:	d00b      	beq.n	11fc2 <main+0x1b32>
						output_brightness = gzKalman/kalmanGZ_min;
   11faa:	4b39      	ldr	r3, [pc, #228]	; (12090 <main+0x1c00>)
   11fac:	681a      	ldr	r2, [r3, #0]
   11fae:	4b3a      	ldr	r3, [pc, #232]	; (12098 <main+0x1c08>)
   11fb0:	6819      	ldr	r1, [r3, #0]
   11fb2:	4b3a      	ldr	r3, [pc, #232]	; (1209c <main+0x1c0c>)
   11fb4:	1c10      	adds	r0, r2, #0
   11fb6:	4798      	blx	r3
   11fb8:	1c03      	adds	r3, r0, #0
   11fba:	1c1a      	adds	r2, r3, #0
   11fbc:	4b4f      	ldr	r3, [pc, #316]	; (120fc <main+0x1c6c>)
   11fbe:	601a      	str	r2, [r3, #0]
					else
						output_brightness = gzKalman/kalmanGZ_max;
					break;
   11fc0:	e15f      	b.n	12282 <main+0x1df2>
						output_brightness = gzKalman/kalmanGZ_max;
   11fc2:	4b33      	ldr	r3, [pc, #204]	; (12090 <main+0x1c00>)
   11fc4:	681a      	ldr	r2, [r3, #0]
   11fc6:	4b36      	ldr	r3, [pc, #216]	; (120a0 <main+0x1c10>)
   11fc8:	6819      	ldr	r1, [r3, #0]
   11fca:	4b34      	ldr	r3, [pc, #208]	; (1209c <main+0x1c0c>)
   11fcc:	1c10      	adds	r0, r2, #0
   11fce:	4798      	blx	r3
   11fd0:	1c03      	adds	r3, r0, #0
   11fd2:	1c1a      	adds	r2, r3, #0
   11fd4:	4b49      	ldr	r3, [pc, #292]	; (120fc <main+0x1c6c>)
   11fd6:	601a      	str	r2, [r3, #0]
					break;
   11fd8:	e153      	b.n	12282 <main+0x1df2>
				}
				case BRIGHT_ROLL_RATE:
				{
					if(gyKalman < 0)
   11fda:	4b32      	ldr	r3, [pc, #200]	; (120a4 <main+0x1c14>)
   11fdc:	681a      	ldr	r2, [r3, #0]
   11fde:	4b2d      	ldr	r3, [pc, #180]	; (12094 <main+0x1c04>)
   11fe0:	2100      	movs	r1, #0
   11fe2:	1c10      	adds	r0, r2, #0
   11fe4:	4798      	blx	r3
   11fe6:	1e03      	subs	r3, r0, #0
   11fe8:	d00b      	beq.n	12002 <main+0x1b72>
						output_brightness = gyKalman/kalmanGY_min;
   11fea:	4b2e      	ldr	r3, [pc, #184]	; (120a4 <main+0x1c14>)
   11fec:	681a      	ldr	r2, [r3, #0]
   11fee:	4b2e      	ldr	r3, [pc, #184]	; (120a8 <main+0x1c18>)
   11ff0:	6819      	ldr	r1, [r3, #0]
   11ff2:	4b2a      	ldr	r3, [pc, #168]	; (1209c <main+0x1c0c>)
   11ff4:	1c10      	adds	r0, r2, #0
   11ff6:	4798      	blx	r3
   11ff8:	1c03      	adds	r3, r0, #0
   11ffa:	1c1a      	adds	r2, r3, #0
   11ffc:	4b3f      	ldr	r3, [pc, #252]	; (120fc <main+0x1c6c>)
   11ffe:	601a      	str	r2, [r3, #0]
					else
						output_brightness = gyKalman/kalmanGY_max;
					break;
   12000:	e13f      	b.n	12282 <main+0x1df2>
						output_brightness = gyKalman/kalmanGY_max;
   12002:	4b28      	ldr	r3, [pc, #160]	; (120a4 <main+0x1c14>)
   12004:	681a      	ldr	r2, [r3, #0]
   12006:	4b29      	ldr	r3, [pc, #164]	; (120ac <main+0x1c1c>)
   12008:	6819      	ldr	r1, [r3, #0]
   1200a:	4b24      	ldr	r3, [pc, #144]	; (1209c <main+0x1c0c>)
   1200c:	1c10      	adds	r0, r2, #0
   1200e:	4798      	blx	r3
   12010:	1c03      	adds	r3, r0, #0
   12012:	1c1a      	adds	r2, r3, #0
   12014:	4b39      	ldr	r3, [pc, #228]	; (120fc <main+0x1c6c>)
   12016:	601a      	str	r2, [r3, #0]
					break;
   12018:	e133      	b.n	12282 <main+0x1df2>
				}
				case BRIGHT_RPM:
				{
					output_brightness = (((float)latest_vesc_vals.rpm)/mcconf_limits.max_erpm);
   1201a:	4b25      	ldr	r3, [pc, #148]	; (120b0 <main+0x1c20>)
   1201c:	691a      	ldr	r2, [r3, #16]
   1201e:	4b25      	ldr	r3, [pc, #148]	; (120b4 <main+0x1c24>)
   12020:	0010      	movs	r0, r2
   12022:	4798      	blx	r3
   12024:	1c04      	adds	r4, r0, #0
   12026:	4b24      	ldr	r3, [pc, #144]	; (120b8 <main+0x1c28>)
   12028:	699a      	ldr	r2, [r3, #24]
   1202a:	4b22      	ldr	r3, [pc, #136]	; (120b4 <main+0x1c24>)
   1202c:	0010      	movs	r0, r2
   1202e:	4798      	blx	r3
   12030:	1c02      	adds	r2, r0, #0
   12032:	4b1a      	ldr	r3, [pc, #104]	; (1209c <main+0x1c0c>)
   12034:	1c11      	adds	r1, r2, #0
   12036:	1c20      	adds	r0, r4, #0
   12038:	4798      	blx	r3
   1203a:	1c03      	adds	r3, r0, #0
   1203c:	1c1a      	adds	r2, r3, #0
   1203e:	4b2f      	ldr	r3, [pc, #188]	; (120fc <main+0x1c6c>)
   12040:	601a      	str	r2, [r3, #0]
					break;
   12042:	e11e      	b.n	12282 <main+0x1df2>
   12044:	200004a0 	.word	0x200004a0
   12048:	000063bd 	.word	0x000063bd
   1204c:	200003dd 	.word	0x200003dd
   12050:	200000e4 	.word	0x200000e4
   12054:	200003de 	.word	0x200003de
   12058:	0000aee1 	.word	0x0000aee1
   1205c:	20000910 	.word	0x20000910
   12060:	2000001a 	.word	0x2000001a
   12064:	20000310 	.word	0x20000310
   12068:	20000311 	.word	0x20000311
   1206c:	0000d759 	.word	0x0000d759
   12070:	0001372d 	.word	0x0001372d
   12074:	200000a3 	.word	0x200000a3
   12078:	200000a2 	.word	0x200000a2
   1207c:	000138f5 	.word	0x000138f5
   12080:	2000001b 	.word	0x2000001b
   12084:	20000088 	.word	0x20000088
   12088:	00017588 	.word	0x00017588
   1208c:	20000028 	.word	0x20000028
   12090:	200003d4 	.word	0x200003d4
   12094:	0001407d 	.word	0x0001407d
   12098:	200000dc 	.word	0x200000dc
   1209c:	000144b1 	.word	0x000144b1
   120a0:	200000e0 	.word	0x200000e0
   120a4:	200003d0 	.word	0x200003d0
   120a8:	200000d4 	.word	0x200000d4
   120ac:	200000d8 	.word	0x200000d8
   120b0:	20000940 	.word	0x20000940
   120b4:	00014e49 	.word	0x00014e49
   120b8:	20000db4 	.word	0x20000db4
   120bc:	2000030a 	.word	0x2000030a
   120c0:	0001418d 	.word	0x0001418d
   120c4:	437f0000 	.word	0x437f0000
   120c8:	200003c0 	.word	0x200003c0
   120cc:	200000b4 	.word	0x200000b4
   120d0:	200000b8 	.word	0x200000b8
   120d4:	200003c4 	.word	0x200003c4
   120d8:	200000bc 	.word	0x200000bc
   120dc:	200000c0 	.word	0x200000c0
   120e0:	200003c8 	.word	0x200003c8
   120e4:	200000c4 	.word	0x200000c4
   120e8:	200000c8 	.word	0x200000c8
   120ec:	000140a5 	.word	0x000140a5
   120f0:	2000007c 	.word	0x2000007c
   120f4:	000175a8 	.word	0x000175a8
   120f8:	2000004c 	.word	0x2000004c
   120fc:	200003e8 	.word	0x200003e8
				}
				case BRIGHT_THROTTLE:
				{
					float temp_y = remote_y - 43;
   12100:	4bb5      	ldr	r3, [pc, #724]	; (123d8 <main+0x1f48>)
   12102:	781b      	ldrb	r3, [r3, #0]
   12104:	3b2b      	subs	r3, #43	; 0x2b
   12106:	001a      	movs	r2, r3
   12108:	4bb4      	ldr	r3, [pc, #720]	; (123dc <main+0x1f4c>)
   1210a:	0010      	movs	r0, r2
   1210c:	4798      	blx	r3
   1210e:	1c03      	adds	r3, r0, #0
   12110:	62bb      	str	r3, [r7, #40]	; 0x28
					if(temp_y < 0 )
   12112:	4bb3      	ldr	r3, [pc, #716]	; (123e0 <main+0x1f50>)
   12114:	2100      	movs	r1, #0
   12116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12118:	4798      	blx	r3
   1211a:	1e03      	subs	r3, r0, #0
   1211c:	d005      	beq.n	1212a <main+0x1c9a>
						temp_y = 255+temp_y;
   1211e:	4bb1      	ldr	r3, [pc, #708]	; (123e4 <main+0x1f54>)
   12120:	49b1      	ldr	r1, [pc, #708]	; (123e8 <main+0x1f58>)
   12122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12124:	4798      	blx	r3
   12126:	1c03      	adds	r3, r0, #0
   12128:	62bb      	str	r3, [r7, #40]	; 0x28
					output_brightness = temp_y/255.0;
   1212a:	4bb0      	ldr	r3, [pc, #704]	; (123ec <main+0x1f5c>)
   1212c:	49ae      	ldr	r1, [pc, #696]	; (123e8 <main+0x1f58>)
   1212e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12130:	4798      	blx	r3
   12132:	1c03      	adds	r3, r0, #0
   12134:	1c1a      	adds	r2, r3, #0
   12136:	4bae      	ldr	r3, [pc, #696]	; (123f0 <main+0x1f60>)
   12138:	601a      	str	r2, [r3, #0]
					break;
   1213a:	e0a2      	b.n	12282 <main+0x1df2>
				}
				case BRIGHT_X_ACCEL:
				{
					if(axKalman < 0){
   1213c:	4bad      	ldr	r3, [pc, #692]	; (123f4 <main+0x1f64>)
   1213e:	681a      	ldr	r2, [r3, #0]
   12140:	4ba7      	ldr	r3, [pc, #668]	; (123e0 <main+0x1f50>)
   12142:	2100      	movs	r1, #0
   12144:	1c10      	adds	r0, r2, #0
   12146:	4798      	blx	r3
   12148:	1e03      	subs	r3, r0, #0
   1214a:	d00e      	beq.n	1216a <main+0x1cda>
						output_brightness = axKalman/kalmanAX_min;
   1214c:	4ba9      	ldr	r3, [pc, #676]	; (123f4 <main+0x1f64>)
   1214e:	681a      	ldr	r2, [r3, #0]
   12150:	4ba9      	ldr	r3, [pc, #676]	; (123f8 <main+0x1f68>)
   12152:	6819      	ldr	r1, [r3, #0]
   12154:	4ba5      	ldr	r3, [pc, #660]	; (123ec <main+0x1f5c>)
   12156:	1c10      	adds	r0, r2, #0
   12158:	4798      	blx	r3
   1215a:	1c03      	adds	r3, r0, #0
   1215c:	1c1a      	adds	r2, r3, #0
   1215e:	4ba4      	ldr	r3, [pc, #656]	; (123f0 <main+0x1f60>)
   12160:	601a      	str	r2, [r3, #0]
						SUPRESS_LEFT_RGB = true;
   12162:	4ba6      	ldr	r3, [pc, #664]	; (123fc <main+0x1f6c>)
   12164:	2201      	movs	r2, #1
   12166:	701a      	strb	r2, [r3, #0]
					} else{
						output_brightness = axKalman/kalmanAX_max;
						SUPRESS_RIGHT_RGB = true;
					}
					break;
   12168:	e08b      	b.n	12282 <main+0x1df2>
						output_brightness = axKalman/kalmanAX_max;
   1216a:	4ba2      	ldr	r3, [pc, #648]	; (123f4 <main+0x1f64>)
   1216c:	681a      	ldr	r2, [r3, #0]
   1216e:	4ba4      	ldr	r3, [pc, #656]	; (12400 <main+0x1f70>)
   12170:	6819      	ldr	r1, [r3, #0]
   12172:	4b9e      	ldr	r3, [pc, #632]	; (123ec <main+0x1f5c>)
   12174:	1c10      	adds	r0, r2, #0
   12176:	4798      	blx	r3
   12178:	1c03      	adds	r3, r0, #0
   1217a:	1c1a      	adds	r2, r3, #0
   1217c:	4b9c      	ldr	r3, [pc, #624]	; (123f0 <main+0x1f60>)
   1217e:	601a      	str	r2, [r3, #0]
						SUPRESS_RIGHT_RGB = true;
   12180:	4ba0      	ldr	r3, [pc, #640]	; (12404 <main+0x1f74>)
   12182:	2201      	movs	r2, #1
   12184:	701a      	strb	r2, [r3, #0]
					break;
   12186:	e07c      	b.n	12282 <main+0x1df2>
				}
				case BRIGHT_Y_ACCEL:
				{
					if(ayKalman < 0)
   12188:	4b9f      	ldr	r3, [pc, #636]	; (12408 <main+0x1f78>)
   1218a:	681a      	ldr	r2, [r3, #0]
   1218c:	4b94      	ldr	r3, [pc, #592]	; (123e0 <main+0x1f50>)
   1218e:	2100      	movs	r1, #0
   12190:	1c10      	adds	r0, r2, #0
   12192:	4798      	blx	r3
   12194:	1e03      	subs	r3, r0, #0
   12196:	d00b      	beq.n	121b0 <main+0x1d20>
						output_brightness = ayKalman/kalmanAY_min;
   12198:	4b9b      	ldr	r3, [pc, #620]	; (12408 <main+0x1f78>)
   1219a:	681a      	ldr	r2, [r3, #0]
   1219c:	4b9b      	ldr	r3, [pc, #620]	; (1240c <main+0x1f7c>)
   1219e:	6819      	ldr	r1, [r3, #0]
   121a0:	4b92      	ldr	r3, [pc, #584]	; (123ec <main+0x1f5c>)
   121a2:	1c10      	adds	r0, r2, #0
   121a4:	4798      	blx	r3
   121a6:	1c03      	adds	r3, r0, #0
   121a8:	1c1a      	adds	r2, r3, #0
   121aa:	4b91      	ldr	r3, [pc, #580]	; (123f0 <main+0x1f60>)
   121ac:	601a      	str	r2, [r3, #0]
					else
						output_brightness = ayKalman/kalmanAY_max;
					break;
   121ae:	e068      	b.n	12282 <main+0x1df2>
						output_brightness = ayKalman/kalmanAY_max;
   121b0:	4b95      	ldr	r3, [pc, #596]	; (12408 <main+0x1f78>)
   121b2:	681a      	ldr	r2, [r3, #0]
   121b4:	4b96      	ldr	r3, [pc, #600]	; (12410 <main+0x1f80>)
   121b6:	6819      	ldr	r1, [r3, #0]
   121b8:	4b8c      	ldr	r3, [pc, #560]	; (123ec <main+0x1f5c>)
   121ba:	1c10      	adds	r0, r2, #0
   121bc:	4798      	blx	r3
   121be:	1c03      	adds	r3, r0, #0
   121c0:	1c1a      	adds	r2, r3, #0
   121c2:	4b8b      	ldr	r3, [pc, #556]	; (123f0 <main+0x1f60>)
   121c4:	601a      	str	r2, [r3, #0]
					break;
   121c6:	e05c      	b.n	12282 <main+0x1df2>
				}
				case BRIGHT_Z_ACCEL:
				{
					if(azKalman < 0)
   121c8:	4b92      	ldr	r3, [pc, #584]	; (12414 <main+0x1f84>)
   121ca:	681a      	ldr	r2, [r3, #0]
   121cc:	4b84      	ldr	r3, [pc, #528]	; (123e0 <main+0x1f50>)
   121ce:	2100      	movs	r1, #0
   121d0:	1c10      	adds	r0, r2, #0
   121d2:	4798      	blx	r3
   121d4:	1e03      	subs	r3, r0, #0
   121d6:	d00b      	beq.n	121f0 <main+0x1d60>
						output_brightness = azKalman/kalmanAZ_min;
   121d8:	4b8e      	ldr	r3, [pc, #568]	; (12414 <main+0x1f84>)
   121da:	681a      	ldr	r2, [r3, #0]
   121dc:	4b8e      	ldr	r3, [pc, #568]	; (12418 <main+0x1f88>)
   121de:	6819      	ldr	r1, [r3, #0]
   121e0:	4b82      	ldr	r3, [pc, #520]	; (123ec <main+0x1f5c>)
   121e2:	1c10      	adds	r0, r2, #0
   121e4:	4798      	blx	r3
   121e6:	1c03      	adds	r3, r0, #0
   121e8:	1c1a      	adds	r2, r3, #0
   121ea:	4b81      	ldr	r3, [pc, #516]	; (123f0 <main+0x1f60>)
   121ec:	601a      	str	r2, [r3, #0]
					else
						output_brightness = azKalman/kalmanAZ_max;
						break;
   121ee:	e048      	b.n	12282 <main+0x1df2>
						output_brightness = azKalman/kalmanAZ_max;
   121f0:	4b88      	ldr	r3, [pc, #544]	; (12414 <main+0x1f84>)
   121f2:	681a      	ldr	r2, [r3, #0]
   121f4:	4b89      	ldr	r3, [pc, #548]	; (1241c <main+0x1f8c>)
   121f6:	6819      	ldr	r1, [r3, #0]
   121f8:	4b7c      	ldr	r3, [pc, #496]	; (123ec <main+0x1f5c>)
   121fa:	1c10      	adds	r0, r2, #0
   121fc:	4798      	blx	r3
   121fe:	1c03      	adds	r3, r0, #0
   12200:	1c1a      	adds	r2, r3, #0
   12202:	4b7b      	ldr	r3, [pc, #492]	; (123f0 <main+0x1f60>)
   12204:	601a      	str	r2, [r3, #0]
						break;
   12206:	e03c      	b.n	12282 <main+0x1df2>
				}
				case BRIGHT_STROBE:
				{
					check_time(&strobe_time);
   12208:	4b85      	ldr	r3, [pc, #532]	; (12420 <main+0x1f90>)
   1220a:	0018      	movs	r0, r3
   1220c:	4b85      	ldr	r3, [pc, #532]	; (12424 <main+0x1f94>)
   1220e:	4798      	blx	r3
					if(output_brightness == 0.0 && (millis()-strobe_time > strobe_off_dur)){
   12210:	4b77      	ldr	r3, [pc, #476]	; (123f0 <main+0x1f60>)
   12212:	681a      	ldr	r2, [r3, #0]
   12214:	4b84      	ldr	r3, [pc, #528]	; (12428 <main+0x1f98>)
   12216:	2100      	movs	r1, #0
   12218:	1c10      	adds	r0, r2, #0
   1221a:	4798      	blx	r3
   1221c:	1e03      	subs	r3, r0, #0
   1221e:	d013      	beq.n	12248 <main+0x1db8>
   12220:	4b82      	ldr	r3, [pc, #520]	; (1242c <main+0x1f9c>)
   12222:	4798      	blx	r3
   12224:	0002      	movs	r2, r0
   12226:	4b7e      	ldr	r3, [pc, #504]	; (12420 <main+0x1f90>)
   12228:	681b      	ldr	r3, [r3, #0]
   1222a:	1ad3      	subs	r3, r2, r3
   1222c:	4a80      	ldr	r2, [pc, #512]	; (12430 <main+0x1fa0>)
   1222e:	8812      	ldrh	r2, [r2, #0]
   12230:	4293      	cmp	r3, r2
   12232:	d909      	bls.n	12248 <main+0x1db8>
						output_brightness = 1.0;
   12234:	4b6e      	ldr	r3, [pc, #440]	; (123f0 <main+0x1f60>)
   12236:	22fe      	movs	r2, #254	; 0xfe
   12238:	0592      	lsls	r2, r2, #22
   1223a:	601a      	str	r2, [r3, #0]
						strobe_time = millis();
   1223c:	4b7b      	ldr	r3, [pc, #492]	; (1242c <main+0x1f9c>)
   1223e:	4798      	blx	r3
   12240:	0002      	movs	r2, r0
   12242:	4b77      	ldr	r3, [pc, #476]	; (12420 <main+0x1f90>)
   12244:	601a      	str	r2, [r3, #0]
					}
					else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
						output_brightness = 0.0;
						strobe_time = millis();
					}
					break;
   12246:	e01b      	b.n	12280 <main+0x1df0>
					else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
   12248:	4b69      	ldr	r3, [pc, #420]	; (123f0 <main+0x1f60>)
   1224a:	681a      	ldr	r2, [r3, #0]
   1224c:	4b76      	ldr	r3, [pc, #472]	; (12428 <main+0x1f98>)
   1224e:	21fe      	movs	r1, #254	; 0xfe
   12250:	0589      	lsls	r1, r1, #22
   12252:	1c10      	adds	r0, r2, #0
   12254:	4798      	blx	r3
   12256:	1e03      	subs	r3, r0, #0
   12258:	d100      	bne.n	1225c <main+0x1dcc>
					break;
   1225a:	e011      	b.n	12280 <main+0x1df0>
					else if(output_brightness == 1.0 && (millis()-strobe_time > strobe_on_dur)){
   1225c:	4b73      	ldr	r3, [pc, #460]	; (1242c <main+0x1f9c>)
   1225e:	4798      	blx	r3
   12260:	0002      	movs	r2, r0
   12262:	4b6f      	ldr	r3, [pc, #444]	; (12420 <main+0x1f90>)
   12264:	681b      	ldr	r3, [r3, #0]
   12266:	1ad3      	subs	r3, r2, r3
   12268:	4a72      	ldr	r2, [pc, #456]	; (12434 <main+0x1fa4>)
   1226a:	8812      	ldrh	r2, [r2, #0]
   1226c:	4293      	cmp	r3, r2
   1226e:	d907      	bls.n	12280 <main+0x1df0>
						output_brightness = 0.0;
   12270:	4b5f      	ldr	r3, [pc, #380]	; (123f0 <main+0x1f60>)
   12272:	2200      	movs	r2, #0
   12274:	601a      	str	r2, [r3, #0]
						strobe_time = millis();
   12276:	4b6d      	ldr	r3, [pc, #436]	; (1242c <main+0x1f9c>)
   12278:	4798      	blx	r3
   1227a:	0002      	movs	r2, r0
   1227c:	4b68      	ldr	r3, [pc, #416]	; (12420 <main+0x1f90>)
   1227e:	601a      	str	r2, [r3, #0]
					break;
   12280:	46c0      	nop			; (mov r8, r8)
				}
			}
		
			if(output_brightness < 0)
   12282:	4b5b      	ldr	r3, [pc, #364]	; (123f0 <main+0x1f60>)
   12284:	681a      	ldr	r2, [r3, #0]
   12286:	4b56      	ldr	r3, [pc, #344]	; (123e0 <main+0x1f50>)
   12288:	2100      	movs	r1, #0
   1228a:	1c10      	adds	r0, r2, #0
   1228c:	4798      	blx	r3
   1228e:	1e03      	subs	r3, r0, #0
   12290:	d003      	beq.n	1229a <main+0x1e0a>
				output_brightness = 0;
   12292:	4b57      	ldr	r3, [pc, #348]	; (123f0 <main+0x1f60>)
   12294:	2200      	movs	r2, #0
   12296:	601a      	str	r2, [r3, #0]
   12298:	e00c      	b.n	122b4 <main+0x1e24>
			else if(output_brightness > 1)
   1229a:	4b55      	ldr	r3, [pc, #340]	; (123f0 <main+0x1f60>)
   1229c:	681a      	ldr	r2, [r3, #0]
   1229e:	4b66      	ldr	r3, [pc, #408]	; (12438 <main+0x1fa8>)
   122a0:	21fe      	movs	r1, #254	; 0xfe
   122a2:	0589      	lsls	r1, r1, #22
   122a4:	1c10      	adds	r0, r2, #0
   122a6:	4798      	blx	r3
   122a8:	1e03      	subs	r3, r0, #0
   122aa:	d003      	beq.n	122b4 <main+0x1e24>
				output_brightness = 1;
   122ac:	4b50      	ldr	r3, [pc, #320]	; (123f0 <main+0x1f60>)
   122ae:	22fe      	movs	r2, #254	; 0xfe
   122b0:	0592      	lsls	r2, r2, #22
   122b2:	601a      	str	r2, [r3, #0]

			switch(ColorBase[light_mode]){ // Set the color of the side LEDs
   122b4:	4b61      	ldr	r3, [pc, #388]	; (1243c <main+0x1fac>)
   122b6:	781b      	ldrb	r3, [r3, #0]
   122b8:	001a      	movs	r2, r3
   122ba:	4b61      	ldr	r3, [pc, #388]	; (12440 <main+0x1fb0>)
   122bc:	5c9b      	ldrb	r3, [r3, r2]
   122be:	2b0a      	cmp	r3, #10
   122c0:	d901      	bls.n	122c6 <main+0x1e36>
   122c2:	f001 f89d 	bl	13400 <main+0x2f70>
   122c6:	009a      	lsls	r2, r3, #2
   122c8:	4b5e      	ldr	r3, [pc, #376]	; (12444 <main+0x1fb4>)
   122ca:	18d3      	adds	r3, r2, r3
   122cc:	681b      	ldr	r3, [r3, #0]
   122ce:	469f      	mov	pc, r3
				case COLOR_STATIC:
				{
					if(light_mode == MODE_STATIC)
   122d0:	4b5a      	ldr	r3, [pc, #360]	; (1243c <main+0x1fac>)
   122d2:	781b      	ldrb	r3, [r3, #0]
   122d4:	2b00      	cmp	r3, #0
   122d6:	d105      	bne.n	122e4 <main+0x1e54>
						RGB_Ouptut = Static_RGB;
   122d8:	4b5b      	ldr	r3, [pc, #364]	; (12448 <main+0x1fb8>)
   122da:	4a5c      	ldr	r2, [pc, #368]	; (1244c <main+0x1fbc>)
   122dc:	ca13      	ldmia	r2!, {r0, r1, r4}
   122de:	c313      	stmia	r3!, {r0, r1, r4}
					else if(light_mode == MODE_CUSTOM)
						RGB_Ouptut = Custom_RGB;
					break;
   122e0:	f001 f88b 	bl	133fa <main+0x2f6a>
					else if(light_mode == MODE_CUSTOM)
   122e4:	4b55      	ldr	r3, [pc, #340]	; (1243c <main+0x1fac>)
   122e6:	781b      	ldrb	r3, [r3, #0]
   122e8:	2b08      	cmp	r3, #8
   122ea:	d001      	beq.n	122f0 <main+0x1e60>
   122ec:	f001 f885 	bl	133fa <main+0x2f6a>
						RGB_Ouptut = Custom_RGB;
   122f0:	4b55      	ldr	r3, [pc, #340]	; (12448 <main+0x1fb8>)
   122f2:	4a57      	ldr	r2, [pc, #348]	; (12450 <main+0x1fc0>)
   122f4:	ca13      	ldmia	r2!, {r0, r1, r4}
   122f6:	c313      	stmia	r3!, {r0, r1, r4}
					break;
   122f8:	f001 f87f 	bl	133fa <main+0x2f6a>
				}
				case COLOR_COLOR_CYCLE:
				{
					upColor = cycle_index * output_brightness;
   122fc:	4b55      	ldr	r3, [pc, #340]	; (12454 <main+0x1fc4>)
   122fe:	681a      	ldr	r2, [r3, #0]
   12300:	4b55      	ldr	r3, [pc, #340]	; (12458 <main+0x1fc8>)
   12302:	0010      	movs	r0, r2
   12304:	4798      	blx	r3
   12306:	4b3a      	ldr	r3, [pc, #232]	; (123f0 <main+0x1f60>)
   12308:	681a      	ldr	r2, [r3, #0]
   1230a:	4b54      	ldr	r3, [pc, #336]	; (1245c <main+0x1fcc>)
   1230c:	1c11      	adds	r1, r2, #0
   1230e:	4798      	blx	r3
   12310:	1c03      	adds	r3, r0, #0
   12312:	1c1a      	adds	r2, r3, #0
   12314:	4b52      	ldr	r3, [pc, #328]	; (12460 <main+0x1fd0>)
   12316:	1c10      	adds	r0, r2, #0
   12318:	4798      	blx	r3
   1231a:	0003      	movs	r3, r0
   1231c:	b29a      	uxth	r2, r3
   1231e:	4b51      	ldr	r3, [pc, #324]	; (12464 <main+0x1fd4>)
   12320:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12322:	4b4c      	ldr	r3, [pc, #304]	; (12454 <main+0x1fc4>)
   12324:	681b      	ldr	r3, [r3, #0]
   12326:	4a50      	ldr	r2, [pc, #320]	; (12468 <main+0x1fd8>)
   12328:	1ad2      	subs	r2, r2, r3
   1232a:	4b4b      	ldr	r3, [pc, #300]	; (12458 <main+0x1fc8>)
   1232c:	0010      	movs	r0, r2
   1232e:	4798      	blx	r3
   12330:	4b2f      	ldr	r3, [pc, #188]	; (123f0 <main+0x1f60>)
   12332:	681a      	ldr	r2, [r3, #0]
   12334:	4b49      	ldr	r3, [pc, #292]	; (1245c <main+0x1fcc>)
   12336:	1c11      	adds	r1, r2, #0
   12338:	4798      	blx	r3
   1233a:	1c03      	adds	r3, r0, #0
   1233c:	1c1a      	adds	r2, r3, #0
   1233e:	4b48      	ldr	r3, [pc, #288]	; (12460 <main+0x1fd0>)
   12340:	1c10      	adds	r0, r2, #0
   12342:	4798      	blx	r3
   12344:	0003      	movs	r3, r0
   12346:	b29a      	uxth	r2, r3
   12348:	4b48      	ldr	r3, [pc, #288]	; (1246c <main+0x1fdc>)
   1234a:	801a      	strh	r2, [r3, #0]
					
					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   1234c:	4b45      	ldr	r3, [pc, #276]	; (12464 <main+0x1fd4>)
   1234e:	8819      	ldrh	r1, [r3, #0]
   12350:	4b46      	ldr	r3, [pc, #280]	; (1246c <main+0x1fdc>)
   12352:	881a      	ldrh	r2, [r3, #0]
   12354:	4b46      	ldr	r3, [pc, #280]	; (12470 <main+0x1fe0>)
   12356:	781b      	ldrb	r3, [r3, #0]
   12358:	4d3b      	ldr	r5, [pc, #236]	; (12448 <main+0x1fb8>)
   1235a:	0038      	movs	r0, r7
   1235c:	4c45      	ldr	r4, [pc, #276]	; (12474 <main+0x1fe4>)
   1235e:	47a0      	blx	r4
   12360:	003b      	movs	r3, r7
   12362:	0028      	movs	r0, r5
   12364:	0019      	movs	r1, r3
   12366:	230c      	movs	r3, #12
   12368:	001a      	movs	r2, r3
   1236a:	4b43      	ldr	r3, [pc, #268]	; (12478 <main+0x1fe8>)
   1236c:	4798      	blx	r3

					cycle_index += output_rate_sens*max_cycle_rate;
   1236e:	4b39      	ldr	r3, [pc, #228]	; (12454 <main+0x1fc4>)
   12370:	681a      	ldr	r2, [r3, #0]
   12372:	4b39      	ldr	r3, [pc, #228]	; (12458 <main+0x1fc8>)
   12374:	0010      	movs	r0, r2
   12376:	4798      	blx	r3
   12378:	1c04      	adds	r4, r0, #0
   1237a:	4b40      	ldr	r3, [pc, #256]	; (1247c <main+0x1fec>)
   1237c:	681a      	ldr	r2, [r3, #0]
   1237e:	4b37      	ldr	r3, [pc, #220]	; (1245c <main+0x1fcc>)
   12380:	6b39      	ldr	r1, [r7, #48]	; 0x30
   12382:	1c10      	adds	r0, r2, #0
   12384:	4798      	blx	r3
   12386:	1c03      	adds	r3, r0, #0
   12388:	1c1a      	adds	r2, r3, #0
   1238a:	4b16      	ldr	r3, [pc, #88]	; (123e4 <main+0x1f54>)
   1238c:	1c11      	adds	r1, r2, #0
   1238e:	1c20      	adds	r0, r4, #0
   12390:	4798      	blx	r3
   12392:	1c03      	adds	r3, r0, #0
   12394:	1c1a      	adds	r2, r3, #0
   12396:	4b32      	ldr	r3, [pc, #200]	; (12460 <main+0x1fd0>)
   12398:	1c10      	adds	r0, r2, #0
   1239a:	4798      	blx	r3
   1239c:	0002      	movs	r2, r0
   1239e:	4b2d      	ldr	r3, [pc, #180]	; (12454 <main+0x1fc4>)
   123a0:	601a      	str	r2, [r3, #0]
					if(cycle_index >= 0x0FFFF){
   123a2:	4b2c      	ldr	r3, [pc, #176]	; (12454 <main+0x1fc4>)
   123a4:	681b      	ldr	r3, [r3, #0]
   123a6:	4a36      	ldr	r2, [pc, #216]	; (12480 <main+0x1ff0>)
   123a8:	4293      	cmp	r3, r2
   123aa:	d801      	bhi.n	123b0 <main+0x1f20>
   123ac:	f001 f827 	bl	133fe <main+0x2f6e>
						cycle_index = 0;
   123b0:	4b28      	ldr	r3, [pc, #160]	; (12454 <main+0x1fc4>)
   123b2:	2200      	movs	r2, #0
   123b4:	601a      	str	r2, [r3, #0]
						cycle += 1;
   123b6:	4b2e      	ldr	r3, [pc, #184]	; (12470 <main+0x1fe0>)
   123b8:	781b      	ldrb	r3, [r3, #0]
   123ba:	3301      	adds	r3, #1
   123bc:	b2da      	uxtb	r2, r3
   123be:	4b2c      	ldr	r3, [pc, #176]	; (12470 <main+0x1fe0>)
   123c0:	701a      	strb	r2, [r3, #0]
						if(cycle == 3)
   123c2:	4b2b      	ldr	r3, [pc, #172]	; (12470 <main+0x1fe0>)
   123c4:	781b      	ldrb	r3, [r3, #0]
   123c6:	2b03      	cmp	r3, #3
   123c8:	d001      	beq.n	123ce <main+0x1f3e>
   123ca:	f001 f818 	bl	133fe <main+0x2f6e>
						cycle = 0;
   123ce:	4b28      	ldr	r3, [pc, #160]	; (12470 <main+0x1fe0>)
   123d0:	2200      	movs	r2, #0
   123d2:	701a      	strb	r2, [r3, #0]
					}
					break;
   123d4:	f001 f813 	bl	133fe <main+0x2f6e>
   123d8:	2000030a 	.word	0x2000030a
   123dc:	00014e49 	.word	0x00014e49
   123e0:	0001407d 	.word	0x0001407d
   123e4:	0001418d 	.word	0x0001418d
   123e8:	437f0000 	.word	0x437f0000
   123ec:	000144b1 	.word	0x000144b1
   123f0:	200003e8 	.word	0x200003e8
   123f4:	200003c0 	.word	0x200003c0
   123f8:	200000b4 	.word	0x200000b4
   123fc:	20000320 	.word	0x20000320
   12400:	200000b8 	.word	0x200000b8
   12404:	20000321 	.word	0x20000321
   12408:	200003c4 	.word	0x200003c4
   1240c:	200000bc 	.word	0x200000bc
   12410:	200000c0 	.word	0x200000c0
   12414:	200003c8 	.word	0x200003c8
   12418:	200000c4 	.word	0x200000c4
   1241c:	200000c8 	.word	0x200000c8
   12420:	20000330 	.word	0x20000330
   12424:	0000af11 	.word	0x0000af11
   12428:	00014071 	.word	0x00014071
   1242c:	0000aee1 	.word	0x0000aee1
   12430:	200000aa 	.word	0x200000aa
   12434:	200000a8 	.word	0x200000a8
   12438:	000140a5 	.word	0x000140a5
   1243c:	2000001b 	.word	0x2000001b
   12440:	20000070 	.word	0x20000070
   12444:	000175cc 	.word	0x000175cc
   12448:	20000314 	.word	0x20000314
   1244c:	2000001c 	.word	0x2000001c
   12450:	20000094 	.word	0x20000094
   12454:	20000328 	.word	0x20000328
   12458:	00014ee9 	.word	0x00014ee9
   1245c:	00014891 	.word	0x00014891
   12460:	00014121 	.word	0x00014121
   12464:	2000032c 	.word	0x2000032c
   12468:	0000ffff 	.word	0x0000ffff
   1246c:	2000032e 	.word	0x2000032e
   12470:	20000326 	.word	0x20000326
   12474:	0000b24d 	.word	0x0000b24d
   12478:	00016ccd 	.word	0x00016ccd
   1247c:	200000a4 	.word	0x200000a4
   12480:	0000fffe 	.word	0x0000fffe
				}
				case COLOR_COMPASS:
				{
					cycle_index = (int)(((((float)0x0FFFF) * 6) / 360) *heading) % 0x0FFFF;
   12484:	4baf      	ldr	r3, [pc, #700]	; (12744 <main+0x22b4>)
   12486:	49b0      	ldr	r1, [pc, #704]	; (12748 <main+0x22b8>)
   12488:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1248a:	4798      	blx	r3
   1248c:	1c03      	adds	r3, r0, #0
   1248e:	1c1a      	adds	r2, r3, #0
   12490:	4bae      	ldr	r3, [pc, #696]	; (1274c <main+0x22bc>)
   12492:	1c10      	adds	r0, r2, #0
   12494:	4798      	blx	r3
   12496:	0002      	movs	r2, r0
   12498:	4bad      	ldr	r3, [pc, #692]	; (12750 <main+0x22c0>)
   1249a:	49ae      	ldr	r1, [pc, #696]	; (12754 <main+0x22c4>)
   1249c:	0010      	movs	r0, r2
   1249e:	4798      	blx	r3
   124a0:	000b      	movs	r3, r1
   124a2:	001a      	movs	r2, r3
   124a4:	4bac      	ldr	r3, [pc, #688]	; (12758 <main+0x22c8>)
   124a6:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 6) / 360) *heading) / 0x0FFFF;
   124a8:	4ba6      	ldr	r3, [pc, #664]	; (12744 <main+0x22b4>)
   124aa:	49a7      	ldr	r1, [pc, #668]	; (12748 <main+0x22b8>)
   124ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
   124ae:	4798      	blx	r3
   124b0:	1c03      	adds	r3, r0, #0
   124b2:	1c1a      	adds	r2, r3, #0
   124b4:	4ba5      	ldr	r3, [pc, #660]	; (1274c <main+0x22bc>)
   124b6:	1c10      	adds	r0, r2, #0
   124b8:	4798      	blx	r3
   124ba:	0002      	movs	r2, r0
   124bc:	4ba7      	ldr	r3, [pc, #668]	; (1275c <main+0x22cc>)
   124be:	49a5      	ldr	r1, [pc, #660]	; (12754 <main+0x22c4>)
   124c0:	0010      	movs	r0, r2
   124c2:	4798      	blx	r3
   124c4:	0003      	movs	r3, r0
   124c6:	b2da      	uxtb	r2, r3
   124c8:	4ba5      	ldr	r3, [pc, #660]	; (12760 <main+0x22d0>)
   124ca:	701a      	strb	r2, [r3, #0]
					upColor = cycle_index * output_brightness;
   124cc:	4ba2      	ldr	r3, [pc, #648]	; (12758 <main+0x22c8>)
   124ce:	681a      	ldr	r2, [r3, #0]
   124d0:	4ba4      	ldr	r3, [pc, #656]	; (12764 <main+0x22d4>)
   124d2:	0010      	movs	r0, r2
   124d4:	4798      	blx	r3
   124d6:	4ba4      	ldr	r3, [pc, #656]	; (12768 <main+0x22d8>)
   124d8:	681a      	ldr	r2, [r3, #0]
   124da:	4b9a      	ldr	r3, [pc, #616]	; (12744 <main+0x22b4>)
   124dc:	1c11      	adds	r1, r2, #0
   124de:	4798      	blx	r3
   124e0:	1c03      	adds	r3, r0, #0
   124e2:	1c1a      	adds	r2, r3, #0
   124e4:	4ba1      	ldr	r3, [pc, #644]	; (1276c <main+0x22dc>)
   124e6:	1c10      	adds	r0, r2, #0
   124e8:	4798      	blx	r3
   124ea:	0003      	movs	r3, r0
   124ec:	b29a      	uxth	r2, r3
   124ee:	4ba0      	ldr	r3, [pc, #640]	; (12770 <main+0x22e0>)
   124f0:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   124f2:	4b99      	ldr	r3, [pc, #612]	; (12758 <main+0x22c8>)
   124f4:	681b      	ldr	r3, [r3, #0]
   124f6:	4a97      	ldr	r2, [pc, #604]	; (12754 <main+0x22c4>)
   124f8:	1ad2      	subs	r2, r2, r3
   124fa:	4b9a      	ldr	r3, [pc, #616]	; (12764 <main+0x22d4>)
   124fc:	0010      	movs	r0, r2
   124fe:	4798      	blx	r3
   12500:	4b99      	ldr	r3, [pc, #612]	; (12768 <main+0x22d8>)
   12502:	681a      	ldr	r2, [r3, #0]
   12504:	4b8f      	ldr	r3, [pc, #572]	; (12744 <main+0x22b4>)
   12506:	1c11      	adds	r1, r2, #0
   12508:	4798      	blx	r3
   1250a:	1c03      	adds	r3, r0, #0
   1250c:	1c1a      	adds	r2, r3, #0
   1250e:	4b97      	ldr	r3, [pc, #604]	; (1276c <main+0x22dc>)
   12510:	1c10      	adds	r0, r2, #0
   12512:	4798      	blx	r3
   12514:	0003      	movs	r3, r0
   12516:	b29a      	uxth	r2, r3
   12518:	4b96      	ldr	r3, [pc, #600]	; (12774 <main+0x22e4>)
   1251a:	801a      	strh	r2, [r3, #0]

					if(cycle >= 3)
   1251c:	4b90      	ldr	r3, [pc, #576]	; (12760 <main+0x22d0>)
   1251e:	781b      	ldrb	r3, [r3, #0]
   12520:	2b02      	cmp	r3, #2
   12522:	d905      	bls.n	12530 <main+0x20a0>
					cycle -= 3;
   12524:	4b8e      	ldr	r3, [pc, #568]	; (12760 <main+0x22d0>)
   12526:	781b      	ldrb	r3, [r3, #0]
   12528:	3b03      	subs	r3, #3
   1252a:	b2da      	uxtb	r2, r3
   1252c:	4b8c      	ldr	r3, [pc, #560]	; (12760 <main+0x22d0>)
   1252e:	701a      	strb	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12530:	4b8f      	ldr	r3, [pc, #572]	; (12770 <main+0x22e0>)
   12532:	8819      	ldrh	r1, [r3, #0]
   12534:	4b8f      	ldr	r3, [pc, #572]	; (12774 <main+0x22e4>)
   12536:	881a      	ldrh	r2, [r3, #0]
   12538:	4b89      	ldr	r3, [pc, #548]	; (12760 <main+0x22d0>)
   1253a:	781b      	ldrb	r3, [r3, #0]
   1253c:	4d8e      	ldr	r5, [pc, #568]	; (12778 <main+0x22e8>)
   1253e:	0038      	movs	r0, r7
   12540:	4c8e      	ldr	r4, [pc, #568]	; (1277c <main+0x22ec>)
   12542:	47a0      	blx	r4
   12544:	003b      	movs	r3, r7
   12546:	0028      	movs	r0, r5
   12548:	0019      	movs	r1, r3
   1254a:	230c      	movs	r3, #12
   1254c:	001a      	movs	r2, r3
   1254e:	4b8c      	ldr	r3, [pc, #560]	; (12780 <main+0x22f0>)
   12550:	4798      	blx	r3
					break;
   12552:	f000 ff55 	bl	13400 <main+0x2f70>
				}
				case COLOR_YAW_RATE:
				{
					if(gzKalman < 0)
   12556:	4b8b      	ldr	r3, [pc, #556]	; (12784 <main+0x22f4>)
   12558:	681a      	ldr	r2, [r3, #0]
   1255a:	4b8b      	ldr	r3, [pc, #556]	; (12788 <main+0x22f8>)
   1255c:	2100      	movs	r1, #0
   1255e:	1c10      	adds	r0, r2, #0
   12560:	4798      	blx	r3
   12562:	1e03      	subs	r3, r0, #0
   12564:	d02a      	beq.n	125bc <main+0x212c>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) % 0x0FFFF;
   12566:	4b89      	ldr	r3, [pc, #548]	; (1278c <main+0x22fc>)
   12568:	681a      	ldr	r2, [r3, #0]
   1256a:	4b89      	ldr	r3, [pc, #548]	; (12790 <main+0x2300>)
   1256c:	1c10      	adds	r0, r2, #0
   1256e:	4798      	blx	r3
   12570:	0002      	movs	r2, r0
   12572:	000b      	movs	r3, r1
   12574:	4c87      	ldr	r4, [pc, #540]	; (12794 <main+0x2304>)
   12576:	2000      	movs	r0, #0
   12578:	4987      	ldr	r1, [pc, #540]	; (12798 <main+0x2308>)
   1257a:	47a0      	blx	r4
   1257c:	0003      	movs	r3, r0
   1257e:	000c      	movs	r4, r1
   12580:	001d      	movs	r5, r3
   12582:	0026      	movs	r6, r4
   12584:	4b7f      	ldr	r3, [pc, #508]	; (12784 <main+0x22f4>)
   12586:	681a      	ldr	r2, [r3, #0]
   12588:	4b81      	ldr	r3, [pc, #516]	; (12790 <main+0x2300>)
   1258a:	1c10      	adds	r0, r2, #0
   1258c:	4798      	blx	r3
   1258e:	0002      	movs	r2, r0
   12590:	000b      	movs	r3, r1
   12592:	4c82      	ldr	r4, [pc, #520]	; (1279c <main+0x230c>)
   12594:	0028      	movs	r0, r5
   12596:	0031      	movs	r1, r6
   12598:	47a0      	blx	r4
   1259a:	0003      	movs	r3, r0
   1259c:	000c      	movs	r4, r1
   1259e:	0019      	movs	r1, r3
   125a0:	0022      	movs	r2, r4
   125a2:	4b7f      	ldr	r3, [pc, #508]	; (127a0 <main+0x2310>)
   125a4:	0008      	movs	r0, r1
   125a6:	0011      	movs	r1, r2
   125a8:	4798      	blx	r3
   125aa:	0002      	movs	r2, r0
   125ac:	4b68      	ldr	r3, [pc, #416]	; (12750 <main+0x22c0>)
   125ae:	4969      	ldr	r1, [pc, #420]	; (12754 <main+0x22c4>)
   125b0:	0010      	movs	r0, r2
   125b2:	4798      	blx	r3
   125b4:	000b      	movs	r3, r1
   125b6:	001a      	movs	r2, r3
   125b8:	4b67      	ldr	r3, [pc, #412]	; (12758 <main+0x22c8>)
   125ba:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_min) * gzKalman) / 0x0FFFF;
   125bc:	4b73      	ldr	r3, [pc, #460]	; (1278c <main+0x22fc>)
   125be:	681a      	ldr	r2, [r3, #0]
   125c0:	4b73      	ldr	r3, [pc, #460]	; (12790 <main+0x2300>)
   125c2:	1c10      	adds	r0, r2, #0
   125c4:	4798      	blx	r3
   125c6:	0002      	movs	r2, r0
   125c8:	000b      	movs	r3, r1
   125ca:	4c72      	ldr	r4, [pc, #456]	; (12794 <main+0x2304>)
   125cc:	2000      	movs	r0, #0
   125ce:	4972      	ldr	r1, [pc, #456]	; (12798 <main+0x2308>)
   125d0:	47a0      	blx	r4
   125d2:	0003      	movs	r3, r0
   125d4:	000c      	movs	r4, r1
   125d6:	001d      	movs	r5, r3
   125d8:	0026      	movs	r6, r4
   125da:	4b6a      	ldr	r3, [pc, #424]	; (12784 <main+0x22f4>)
   125dc:	681a      	ldr	r2, [r3, #0]
   125de:	4b6c      	ldr	r3, [pc, #432]	; (12790 <main+0x2300>)
   125e0:	1c10      	adds	r0, r2, #0
   125e2:	4798      	blx	r3
   125e4:	0002      	movs	r2, r0
   125e6:	000b      	movs	r3, r1
   125e8:	4c6c      	ldr	r4, [pc, #432]	; (1279c <main+0x230c>)
   125ea:	0028      	movs	r0, r5
   125ec:	0031      	movs	r1, r6
   125ee:	47a0      	blx	r4
   125f0:	0003      	movs	r3, r0
   125f2:	000c      	movs	r4, r1
   125f4:	0019      	movs	r1, r3
   125f6:	0022      	movs	r2, r4
   125f8:	4b69      	ldr	r3, [pc, #420]	; (127a0 <main+0x2310>)
   125fa:	0008      	movs	r0, r1
   125fc:	0011      	movs	r1, r2
   125fe:	4798      	blx	r3
   12600:	0002      	movs	r2, r0
   12602:	4b56      	ldr	r3, [pc, #344]	; (1275c <main+0x22cc>)
   12604:	4953      	ldr	r1, [pc, #332]	; (12754 <main+0x22c4>)
   12606:	0010      	movs	r0, r2
   12608:	4798      	blx	r3
   1260a:	0003      	movs	r3, r0
   1260c:	b2da      	uxtb	r2, r3
   1260e:	4b54      	ldr	r3, [pc, #336]	; (12760 <main+0x22d0>)
   12610:	701a      	strb	r2, [r3, #0]
					if(gzKalman >= 0){
   12612:	4b5c      	ldr	r3, [pc, #368]	; (12784 <main+0x22f4>)
   12614:	681a      	ldr	r2, [r3, #0]
   12616:	4b63      	ldr	r3, [pc, #396]	; (127a4 <main+0x2314>)
   12618:	2100      	movs	r1, #0
   1261a:	1c10      	adds	r0, r2, #0
   1261c:	4798      	blx	r3
   1261e:	1e03      	subs	r3, r0, #0
   12620:	d055      	beq.n	126ce <main+0x223e>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) % 0x0FFFF;
   12622:	4b61      	ldr	r3, [pc, #388]	; (127a8 <main+0x2318>)
   12624:	681a      	ldr	r2, [r3, #0]
   12626:	4b5a      	ldr	r3, [pc, #360]	; (12790 <main+0x2300>)
   12628:	1c10      	adds	r0, r2, #0
   1262a:	4798      	blx	r3
   1262c:	0002      	movs	r2, r0
   1262e:	000b      	movs	r3, r1
   12630:	4c58      	ldr	r4, [pc, #352]	; (12794 <main+0x2304>)
   12632:	2000      	movs	r0, #0
   12634:	4958      	ldr	r1, [pc, #352]	; (12798 <main+0x2308>)
   12636:	47a0      	blx	r4
   12638:	0003      	movs	r3, r0
   1263a:	000c      	movs	r4, r1
   1263c:	001d      	movs	r5, r3
   1263e:	0026      	movs	r6, r4
   12640:	4b50      	ldr	r3, [pc, #320]	; (12784 <main+0x22f4>)
   12642:	681a      	ldr	r2, [r3, #0]
   12644:	4b52      	ldr	r3, [pc, #328]	; (12790 <main+0x2300>)
   12646:	1c10      	adds	r0, r2, #0
   12648:	4798      	blx	r3
   1264a:	0002      	movs	r2, r0
   1264c:	000b      	movs	r3, r1
   1264e:	4c53      	ldr	r4, [pc, #332]	; (1279c <main+0x230c>)
   12650:	0028      	movs	r0, r5
   12652:	0031      	movs	r1, r6
   12654:	47a0      	blx	r4
   12656:	0003      	movs	r3, r0
   12658:	000c      	movs	r4, r1
   1265a:	0019      	movs	r1, r3
   1265c:	0022      	movs	r2, r4
   1265e:	4b50      	ldr	r3, [pc, #320]	; (127a0 <main+0x2310>)
   12660:	0008      	movs	r0, r1
   12662:	0011      	movs	r1, r2
   12664:	4798      	blx	r3
   12666:	0002      	movs	r2, r0
   12668:	4b39      	ldr	r3, [pc, #228]	; (12750 <main+0x22c0>)
   1266a:	493a      	ldr	r1, [pc, #232]	; (12754 <main+0x22c4>)
   1266c:	0010      	movs	r0, r2
   1266e:	4798      	blx	r3
   12670:	000b      	movs	r3, r1
   12672:	001a      	movs	r2, r3
   12674:	4b38      	ldr	r3, [pc, #224]	; (12758 <main+0x22c8>)
   12676:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGZ_max) * gzKalman) / 0x0FFFF;
   12678:	4b4b      	ldr	r3, [pc, #300]	; (127a8 <main+0x2318>)
   1267a:	681a      	ldr	r2, [r3, #0]
   1267c:	4b44      	ldr	r3, [pc, #272]	; (12790 <main+0x2300>)
   1267e:	1c10      	adds	r0, r2, #0
   12680:	4798      	blx	r3
   12682:	0002      	movs	r2, r0
   12684:	000b      	movs	r3, r1
   12686:	4c43      	ldr	r4, [pc, #268]	; (12794 <main+0x2304>)
   12688:	2000      	movs	r0, #0
   1268a:	4943      	ldr	r1, [pc, #268]	; (12798 <main+0x2308>)
   1268c:	47a0      	blx	r4
   1268e:	0003      	movs	r3, r0
   12690:	000c      	movs	r4, r1
   12692:	001d      	movs	r5, r3
   12694:	0026      	movs	r6, r4
   12696:	4b3b      	ldr	r3, [pc, #236]	; (12784 <main+0x22f4>)
   12698:	681a      	ldr	r2, [r3, #0]
   1269a:	4b3d      	ldr	r3, [pc, #244]	; (12790 <main+0x2300>)
   1269c:	1c10      	adds	r0, r2, #0
   1269e:	4798      	blx	r3
   126a0:	0002      	movs	r2, r0
   126a2:	000b      	movs	r3, r1
   126a4:	4c3d      	ldr	r4, [pc, #244]	; (1279c <main+0x230c>)
   126a6:	0028      	movs	r0, r5
   126a8:	0031      	movs	r1, r6
   126aa:	47a0      	blx	r4
   126ac:	0003      	movs	r3, r0
   126ae:	000c      	movs	r4, r1
   126b0:	0019      	movs	r1, r3
   126b2:	0022      	movs	r2, r4
   126b4:	4b3a      	ldr	r3, [pc, #232]	; (127a0 <main+0x2310>)
   126b6:	0008      	movs	r0, r1
   126b8:	0011      	movs	r1, r2
   126ba:	4798      	blx	r3
   126bc:	0002      	movs	r2, r0
   126be:	4b27      	ldr	r3, [pc, #156]	; (1275c <main+0x22cc>)
   126c0:	4924      	ldr	r1, [pc, #144]	; (12754 <main+0x22c4>)
   126c2:	0010      	movs	r0, r2
   126c4:	4798      	blx	r3
   126c6:	0003      	movs	r3, r0
   126c8:	b2da      	uxtb	r2, r3
   126ca:	4b25      	ldr	r3, [pc, #148]	; (12760 <main+0x22d0>)
   126cc:	701a      	strb	r2, [r3, #0]
					}
						
					upColor = cycle_index * output_brightness;
   126ce:	4b22      	ldr	r3, [pc, #136]	; (12758 <main+0x22c8>)
   126d0:	681a      	ldr	r2, [r3, #0]
   126d2:	4b24      	ldr	r3, [pc, #144]	; (12764 <main+0x22d4>)
   126d4:	0010      	movs	r0, r2
   126d6:	4798      	blx	r3
   126d8:	4b23      	ldr	r3, [pc, #140]	; (12768 <main+0x22d8>)
   126da:	681a      	ldr	r2, [r3, #0]
   126dc:	4b19      	ldr	r3, [pc, #100]	; (12744 <main+0x22b4>)
   126de:	1c11      	adds	r1, r2, #0
   126e0:	4798      	blx	r3
   126e2:	1c03      	adds	r3, r0, #0
   126e4:	1c1a      	adds	r2, r3, #0
   126e6:	4b21      	ldr	r3, [pc, #132]	; (1276c <main+0x22dc>)
   126e8:	1c10      	adds	r0, r2, #0
   126ea:	4798      	blx	r3
   126ec:	0003      	movs	r3, r0
   126ee:	b29a      	uxth	r2, r3
   126f0:	4b1f      	ldr	r3, [pc, #124]	; (12770 <main+0x22e0>)
   126f2:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   126f4:	4b18      	ldr	r3, [pc, #96]	; (12758 <main+0x22c8>)
   126f6:	681b      	ldr	r3, [r3, #0]
   126f8:	4a16      	ldr	r2, [pc, #88]	; (12754 <main+0x22c4>)
   126fa:	1ad2      	subs	r2, r2, r3
   126fc:	4b19      	ldr	r3, [pc, #100]	; (12764 <main+0x22d4>)
   126fe:	0010      	movs	r0, r2
   12700:	4798      	blx	r3
   12702:	4b19      	ldr	r3, [pc, #100]	; (12768 <main+0x22d8>)
   12704:	681a      	ldr	r2, [r3, #0]
   12706:	4b0f      	ldr	r3, [pc, #60]	; (12744 <main+0x22b4>)
   12708:	1c11      	adds	r1, r2, #0
   1270a:	4798      	blx	r3
   1270c:	1c03      	adds	r3, r0, #0
   1270e:	1c1a      	adds	r2, r3, #0
   12710:	4b16      	ldr	r3, [pc, #88]	; (1276c <main+0x22dc>)
   12712:	1c10      	adds	r0, r2, #0
   12714:	4798      	blx	r3
   12716:	0003      	movs	r3, r0
   12718:	b29a      	uxth	r2, r3
   1271a:	4b16      	ldr	r3, [pc, #88]	; (12774 <main+0x22e4>)
   1271c:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   1271e:	4b14      	ldr	r3, [pc, #80]	; (12770 <main+0x22e0>)
   12720:	8819      	ldrh	r1, [r3, #0]
   12722:	4b14      	ldr	r3, [pc, #80]	; (12774 <main+0x22e4>)
   12724:	881a      	ldrh	r2, [r3, #0]
   12726:	4b0e      	ldr	r3, [pc, #56]	; (12760 <main+0x22d0>)
   12728:	781b      	ldrb	r3, [r3, #0]
   1272a:	4d13      	ldr	r5, [pc, #76]	; (12778 <main+0x22e8>)
   1272c:	0038      	movs	r0, r7
   1272e:	4c13      	ldr	r4, [pc, #76]	; (1277c <main+0x22ec>)
   12730:	47a0      	blx	r4
   12732:	003b      	movs	r3, r7
   12734:	0028      	movs	r0, r5
   12736:	0019      	movs	r1, r3
   12738:	230c      	movs	r3, #12
   1273a:	001a      	movs	r2, r3
   1273c:	4b10      	ldr	r3, [pc, #64]	; (12780 <main+0x22f0>)
   1273e:	4798      	blx	r3
					break;
   12740:	f000 fe5e 	bl	13400 <main+0x2f70>
   12744:	00014891 	.word	0x00014891
   12748:	44888800 	.word	0x44888800
   1274c:	00014e09 	.word	0x00014e09
   12750:	00013fd1 	.word	0x00013fd1
   12754:	0000ffff 	.word	0x0000ffff
   12758:	20000328 	.word	0x20000328
   1275c:	00013e05 	.word	0x00013e05
   12760:	20000326 	.word	0x20000326
   12764:	00014ee9 	.word	0x00014ee9
   12768:	200003e8 	.word	0x200003e8
   1276c:	00014121 	.word	0x00014121
   12770:	2000032c 	.word	0x2000032c
   12774:	2000032e 	.word	0x2000032e
   12778:	20000314 	.word	0x20000314
   1277c:	0000b24d 	.word	0x0000b24d
   12780:	00016ccd 	.word	0x00016ccd
   12784:	200003d4 	.word	0x200003d4
   12788:	0001407d 	.word	0x0001407d
   1278c:	200000dc 	.word	0x200000dc
   12790:	00016a85 	.word	0x00016a85
   12794:	00015595 	.word	0x00015595
   12798:	4107ffe8 	.word	0x4107ffe8
   1279c:	00015dfd 	.word	0x00015dfd
   127a0:	00016929 	.word	0x00016929
   127a4:	000140b9 	.word	0x000140b9
   127a8:	200000e0 	.word	0x200000e0
				}
				case COLOR_ROLL_RATE:
				{
					if(gyKalman < 0)
   127ac:	4b7b      	ldr	r3, [pc, #492]	; (1299c <main+0x250c>)
   127ae:	681a      	ldr	r2, [r3, #0]
   127b0:	4b7b      	ldr	r3, [pc, #492]	; (129a0 <main+0x2510>)
   127b2:	2100      	movs	r1, #0
   127b4:	1c10      	adds	r0, r2, #0
   127b6:	4798      	blx	r3
   127b8:	1e03      	subs	r3, r0, #0
   127ba:	d02a      	beq.n	12812 <main+0x2382>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) % 0x0FFFF;
   127bc:	4b79      	ldr	r3, [pc, #484]	; (129a4 <main+0x2514>)
   127be:	681a      	ldr	r2, [r3, #0]
   127c0:	4b79      	ldr	r3, [pc, #484]	; (129a8 <main+0x2518>)
   127c2:	1c10      	adds	r0, r2, #0
   127c4:	4798      	blx	r3
   127c6:	0002      	movs	r2, r0
   127c8:	000b      	movs	r3, r1
   127ca:	4c78      	ldr	r4, [pc, #480]	; (129ac <main+0x251c>)
   127cc:	2000      	movs	r0, #0
   127ce:	4978      	ldr	r1, [pc, #480]	; (129b0 <main+0x2520>)
   127d0:	47a0      	blx	r4
   127d2:	0003      	movs	r3, r0
   127d4:	000c      	movs	r4, r1
   127d6:	001d      	movs	r5, r3
   127d8:	0026      	movs	r6, r4
   127da:	4b70      	ldr	r3, [pc, #448]	; (1299c <main+0x250c>)
   127dc:	681a      	ldr	r2, [r3, #0]
   127de:	4b72      	ldr	r3, [pc, #456]	; (129a8 <main+0x2518>)
   127e0:	1c10      	adds	r0, r2, #0
   127e2:	4798      	blx	r3
   127e4:	0002      	movs	r2, r0
   127e6:	000b      	movs	r3, r1
   127e8:	4c72      	ldr	r4, [pc, #456]	; (129b4 <main+0x2524>)
   127ea:	0028      	movs	r0, r5
   127ec:	0031      	movs	r1, r6
   127ee:	47a0      	blx	r4
   127f0:	0003      	movs	r3, r0
   127f2:	000c      	movs	r4, r1
   127f4:	0019      	movs	r1, r3
   127f6:	0022      	movs	r2, r4
   127f8:	4b6f      	ldr	r3, [pc, #444]	; (129b8 <main+0x2528>)
   127fa:	0008      	movs	r0, r1
   127fc:	0011      	movs	r1, r2
   127fe:	4798      	blx	r3
   12800:	0002      	movs	r2, r0
   12802:	4b6e      	ldr	r3, [pc, #440]	; (129bc <main+0x252c>)
   12804:	496e      	ldr	r1, [pc, #440]	; (129c0 <main+0x2530>)
   12806:	0010      	movs	r0, r2
   12808:	4798      	blx	r3
   1280a:	000b      	movs	r3, r1
   1280c:	001a      	movs	r2, r3
   1280e:	4b6d      	ldr	r3, [pc, #436]	; (129c4 <main+0x2534>)
   12810:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_min) * gyKalman) / 0x0FFFF;
   12812:	4b64      	ldr	r3, [pc, #400]	; (129a4 <main+0x2514>)
   12814:	681a      	ldr	r2, [r3, #0]
   12816:	4b64      	ldr	r3, [pc, #400]	; (129a8 <main+0x2518>)
   12818:	1c10      	adds	r0, r2, #0
   1281a:	4798      	blx	r3
   1281c:	0002      	movs	r2, r0
   1281e:	000b      	movs	r3, r1
   12820:	4c62      	ldr	r4, [pc, #392]	; (129ac <main+0x251c>)
   12822:	2000      	movs	r0, #0
   12824:	4962      	ldr	r1, [pc, #392]	; (129b0 <main+0x2520>)
   12826:	47a0      	blx	r4
   12828:	0003      	movs	r3, r0
   1282a:	000c      	movs	r4, r1
   1282c:	001d      	movs	r5, r3
   1282e:	0026      	movs	r6, r4
   12830:	4b5a      	ldr	r3, [pc, #360]	; (1299c <main+0x250c>)
   12832:	681a      	ldr	r2, [r3, #0]
   12834:	4b5c      	ldr	r3, [pc, #368]	; (129a8 <main+0x2518>)
   12836:	1c10      	adds	r0, r2, #0
   12838:	4798      	blx	r3
   1283a:	0002      	movs	r2, r0
   1283c:	000b      	movs	r3, r1
   1283e:	4c5d      	ldr	r4, [pc, #372]	; (129b4 <main+0x2524>)
   12840:	0028      	movs	r0, r5
   12842:	0031      	movs	r1, r6
   12844:	47a0      	blx	r4
   12846:	0003      	movs	r3, r0
   12848:	000c      	movs	r4, r1
   1284a:	0019      	movs	r1, r3
   1284c:	0022      	movs	r2, r4
   1284e:	4b5a      	ldr	r3, [pc, #360]	; (129b8 <main+0x2528>)
   12850:	0008      	movs	r0, r1
   12852:	0011      	movs	r1, r2
   12854:	4798      	blx	r3
   12856:	0002      	movs	r2, r0
   12858:	4b5b      	ldr	r3, [pc, #364]	; (129c8 <main+0x2538>)
   1285a:	4959      	ldr	r1, [pc, #356]	; (129c0 <main+0x2530>)
   1285c:	0010      	movs	r0, r2
   1285e:	4798      	blx	r3
   12860:	0003      	movs	r3, r0
   12862:	b2da      	uxtb	r2, r3
   12864:	4b59      	ldr	r3, [pc, #356]	; (129cc <main+0x253c>)
   12866:	701a      	strb	r2, [r3, #0]
					if(gyKalman >= 0){
   12868:	4b4c      	ldr	r3, [pc, #304]	; (1299c <main+0x250c>)
   1286a:	681a      	ldr	r2, [r3, #0]
   1286c:	4b58      	ldr	r3, [pc, #352]	; (129d0 <main+0x2540>)
   1286e:	2100      	movs	r1, #0
   12870:	1c10      	adds	r0, r2, #0
   12872:	4798      	blx	r3
   12874:	1e03      	subs	r3, r0, #0
   12876:	d055      	beq.n	12924 <main+0x2494>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) % 0x0FFFF;
   12878:	4b56      	ldr	r3, [pc, #344]	; (129d4 <main+0x2544>)
   1287a:	681a      	ldr	r2, [r3, #0]
   1287c:	4b4a      	ldr	r3, [pc, #296]	; (129a8 <main+0x2518>)
   1287e:	1c10      	adds	r0, r2, #0
   12880:	4798      	blx	r3
   12882:	0002      	movs	r2, r0
   12884:	000b      	movs	r3, r1
   12886:	4c49      	ldr	r4, [pc, #292]	; (129ac <main+0x251c>)
   12888:	2000      	movs	r0, #0
   1288a:	4949      	ldr	r1, [pc, #292]	; (129b0 <main+0x2520>)
   1288c:	47a0      	blx	r4
   1288e:	0003      	movs	r3, r0
   12890:	000c      	movs	r4, r1
   12892:	001d      	movs	r5, r3
   12894:	0026      	movs	r6, r4
   12896:	4b41      	ldr	r3, [pc, #260]	; (1299c <main+0x250c>)
   12898:	681a      	ldr	r2, [r3, #0]
   1289a:	4b43      	ldr	r3, [pc, #268]	; (129a8 <main+0x2518>)
   1289c:	1c10      	adds	r0, r2, #0
   1289e:	4798      	blx	r3
   128a0:	0002      	movs	r2, r0
   128a2:	000b      	movs	r3, r1
   128a4:	4c43      	ldr	r4, [pc, #268]	; (129b4 <main+0x2524>)
   128a6:	0028      	movs	r0, r5
   128a8:	0031      	movs	r1, r6
   128aa:	47a0      	blx	r4
   128ac:	0003      	movs	r3, r0
   128ae:	000c      	movs	r4, r1
   128b0:	0019      	movs	r1, r3
   128b2:	0022      	movs	r2, r4
   128b4:	4b40      	ldr	r3, [pc, #256]	; (129b8 <main+0x2528>)
   128b6:	0008      	movs	r0, r1
   128b8:	0011      	movs	r1, r2
   128ba:	4798      	blx	r3
   128bc:	0002      	movs	r2, r0
   128be:	4b3f      	ldr	r3, [pc, #252]	; (129bc <main+0x252c>)
   128c0:	493f      	ldr	r1, [pc, #252]	; (129c0 <main+0x2530>)
   128c2:	0010      	movs	r0, r2
   128c4:	4798      	blx	r3
   128c6:	000b      	movs	r3, r1
   128c8:	001a      	movs	r2, r3
   128ca:	4b3e      	ldr	r3, [pc, #248]	; (129c4 <main+0x2534>)
   128cc:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGY_max) * gyKalman) / 0x0FFFF;
   128ce:	4b41      	ldr	r3, [pc, #260]	; (129d4 <main+0x2544>)
   128d0:	681a      	ldr	r2, [r3, #0]
   128d2:	4b35      	ldr	r3, [pc, #212]	; (129a8 <main+0x2518>)
   128d4:	1c10      	adds	r0, r2, #0
   128d6:	4798      	blx	r3
   128d8:	0002      	movs	r2, r0
   128da:	000b      	movs	r3, r1
   128dc:	4c33      	ldr	r4, [pc, #204]	; (129ac <main+0x251c>)
   128de:	2000      	movs	r0, #0
   128e0:	4933      	ldr	r1, [pc, #204]	; (129b0 <main+0x2520>)
   128e2:	47a0      	blx	r4
   128e4:	0003      	movs	r3, r0
   128e6:	000c      	movs	r4, r1
   128e8:	001d      	movs	r5, r3
   128ea:	0026      	movs	r6, r4
   128ec:	4b2b      	ldr	r3, [pc, #172]	; (1299c <main+0x250c>)
   128ee:	681a      	ldr	r2, [r3, #0]
   128f0:	4b2d      	ldr	r3, [pc, #180]	; (129a8 <main+0x2518>)
   128f2:	1c10      	adds	r0, r2, #0
   128f4:	4798      	blx	r3
   128f6:	0002      	movs	r2, r0
   128f8:	000b      	movs	r3, r1
   128fa:	4c2e      	ldr	r4, [pc, #184]	; (129b4 <main+0x2524>)
   128fc:	0028      	movs	r0, r5
   128fe:	0031      	movs	r1, r6
   12900:	47a0      	blx	r4
   12902:	0003      	movs	r3, r0
   12904:	000c      	movs	r4, r1
   12906:	0019      	movs	r1, r3
   12908:	0022      	movs	r2, r4
   1290a:	4b2b      	ldr	r3, [pc, #172]	; (129b8 <main+0x2528>)
   1290c:	0008      	movs	r0, r1
   1290e:	0011      	movs	r1, r2
   12910:	4798      	blx	r3
   12912:	0002      	movs	r2, r0
   12914:	4b2c      	ldr	r3, [pc, #176]	; (129c8 <main+0x2538>)
   12916:	492a      	ldr	r1, [pc, #168]	; (129c0 <main+0x2530>)
   12918:	0010      	movs	r0, r2
   1291a:	4798      	blx	r3
   1291c:	0003      	movs	r3, r0
   1291e:	b2da      	uxtb	r2, r3
   12920:	4b2a      	ldr	r3, [pc, #168]	; (129cc <main+0x253c>)
   12922:	701a      	strb	r2, [r3, #0]
					}
				
					upColor = cycle_index * output_brightness;
   12924:	4b27      	ldr	r3, [pc, #156]	; (129c4 <main+0x2534>)
   12926:	681a      	ldr	r2, [r3, #0]
   12928:	4b2b      	ldr	r3, [pc, #172]	; (129d8 <main+0x2548>)
   1292a:	0010      	movs	r0, r2
   1292c:	4798      	blx	r3
   1292e:	4b2b      	ldr	r3, [pc, #172]	; (129dc <main+0x254c>)
   12930:	681a      	ldr	r2, [r3, #0]
   12932:	4b2b      	ldr	r3, [pc, #172]	; (129e0 <main+0x2550>)
   12934:	1c11      	adds	r1, r2, #0
   12936:	4798      	blx	r3
   12938:	1c03      	adds	r3, r0, #0
   1293a:	1c1a      	adds	r2, r3, #0
   1293c:	4b29      	ldr	r3, [pc, #164]	; (129e4 <main+0x2554>)
   1293e:	1c10      	adds	r0, r2, #0
   12940:	4798      	blx	r3
   12942:	0003      	movs	r3, r0
   12944:	b29a      	uxth	r2, r3
   12946:	4b28      	ldr	r3, [pc, #160]	; (129e8 <main+0x2558>)
   12948:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   1294a:	4b1e      	ldr	r3, [pc, #120]	; (129c4 <main+0x2534>)
   1294c:	681b      	ldr	r3, [r3, #0]
   1294e:	4a1c      	ldr	r2, [pc, #112]	; (129c0 <main+0x2530>)
   12950:	1ad2      	subs	r2, r2, r3
   12952:	4b21      	ldr	r3, [pc, #132]	; (129d8 <main+0x2548>)
   12954:	0010      	movs	r0, r2
   12956:	4798      	blx	r3
   12958:	4b20      	ldr	r3, [pc, #128]	; (129dc <main+0x254c>)
   1295a:	681a      	ldr	r2, [r3, #0]
   1295c:	4b20      	ldr	r3, [pc, #128]	; (129e0 <main+0x2550>)
   1295e:	1c11      	adds	r1, r2, #0
   12960:	4798      	blx	r3
   12962:	1c03      	adds	r3, r0, #0
   12964:	1c1a      	adds	r2, r3, #0
   12966:	4b1f      	ldr	r3, [pc, #124]	; (129e4 <main+0x2554>)
   12968:	1c10      	adds	r0, r2, #0
   1296a:	4798      	blx	r3
   1296c:	0003      	movs	r3, r0
   1296e:	b29a      	uxth	r2, r3
   12970:	4b1e      	ldr	r3, [pc, #120]	; (129ec <main+0x255c>)
   12972:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12974:	4b1c      	ldr	r3, [pc, #112]	; (129e8 <main+0x2558>)
   12976:	8819      	ldrh	r1, [r3, #0]
   12978:	4b1c      	ldr	r3, [pc, #112]	; (129ec <main+0x255c>)
   1297a:	881a      	ldrh	r2, [r3, #0]
   1297c:	4b13      	ldr	r3, [pc, #76]	; (129cc <main+0x253c>)
   1297e:	781b      	ldrb	r3, [r3, #0]
   12980:	4d1b      	ldr	r5, [pc, #108]	; (129f0 <main+0x2560>)
   12982:	0038      	movs	r0, r7
   12984:	4c1b      	ldr	r4, [pc, #108]	; (129f4 <main+0x2564>)
   12986:	47a0      	blx	r4
   12988:	003b      	movs	r3, r7
   1298a:	0028      	movs	r0, r5
   1298c:	0019      	movs	r1, r3
   1298e:	230c      	movs	r3, #12
   12990:	001a      	movs	r2, r3
   12992:	4b19      	ldr	r3, [pc, #100]	; (129f8 <main+0x2568>)
   12994:	4798      	blx	r3
					break;
   12996:	f000 fd33 	bl	13400 <main+0x2f70>
   1299a:	46c0      	nop			; (mov r8, r8)
   1299c:	200003d0 	.word	0x200003d0
   129a0:	0001407d 	.word	0x0001407d
   129a4:	200000d4 	.word	0x200000d4
   129a8:	00016a85 	.word	0x00016a85
   129ac:	00015595 	.word	0x00015595
   129b0:	4107ffe8 	.word	0x4107ffe8
   129b4:	00015dfd 	.word	0x00015dfd
   129b8:	00016929 	.word	0x00016929
   129bc:	00013fd1 	.word	0x00013fd1
   129c0:	0000ffff 	.word	0x0000ffff
   129c4:	20000328 	.word	0x20000328
   129c8:	00013e05 	.word	0x00013e05
   129cc:	20000326 	.word	0x20000326
   129d0:	000140b9 	.word	0x000140b9
   129d4:	200000d8 	.word	0x200000d8
   129d8:	00014ee9 	.word	0x00014ee9
   129dc:	200003e8 	.word	0x200003e8
   129e0:	00014891 	.word	0x00014891
   129e4:	00014121 	.word	0x00014121
   129e8:	2000032c 	.word	0x2000032c
   129ec:	2000032e 	.word	0x2000032e
   129f0:	20000314 	.word	0x20000314
   129f4:	0000b24d 	.word	0x0000b24d
   129f8:	00016ccd 	.word	0x00016ccd
				}
				case COLOR_PITCH_RATE:
				{
					if(gxKalman < 0)
   129fc:	4bba      	ldr	r3, [pc, #744]	; (12ce8 <main+0x2858>)
   129fe:	681a      	ldr	r2, [r3, #0]
   12a00:	4bba      	ldr	r3, [pc, #744]	; (12cec <main+0x285c>)
   12a02:	2100      	movs	r1, #0
   12a04:	1c10      	adds	r0, r2, #0
   12a06:	4798      	blx	r3
   12a08:	1e03      	subs	r3, r0, #0
   12a0a:	d02a      	beq.n	12a62 <main+0x25d2>
					cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) % 0x0FFFF;
   12a0c:	4bb8      	ldr	r3, [pc, #736]	; (12cf0 <main+0x2860>)
   12a0e:	681a      	ldr	r2, [r3, #0]
   12a10:	4bb8      	ldr	r3, [pc, #736]	; (12cf4 <main+0x2864>)
   12a12:	1c10      	adds	r0, r2, #0
   12a14:	4798      	blx	r3
   12a16:	0002      	movs	r2, r0
   12a18:	000b      	movs	r3, r1
   12a1a:	4cb7      	ldr	r4, [pc, #732]	; (12cf8 <main+0x2868>)
   12a1c:	2000      	movs	r0, #0
   12a1e:	49b7      	ldr	r1, [pc, #732]	; (12cfc <main+0x286c>)
   12a20:	47a0      	blx	r4
   12a22:	0003      	movs	r3, r0
   12a24:	000c      	movs	r4, r1
   12a26:	001d      	movs	r5, r3
   12a28:	0026      	movs	r6, r4
   12a2a:	4baf      	ldr	r3, [pc, #700]	; (12ce8 <main+0x2858>)
   12a2c:	681a      	ldr	r2, [r3, #0]
   12a2e:	4bb1      	ldr	r3, [pc, #708]	; (12cf4 <main+0x2864>)
   12a30:	1c10      	adds	r0, r2, #0
   12a32:	4798      	blx	r3
   12a34:	0002      	movs	r2, r0
   12a36:	000b      	movs	r3, r1
   12a38:	4cb1      	ldr	r4, [pc, #708]	; (12d00 <main+0x2870>)
   12a3a:	0028      	movs	r0, r5
   12a3c:	0031      	movs	r1, r6
   12a3e:	47a0      	blx	r4
   12a40:	0003      	movs	r3, r0
   12a42:	000c      	movs	r4, r1
   12a44:	0019      	movs	r1, r3
   12a46:	0022      	movs	r2, r4
   12a48:	4bae      	ldr	r3, [pc, #696]	; (12d04 <main+0x2874>)
   12a4a:	0008      	movs	r0, r1
   12a4c:	0011      	movs	r1, r2
   12a4e:	4798      	blx	r3
   12a50:	0002      	movs	r2, r0
   12a52:	4bad      	ldr	r3, [pc, #692]	; (12d08 <main+0x2878>)
   12a54:	49ad      	ldr	r1, [pc, #692]	; (12d0c <main+0x287c>)
   12a56:	0010      	movs	r0, r2
   12a58:	4798      	blx	r3
   12a5a:	000b      	movs	r3, r1
   12a5c:	001a      	movs	r2, r3
   12a5e:	4bac      	ldr	r3, [pc, #688]	; (12d10 <main+0x2880>)
   12a60:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_min) * gxKalman) / 0x0FFFF;
   12a62:	4ba3      	ldr	r3, [pc, #652]	; (12cf0 <main+0x2860>)
   12a64:	681a      	ldr	r2, [r3, #0]
   12a66:	4ba3      	ldr	r3, [pc, #652]	; (12cf4 <main+0x2864>)
   12a68:	1c10      	adds	r0, r2, #0
   12a6a:	4798      	blx	r3
   12a6c:	0002      	movs	r2, r0
   12a6e:	000b      	movs	r3, r1
   12a70:	4ca1      	ldr	r4, [pc, #644]	; (12cf8 <main+0x2868>)
   12a72:	2000      	movs	r0, #0
   12a74:	49a1      	ldr	r1, [pc, #644]	; (12cfc <main+0x286c>)
   12a76:	47a0      	blx	r4
   12a78:	0003      	movs	r3, r0
   12a7a:	000c      	movs	r4, r1
   12a7c:	001d      	movs	r5, r3
   12a7e:	0026      	movs	r6, r4
   12a80:	4b99      	ldr	r3, [pc, #612]	; (12ce8 <main+0x2858>)
   12a82:	681a      	ldr	r2, [r3, #0]
   12a84:	4b9b      	ldr	r3, [pc, #620]	; (12cf4 <main+0x2864>)
   12a86:	1c10      	adds	r0, r2, #0
   12a88:	4798      	blx	r3
   12a8a:	0002      	movs	r2, r0
   12a8c:	000b      	movs	r3, r1
   12a8e:	4c9c      	ldr	r4, [pc, #624]	; (12d00 <main+0x2870>)
   12a90:	0028      	movs	r0, r5
   12a92:	0031      	movs	r1, r6
   12a94:	47a0      	blx	r4
   12a96:	0003      	movs	r3, r0
   12a98:	000c      	movs	r4, r1
   12a9a:	0019      	movs	r1, r3
   12a9c:	0022      	movs	r2, r4
   12a9e:	4b99      	ldr	r3, [pc, #612]	; (12d04 <main+0x2874>)
   12aa0:	0008      	movs	r0, r1
   12aa2:	0011      	movs	r1, r2
   12aa4:	4798      	blx	r3
   12aa6:	0002      	movs	r2, r0
   12aa8:	4b9a      	ldr	r3, [pc, #616]	; (12d14 <main+0x2884>)
   12aaa:	4998      	ldr	r1, [pc, #608]	; (12d0c <main+0x287c>)
   12aac:	0010      	movs	r0, r2
   12aae:	4798      	blx	r3
   12ab0:	0003      	movs	r3, r0
   12ab2:	b2da      	uxtb	r2, r3
   12ab4:	4b98      	ldr	r3, [pc, #608]	; (12d18 <main+0x2888>)
   12ab6:	701a      	strb	r2, [r3, #0]
					if(gxKalman >= 0){
   12ab8:	4b8b      	ldr	r3, [pc, #556]	; (12ce8 <main+0x2858>)
   12aba:	681a      	ldr	r2, [r3, #0]
   12abc:	4b97      	ldr	r3, [pc, #604]	; (12d1c <main+0x288c>)
   12abe:	2100      	movs	r1, #0
   12ac0:	1c10      	adds	r0, r2, #0
   12ac2:	4798      	blx	r3
   12ac4:	1e03      	subs	r3, r0, #0
   12ac6:	d055      	beq.n	12b74 <main+0x26e4>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) % 0x0FFFF;
   12ac8:	4b95      	ldr	r3, [pc, #596]	; (12d20 <main+0x2890>)
   12aca:	681a      	ldr	r2, [r3, #0]
   12acc:	4b89      	ldr	r3, [pc, #548]	; (12cf4 <main+0x2864>)
   12ace:	1c10      	adds	r0, r2, #0
   12ad0:	4798      	blx	r3
   12ad2:	0002      	movs	r2, r0
   12ad4:	000b      	movs	r3, r1
   12ad6:	4c88      	ldr	r4, [pc, #544]	; (12cf8 <main+0x2868>)
   12ad8:	2000      	movs	r0, #0
   12ada:	4988      	ldr	r1, [pc, #544]	; (12cfc <main+0x286c>)
   12adc:	47a0      	blx	r4
   12ade:	0003      	movs	r3, r0
   12ae0:	000c      	movs	r4, r1
   12ae2:	001d      	movs	r5, r3
   12ae4:	0026      	movs	r6, r4
   12ae6:	4b80      	ldr	r3, [pc, #512]	; (12ce8 <main+0x2858>)
   12ae8:	681a      	ldr	r2, [r3, #0]
   12aea:	4b82      	ldr	r3, [pc, #520]	; (12cf4 <main+0x2864>)
   12aec:	1c10      	adds	r0, r2, #0
   12aee:	4798      	blx	r3
   12af0:	0002      	movs	r2, r0
   12af2:	000b      	movs	r3, r1
   12af4:	4c82      	ldr	r4, [pc, #520]	; (12d00 <main+0x2870>)
   12af6:	0028      	movs	r0, r5
   12af8:	0031      	movs	r1, r6
   12afa:	47a0      	blx	r4
   12afc:	0003      	movs	r3, r0
   12afe:	000c      	movs	r4, r1
   12b00:	0019      	movs	r1, r3
   12b02:	0022      	movs	r2, r4
   12b04:	4b7f      	ldr	r3, [pc, #508]	; (12d04 <main+0x2874>)
   12b06:	0008      	movs	r0, r1
   12b08:	0011      	movs	r1, r2
   12b0a:	4798      	blx	r3
   12b0c:	0002      	movs	r2, r0
   12b0e:	4b7e      	ldr	r3, [pc, #504]	; (12d08 <main+0x2878>)
   12b10:	497e      	ldr	r1, [pc, #504]	; (12d0c <main+0x287c>)
   12b12:	0010      	movs	r0, r2
   12b14:	4798      	blx	r3
   12b16:	000b      	movs	r3, r1
   12b18:	001a      	movs	r2, r3
   12b1a:	4b7d      	ldr	r3, [pc, #500]	; (12d10 <main+0x2880>)
   12b1c:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanGX_max) * gxKalman) / 0x0FFFF;
   12b1e:	4b80      	ldr	r3, [pc, #512]	; (12d20 <main+0x2890>)
   12b20:	681a      	ldr	r2, [r3, #0]
   12b22:	4b74      	ldr	r3, [pc, #464]	; (12cf4 <main+0x2864>)
   12b24:	1c10      	adds	r0, r2, #0
   12b26:	4798      	blx	r3
   12b28:	0002      	movs	r2, r0
   12b2a:	000b      	movs	r3, r1
   12b2c:	4c72      	ldr	r4, [pc, #456]	; (12cf8 <main+0x2868>)
   12b2e:	2000      	movs	r0, #0
   12b30:	4972      	ldr	r1, [pc, #456]	; (12cfc <main+0x286c>)
   12b32:	47a0      	blx	r4
   12b34:	0003      	movs	r3, r0
   12b36:	000c      	movs	r4, r1
   12b38:	001d      	movs	r5, r3
   12b3a:	0026      	movs	r6, r4
   12b3c:	4b6a      	ldr	r3, [pc, #424]	; (12ce8 <main+0x2858>)
   12b3e:	681a      	ldr	r2, [r3, #0]
   12b40:	4b6c      	ldr	r3, [pc, #432]	; (12cf4 <main+0x2864>)
   12b42:	1c10      	adds	r0, r2, #0
   12b44:	4798      	blx	r3
   12b46:	0002      	movs	r2, r0
   12b48:	000b      	movs	r3, r1
   12b4a:	4c6d      	ldr	r4, [pc, #436]	; (12d00 <main+0x2870>)
   12b4c:	0028      	movs	r0, r5
   12b4e:	0031      	movs	r1, r6
   12b50:	47a0      	blx	r4
   12b52:	0003      	movs	r3, r0
   12b54:	000c      	movs	r4, r1
   12b56:	0019      	movs	r1, r3
   12b58:	0022      	movs	r2, r4
   12b5a:	4b6a      	ldr	r3, [pc, #424]	; (12d04 <main+0x2874>)
   12b5c:	0008      	movs	r0, r1
   12b5e:	0011      	movs	r1, r2
   12b60:	4798      	blx	r3
   12b62:	0002      	movs	r2, r0
   12b64:	4b6b      	ldr	r3, [pc, #428]	; (12d14 <main+0x2884>)
   12b66:	4969      	ldr	r1, [pc, #420]	; (12d0c <main+0x287c>)
   12b68:	0010      	movs	r0, r2
   12b6a:	4798      	blx	r3
   12b6c:	0003      	movs	r3, r0
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	4b69      	ldr	r3, [pc, #420]	; (12d18 <main+0x2888>)
   12b72:	701a      	strb	r2, [r3, #0]
					}
					
					upColor = cycle_index * output_brightness;
   12b74:	4b66      	ldr	r3, [pc, #408]	; (12d10 <main+0x2880>)
   12b76:	681a      	ldr	r2, [r3, #0]
   12b78:	4b6a      	ldr	r3, [pc, #424]	; (12d24 <main+0x2894>)
   12b7a:	0010      	movs	r0, r2
   12b7c:	4798      	blx	r3
   12b7e:	4b6a      	ldr	r3, [pc, #424]	; (12d28 <main+0x2898>)
   12b80:	681a      	ldr	r2, [r3, #0]
   12b82:	4b6a      	ldr	r3, [pc, #424]	; (12d2c <main+0x289c>)
   12b84:	1c11      	adds	r1, r2, #0
   12b86:	4798      	blx	r3
   12b88:	1c03      	adds	r3, r0, #0
   12b8a:	1c1a      	adds	r2, r3, #0
   12b8c:	4b68      	ldr	r3, [pc, #416]	; (12d30 <main+0x28a0>)
   12b8e:	1c10      	adds	r0, r2, #0
   12b90:	4798      	blx	r3
   12b92:	0003      	movs	r3, r0
   12b94:	b29a      	uxth	r2, r3
   12b96:	4b67      	ldr	r3, [pc, #412]	; (12d34 <main+0x28a4>)
   12b98:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12b9a:	4b5d      	ldr	r3, [pc, #372]	; (12d10 <main+0x2880>)
   12b9c:	681b      	ldr	r3, [r3, #0]
   12b9e:	4a5b      	ldr	r2, [pc, #364]	; (12d0c <main+0x287c>)
   12ba0:	1ad2      	subs	r2, r2, r3
   12ba2:	4b60      	ldr	r3, [pc, #384]	; (12d24 <main+0x2894>)
   12ba4:	0010      	movs	r0, r2
   12ba6:	4798      	blx	r3
   12ba8:	4b5f      	ldr	r3, [pc, #380]	; (12d28 <main+0x2898>)
   12baa:	681a      	ldr	r2, [r3, #0]
   12bac:	4b5f      	ldr	r3, [pc, #380]	; (12d2c <main+0x289c>)
   12bae:	1c11      	adds	r1, r2, #0
   12bb0:	4798      	blx	r3
   12bb2:	1c03      	adds	r3, r0, #0
   12bb4:	1c1a      	adds	r2, r3, #0
   12bb6:	4b5e      	ldr	r3, [pc, #376]	; (12d30 <main+0x28a0>)
   12bb8:	1c10      	adds	r0, r2, #0
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
   12bbe:	b29a      	uxth	r2, r3
   12bc0:	4b5d      	ldr	r3, [pc, #372]	; (12d38 <main+0x28a8>)
   12bc2:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12bc4:	4b5b      	ldr	r3, [pc, #364]	; (12d34 <main+0x28a4>)
   12bc6:	8819      	ldrh	r1, [r3, #0]
   12bc8:	4b5b      	ldr	r3, [pc, #364]	; (12d38 <main+0x28a8>)
   12bca:	881a      	ldrh	r2, [r3, #0]
   12bcc:	4b52      	ldr	r3, [pc, #328]	; (12d18 <main+0x2888>)
   12bce:	781b      	ldrb	r3, [r3, #0]
   12bd0:	4d5a      	ldr	r5, [pc, #360]	; (12d3c <main+0x28ac>)
   12bd2:	0038      	movs	r0, r7
   12bd4:	4c5a      	ldr	r4, [pc, #360]	; (12d40 <main+0x28b0>)
   12bd6:	47a0      	blx	r4
   12bd8:	003b      	movs	r3, r7
   12bda:	0028      	movs	r0, r5
   12bdc:	0019      	movs	r1, r3
   12bde:	230c      	movs	r3, #12
   12be0:	001a      	movs	r2, r3
   12be2:	4b58      	ldr	r3, [pc, #352]	; (12d44 <main+0x28b4>)
   12be4:	4798      	blx	r3
					break;
   12be6:	f000 fc0b 	bl	13400 <main+0x2f70>
				}
				case COLOR_THROTTLE:
				{
					float temp_y = remote_y - 43;
   12bea:	4b57      	ldr	r3, [pc, #348]	; (12d48 <main+0x28b8>)
   12bec:	781b      	ldrb	r3, [r3, #0]
   12bee:	3b2b      	subs	r3, #43	; 0x2b
   12bf0:	001a      	movs	r2, r3
   12bf2:	4b56      	ldr	r3, [pc, #344]	; (12d4c <main+0x28bc>)
   12bf4:	0010      	movs	r0, r2
   12bf6:	4798      	blx	r3
   12bf8:	1c03      	adds	r3, r0, #0
   12bfa:	627b      	str	r3, [r7, #36]	; 0x24

					if(temp_y < 0 )
   12bfc:	4b3b      	ldr	r3, [pc, #236]	; (12cec <main+0x285c>)
   12bfe:	2100      	movs	r1, #0
   12c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12c02:	4798      	blx	r3
   12c04:	1e03      	subs	r3, r0, #0
   12c06:	d005      	beq.n	12c14 <main+0x2784>
						temp_y = 255+temp_y;
   12c08:	4b51      	ldr	r3, [pc, #324]	; (12d50 <main+0x28c0>)
   12c0a:	4952      	ldr	r1, [pc, #328]	; (12d54 <main+0x28c4>)
   12c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12c0e:	4798      	blx	r3
   12c10:	1c03      	adds	r3, r0, #0
   12c12:	627b      	str	r3, [r7, #36]	; 0x24
					cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 255.0) * temp_y) % 0x0FFFF;
   12c14:	4b37      	ldr	r3, [pc, #220]	; (12cf4 <main+0x2864>)
   12c16:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12c18:	4798      	blx	r3
   12c1a:	4c39      	ldr	r4, [pc, #228]	; (12d00 <main+0x2870>)
   12c1c:	2200      	movs	r2, #0
   12c1e:	4b4e      	ldr	r3, [pc, #312]	; (12d58 <main+0x28c8>)
   12c20:	47a0      	blx	r4
   12c22:	0003      	movs	r3, r0
   12c24:	000c      	movs	r4, r1
   12c26:	0019      	movs	r1, r3
   12c28:	0022      	movs	r2, r4
   12c2a:	4b36      	ldr	r3, [pc, #216]	; (12d04 <main+0x2874>)
   12c2c:	0008      	movs	r0, r1
   12c2e:	0011      	movs	r1, r2
   12c30:	4798      	blx	r3
   12c32:	0002      	movs	r2, r0
   12c34:	4b34      	ldr	r3, [pc, #208]	; (12d08 <main+0x2878>)
   12c36:	4935      	ldr	r1, [pc, #212]	; (12d0c <main+0x287c>)
   12c38:	0010      	movs	r0, r2
   12c3a:	4798      	blx	r3
   12c3c:	000b      	movs	r3, r1
   12c3e:	001a      	movs	r2, r3
   12c40:	4b33      	ldr	r3, [pc, #204]	; (12d10 <main+0x2880>)
   12c42:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 3.0) / 255.0) * temp_y) / 0x0FFFF;
   12c44:	4b2b      	ldr	r3, [pc, #172]	; (12cf4 <main+0x2864>)
   12c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12c48:	4798      	blx	r3
   12c4a:	4c2d      	ldr	r4, [pc, #180]	; (12d00 <main+0x2870>)
   12c4c:	2200      	movs	r2, #0
   12c4e:	4b42      	ldr	r3, [pc, #264]	; (12d58 <main+0x28c8>)
   12c50:	47a0      	blx	r4
   12c52:	0003      	movs	r3, r0
   12c54:	000c      	movs	r4, r1
   12c56:	0019      	movs	r1, r3
   12c58:	0022      	movs	r2, r4
   12c5a:	4b2a      	ldr	r3, [pc, #168]	; (12d04 <main+0x2874>)
   12c5c:	0008      	movs	r0, r1
   12c5e:	0011      	movs	r1, r2
   12c60:	4798      	blx	r3
   12c62:	0002      	movs	r2, r0
   12c64:	4b2b      	ldr	r3, [pc, #172]	; (12d14 <main+0x2884>)
   12c66:	4929      	ldr	r1, [pc, #164]	; (12d0c <main+0x287c>)
   12c68:	0010      	movs	r0, r2
   12c6a:	4798      	blx	r3
   12c6c:	0003      	movs	r3, r0
   12c6e:	b2da      	uxtb	r2, r3
   12c70:	4b29      	ldr	r3, [pc, #164]	; (12d18 <main+0x2888>)
   12c72:	701a      	strb	r2, [r3, #0]
					upColor = cycle_index * output_brightness;
   12c74:	4b26      	ldr	r3, [pc, #152]	; (12d10 <main+0x2880>)
   12c76:	681a      	ldr	r2, [r3, #0]
   12c78:	4b2a      	ldr	r3, [pc, #168]	; (12d24 <main+0x2894>)
   12c7a:	0010      	movs	r0, r2
   12c7c:	4798      	blx	r3
   12c7e:	4b2a      	ldr	r3, [pc, #168]	; (12d28 <main+0x2898>)
   12c80:	681a      	ldr	r2, [r3, #0]
   12c82:	4b2a      	ldr	r3, [pc, #168]	; (12d2c <main+0x289c>)
   12c84:	1c11      	adds	r1, r2, #0
   12c86:	4798      	blx	r3
   12c88:	1c03      	adds	r3, r0, #0
   12c8a:	1c1a      	adds	r2, r3, #0
   12c8c:	4b28      	ldr	r3, [pc, #160]	; (12d30 <main+0x28a0>)
   12c8e:	1c10      	adds	r0, r2, #0
   12c90:	4798      	blx	r3
   12c92:	0003      	movs	r3, r0
   12c94:	b29a      	uxth	r2, r3
   12c96:	4b27      	ldr	r3, [pc, #156]	; (12d34 <main+0x28a4>)
   12c98:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12c9a:	4b1d      	ldr	r3, [pc, #116]	; (12d10 <main+0x2880>)
   12c9c:	681b      	ldr	r3, [r3, #0]
   12c9e:	4a1b      	ldr	r2, [pc, #108]	; (12d0c <main+0x287c>)
   12ca0:	1ad2      	subs	r2, r2, r3
   12ca2:	4b20      	ldr	r3, [pc, #128]	; (12d24 <main+0x2894>)
   12ca4:	0010      	movs	r0, r2
   12ca6:	4798      	blx	r3
   12ca8:	4b1f      	ldr	r3, [pc, #124]	; (12d28 <main+0x2898>)
   12caa:	681a      	ldr	r2, [r3, #0]
   12cac:	4b1f      	ldr	r3, [pc, #124]	; (12d2c <main+0x289c>)
   12cae:	1c11      	adds	r1, r2, #0
   12cb0:	4798      	blx	r3
   12cb2:	1c03      	adds	r3, r0, #0
   12cb4:	1c1a      	adds	r2, r3, #0
   12cb6:	4b1e      	ldr	r3, [pc, #120]	; (12d30 <main+0x28a0>)
   12cb8:	1c10      	adds	r0, r2, #0
   12cba:	4798      	blx	r3
   12cbc:	0003      	movs	r3, r0
   12cbe:	b29a      	uxth	r2, r3
   12cc0:	4b1d      	ldr	r3, [pc, #116]	; (12d38 <main+0x28a8>)
   12cc2:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12cc4:	4b1b      	ldr	r3, [pc, #108]	; (12d34 <main+0x28a4>)
   12cc6:	8819      	ldrh	r1, [r3, #0]
   12cc8:	4b1b      	ldr	r3, [pc, #108]	; (12d38 <main+0x28a8>)
   12cca:	881a      	ldrh	r2, [r3, #0]
   12ccc:	4b12      	ldr	r3, [pc, #72]	; (12d18 <main+0x2888>)
   12cce:	781b      	ldrb	r3, [r3, #0]
   12cd0:	4d1a      	ldr	r5, [pc, #104]	; (12d3c <main+0x28ac>)
   12cd2:	0038      	movs	r0, r7
   12cd4:	4c1a      	ldr	r4, [pc, #104]	; (12d40 <main+0x28b0>)
   12cd6:	47a0      	blx	r4
   12cd8:	003b      	movs	r3, r7
   12cda:	0028      	movs	r0, r5
   12cdc:	0019      	movs	r1, r3
   12cde:	230c      	movs	r3, #12
   12ce0:	001a      	movs	r2, r3
   12ce2:	4b18      	ldr	r3, [pc, #96]	; (12d44 <main+0x28b4>)
   12ce4:	4798      	blx	r3

					break;
   12ce6:	e38b      	b.n	13400 <main+0x2f70>
   12ce8:	200003cc 	.word	0x200003cc
   12cec:	0001407d 	.word	0x0001407d
   12cf0:	200000cc 	.word	0x200000cc
   12cf4:	00016a85 	.word	0x00016a85
   12cf8:	00015595 	.word	0x00015595
   12cfc:	4107ffe8 	.word	0x4107ffe8
   12d00:	00015dfd 	.word	0x00015dfd
   12d04:	00016929 	.word	0x00016929
   12d08:	00013fd1 	.word	0x00013fd1
   12d0c:	0000ffff 	.word	0x0000ffff
   12d10:	20000328 	.word	0x20000328
   12d14:	00013e05 	.word	0x00013e05
   12d18:	20000326 	.word	0x20000326
   12d1c:	000140b9 	.word	0x000140b9
   12d20:	200000d0 	.word	0x200000d0
   12d24:	00014ee9 	.word	0x00014ee9
   12d28:	200003e8 	.word	0x200003e8
   12d2c:	00014891 	.word	0x00014891
   12d30:	00014121 	.word	0x00014121
   12d34:	2000032c 	.word	0x2000032c
   12d38:	2000032e 	.word	0x2000032e
   12d3c:	20000314 	.word	0x20000314
   12d40:	0000b24d 	.word	0x0000b24d
   12d44:	00016ccd 	.word	0x00016ccd
   12d48:	2000030a 	.word	0x2000030a
   12d4c:	00014e49 	.word	0x00014e49
   12d50:	0001418d 	.word	0x0001418d
   12d54:	437f0000 	.word	0x437f0000
   12d58:	40881800 	.word	0x40881800
				}
				case COLOR_RPM:	
				{				
					cycle_index = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)latest_vesc_vals.rpm) % 0x0FFFF;
   12d5c:	4bd5      	ldr	r3, [pc, #852]	; (130b4 <main+0x2c24>)
   12d5e:	699a      	ldr	r2, [r3, #24]
   12d60:	4bd5      	ldr	r3, [pc, #852]	; (130b8 <main+0x2c28>)
   12d62:	0010      	movs	r0, r2
   12d64:	4798      	blx	r3
   12d66:	1c02      	adds	r2, r0, #0
   12d68:	4bd4      	ldr	r3, [pc, #848]	; (130bc <main+0x2c2c>)
   12d6a:	1c10      	adds	r0, r2, #0
   12d6c:	4798      	blx	r3
   12d6e:	0002      	movs	r2, r0
   12d70:	000b      	movs	r3, r1
   12d72:	4cd3      	ldr	r4, [pc, #844]	; (130c0 <main+0x2c30>)
   12d74:	2000      	movs	r0, #0
   12d76:	49d3      	ldr	r1, [pc, #844]	; (130c4 <main+0x2c34>)
   12d78:	47a0      	blx	r4
   12d7a:	0003      	movs	r3, r0
   12d7c:	000c      	movs	r4, r1
   12d7e:	001d      	movs	r5, r3
   12d80:	0026      	movs	r6, r4
   12d82:	4bd1      	ldr	r3, [pc, #836]	; (130c8 <main+0x2c38>)
   12d84:	691a      	ldr	r2, [r3, #16]
   12d86:	4bcc      	ldr	r3, [pc, #816]	; (130b8 <main+0x2c28>)
   12d88:	0010      	movs	r0, r2
   12d8a:	4798      	blx	r3
   12d8c:	1c02      	adds	r2, r0, #0
   12d8e:	4bcb      	ldr	r3, [pc, #812]	; (130bc <main+0x2c2c>)
   12d90:	1c10      	adds	r0, r2, #0
   12d92:	4798      	blx	r3
   12d94:	0002      	movs	r2, r0
   12d96:	000b      	movs	r3, r1
   12d98:	4ccc      	ldr	r4, [pc, #816]	; (130cc <main+0x2c3c>)
   12d9a:	0028      	movs	r0, r5
   12d9c:	0031      	movs	r1, r6
   12d9e:	47a0      	blx	r4
   12da0:	0003      	movs	r3, r0
   12da2:	000c      	movs	r4, r1
   12da4:	0019      	movs	r1, r3
   12da6:	0022      	movs	r2, r4
   12da8:	4bc9      	ldr	r3, [pc, #804]	; (130d0 <main+0x2c40>)
   12daa:	0008      	movs	r0, r1
   12dac:	0011      	movs	r1, r2
   12dae:	4798      	blx	r3
   12db0:	0002      	movs	r2, r0
   12db2:	4bc8      	ldr	r3, [pc, #800]	; (130d4 <main+0x2c44>)
   12db4:	49c8      	ldr	r1, [pc, #800]	; (130d8 <main+0x2c48>)
   12db6:	0010      	movs	r0, r2
   12db8:	4798      	blx	r3
   12dba:	000b      	movs	r3, r1
   12dbc:	001a      	movs	r2, r3
   12dbe:	4bc7      	ldr	r3, [pc, #796]	; (130dc <main+0x2c4c>)
   12dc0:	601a      	str	r2, [r3, #0]
					cycle = (int)(((((float)0x0FFFF) * 3.0) / (float)mcconf_limits.max_erpm) * (float)latest_vesc_vals.rpm) / 0x0FFFF;
   12dc2:	4bbc      	ldr	r3, [pc, #752]	; (130b4 <main+0x2c24>)
   12dc4:	699a      	ldr	r2, [r3, #24]
   12dc6:	4bbc      	ldr	r3, [pc, #752]	; (130b8 <main+0x2c28>)
   12dc8:	0010      	movs	r0, r2
   12dca:	4798      	blx	r3
   12dcc:	1c02      	adds	r2, r0, #0
   12dce:	4bbb      	ldr	r3, [pc, #748]	; (130bc <main+0x2c2c>)
   12dd0:	1c10      	adds	r0, r2, #0
   12dd2:	4798      	blx	r3
   12dd4:	0002      	movs	r2, r0
   12dd6:	000b      	movs	r3, r1
   12dd8:	4cb9      	ldr	r4, [pc, #740]	; (130c0 <main+0x2c30>)
   12dda:	2000      	movs	r0, #0
   12ddc:	49b9      	ldr	r1, [pc, #740]	; (130c4 <main+0x2c34>)
   12dde:	47a0      	blx	r4
   12de0:	0003      	movs	r3, r0
   12de2:	000c      	movs	r4, r1
   12de4:	001d      	movs	r5, r3
   12de6:	0026      	movs	r6, r4
   12de8:	4bb7      	ldr	r3, [pc, #732]	; (130c8 <main+0x2c38>)
   12dea:	691a      	ldr	r2, [r3, #16]
   12dec:	4bb2      	ldr	r3, [pc, #712]	; (130b8 <main+0x2c28>)
   12dee:	0010      	movs	r0, r2
   12df0:	4798      	blx	r3
   12df2:	1c02      	adds	r2, r0, #0
   12df4:	4bb1      	ldr	r3, [pc, #708]	; (130bc <main+0x2c2c>)
   12df6:	1c10      	adds	r0, r2, #0
   12df8:	4798      	blx	r3
   12dfa:	0002      	movs	r2, r0
   12dfc:	000b      	movs	r3, r1
   12dfe:	4cb3      	ldr	r4, [pc, #716]	; (130cc <main+0x2c3c>)
   12e00:	0028      	movs	r0, r5
   12e02:	0031      	movs	r1, r6
   12e04:	47a0      	blx	r4
   12e06:	0003      	movs	r3, r0
   12e08:	000c      	movs	r4, r1
   12e0a:	0019      	movs	r1, r3
   12e0c:	0022      	movs	r2, r4
   12e0e:	4bb0      	ldr	r3, [pc, #704]	; (130d0 <main+0x2c40>)
   12e10:	0008      	movs	r0, r1
   12e12:	0011      	movs	r1, r2
   12e14:	4798      	blx	r3
   12e16:	0002      	movs	r2, r0
   12e18:	4bb1      	ldr	r3, [pc, #708]	; (130e0 <main+0x2c50>)
   12e1a:	49af      	ldr	r1, [pc, #700]	; (130d8 <main+0x2c48>)
   12e1c:	0010      	movs	r0, r2
   12e1e:	4798      	blx	r3
   12e20:	0003      	movs	r3, r0
   12e22:	b2da      	uxtb	r2, r3
   12e24:	4baf      	ldr	r3, [pc, #700]	; (130e4 <main+0x2c54>)
   12e26:	701a      	strb	r2, [r3, #0]
					upColor = cycle_index * output_brightness;
   12e28:	4bac      	ldr	r3, [pc, #688]	; (130dc <main+0x2c4c>)
   12e2a:	681a      	ldr	r2, [r3, #0]
   12e2c:	4bae      	ldr	r3, [pc, #696]	; (130e8 <main+0x2c58>)
   12e2e:	0010      	movs	r0, r2
   12e30:	4798      	blx	r3
   12e32:	4bae      	ldr	r3, [pc, #696]	; (130ec <main+0x2c5c>)
   12e34:	681a      	ldr	r2, [r3, #0]
   12e36:	4bae      	ldr	r3, [pc, #696]	; (130f0 <main+0x2c60>)
   12e38:	1c11      	adds	r1, r2, #0
   12e3a:	4798      	blx	r3
   12e3c:	1c03      	adds	r3, r0, #0
   12e3e:	1c1a      	adds	r2, r3, #0
   12e40:	4bac      	ldr	r3, [pc, #688]	; (130f4 <main+0x2c64>)
   12e42:	1c10      	adds	r0, r2, #0
   12e44:	4798      	blx	r3
   12e46:	0003      	movs	r3, r0
   12e48:	b29a      	uxth	r2, r3
   12e4a:	4bab      	ldr	r3, [pc, #684]	; (130f8 <main+0x2c68>)
   12e4c:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12e4e:	4ba3      	ldr	r3, [pc, #652]	; (130dc <main+0x2c4c>)
   12e50:	681b      	ldr	r3, [r3, #0]
   12e52:	4aa1      	ldr	r2, [pc, #644]	; (130d8 <main+0x2c48>)
   12e54:	1ad2      	subs	r2, r2, r3
   12e56:	4ba4      	ldr	r3, [pc, #656]	; (130e8 <main+0x2c58>)
   12e58:	0010      	movs	r0, r2
   12e5a:	4798      	blx	r3
   12e5c:	4ba3      	ldr	r3, [pc, #652]	; (130ec <main+0x2c5c>)
   12e5e:	681a      	ldr	r2, [r3, #0]
   12e60:	4ba3      	ldr	r3, [pc, #652]	; (130f0 <main+0x2c60>)
   12e62:	1c11      	adds	r1, r2, #0
   12e64:	4798      	blx	r3
   12e66:	1c03      	adds	r3, r0, #0
   12e68:	1c1a      	adds	r2, r3, #0
   12e6a:	4ba2      	ldr	r3, [pc, #648]	; (130f4 <main+0x2c64>)
   12e6c:	1c10      	adds	r0, r2, #0
   12e6e:	4798      	blx	r3
   12e70:	0003      	movs	r3, r0
   12e72:	b29a      	uxth	r2, r3
   12e74:	4ba1      	ldr	r3, [pc, #644]	; (130fc <main+0x2c6c>)
   12e76:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12e78:	4b9f      	ldr	r3, [pc, #636]	; (130f8 <main+0x2c68>)
   12e7a:	8819      	ldrh	r1, [r3, #0]
   12e7c:	4b9f      	ldr	r3, [pc, #636]	; (130fc <main+0x2c6c>)
   12e7e:	881a      	ldrh	r2, [r3, #0]
   12e80:	4b98      	ldr	r3, [pc, #608]	; (130e4 <main+0x2c54>)
   12e82:	781b      	ldrb	r3, [r3, #0]
   12e84:	4d9e      	ldr	r5, [pc, #632]	; (13100 <main+0x2c70>)
   12e86:	0038      	movs	r0, r7
   12e88:	4c9e      	ldr	r4, [pc, #632]	; (13104 <main+0x2c74>)
   12e8a:	47a0      	blx	r4
   12e8c:	003b      	movs	r3, r7
   12e8e:	0028      	movs	r0, r5
   12e90:	0019      	movs	r1, r3
   12e92:	230c      	movs	r3, #12
   12e94:	001a      	movs	r2, r3
   12e96:	4b9c      	ldr	r3, [pc, #624]	; (13108 <main+0x2c78>)
   12e98:	4798      	blx	r3
					break;
   12e9a:	e2b1      	b.n	13400 <main+0x2f70>
				}
				case COLOR_X_ACCEL:
				{
					if(axKalman < 0){
   12e9c:	4b9b      	ldr	r3, [pc, #620]	; (1310c <main+0x2c7c>)
   12e9e:	681a      	ldr	r2, [r3, #0]
   12ea0:	4b9b      	ldr	r3, [pc, #620]	; (13110 <main+0x2c80>)
   12ea2:	2100      	movs	r1, #0
   12ea4:	1c10      	adds	r0, r2, #0
   12ea6:	4798      	blx	r3
   12ea8:	1e03      	subs	r3, r0, #0
   12eaa:	d040      	beq.n	12f2e <main+0x2a9e>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
   12eac:	4b97      	ldr	r3, [pc, #604]	; (1310c <main+0x2c7c>)
   12eae:	681a      	ldr	r2, [r3, #0]
   12eb0:	4b98      	ldr	r3, [pc, #608]	; (13114 <main+0x2c84>)
   12eb2:	4999      	ldr	r1, [pc, #612]	; (13118 <main+0x2c88>)
   12eb4:	1c10      	adds	r0, r2, #0
   12eb6:	4798      	blx	r3
   12eb8:	1c03      	adds	r3, r0, #0
   12eba:	1c1a      	adds	r2, r3, #0
   12ebc:	4b7f      	ldr	r3, [pc, #508]	; (130bc <main+0x2c2c>)
   12ebe:	1c10      	adds	r0, r2, #0
   12ec0:	4798      	blx	r3
   12ec2:	4c82      	ldr	r4, [pc, #520]	; (130cc <main+0x2c3c>)
   12ec4:	4a95      	ldr	r2, [pc, #596]	; (1311c <main+0x2c8c>)
   12ec6:	4b96      	ldr	r3, [pc, #600]	; (13120 <main+0x2c90>)
   12ec8:	47a0      	blx	r4
   12eca:	0003      	movs	r3, r0
   12ecc:	000c      	movs	r4, r1
   12ece:	0019      	movs	r1, r3
   12ed0:	0022      	movs	r2, r4
   12ed2:	4b7f      	ldr	r3, [pc, #508]	; (130d0 <main+0x2c40>)
   12ed4:	0008      	movs	r0, r1
   12ed6:	0011      	movs	r1, r2
   12ed8:	4798      	blx	r3
   12eda:	0002      	movs	r2, r0
   12edc:	4b7d      	ldr	r3, [pc, #500]	; (130d4 <main+0x2c44>)
   12ede:	497e      	ldr	r1, [pc, #504]	; (130d8 <main+0x2c48>)
   12ee0:	0010      	movs	r0, r2
   12ee2:	4798      	blx	r3
   12ee4:	000b      	movs	r3, r1
   12ee6:	001a      	movs	r2, r3
   12ee8:	4b7c      	ldr	r3, [pc, #496]	; (130dc <main+0x2c4c>)
   12eea:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
   12eec:	4b87      	ldr	r3, [pc, #540]	; (1310c <main+0x2c7c>)
   12eee:	681a      	ldr	r2, [r3, #0]
   12ef0:	4b88      	ldr	r3, [pc, #544]	; (13114 <main+0x2c84>)
   12ef2:	4989      	ldr	r1, [pc, #548]	; (13118 <main+0x2c88>)
   12ef4:	1c10      	adds	r0, r2, #0
   12ef6:	4798      	blx	r3
   12ef8:	1c03      	adds	r3, r0, #0
   12efa:	1c1a      	adds	r2, r3, #0
   12efc:	4b6f      	ldr	r3, [pc, #444]	; (130bc <main+0x2c2c>)
   12efe:	1c10      	adds	r0, r2, #0
   12f00:	4798      	blx	r3
   12f02:	4c72      	ldr	r4, [pc, #456]	; (130cc <main+0x2c3c>)
   12f04:	4a85      	ldr	r2, [pc, #532]	; (1311c <main+0x2c8c>)
   12f06:	4b86      	ldr	r3, [pc, #536]	; (13120 <main+0x2c90>)
   12f08:	47a0      	blx	r4
   12f0a:	0003      	movs	r3, r0
   12f0c:	000c      	movs	r4, r1
   12f0e:	0019      	movs	r1, r3
   12f10:	0022      	movs	r2, r4
   12f12:	4b6f      	ldr	r3, [pc, #444]	; (130d0 <main+0x2c40>)
   12f14:	0008      	movs	r0, r1
   12f16:	0011      	movs	r1, r2
   12f18:	4798      	blx	r3
   12f1a:	0002      	movs	r2, r0
   12f1c:	4b70      	ldr	r3, [pc, #448]	; (130e0 <main+0x2c50>)
   12f1e:	496e      	ldr	r1, [pc, #440]	; (130d8 <main+0x2c48>)
   12f20:	0010      	movs	r0, r2
   12f22:	4798      	blx	r3
   12f24:	0003      	movs	r3, r0
   12f26:	b2da      	uxtb	r2, r3
   12f28:	4b6e      	ldr	r3, [pc, #440]	; (130e4 <main+0x2c54>)
   12f2a:	701a      	strb	r2, [r3, #0]
   12f2c:	e03f      	b.n	12fae <main+0x2b1e>
					} else {
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) % 0x0FFFF;
   12f2e:	4b77      	ldr	r3, [pc, #476]	; (1310c <main+0x2c7c>)
   12f30:	681a      	ldr	r2, [r3, #0]
   12f32:	4b78      	ldr	r3, [pc, #480]	; (13114 <main+0x2c84>)
   12f34:	4978      	ldr	r1, [pc, #480]	; (13118 <main+0x2c88>)
   12f36:	1c10      	adds	r0, r2, #0
   12f38:	4798      	blx	r3
   12f3a:	1c03      	adds	r3, r0, #0
   12f3c:	1c1a      	adds	r2, r3, #0
   12f3e:	4b5f      	ldr	r3, [pc, #380]	; (130bc <main+0x2c2c>)
   12f40:	1c10      	adds	r0, r2, #0
   12f42:	4798      	blx	r3
   12f44:	4c61      	ldr	r4, [pc, #388]	; (130cc <main+0x2c3c>)
   12f46:	4a75      	ldr	r2, [pc, #468]	; (1311c <main+0x2c8c>)
   12f48:	4b75      	ldr	r3, [pc, #468]	; (13120 <main+0x2c90>)
   12f4a:	47a0      	blx	r4
   12f4c:	0003      	movs	r3, r0
   12f4e:	000c      	movs	r4, r1
   12f50:	0019      	movs	r1, r3
   12f52:	0022      	movs	r2, r4
   12f54:	4b5e      	ldr	r3, [pc, #376]	; (130d0 <main+0x2c40>)
   12f56:	0008      	movs	r0, r1
   12f58:	0011      	movs	r1, r2
   12f5a:	4798      	blx	r3
   12f5c:	0002      	movs	r2, r0
   12f5e:	4b5d      	ldr	r3, [pc, #372]	; (130d4 <main+0x2c44>)
   12f60:	495d      	ldr	r1, [pc, #372]	; (130d8 <main+0x2c48>)
   12f62:	0010      	movs	r0, r2
   12f64:	4798      	blx	r3
   12f66:	000b      	movs	r3, r1
   12f68:	001a      	movs	r2, r3
   12f6a:	4b5c      	ldr	r3, [pc, #368]	; (130dc <main+0x2c4c>)
   12f6c:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (axKalman+1500)) / 0x0FFFF;
   12f6e:	4b67      	ldr	r3, [pc, #412]	; (1310c <main+0x2c7c>)
   12f70:	681a      	ldr	r2, [r3, #0]
   12f72:	4b68      	ldr	r3, [pc, #416]	; (13114 <main+0x2c84>)
   12f74:	4968      	ldr	r1, [pc, #416]	; (13118 <main+0x2c88>)
   12f76:	1c10      	adds	r0, r2, #0
   12f78:	4798      	blx	r3
   12f7a:	1c03      	adds	r3, r0, #0
   12f7c:	1c1a      	adds	r2, r3, #0
   12f7e:	4b4f      	ldr	r3, [pc, #316]	; (130bc <main+0x2c2c>)
   12f80:	1c10      	adds	r0, r2, #0
   12f82:	4798      	blx	r3
   12f84:	4c51      	ldr	r4, [pc, #324]	; (130cc <main+0x2c3c>)
   12f86:	4a65      	ldr	r2, [pc, #404]	; (1311c <main+0x2c8c>)
   12f88:	4b65      	ldr	r3, [pc, #404]	; (13120 <main+0x2c90>)
   12f8a:	47a0      	blx	r4
   12f8c:	0003      	movs	r3, r0
   12f8e:	000c      	movs	r4, r1
   12f90:	0019      	movs	r1, r3
   12f92:	0022      	movs	r2, r4
   12f94:	4b4e      	ldr	r3, [pc, #312]	; (130d0 <main+0x2c40>)
   12f96:	0008      	movs	r0, r1
   12f98:	0011      	movs	r1, r2
   12f9a:	4798      	blx	r3
   12f9c:	0002      	movs	r2, r0
   12f9e:	4b50      	ldr	r3, [pc, #320]	; (130e0 <main+0x2c50>)
   12fa0:	494d      	ldr	r1, [pc, #308]	; (130d8 <main+0x2c48>)
   12fa2:	0010      	movs	r0, r2
   12fa4:	4798      	blx	r3
   12fa6:	0003      	movs	r3, r0
   12fa8:	b2da      	uxtb	r2, r3
   12faa:	4b4e      	ldr	r3, [pc, #312]	; (130e4 <main+0x2c54>)
   12fac:	701a      	strb	r2, [r3, #0]
					}

					upColor = cycle_index * output_brightness;
   12fae:	4b4b      	ldr	r3, [pc, #300]	; (130dc <main+0x2c4c>)
   12fb0:	681a      	ldr	r2, [r3, #0]
   12fb2:	4b4d      	ldr	r3, [pc, #308]	; (130e8 <main+0x2c58>)
   12fb4:	0010      	movs	r0, r2
   12fb6:	4798      	blx	r3
   12fb8:	4b4c      	ldr	r3, [pc, #304]	; (130ec <main+0x2c5c>)
   12fba:	681a      	ldr	r2, [r3, #0]
   12fbc:	4b4c      	ldr	r3, [pc, #304]	; (130f0 <main+0x2c60>)
   12fbe:	1c11      	adds	r1, r2, #0
   12fc0:	4798      	blx	r3
   12fc2:	1c03      	adds	r3, r0, #0
   12fc4:	1c1a      	adds	r2, r3, #0
   12fc6:	4b4b      	ldr	r3, [pc, #300]	; (130f4 <main+0x2c64>)
   12fc8:	1c10      	adds	r0, r2, #0
   12fca:	4798      	blx	r3
   12fcc:	0003      	movs	r3, r0
   12fce:	b29a      	uxth	r2, r3
   12fd0:	4b49      	ldr	r3, [pc, #292]	; (130f8 <main+0x2c68>)
   12fd2:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   12fd4:	4b41      	ldr	r3, [pc, #260]	; (130dc <main+0x2c4c>)
   12fd6:	681b      	ldr	r3, [r3, #0]
   12fd8:	4a3f      	ldr	r2, [pc, #252]	; (130d8 <main+0x2c48>)
   12fda:	1ad2      	subs	r2, r2, r3
   12fdc:	4b42      	ldr	r3, [pc, #264]	; (130e8 <main+0x2c58>)
   12fde:	0010      	movs	r0, r2
   12fe0:	4798      	blx	r3
   12fe2:	4b42      	ldr	r3, [pc, #264]	; (130ec <main+0x2c5c>)
   12fe4:	681a      	ldr	r2, [r3, #0]
   12fe6:	4b42      	ldr	r3, [pc, #264]	; (130f0 <main+0x2c60>)
   12fe8:	1c11      	adds	r1, r2, #0
   12fea:	4798      	blx	r3
   12fec:	1c03      	adds	r3, r0, #0
   12fee:	1c1a      	adds	r2, r3, #0
   12ff0:	4b40      	ldr	r3, [pc, #256]	; (130f4 <main+0x2c64>)
   12ff2:	1c10      	adds	r0, r2, #0
   12ff4:	4798      	blx	r3
   12ff6:	0003      	movs	r3, r0
   12ff8:	b29a      	uxth	r2, r3
   12ffa:	4b40      	ldr	r3, [pc, #256]	; (130fc <main+0x2c6c>)
   12ffc:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   12ffe:	4b3e      	ldr	r3, [pc, #248]	; (130f8 <main+0x2c68>)
   13000:	8819      	ldrh	r1, [r3, #0]
   13002:	4b3e      	ldr	r3, [pc, #248]	; (130fc <main+0x2c6c>)
   13004:	881a      	ldrh	r2, [r3, #0]
   13006:	4b37      	ldr	r3, [pc, #220]	; (130e4 <main+0x2c54>)
   13008:	781b      	ldrb	r3, [r3, #0]
   1300a:	4d3d      	ldr	r5, [pc, #244]	; (13100 <main+0x2c70>)
   1300c:	0038      	movs	r0, r7
   1300e:	4c3d      	ldr	r4, [pc, #244]	; (13104 <main+0x2c74>)
   13010:	47a0      	blx	r4
   13012:	003b      	movs	r3, r7
   13014:	0028      	movs	r0, r5
   13016:	0019      	movs	r1, r3
   13018:	230c      	movs	r3, #12
   1301a:	001a      	movs	r2, r3
   1301c:	4b3a      	ldr	r3, [pc, #232]	; (13108 <main+0x2c78>)
   1301e:	4798      	blx	r3
					break;
   13020:	e1ee      	b.n	13400 <main+0x2f70>
				}
				case COLOR_Y_ACCEL:
				{
					if(ayKalman < 0){
   13022:	4b40      	ldr	r3, [pc, #256]	; (13124 <main+0x2c94>)
   13024:	681a      	ldr	r2, [r3, #0]
   13026:	4b3a      	ldr	r3, [pc, #232]	; (13110 <main+0x2c80>)
   13028:	2100      	movs	r1, #0
   1302a:	1c10      	adds	r0, r2, #0
   1302c:	4798      	blx	r3
   1302e:	1e03      	subs	r3, r0, #0
   13030:	d07a      	beq.n	13128 <main+0x2c98>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
   13032:	4b3c      	ldr	r3, [pc, #240]	; (13124 <main+0x2c94>)
   13034:	681a      	ldr	r2, [r3, #0]
   13036:	4b37      	ldr	r3, [pc, #220]	; (13114 <main+0x2c84>)
   13038:	4937      	ldr	r1, [pc, #220]	; (13118 <main+0x2c88>)
   1303a:	1c10      	adds	r0, r2, #0
   1303c:	4798      	blx	r3
   1303e:	1c03      	adds	r3, r0, #0
   13040:	1c1a      	adds	r2, r3, #0
   13042:	4b1e      	ldr	r3, [pc, #120]	; (130bc <main+0x2c2c>)
   13044:	1c10      	adds	r0, r2, #0
   13046:	4798      	blx	r3
   13048:	4c20      	ldr	r4, [pc, #128]	; (130cc <main+0x2c3c>)
   1304a:	4a34      	ldr	r2, [pc, #208]	; (1311c <main+0x2c8c>)
   1304c:	4b34      	ldr	r3, [pc, #208]	; (13120 <main+0x2c90>)
   1304e:	47a0      	blx	r4
   13050:	0003      	movs	r3, r0
   13052:	000c      	movs	r4, r1
   13054:	0019      	movs	r1, r3
   13056:	0022      	movs	r2, r4
   13058:	4b1d      	ldr	r3, [pc, #116]	; (130d0 <main+0x2c40>)
   1305a:	0008      	movs	r0, r1
   1305c:	0011      	movs	r1, r2
   1305e:	4798      	blx	r3
   13060:	0002      	movs	r2, r0
   13062:	4b1c      	ldr	r3, [pc, #112]	; (130d4 <main+0x2c44>)
   13064:	491c      	ldr	r1, [pc, #112]	; (130d8 <main+0x2c48>)
   13066:	0010      	movs	r0, r2
   13068:	4798      	blx	r3
   1306a:	000b      	movs	r3, r1
   1306c:	001a      	movs	r2, r3
   1306e:	4b1b      	ldr	r3, [pc, #108]	; (130dc <main+0x2c4c>)
   13070:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
   13072:	4b2c      	ldr	r3, [pc, #176]	; (13124 <main+0x2c94>)
   13074:	681a      	ldr	r2, [r3, #0]
   13076:	4b27      	ldr	r3, [pc, #156]	; (13114 <main+0x2c84>)
   13078:	4927      	ldr	r1, [pc, #156]	; (13118 <main+0x2c88>)
   1307a:	1c10      	adds	r0, r2, #0
   1307c:	4798      	blx	r3
   1307e:	1c03      	adds	r3, r0, #0
   13080:	1c1a      	adds	r2, r3, #0
   13082:	4b0e      	ldr	r3, [pc, #56]	; (130bc <main+0x2c2c>)
   13084:	1c10      	adds	r0, r2, #0
   13086:	4798      	blx	r3
   13088:	4c10      	ldr	r4, [pc, #64]	; (130cc <main+0x2c3c>)
   1308a:	4a24      	ldr	r2, [pc, #144]	; (1311c <main+0x2c8c>)
   1308c:	4b24      	ldr	r3, [pc, #144]	; (13120 <main+0x2c90>)
   1308e:	47a0      	blx	r4
   13090:	0003      	movs	r3, r0
   13092:	000c      	movs	r4, r1
   13094:	0019      	movs	r1, r3
   13096:	0022      	movs	r2, r4
   13098:	4b0d      	ldr	r3, [pc, #52]	; (130d0 <main+0x2c40>)
   1309a:	0008      	movs	r0, r1
   1309c:	0011      	movs	r1, r2
   1309e:	4798      	blx	r3
   130a0:	0002      	movs	r2, r0
   130a2:	4b0f      	ldr	r3, [pc, #60]	; (130e0 <main+0x2c50>)
   130a4:	490c      	ldr	r1, [pc, #48]	; (130d8 <main+0x2c48>)
   130a6:	0010      	movs	r0, r2
   130a8:	4798      	blx	r3
   130aa:	0003      	movs	r3, r0
   130ac:	b2da      	uxtb	r2, r3
   130ae:	4b0d      	ldr	r3, [pc, #52]	; (130e4 <main+0x2c54>)
   130b0:	701a      	strb	r2, [r3, #0]
   130b2:	e079      	b.n	131a8 <main+0x2d18>
   130b4:	20000db4 	.word	0x20000db4
   130b8:	00014e49 	.word	0x00014e49
   130bc:	00016a85 	.word	0x00016a85
   130c0:	00015595 	.word	0x00015595
   130c4:	4107ffe8 	.word	0x4107ffe8
   130c8:	20000940 	.word	0x20000940
   130cc:	00015dfd 	.word	0x00015dfd
   130d0:	00016929 	.word	0x00016929
   130d4:	00013fd1 	.word	0x00013fd1
   130d8:	0000ffff 	.word	0x0000ffff
   130dc:	20000328 	.word	0x20000328
   130e0:	00013e05 	.word	0x00013e05
   130e4:	20000326 	.word	0x20000326
   130e8:	00014ee9 	.word	0x00014ee9
   130ec:	200003e8 	.word	0x200003e8
   130f0:	00014891 	.word	0x00014891
   130f4:	00014121 	.word	0x00014121
   130f8:	2000032c 	.word	0x2000032c
   130fc:	2000032e 	.word	0x2000032e
   13100:	20000314 	.word	0x20000314
   13104:	0000b24d 	.word	0x0000b24d
   13108:	00016ccd 	.word	0x00016ccd
   1310c:	200003c0 	.word	0x200003c0
   13110:	0001407d 	.word	0x0001407d
   13114:	0001418d 	.word	0x0001418d
   13118:	44bb8000 	.word	0x44bb8000
   1311c:	70a3d70a 	.word	0x70a3d70a
   13120:	4050623d 	.word	0x4050623d
   13124:	200003c4 	.word	0x200003c4
					} else {
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) % 0x0FFFF;
   13128:	4bcf      	ldr	r3, [pc, #828]	; (13468 <main+0x2fd8>)
   1312a:	681a      	ldr	r2, [r3, #0]
   1312c:	4bcf      	ldr	r3, [pc, #828]	; (1346c <main+0x2fdc>)
   1312e:	49d0      	ldr	r1, [pc, #832]	; (13470 <main+0x2fe0>)
   13130:	1c10      	adds	r0, r2, #0
   13132:	4798      	blx	r3
   13134:	1c03      	adds	r3, r0, #0
   13136:	1c1a      	adds	r2, r3, #0
   13138:	4bce      	ldr	r3, [pc, #824]	; (13474 <main+0x2fe4>)
   1313a:	1c10      	adds	r0, r2, #0
   1313c:	4798      	blx	r3
   1313e:	4cce      	ldr	r4, [pc, #824]	; (13478 <main+0x2fe8>)
   13140:	4ace      	ldr	r2, [pc, #824]	; (1347c <main+0x2fec>)
   13142:	4bcf      	ldr	r3, [pc, #828]	; (13480 <main+0x2ff0>)
   13144:	47a0      	blx	r4
   13146:	0003      	movs	r3, r0
   13148:	000c      	movs	r4, r1
   1314a:	0019      	movs	r1, r3
   1314c:	0022      	movs	r2, r4
   1314e:	4bcd      	ldr	r3, [pc, #820]	; (13484 <main+0x2ff4>)
   13150:	0008      	movs	r0, r1
   13152:	0011      	movs	r1, r2
   13154:	4798      	blx	r3
   13156:	0002      	movs	r2, r0
   13158:	4bcb      	ldr	r3, [pc, #812]	; (13488 <main+0x2ff8>)
   1315a:	49cc      	ldr	r1, [pc, #816]	; (1348c <main+0x2ffc>)
   1315c:	0010      	movs	r0, r2
   1315e:	4798      	blx	r3
   13160:	000b      	movs	r3, r1
   13162:	001a      	movs	r2, r3
   13164:	4bca      	ldr	r3, [pc, #808]	; (13490 <main+0x3000>)
   13166:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / 3000) * (ayKalman+1500)) / 0x0FFFF;
   13168:	4bbf      	ldr	r3, [pc, #764]	; (13468 <main+0x2fd8>)
   1316a:	681a      	ldr	r2, [r3, #0]
   1316c:	4bbf      	ldr	r3, [pc, #764]	; (1346c <main+0x2fdc>)
   1316e:	49c0      	ldr	r1, [pc, #768]	; (13470 <main+0x2fe0>)
   13170:	1c10      	adds	r0, r2, #0
   13172:	4798      	blx	r3
   13174:	1c03      	adds	r3, r0, #0
   13176:	1c1a      	adds	r2, r3, #0
   13178:	4bbe      	ldr	r3, [pc, #760]	; (13474 <main+0x2fe4>)
   1317a:	1c10      	adds	r0, r2, #0
   1317c:	4798      	blx	r3
   1317e:	4cbe      	ldr	r4, [pc, #760]	; (13478 <main+0x2fe8>)
   13180:	4abe      	ldr	r2, [pc, #760]	; (1347c <main+0x2fec>)
   13182:	4bbf      	ldr	r3, [pc, #764]	; (13480 <main+0x2ff0>)
   13184:	47a0      	blx	r4
   13186:	0003      	movs	r3, r0
   13188:	000c      	movs	r4, r1
   1318a:	0019      	movs	r1, r3
   1318c:	0022      	movs	r2, r4
   1318e:	4bbd      	ldr	r3, [pc, #756]	; (13484 <main+0x2ff4>)
   13190:	0008      	movs	r0, r1
   13192:	0011      	movs	r1, r2
   13194:	4798      	blx	r3
   13196:	0002      	movs	r2, r0
   13198:	4bbe      	ldr	r3, [pc, #760]	; (13494 <main+0x3004>)
   1319a:	49bc      	ldr	r1, [pc, #752]	; (1348c <main+0x2ffc>)
   1319c:	0010      	movs	r0, r2
   1319e:	4798      	blx	r3
   131a0:	0003      	movs	r3, r0
   131a2:	b2da      	uxtb	r2, r3
   131a4:	4bbc      	ldr	r3, [pc, #752]	; (13498 <main+0x3008>)
   131a6:	701a      	strb	r2, [r3, #0]
					}

					upColor = cycle_index * output_brightness;
   131a8:	4bb9      	ldr	r3, [pc, #740]	; (13490 <main+0x3000>)
   131aa:	681a      	ldr	r2, [r3, #0]
   131ac:	4bbb      	ldr	r3, [pc, #748]	; (1349c <main+0x300c>)
   131ae:	0010      	movs	r0, r2
   131b0:	4798      	blx	r3
   131b2:	4bbb      	ldr	r3, [pc, #748]	; (134a0 <main+0x3010>)
   131b4:	681a      	ldr	r2, [r3, #0]
   131b6:	4bbb      	ldr	r3, [pc, #748]	; (134a4 <main+0x3014>)
   131b8:	1c11      	adds	r1, r2, #0
   131ba:	4798      	blx	r3
   131bc:	1c03      	adds	r3, r0, #0
   131be:	1c1a      	adds	r2, r3, #0
   131c0:	4bb9      	ldr	r3, [pc, #740]	; (134a8 <main+0x3018>)
   131c2:	1c10      	adds	r0, r2, #0
   131c4:	4798      	blx	r3
   131c6:	0003      	movs	r3, r0
   131c8:	b29a      	uxth	r2, r3
   131ca:	4bb8      	ldr	r3, [pc, #736]	; (134ac <main+0x301c>)
   131cc:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   131ce:	4bb0      	ldr	r3, [pc, #704]	; (13490 <main+0x3000>)
   131d0:	681b      	ldr	r3, [r3, #0]
   131d2:	4aae      	ldr	r2, [pc, #696]	; (1348c <main+0x2ffc>)
   131d4:	1ad2      	subs	r2, r2, r3
   131d6:	4bb1      	ldr	r3, [pc, #708]	; (1349c <main+0x300c>)
   131d8:	0010      	movs	r0, r2
   131da:	4798      	blx	r3
   131dc:	4bb0      	ldr	r3, [pc, #704]	; (134a0 <main+0x3010>)
   131de:	681a      	ldr	r2, [r3, #0]
   131e0:	4bb0      	ldr	r3, [pc, #704]	; (134a4 <main+0x3014>)
   131e2:	1c11      	adds	r1, r2, #0
   131e4:	4798      	blx	r3
   131e6:	1c03      	adds	r3, r0, #0
   131e8:	1c1a      	adds	r2, r3, #0
   131ea:	4baf      	ldr	r3, [pc, #700]	; (134a8 <main+0x3018>)
   131ec:	1c10      	adds	r0, r2, #0
   131ee:	4798      	blx	r3
   131f0:	0003      	movs	r3, r0
   131f2:	b29a      	uxth	r2, r3
   131f4:	4bae      	ldr	r3, [pc, #696]	; (134b0 <main+0x3020>)
   131f6:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   131f8:	4bac      	ldr	r3, [pc, #688]	; (134ac <main+0x301c>)
   131fa:	8819      	ldrh	r1, [r3, #0]
   131fc:	4bac      	ldr	r3, [pc, #688]	; (134b0 <main+0x3020>)
   131fe:	881a      	ldrh	r2, [r3, #0]
   13200:	4ba5      	ldr	r3, [pc, #660]	; (13498 <main+0x3008>)
   13202:	781b      	ldrb	r3, [r3, #0]
   13204:	4dab      	ldr	r5, [pc, #684]	; (134b4 <main+0x3024>)
   13206:	0038      	movs	r0, r7
   13208:	4cab      	ldr	r4, [pc, #684]	; (134b8 <main+0x3028>)
   1320a:	47a0      	blx	r4
   1320c:	003b      	movs	r3, r7
   1320e:	0028      	movs	r0, r5
   13210:	0019      	movs	r1, r3
   13212:	230c      	movs	r3, #12
   13214:	001a      	movs	r2, r3
   13216:	4ba9      	ldr	r3, [pc, #676]	; (134bc <main+0x302c>)
   13218:	4798      	blx	r3
					break;
   1321a:	e0f1      	b.n	13400 <main+0x2f70>
				}
				case COLOR_Z_ACCEL:
				{
					if(azKalman < 0){
   1321c:	4ba8      	ldr	r3, [pc, #672]	; (134c0 <main+0x3030>)
   1321e:	681a      	ldr	r2, [r3, #0]
   13220:	4ba8      	ldr	r3, [pc, #672]	; (134c4 <main+0x3034>)
   13222:	2100      	movs	r1, #0
   13224:	1c10      	adds	r0, r2, #0
   13226:	4798      	blx	r3
   13228:	1e03      	subs	r3, r0, #0
   1322a:	d056      	beq.n	132da <main+0x2e4a>
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) % 0x0FFFF;
   1322c:	4ba6      	ldr	r3, [pc, #664]	; (134c8 <main+0x3038>)
   1322e:	681a      	ldr	r2, [r3, #0]
   13230:	4b90      	ldr	r3, [pc, #576]	; (13474 <main+0x2fe4>)
   13232:	1c10      	adds	r0, r2, #0
   13234:	4798      	blx	r3
   13236:	0002      	movs	r2, r0
   13238:	000b      	movs	r3, r1
   1323a:	4ca4      	ldr	r4, [pc, #656]	; (134cc <main+0x303c>)
   1323c:	2000      	movs	r0, #0
   1323e:	49a4      	ldr	r1, [pc, #656]	; (134d0 <main+0x3040>)
   13240:	47a0      	blx	r4
   13242:	0003      	movs	r3, r0
   13244:	000c      	movs	r4, r1
   13246:	001d      	movs	r5, r3
   13248:	0026      	movs	r6, r4
   1324a:	4b9d      	ldr	r3, [pc, #628]	; (134c0 <main+0x3030>)
   1324c:	681a      	ldr	r2, [r3, #0]
   1324e:	4b89      	ldr	r3, [pc, #548]	; (13474 <main+0x2fe4>)
   13250:	1c10      	adds	r0, r2, #0
   13252:	4798      	blx	r3
   13254:	0002      	movs	r2, r0
   13256:	000b      	movs	r3, r1
   13258:	4c87      	ldr	r4, [pc, #540]	; (13478 <main+0x2fe8>)
   1325a:	0028      	movs	r0, r5
   1325c:	0031      	movs	r1, r6
   1325e:	47a0      	blx	r4
   13260:	0003      	movs	r3, r0
   13262:	000c      	movs	r4, r1
   13264:	0019      	movs	r1, r3
   13266:	0022      	movs	r2, r4
   13268:	4b86      	ldr	r3, [pc, #536]	; (13484 <main+0x2ff4>)
   1326a:	0008      	movs	r0, r1
   1326c:	0011      	movs	r1, r2
   1326e:	4798      	blx	r3
   13270:	0002      	movs	r2, r0
   13272:	4b85      	ldr	r3, [pc, #532]	; (13488 <main+0x2ff8>)
   13274:	4985      	ldr	r1, [pc, #532]	; (1348c <main+0x2ffc>)
   13276:	0010      	movs	r0, r2
   13278:	4798      	blx	r3
   1327a:	000b      	movs	r3, r1
   1327c:	001a      	movs	r2, r3
   1327e:	4b84      	ldr	r3, [pc, #528]	; (13490 <main+0x3000>)
   13280:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_min) * azKalman) / 0x0FFFF;
   13282:	4b91      	ldr	r3, [pc, #580]	; (134c8 <main+0x3038>)
   13284:	681a      	ldr	r2, [r3, #0]
   13286:	4b7b      	ldr	r3, [pc, #492]	; (13474 <main+0x2fe4>)
   13288:	1c10      	adds	r0, r2, #0
   1328a:	4798      	blx	r3
   1328c:	0002      	movs	r2, r0
   1328e:	000b      	movs	r3, r1
   13290:	4c8e      	ldr	r4, [pc, #568]	; (134cc <main+0x303c>)
   13292:	2000      	movs	r0, #0
   13294:	498e      	ldr	r1, [pc, #568]	; (134d0 <main+0x3040>)
   13296:	47a0      	blx	r4
   13298:	0003      	movs	r3, r0
   1329a:	000c      	movs	r4, r1
   1329c:	001d      	movs	r5, r3
   1329e:	0026      	movs	r6, r4
   132a0:	4b87      	ldr	r3, [pc, #540]	; (134c0 <main+0x3030>)
   132a2:	681a      	ldr	r2, [r3, #0]
   132a4:	4b73      	ldr	r3, [pc, #460]	; (13474 <main+0x2fe4>)
   132a6:	1c10      	adds	r0, r2, #0
   132a8:	4798      	blx	r3
   132aa:	0002      	movs	r2, r0
   132ac:	000b      	movs	r3, r1
   132ae:	4c72      	ldr	r4, [pc, #456]	; (13478 <main+0x2fe8>)
   132b0:	0028      	movs	r0, r5
   132b2:	0031      	movs	r1, r6
   132b4:	47a0      	blx	r4
   132b6:	0003      	movs	r3, r0
   132b8:	000c      	movs	r4, r1
   132ba:	0019      	movs	r1, r3
   132bc:	0022      	movs	r2, r4
   132be:	4b71      	ldr	r3, [pc, #452]	; (13484 <main+0x2ff4>)
   132c0:	0008      	movs	r0, r1
   132c2:	0011      	movs	r1, r2
   132c4:	4798      	blx	r3
   132c6:	0002      	movs	r2, r0
   132c8:	4b72      	ldr	r3, [pc, #456]	; (13494 <main+0x3004>)
   132ca:	4970      	ldr	r1, [pc, #448]	; (1348c <main+0x2ffc>)
   132cc:	0010      	movs	r0, r2
   132ce:	4798      	blx	r3
   132d0:	0003      	movs	r3, r0
   132d2:	b2da      	uxtb	r2, r3
   132d4:	4b70      	ldr	r3, [pc, #448]	; (13498 <main+0x3008>)
   132d6:	701a      	strb	r2, [r3, #0]
   132d8:	e055      	b.n	13386 <main+0x2ef6>
					} else {
						cycle_index = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) % 0x0FFFF;
   132da:	4b7e      	ldr	r3, [pc, #504]	; (134d4 <main+0x3044>)
   132dc:	681a      	ldr	r2, [r3, #0]
   132de:	4b65      	ldr	r3, [pc, #404]	; (13474 <main+0x2fe4>)
   132e0:	1c10      	adds	r0, r2, #0
   132e2:	4798      	blx	r3
   132e4:	0002      	movs	r2, r0
   132e6:	000b      	movs	r3, r1
   132e8:	4c78      	ldr	r4, [pc, #480]	; (134cc <main+0x303c>)
   132ea:	2000      	movs	r0, #0
   132ec:	4978      	ldr	r1, [pc, #480]	; (134d0 <main+0x3040>)
   132ee:	47a0      	blx	r4
   132f0:	0003      	movs	r3, r0
   132f2:	000c      	movs	r4, r1
   132f4:	001d      	movs	r5, r3
   132f6:	0026      	movs	r6, r4
   132f8:	4b71      	ldr	r3, [pc, #452]	; (134c0 <main+0x3030>)
   132fa:	681a      	ldr	r2, [r3, #0]
   132fc:	4b5d      	ldr	r3, [pc, #372]	; (13474 <main+0x2fe4>)
   132fe:	1c10      	adds	r0, r2, #0
   13300:	4798      	blx	r3
   13302:	0002      	movs	r2, r0
   13304:	000b      	movs	r3, r1
   13306:	4c5c      	ldr	r4, [pc, #368]	; (13478 <main+0x2fe8>)
   13308:	0028      	movs	r0, r5
   1330a:	0031      	movs	r1, r6
   1330c:	47a0      	blx	r4
   1330e:	0003      	movs	r3, r0
   13310:	000c      	movs	r4, r1
   13312:	0019      	movs	r1, r3
   13314:	0022      	movs	r2, r4
   13316:	4b5b      	ldr	r3, [pc, #364]	; (13484 <main+0x2ff4>)
   13318:	0008      	movs	r0, r1
   1331a:	0011      	movs	r1, r2
   1331c:	4798      	blx	r3
   1331e:	0002      	movs	r2, r0
   13320:	4b59      	ldr	r3, [pc, #356]	; (13488 <main+0x2ff8>)
   13322:	495a      	ldr	r1, [pc, #360]	; (1348c <main+0x2ffc>)
   13324:	0010      	movs	r0, r2
   13326:	4798      	blx	r3
   13328:	000b      	movs	r3, r1
   1332a:	001a      	movs	r2, r3
   1332c:	4b58      	ldr	r3, [pc, #352]	; (13490 <main+0x3000>)
   1332e:	601a      	str	r2, [r3, #0]
						cycle = (int)(((((float)0x0FFFF) * 3.0) / kalmanAZ_max) * azKalman) / 0x0FFFF;
   13330:	4b68      	ldr	r3, [pc, #416]	; (134d4 <main+0x3044>)
   13332:	681a      	ldr	r2, [r3, #0]
   13334:	4b4f      	ldr	r3, [pc, #316]	; (13474 <main+0x2fe4>)
   13336:	1c10      	adds	r0, r2, #0
   13338:	4798      	blx	r3
   1333a:	0002      	movs	r2, r0
   1333c:	000b      	movs	r3, r1
   1333e:	4c63      	ldr	r4, [pc, #396]	; (134cc <main+0x303c>)
   13340:	2000      	movs	r0, #0
   13342:	4963      	ldr	r1, [pc, #396]	; (134d0 <main+0x3040>)
   13344:	47a0      	blx	r4
   13346:	0003      	movs	r3, r0
   13348:	000c      	movs	r4, r1
   1334a:	001d      	movs	r5, r3
   1334c:	0026      	movs	r6, r4
   1334e:	4b5c      	ldr	r3, [pc, #368]	; (134c0 <main+0x3030>)
   13350:	681a      	ldr	r2, [r3, #0]
   13352:	4b48      	ldr	r3, [pc, #288]	; (13474 <main+0x2fe4>)
   13354:	1c10      	adds	r0, r2, #0
   13356:	4798      	blx	r3
   13358:	0002      	movs	r2, r0
   1335a:	000b      	movs	r3, r1
   1335c:	4c46      	ldr	r4, [pc, #280]	; (13478 <main+0x2fe8>)
   1335e:	0028      	movs	r0, r5
   13360:	0031      	movs	r1, r6
   13362:	47a0      	blx	r4
   13364:	0003      	movs	r3, r0
   13366:	000c      	movs	r4, r1
   13368:	0019      	movs	r1, r3
   1336a:	0022      	movs	r2, r4
   1336c:	4b45      	ldr	r3, [pc, #276]	; (13484 <main+0x2ff4>)
   1336e:	0008      	movs	r0, r1
   13370:	0011      	movs	r1, r2
   13372:	4798      	blx	r3
   13374:	0002      	movs	r2, r0
   13376:	4b47      	ldr	r3, [pc, #284]	; (13494 <main+0x3004>)
   13378:	4944      	ldr	r1, [pc, #272]	; (1348c <main+0x2ffc>)
   1337a:	0010      	movs	r0, r2
   1337c:	4798      	blx	r3
   1337e:	0003      	movs	r3, r0
   13380:	b2da      	uxtb	r2, r3
   13382:	4b45      	ldr	r3, [pc, #276]	; (13498 <main+0x3008>)
   13384:	701a      	strb	r2, [r3, #0]
					}

					upColor = cycle_index * output_brightness;
   13386:	4b42      	ldr	r3, [pc, #264]	; (13490 <main+0x3000>)
   13388:	681a      	ldr	r2, [r3, #0]
   1338a:	4b44      	ldr	r3, [pc, #272]	; (1349c <main+0x300c>)
   1338c:	0010      	movs	r0, r2
   1338e:	4798      	blx	r3
   13390:	4b43      	ldr	r3, [pc, #268]	; (134a0 <main+0x3010>)
   13392:	681a      	ldr	r2, [r3, #0]
   13394:	4b43      	ldr	r3, [pc, #268]	; (134a4 <main+0x3014>)
   13396:	1c11      	adds	r1, r2, #0
   13398:	4798      	blx	r3
   1339a:	1c03      	adds	r3, r0, #0
   1339c:	1c1a      	adds	r2, r3, #0
   1339e:	4b42      	ldr	r3, [pc, #264]	; (134a8 <main+0x3018>)
   133a0:	1c10      	adds	r0, r2, #0
   133a2:	4798      	blx	r3
   133a4:	0003      	movs	r3, r0
   133a6:	b29a      	uxth	r2, r3
   133a8:	4b40      	ldr	r3, [pc, #256]	; (134ac <main+0x301c>)
   133aa:	801a      	strh	r2, [r3, #0]
					downColor = (0xFFFF-cycle_index) * output_brightness;
   133ac:	4b38      	ldr	r3, [pc, #224]	; (13490 <main+0x3000>)
   133ae:	681b      	ldr	r3, [r3, #0]
   133b0:	4a36      	ldr	r2, [pc, #216]	; (1348c <main+0x2ffc>)
   133b2:	1ad2      	subs	r2, r2, r3
   133b4:	4b39      	ldr	r3, [pc, #228]	; (1349c <main+0x300c>)
   133b6:	0010      	movs	r0, r2
   133b8:	4798      	blx	r3
   133ba:	4b39      	ldr	r3, [pc, #228]	; (134a0 <main+0x3010>)
   133bc:	681a      	ldr	r2, [r3, #0]
   133be:	4b39      	ldr	r3, [pc, #228]	; (134a4 <main+0x3014>)
   133c0:	1c11      	adds	r1, r2, #0
   133c2:	4798      	blx	r3
   133c4:	1c03      	adds	r3, r0, #0
   133c6:	1c1a      	adds	r2, r3, #0
   133c8:	4b37      	ldr	r3, [pc, #220]	; (134a8 <main+0x3018>)
   133ca:	1c10      	adds	r0, r2, #0
   133cc:	4798      	blx	r3
   133ce:	0003      	movs	r3, r0
   133d0:	b29a      	uxth	r2, r3
   133d2:	4b37      	ldr	r3, [pc, #220]	; (134b0 <main+0x3020>)
   133d4:	801a      	strh	r2, [r3, #0]

					RGB_Ouptut = setCycleColor(upColor, downColor, cycle);
   133d6:	4b35      	ldr	r3, [pc, #212]	; (134ac <main+0x301c>)
   133d8:	8819      	ldrh	r1, [r3, #0]
   133da:	4b35      	ldr	r3, [pc, #212]	; (134b0 <main+0x3020>)
   133dc:	881a      	ldrh	r2, [r3, #0]
   133de:	4b2e      	ldr	r3, [pc, #184]	; (13498 <main+0x3008>)
   133e0:	781b      	ldrb	r3, [r3, #0]
   133e2:	4d34      	ldr	r5, [pc, #208]	; (134b4 <main+0x3024>)
   133e4:	0038      	movs	r0, r7
   133e6:	4c34      	ldr	r4, [pc, #208]	; (134b8 <main+0x3028>)
   133e8:	47a0      	blx	r4
   133ea:	003b      	movs	r3, r7
   133ec:	0028      	movs	r0, r5
   133ee:	0019      	movs	r1, r3
   133f0:	230c      	movs	r3, #12
   133f2:	001a      	movs	r2, r3
   133f4:	4b31      	ldr	r3, [pc, #196]	; (134bc <main+0x302c>)
   133f6:	4798      	blx	r3
					break;
   133f8:	e002      	b.n	13400 <main+0x2f70>
					break;
   133fa:	46c0      	nop			; (mov r8, r8)
   133fc:	e000      	b.n	13400 <main+0x2f70>
					break;
   133fe:	46c0      	nop			; (mov r8, r8)
				}
			}
			if(SUPRESS_LEFT_RGB){
   13400:	4b35      	ldr	r3, [pc, #212]	; (134d8 <main+0x3048>)
   13402:	781b      	ldrb	r3, [r3, #0]
   13404:	2b00      	cmp	r3, #0
   13406:	d00b      	beq.n	13420 <main+0x2f90>
				RGB_Ouptut.LR = 0;
   13408:	4b2a      	ldr	r3, [pc, #168]	; (134b4 <main+0x3024>)
   1340a:	2200      	movs	r2, #0
   1340c:	801a      	strh	r2, [r3, #0]
				RGB_Ouptut.LG = 0;
   1340e:	4b29      	ldr	r3, [pc, #164]	; (134b4 <main+0x3024>)
   13410:	2200      	movs	r2, #0
   13412:	805a      	strh	r2, [r3, #2]
				RGB_Ouptut.LB = 0;
   13414:	4b27      	ldr	r3, [pc, #156]	; (134b4 <main+0x3024>)
   13416:	2200      	movs	r2, #0
   13418:	809a      	strh	r2, [r3, #4]
				SUPRESS_LEFT_RGB = false;
   1341a:	4b2f      	ldr	r3, [pc, #188]	; (134d8 <main+0x3048>)
   1341c:	2200      	movs	r2, #0
   1341e:	701a      	strb	r2, [r3, #0]
			}
			if(SUPRESS_RIGHT_RGB){
   13420:	4b2e      	ldr	r3, [pc, #184]	; (134dc <main+0x304c>)
   13422:	781b      	ldrb	r3, [r3, #0]
   13424:	2b00      	cmp	r3, #0
   13426:	d00b      	beq.n	13440 <main+0x2fb0>
				RGB_Ouptut.RR = 0;
   13428:	4b22      	ldr	r3, [pc, #136]	; (134b4 <main+0x3024>)
   1342a:	2200      	movs	r2, #0
   1342c:	80da      	strh	r2, [r3, #6]
				RGB_Ouptut.RG = 0;
   1342e:	4b21      	ldr	r3, [pc, #132]	; (134b4 <main+0x3024>)
   13430:	2200      	movs	r2, #0
   13432:	811a      	strh	r2, [r3, #8]
				RGB_Ouptut.RB = 0;
   13434:	4b1f      	ldr	r3, [pc, #124]	; (134b4 <main+0x3024>)
   13436:	2200      	movs	r2, #0
   13438:	815a      	strh	r2, [r3, #10]
				SUPRESS_RIGHT_RGB = false;
   1343a:	4b28      	ldr	r3, [pc, #160]	; (134dc <main+0x304c>)
   1343c:	2200      	movs	r2, #0
   1343e:	701a      	strb	r2, [r3, #0]
			}
			
			setLeftRGB(RGB_Ouptut.LR,RGB_Ouptut.LG,RGB_Ouptut.LB);
   13440:	4b1c      	ldr	r3, [pc, #112]	; (134b4 <main+0x3024>)
   13442:	8818      	ldrh	r0, [r3, #0]
   13444:	4b1b      	ldr	r3, [pc, #108]	; (134b4 <main+0x3024>)
   13446:	8859      	ldrh	r1, [r3, #2]
   13448:	4b1a      	ldr	r3, [pc, #104]	; (134b4 <main+0x3024>)
   1344a:	889b      	ldrh	r3, [r3, #4]
   1344c:	001a      	movs	r2, r3
   1344e:	4b24      	ldr	r3, [pc, #144]	; (134e0 <main+0x3050>)
   13450:	4798      	blx	r3
			setRightRGB(RGB_Ouptut.RR,RGB_Ouptut.RG,RGB_Ouptut.RB);
   13452:	4b18      	ldr	r3, [pc, #96]	; (134b4 <main+0x3024>)
   13454:	88d8      	ldrh	r0, [r3, #6]
   13456:	4b17      	ldr	r3, [pc, #92]	; (134b4 <main+0x3024>)
   13458:	8919      	ldrh	r1, [r3, #8]
   1345a:	4b16      	ldr	r3, [pc, #88]	; (134b4 <main+0x3024>)
   1345c:	895b      	ldrh	r3, [r3, #10]
   1345e:	001a      	movs	r2, r3
   13460:	4b20      	ldr	r3, [pc, #128]	; (134e4 <main+0x3054>)
   13462:	4798      	blx	r3
			if(SIDELIGHTS && lightControlSide()){
   13464:	e051      	b.n	1350a <main+0x307a>
   13466:	46c0      	nop			; (mov r8, r8)
   13468:	200003c4 	.word	0x200003c4
   1346c:	0001418d 	.word	0x0001418d
   13470:	44bb8000 	.word	0x44bb8000
   13474:	00016a85 	.word	0x00016a85
   13478:	00015dfd 	.word	0x00015dfd
   1347c:	70a3d70a 	.word	0x70a3d70a
   13480:	4050623d 	.word	0x4050623d
   13484:	00016929 	.word	0x00016929
   13488:	00013fd1 	.word	0x00013fd1
   1348c:	0000ffff 	.word	0x0000ffff
   13490:	20000328 	.word	0x20000328
   13494:	00013e05 	.word	0x00013e05
   13498:	20000326 	.word	0x20000326
   1349c:	00014ee9 	.word	0x00014ee9
   134a0:	200003e8 	.word	0x200003e8
   134a4:	00014891 	.word	0x00014891
   134a8:	00014121 	.word	0x00014121
   134ac:	2000032c 	.word	0x2000032c
   134b0:	2000032e 	.word	0x2000032e
   134b4:	20000314 	.word	0x20000314
   134b8:	0000b24d 	.word	0x0000b24d
   134bc:	00016ccd 	.word	0x00016ccd
   134c0:	200003c8 	.word	0x200003c8
   134c4:	0001407d 	.word	0x0001407d
   134c8:	200000c4 	.word	0x200000c4
   134cc:	00015595 	.word	0x00015595
   134d0:	4107ffe8 	.word	0x4107ffe8
   134d4:	200000c8 	.word	0x200000c8
   134d8:	20000320 	.word	0x20000320
   134dc:	20000321 	.word	0x20000321
   134e0:	0000b0c9 	.word	0x0000b0c9
   134e4:	0000b145 	.word	0x0000b145
			}
			else {
				if(!TurnSignalOn) {
   134e8:	4b3d      	ldr	r3, [pc, #244]	; (135e0 <main+0x3150>)
   134ea:	781b      	ldrb	r3, [r3, #0]
   134ec:	2201      	movs	r2, #1
   134ee:	4053      	eors	r3, r2
   134f0:	b2db      	uxtb	r3, r3
   134f2:	2b00      	cmp	r3, #0
   134f4:	d009      	beq.n	1350a <main+0x307a>
					setLeftRGB(0, 0, 0);
   134f6:	2200      	movs	r2, #0
   134f8:	2100      	movs	r1, #0
   134fa:	2000      	movs	r0, #0
   134fc:	4b39      	ldr	r3, [pc, #228]	; (135e4 <main+0x3154>)
   134fe:	4798      	blx	r3
					setRightRGB(0, 0, 0);
   13500:	2200      	movs	r2, #0
   13502:	2100      	movs	r1, #0
   13504:	2000      	movs	r0, #0
   13506:	4b38      	ldr	r3, [pc, #224]	; (135e8 <main+0x3158>)
   13508:	4798      	blx	r3
				}
			}


			/////////////// Control the head and tail lights //////////////////
			if(HEADLIGHTS && lightControlHead()){
   1350a:	4b38      	ldr	r3, [pc, #224]	; (135ec <main+0x315c>)
   1350c:	781b      	ldrb	r3, [r3, #0]
   1350e:	2b00      	cmp	r3, #0
   13510:	d04b      	beq.n	135aa <main+0x311a>
   13512:	4b37      	ldr	r3, [pc, #220]	; (135f0 <main+0x3160>)
   13514:	4798      	blx	r3
   13516:	1e03      	subs	r3, r0, #0
   13518:	d047      	beq.n	135aa <main+0x311a>
				setWhite(0xFFFF);
   1351a:	4b36      	ldr	r3, [pc, #216]	; (135f4 <main+0x3164>)
   1351c:	0018      	movs	r0, r3
   1351e:	4b36      	ldr	r3, [pc, #216]	; (135f8 <main+0x3168>)
   13520:	4798      	blx	r3

				float temp_y = remote_y;
   13522:	4b36      	ldr	r3, [pc, #216]	; (135fc <main+0x316c>)
   13524:	781a      	ldrb	r2, [r3, #0]
   13526:	4b36      	ldr	r3, [pc, #216]	; (13600 <main+0x3170>)
   13528:	0010      	movs	r0, r2
   1352a:	4798      	blx	r3
   1352c:	1c03      	adds	r3, r0, #0
   1352e:	61bb      	str	r3, [r7, #24]

				if(temp_y < 120){
   13530:	4b34      	ldr	r3, [pc, #208]	; (13604 <main+0x3174>)
   13532:	4935      	ldr	r1, [pc, #212]	; (13608 <main+0x3178>)
   13534:	69b8      	ldr	r0, [r7, #24]
   13536:	4798      	blx	r3
   13538:	1e03      	subs	r3, r0, #0
   1353a:	d030      	beq.n	1359e <main+0x310e>
					float brake_temp = (((0xFFFF-brake_offset)/120)*(120-temp_y))+brake_offset;
   1353c:	4b33      	ldr	r3, [pc, #204]	; (1360c <main+0x317c>)
   1353e:	881b      	ldrh	r3, [r3, #0]
   13540:	001a      	movs	r2, r3
   13542:	4b2c      	ldr	r3, [pc, #176]	; (135f4 <main+0x3164>)
   13544:	1a9a      	subs	r2, r3, r2
   13546:	4b32      	ldr	r3, [pc, #200]	; (13610 <main+0x3180>)
   13548:	2178      	movs	r1, #120	; 0x78
   1354a:	0010      	movs	r0, r2
   1354c:	4798      	blx	r3
   1354e:	0003      	movs	r3, r0
   13550:	001a      	movs	r2, r3
   13552:	4b30      	ldr	r3, [pc, #192]	; (13614 <main+0x3184>)
   13554:	0010      	movs	r0, r2
   13556:	4798      	blx	r3
   13558:	1c04      	adds	r4, r0, #0
   1355a:	4b2f      	ldr	r3, [pc, #188]	; (13618 <main+0x3188>)
   1355c:	69b9      	ldr	r1, [r7, #24]
   1355e:	482a      	ldr	r0, [pc, #168]	; (13608 <main+0x3178>)
   13560:	4798      	blx	r3
   13562:	1c03      	adds	r3, r0, #0
   13564:	1c1a      	adds	r2, r3, #0
   13566:	4b2d      	ldr	r3, [pc, #180]	; (1361c <main+0x318c>)
   13568:	1c11      	adds	r1, r2, #0
   1356a:	1c20      	adds	r0, r4, #0
   1356c:	4798      	blx	r3
   1356e:	1c03      	adds	r3, r0, #0
   13570:	1c1c      	adds	r4, r3, #0
   13572:	4b26      	ldr	r3, [pc, #152]	; (1360c <main+0x317c>)
   13574:	881b      	ldrh	r3, [r3, #0]
   13576:	001a      	movs	r2, r3
   13578:	4b26      	ldr	r3, [pc, #152]	; (13614 <main+0x3184>)
   1357a:	0010      	movs	r0, r2
   1357c:	4798      	blx	r3
   1357e:	1c02      	adds	r2, r0, #0
   13580:	4b27      	ldr	r3, [pc, #156]	; (13620 <main+0x3190>)
   13582:	1c11      	adds	r1, r2, #0
   13584:	1c20      	adds	r0, r4, #0
   13586:	4798      	blx	r3
   13588:	1c03      	adds	r3, r0, #0
   1358a:	617b      	str	r3, [r7, #20]
					setRed(brake_temp);
   1358c:	4b25      	ldr	r3, [pc, #148]	; (13624 <main+0x3194>)
   1358e:	6978      	ldr	r0, [r7, #20]
   13590:	4798      	blx	r3
   13592:	0003      	movs	r3, r0
   13594:	b29b      	uxth	r3, r3
   13596:	0018      	movs	r0, r3
   13598:	4b23      	ldr	r3, [pc, #140]	; (13628 <main+0x3198>)
   1359a:	4798      	blx	r3
			if(HEADLIGHTS && lightControlHead()){
   1359c:	e00c      	b.n	135b8 <main+0x3128>
				}
				else
					setRed(brake_offset);
   1359e:	4b1b      	ldr	r3, [pc, #108]	; (1360c <main+0x317c>)
   135a0:	881b      	ldrh	r3, [r3, #0]
   135a2:	0018      	movs	r0, r3
   135a4:	4b20      	ldr	r3, [pc, #128]	; (13628 <main+0x3198>)
   135a6:	4798      	blx	r3
			if(HEADLIGHTS && lightControlHead()){
   135a8:	e006      	b.n	135b8 <main+0x3128>
			}
			else{
				setWhite(0);
   135aa:	2000      	movs	r0, #0
   135ac:	4b12      	ldr	r3, [pc, #72]	; (135f8 <main+0x3168>)
   135ae:	4798      	blx	r3
				setRed(0);
   135b0:	2000      	movs	r0, #0
   135b2:	4b1d      	ldr	r3, [pc, #116]	; (13628 <main+0x3198>)
   135b4:	4798      	blx	r3
			if(HEADLIGHTS && lightControlHead()){
   135b6:	e010      	b.n	135da <main+0x314a>
   135b8:	e00f      	b.n	135da <main+0x314a>
			}
		} else {
			setWhite(0);
   135ba:	2000      	movs	r0, #0
   135bc:	4b0e      	ldr	r3, [pc, #56]	; (135f8 <main+0x3168>)
   135be:	4798      	blx	r3
			setRed(0);
   135c0:	2000      	movs	r0, #0
   135c2:	4b19      	ldr	r3, [pc, #100]	; (13628 <main+0x3198>)
   135c4:	4798      	blx	r3
			setLeftRGB(0,0,0);
   135c6:	2200      	movs	r2, #0
   135c8:	2100      	movs	r1, #0
   135ca:	2000      	movs	r0, #0
   135cc:	4b05      	ldr	r3, [pc, #20]	; (135e4 <main+0x3154>)
   135ce:	4798      	blx	r3
			setRightRGB(0,0,0);
   135d0:	2200      	movs	r2, #0
   135d2:	2100      	movs	r1, #0
   135d4:	2000      	movs	r0, #0
   135d6:	4b04      	ldr	r3, [pc, #16]	; (135e8 <main+0x3158>)
   135d8:	4798      	blx	r3
		if(configured_comms != esc_comms)
   135da:	f7fd f812 	bl	10602 <main+0x172>
   135de:	46c0      	nop			; (mov r8, r8)
   135e0:	2000039c 	.word	0x2000039c
   135e4:	0000b0c9 	.word	0x0000b0c9
   135e8:	0000b145 	.word	0x0000b145
   135ec:	20000322 	.word	0x20000322
   135f0:	00013901 	.word	0x00013901
   135f4:	0000ffff 	.word	0x0000ffff
   135f8:	0000b1b9 	.word	0x0000b1b9
   135fc:	2000030a 	.word	0x2000030a
   13600:	00014ee9 	.word	0x00014ee9
   13604:	0001407d 	.word	0x0001407d
   13608:	42f00000 	.word	0x42f00000
   1360c:	200000a0 	.word	0x200000a0
   13610:	00013e05 	.word	0x00013e05
   13614:	00014e49 	.word	0x00014e49
   13618:	00014ad1 	.word	0x00014ad1
   1361c:	00014891 	.word	0x00014891
   13620:	0001418d 	.word	0x0001418d
   13624:	00014121 	.word	0x00014121
   13628:	0000b1f1 	.word	0x0000b1f1

0001362c <averageAX>:
	while(adc_get_status(&adc1) != ADC_STATUS_RESULT_READY);
	adc_read(&adc1, light_val);
	adc_clear_status(&adc1, ADC_STATUS_RESULT_READY);
}

int16_t averageAX(){
   1362c:	b580      	push	{r7, lr}
   1362e:	b082      	sub	sp, #8
   13630:	af00      	add	r7, sp, #0
	AXtotal -= AXaverage[ACCELsamples-1];
   13632:	4b1a      	ldr	r3, [pc, #104]	; (1369c <averageAX+0x70>)
   13634:	681b      	ldr	r3, [r3, #0]
   13636:	4a1a      	ldr	r2, [pc, #104]	; (136a0 <averageAX+0x74>)
   13638:	211c      	movs	r1, #28
   1363a:	5e52      	ldrsh	r2, [r2, r1]
   1363c:	1a9a      	subs	r2, r3, r2
   1363e:	4b17      	ldr	r3, [pc, #92]	; (1369c <averageAX+0x70>)
   13640:	601a      	str	r2, [r3, #0]
	for(int i = ACCELsamples-1; i > 0; --i){
   13642:	230e      	movs	r3, #14
   13644:	607b      	str	r3, [r7, #4]
   13646:	e00b      	b.n	13660 <averageAX+0x34>
		AXaverage[i] = AXaverage[i-1];
   13648:	687b      	ldr	r3, [r7, #4]
   1364a:	1e5a      	subs	r2, r3, #1
   1364c:	4b14      	ldr	r3, [pc, #80]	; (136a0 <averageAX+0x74>)
   1364e:	0052      	lsls	r2, r2, #1
   13650:	5ed1      	ldrsh	r1, [r2, r3]
   13652:	4b13      	ldr	r3, [pc, #76]	; (136a0 <averageAX+0x74>)
   13654:	687a      	ldr	r2, [r7, #4]
   13656:	0052      	lsls	r2, r2, #1
   13658:	52d1      	strh	r1, [r2, r3]
	for(int i = ACCELsamples-1; i > 0; --i){
   1365a:	687b      	ldr	r3, [r7, #4]
   1365c:	3b01      	subs	r3, #1
   1365e:	607b      	str	r3, [r7, #4]
   13660:	687b      	ldr	r3, [r7, #4]
   13662:	2b00      	cmp	r3, #0
   13664:	dcf0      	bgt.n	13648 <averageAX+0x1c>
	}
	AXtotal += cax;
   13666:	4b0f      	ldr	r3, [pc, #60]	; (136a4 <averageAX+0x78>)
   13668:	2200      	movs	r2, #0
   1366a:	5e9b      	ldrsh	r3, [r3, r2]
   1366c:	001a      	movs	r2, r3
   1366e:	4b0b      	ldr	r3, [pc, #44]	; (1369c <averageAX+0x70>)
   13670:	681b      	ldr	r3, [r3, #0]
   13672:	18d2      	adds	r2, r2, r3
   13674:	4b09      	ldr	r3, [pc, #36]	; (1369c <averageAX+0x70>)
   13676:	601a      	str	r2, [r3, #0]
	AXaverage[0] = cax;
   13678:	4b0a      	ldr	r3, [pc, #40]	; (136a4 <averageAX+0x78>)
   1367a:	2200      	movs	r2, #0
   1367c:	5e9a      	ldrsh	r2, [r3, r2]
   1367e:	4b08      	ldr	r3, [pc, #32]	; (136a0 <averageAX+0x74>)
   13680:	801a      	strh	r2, [r3, #0]

	return (int16_t)(AXtotal/ACCELsamples);
   13682:	4b06      	ldr	r3, [pc, #24]	; (1369c <averageAX+0x70>)
   13684:	681a      	ldr	r2, [r3, #0]
   13686:	4b08      	ldr	r3, [pc, #32]	; (136a8 <averageAX+0x7c>)
   13688:	210f      	movs	r1, #15
   1368a:	0010      	movs	r0, r2
   1368c:	4798      	blx	r3
   1368e:	0003      	movs	r3, r0
   13690:	b21b      	sxth	r3, r3
}
   13692:	0018      	movs	r0, r3
   13694:	46bd      	mov	sp, r7
   13696:	b002      	add	sp, #8
   13698:	bd80      	pop	{r7, pc}
   1369a:	46c0      	nop			; (mov r8, r8)
   1369c:	200003b4 	.word	0x200003b4
   136a0:	20000a40 	.word	0x20000a40
   136a4:	200002fc 	.word	0x200002fc
   136a8:	00013e05 	.word	0x00013e05

000136ac <averageAY>:

int16_t averageAY(){
   136ac:	b580      	push	{r7, lr}
   136ae:	b082      	sub	sp, #8
   136b0:	af00      	add	r7, sp, #0
	AYtotal -= AYaverage[ACCELsamples-1];
   136b2:	4b1a      	ldr	r3, [pc, #104]	; (1371c <averageAY+0x70>)
   136b4:	681b      	ldr	r3, [r3, #0]
   136b6:	4a1a      	ldr	r2, [pc, #104]	; (13720 <averageAY+0x74>)
   136b8:	211c      	movs	r1, #28
   136ba:	5e52      	ldrsh	r2, [r2, r1]
   136bc:	1a9a      	subs	r2, r3, r2
   136be:	4b17      	ldr	r3, [pc, #92]	; (1371c <averageAY+0x70>)
   136c0:	601a      	str	r2, [r3, #0]
	for(int i = ACCELsamples-1; i > 0; --i){
   136c2:	230e      	movs	r3, #14
   136c4:	607b      	str	r3, [r7, #4]
   136c6:	e00b      	b.n	136e0 <averageAY+0x34>
		AYaverage[i] = AYaverage[i-1];
   136c8:	687b      	ldr	r3, [r7, #4]
   136ca:	1e5a      	subs	r2, r3, #1
   136cc:	4b14      	ldr	r3, [pc, #80]	; (13720 <averageAY+0x74>)
   136ce:	0052      	lsls	r2, r2, #1
   136d0:	5ed1      	ldrsh	r1, [r2, r3]
   136d2:	4b13      	ldr	r3, [pc, #76]	; (13720 <averageAY+0x74>)
   136d4:	687a      	ldr	r2, [r7, #4]
   136d6:	0052      	lsls	r2, r2, #1
   136d8:	52d1      	strh	r1, [r2, r3]
	for(int i = ACCELsamples-1; i > 0; --i){
   136da:	687b      	ldr	r3, [r7, #4]
   136dc:	3b01      	subs	r3, #1
   136de:	607b      	str	r3, [r7, #4]
   136e0:	687b      	ldr	r3, [r7, #4]
   136e2:	2b00      	cmp	r3, #0
   136e4:	dcf0      	bgt.n	136c8 <averageAY+0x1c>
	}
	AYtotal += cay;
   136e6:	4b0f      	ldr	r3, [pc, #60]	; (13724 <averageAY+0x78>)
   136e8:	2200      	movs	r2, #0
   136ea:	5e9b      	ldrsh	r3, [r3, r2]
   136ec:	001a      	movs	r2, r3
   136ee:	4b0b      	ldr	r3, [pc, #44]	; (1371c <averageAY+0x70>)
   136f0:	681b      	ldr	r3, [r3, #0]
   136f2:	18d2      	adds	r2, r2, r3
   136f4:	4b09      	ldr	r3, [pc, #36]	; (1371c <averageAY+0x70>)
   136f6:	601a      	str	r2, [r3, #0]
	AYaverage[0] = cay;
   136f8:	4b0a      	ldr	r3, [pc, #40]	; (13724 <averageAY+0x78>)
   136fa:	2200      	movs	r2, #0
   136fc:	5e9a      	ldrsh	r2, [r3, r2]
   136fe:	4b08      	ldr	r3, [pc, #32]	; (13720 <averageAY+0x74>)
   13700:	801a      	strh	r2, [r3, #0]

	return (int16_t)(AYtotal/ACCELsamples);
   13702:	4b06      	ldr	r3, [pc, #24]	; (1371c <averageAY+0x70>)
   13704:	681a      	ldr	r2, [r3, #0]
   13706:	4b08      	ldr	r3, [pc, #32]	; (13728 <averageAY+0x7c>)
   13708:	210f      	movs	r1, #15
   1370a:	0010      	movs	r0, r2
   1370c:	4798      	blx	r3
   1370e:	0003      	movs	r3, r0
   13710:	b21b      	sxth	r3, r3
}
   13712:	0018      	movs	r0, r3
   13714:	46bd      	mov	sp, r7
   13716:	b002      	add	sp, #8
   13718:	bd80      	pop	{r7, pc}
   1371a:	46c0      	nop			; (mov r8, r8)
   1371c:	200003b8 	.word	0x200003b8
   13720:	20000a04 	.word	0x20000a04
   13724:	200002fe 	.word	0x200002fe
   13728:	00013e05 	.word	0x00013e05

0001372c <sensorControl>:
		AZaverage[0] = azKalman;

		return (int16_t)(AZtotal/ACCELsamples);
}

char sensorControl() {
   1372c:	b580      	push	{r7, lr}
   1372e:	af00      	add	r7, sp, #0
static uint8_t off_type = 0;
static long count = 0;
static bool result = 1;
	if(IMU_CONTROLED){
   13730:	4b60      	ldr	r3, [pc, #384]	; (138b4 <sensorControl+0x188>)
   13732:	781b      	ldrb	r3, [r3, #0]
   13734:	2b00      	cmp	r3, #0
   13736:	d100      	bne.n	1373a <sensorControl+0xe>
   13738:	e0b7      	b.n	138aa <sensorControl+0x17e>
		if(result){
   1373a:	4b5f      	ldr	r3, [pc, #380]	; (138b8 <sensorControl+0x18c>)
   1373c:	781b      	ldrb	r3, [r3, #0]
   1373e:	2b00      	cmp	r3, #0
   13740:	d057      	beq.n	137f2 <sensorControl+0xc6>
			if(ayKalman >= 1000 && result){
   13742:	4b5e      	ldr	r3, [pc, #376]	; (138bc <sensorControl+0x190>)
   13744:	681a      	ldr	r2, [r3, #0]
   13746:	4b5e      	ldr	r3, [pc, #376]	; (138c0 <sensorControl+0x194>)
   13748:	495e      	ldr	r1, [pc, #376]	; (138c4 <sensorControl+0x198>)
   1374a:	1c10      	adds	r0, r2, #0
   1374c:	4798      	blx	r3
   1374e:	1e03      	subs	r3, r0, #0
   13750:	d00c      	beq.n	1376c <sensorControl+0x40>
   13752:	4b59      	ldr	r3, [pc, #356]	; (138b8 <sensorControl+0x18c>)
   13754:	781b      	ldrb	r3, [r3, #0]
   13756:	2b00      	cmp	r3, #0
   13758:	d008      	beq.n	1376c <sensorControl+0x40>
				count++;
   1375a:	4b5b      	ldr	r3, [pc, #364]	; (138c8 <sensorControl+0x19c>)
   1375c:	681b      	ldr	r3, [r3, #0]
   1375e:	1c5a      	adds	r2, r3, #1
   13760:	4b59      	ldr	r3, [pc, #356]	; (138c8 <sensorControl+0x19c>)
   13762:	601a      	str	r2, [r3, #0]
				off_type = 1;
   13764:	4b59      	ldr	r3, [pc, #356]	; (138cc <sensorControl+0x1a0>)
   13766:	2201      	movs	r2, #1
   13768:	701a      	strb	r2, [r3, #0]
   1376a:	e082      	b.n	13872 <sensorControl+0x146>
			}
			else if(ayKalman <= -1000 && result){
   1376c:	4b53      	ldr	r3, [pc, #332]	; (138bc <sensorControl+0x190>)
   1376e:	681a      	ldr	r2, [r3, #0]
   13770:	4b57      	ldr	r3, [pc, #348]	; (138d0 <sensorControl+0x1a4>)
   13772:	4958      	ldr	r1, [pc, #352]	; (138d4 <sensorControl+0x1a8>)
   13774:	1c10      	adds	r0, r2, #0
   13776:	4798      	blx	r3
   13778:	1e03      	subs	r3, r0, #0
   1377a:	d00c      	beq.n	13796 <sensorControl+0x6a>
   1377c:	4b4e      	ldr	r3, [pc, #312]	; (138b8 <sensorControl+0x18c>)
   1377e:	781b      	ldrb	r3, [r3, #0]
   13780:	2b00      	cmp	r3, #0
   13782:	d008      	beq.n	13796 <sensorControl+0x6a>
				count++;
   13784:	4b50      	ldr	r3, [pc, #320]	; (138c8 <sensorControl+0x19c>)
   13786:	681b      	ldr	r3, [r3, #0]
   13788:	1c5a      	adds	r2, r3, #1
   1378a:	4b4f      	ldr	r3, [pc, #316]	; (138c8 <sensorControl+0x19c>)
   1378c:	601a      	str	r2, [r3, #0]
				off_type = 2;
   1378e:	4b4f      	ldr	r3, [pc, #316]	; (138cc <sensorControl+0x1a0>)
   13790:	2202      	movs	r2, #2
   13792:	701a      	strb	r2, [r3, #0]
   13794:	e06d      	b.n	13872 <sensorControl+0x146>
			}
			else if(axKalman >= 1250 && result){
   13796:	4b50      	ldr	r3, [pc, #320]	; (138d8 <sensorControl+0x1ac>)
   13798:	681a      	ldr	r2, [r3, #0]
   1379a:	4b49      	ldr	r3, [pc, #292]	; (138c0 <sensorControl+0x194>)
   1379c:	494f      	ldr	r1, [pc, #316]	; (138dc <sensorControl+0x1b0>)
   1379e:	1c10      	adds	r0, r2, #0
   137a0:	4798      	blx	r3
   137a2:	1e03      	subs	r3, r0, #0
   137a4:	d00c      	beq.n	137c0 <sensorControl+0x94>
   137a6:	4b44      	ldr	r3, [pc, #272]	; (138b8 <sensorControl+0x18c>)
   137a8:	781b      	ldrb	r3, [r3, #0]
   137aa:	2b00      	cmp	r3, #0
   137ac:	d008      	beq.n	137c0 <sensorControl+0x94>
				count++;
   137ae:	4b46      	ldr	r3, [pc, #280]	; (138c8 <sensorControl+0x19c>)
   137b0:	681b      	ldr	r3, [r3, #0]
   137b2:	1c5a      	adds	r2, r3, #1
   137b4:	4b44      	ldr	r3, [pc, #272]	; (138c8 <sensorControl+0x19c>)
   137b6:	601a      	str	r2, [r3, #0]
				off_type = 3;
   137b8:	4b44      	ldr	r3, [pc, #272]	; (138cc <sensorControl+0x1a0>)
   137ba:	2203      	movs	r2, #3
   137bc:	701a      	strb	r2, [r3, #0]
   137be:	e058      	b.n	13872 <sensorControl+0x146>
			}
			else if(axKalman <= -1250 && result){
   137c0:	4b45      	ldr	r3, [pc, #276]	; (138d8 <sensorControl+0x1ac>)
   137c2:	681a      	ldr	r2, [r3, #0]
   137c4:	4b42      	ldr	r3, [pc, #264]	; (138d0 <sensorControl+0x1a4>)
   137c6:	4946      	ldr	r1, [pc, #280]	; (138e0 <sensorControl+0x1b4>)
   137c8:	1c10      	adds	r0, r2, #0
   137ca:	4798      	blx	r3
   137cc:	1e03      	subs	r3, r0, #0
   137ce:	d00c      	beq.n	137ea <sensorControl+0xbe>
   137d0:	4b39      	ldr	r3, [pc, #228]	; (138b8 <sensorControl+0x18c>)
   137d2:	781b      	ldrb	r3, [r3, #0]
   137d4:	2b00      	cmp	r3, #0
   137d6:	d008      	beq.n	137ea <sensorControl+0xbe>
				count++;
   137d8:	4b3b      	ldr	r3, [pc, #236]	; (138c8 <sensorControl+0x19c>)
   137da:	681b      	ldr	r3, [r3, #0]
   137dc:	1c5a      	adds	r2, r3, #1
   137de:	4b3a      	ldr	r3, [pc, #232]	; (138c8 <sensorControl+0x19c>)
   137e0:	601a      	str	r2, [r3, #0]
				off_type = 4;
   137e2:	4b3a      	ldr	r3, [pc, #232]	; (138cc <sensorControl+0x1a0>)
   137e4:	2204      	movs	r2, #4
   137e6:	701a      	strb	r2, [r3, #0]
   137e8:	e043      	b.n	13872 <sensorControl+0x146>
			}
			else
				count = 0;
   137ea:	4b37      	ldr	r3, [pc, #220]	; (138c8 <sensorControl+0x19c>)
   137ec:	2200      	movs	r2, #0
   137ee:	601a      	str	r2, [r3, #0]
   137f0:	e03f      	b.n	13872 <sensorControl+0x146>
		}
		else if(!result){
   137f2:	4b31      	ldr	r3, [pc, #196]	; (138b8 <sensorControl+0x18c>)
   137f4:	781b      	ldrb	r3, [r3, #0]
   137f6:	2201      	movs	r2, #1
   137f8:	4053      	eors	r3, r2
   137fa:	b2db      	uxtb	r3, r3
   137fc:	2b00      	cmp	r3, #0
   137fe:	d038      	beq.n	13872 <sensorControl+0x146>
			if((ayKalman < 750 && off_type == 1) || (ayKalman > -750 && off_type == 2) || (axKalman < 1000 && off_type == 3) || (axKalman > -1000 && off_type == 4)){
   13800:	4b2e      	ldr	r3, [pc, #184]	; (138bc <sensorControl+0x190>)
   13802:	681a      	ldr	r2, [r3, #0]
   13804:	4b37      	ldr	r3, [pc, #220]	; (138e4 <sensorControl+0x1b8>)
   13806:	4938      	ldr	r1, [pc, #224]	; (138e8 <sensorControl+0x1bc>)
   13808:	1c10      	adds	r0, r2, #0
   1380a:	4798      	blx	r3
   1380c:	1e03      	subs	r3, r0, #0
   1380e:	d003      	beq.n	13818 <sensorControl+0xec>
   13810:	4b2e      	ldr	r3, [pc, #184]	; (138cc <sensorControl+0x1a0>)
   13812:	781b      	ldrb	r3, [r3, #0]
   13814:	2b01      	cmp	r3, #1
   13816:	d023      	beq.n	13860 <sensorControl+0x134>
   13818:	4b28      	ldr	r3, [pc, #160]	; (138bc <sensorControl+0x190>)
   1381a:	681a      	ldr	r2, [r3, #0]
   1381c:	4b33      	ldr	r3, [pc, #204]	; (138ec <sensorControl+0x1c0>)
   1381e:	4934      	ldr	r1, [pc, #208]	; (138f0 <sensorControl+0x1c4>)
   13820:	1c10      	adds	r0, r2, #0
   13822:	4798      	blx	r3
   13824:	1e03      	subs	r3, r0, #0
   13826:	d003      	beq.n	13830 <sensorControl+0x104>
   13828:	4b28      	ldr	r3, [pc, #160]	; (138cc <sensorControl+0x1a0>)
   1382a:	781b      	ldrb	r3, [r3, #0]
   1382c:	2b02      	cmp	r3, #2
   1382e:	d017      	beq.n	13860 <sensorControl+0x134>
   13830:	4b29      	ldr	r3, [pc, #164]	; (138d8 <sensorControl+0x1ac>)
   13832:	681a      	ldr	r2, [r3, #0]
   13834:	4b2b      	ldr	r3, [pc, #172]	; (138e4 <sensorControl+0x1b8>)
   13836:	4923      	ldr	r1, [pc, #140]	; (138c4 <sensorControl+0x198>)
   13838:	1c10      	adds	r0, r2, #0
   1383a:	4798      	blx	r3
   1383c:	1e03      	subs	r3, r0, #0
   1383e:	d003      	beq.n	13848 <sensorControl+0x11c>
   13840:	4b22      	ldr	r3, [pc, #136]	; (138cc <sensorControl+0x1a0>)
   13842:	781b      	ldrb	r3, [r3, #0]
   13844:	2b03      	cmp	r3, #3
   13846:	d00b      	beq.n	13860 <sensorControl+0x134>
   13848:	4b23      	ldr	r3, [pc, #140]	; (138d8 <sensorControl+0x1ac>)
   1384a:	681a      	ldr	r2, [r3, #0]
   1384c:	4b27      	ldr	r3, [pc, #156]	; (138ec <sensorControl+0x1c0>)
   1384e:	4921      	ldr	r1, [pc, #132]	; (138d4 <sensorControl+0x1a8>)
   13850:	1c10      	adds	r0, r2, #0
   13852:	4798      	blx	r3
   13854:	1e03      	subs	r3, r0, #0
   13856:	d009      	beq.n	1386c <sensorControl+0x140>
   13858:	4b1c      	ldr	r3, [pc, #112]	; (138cc <sensorControl+0x1a0>)
   1385a:	781b      	ldrb	r3, [r3, #0]
   1385c:	2b04      	cmp	r3, #4
   1385e:	d105      	bne.n	1386c <sensorControl+0x140>
				count++;
   13860:	4b19      	ldr	r3, [pc, #100]	; (138c8 <sensorControl+0x19c>)
   13862:	681b      	ldr	r3, [r3, #0]
   13864:	1c5a      	adds	r2, r3, #1
   13866:	4b18      	ldr	r3, [pc, #96]	; (138c8 <sensorControl+0x19c>)
   13868:	601a      	str	r2, [r3, #0]
   1386a:	e002      	b.n	13872 <sensorControl+0x146>
			}
			else
				count = 0;
   1386c:	4b16      	ldr	r3, [pc, #88]	; (138c8 <sensorControl+0x19c>)
   1386e:	2200      	movs	r2, #0
   13870:	601a      	str	r2, [r3, #0]
		}
		
		if(count > 6)
   13872:	4b15      	ldr	r3, [pc, #84]	; (138c8 <sensorControl+0x19c>)
   13874:	681b      	ldr	r3, [r3, #0]
   13876:	2b06      	cmp	r3, #6
   13878:	dd0d      	ble.n	13896 <sensorControl+0x16a>
			result = !result;
   1387a:	4b0f      	ldr	r3, [pc, #60]	; (138b8 <sensorControl+0x18c>)
   1387c:	781b      	ldrb	r3, [r3, #0]
   1387e:	1e5a      	subs	r2, r3, #1
   13880:	4193      	sbcs	r3, r2
   13882:	b2db      	uxtb	r3, r3
   13884:	2201      	movs	r2, #1
   13886:	4053      	eors	r3, r2
   13888:	b2db      	uxtb	r3, r3
   1388a:	1c1a      	adds	r2, r3, #0
   1388c:	2301      	movs	r3, #1
   1388e:	4013      	ands	r3, r2
   13890:	b2da      	uxtb	r2, r3
   13892:	4b09      	ldr	r3, [pc, #36]	; (138b8 <sensorControl+0x18c>)
   13894:	701a      	strb	r2, [r3, #0]

		if(result)
   13896:	4b08      	ldr	r3, [pc, #32]	; (138b8 <sensorControl+0x18c>)
   13898:	781b      	ldrb	r3, [r3, #0]
   1389a:	2b00      	cmp	r3, #0
   1389c:	d002      	beq.n	138a4 <sensorControl+0x178>
			off_type = 0;
   1389e:	4b0b      	ldr	r3, [pc, #44]	; (138cc <sensorControl+0x1a0>)
   138a0:	2200      	movs	r2, #0
   138a2:	701a      	strb	r2, [r3, #0]

		return result;
   138a4:	4b04      	ldr	r3, [pc, #16]	; (138b8 <sensorControl+0x18c>)
   138a6:	781b      	ldrb	r3, [r3, #0]
   138a8:	e000      	b.n	138ac <sensorControl+0x180>
	}
	else
		return 1;
   138aa:	2301      	movs	r3, #1
}
   138ac:	0018      	movs	r0, r3
   138ae:	46bd      	mov	sp, r7
   138b0:	bd80      	pop	{r7, pc}
   138b2:	46c0      	nop			; (mov r8, r8)
   138b4:	20000324 	.word	0x20000324
   138b8:	200000e7 	.word	0x200000e7
   138bc:	200003c4 	.word	0x200003c4
   138c0:	000140b9 	.word	0x000140b9
   138c4:	447a0000 	.word	0x447a0000
   138c8:	200003ec 	.word	0x200003ec
   138cc:	200003f0 	.word	0x200003f0
   138d0:	00014091 	.word	0x00014091
   138d4:	c47a0000 	.word	0xc47a0000
   138d8:	200003c0 	.word	0x200003c0
   138dc:	449c4000 	.word	0x449c4000
   138e0:	c49c4000 	.word	0xc49c4000
   138e4:	0001407d 	.word	0x0001407d
   138e8:	443b8000 	.word	0x443b8000
   138ec:	000140a5 	.word	0x000140a5
   138f0:	c43b8000 	.word	0xc43b8000

000138f4 <lightControlSide>:



char lightControlSide() {
   138f4:	b580      	push	{r7, lr}
   138f6:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
   138f8:	2301      	movs	r3, #1
}
   138fa:	0018      	movs	r0, r3
   138fc:	46bd      	mov	sp, r7
   138fe:	bd80      	pop	{r7, pc}

00013900 <lightControlHead>:

char lightControlHead() {
   13900:	b580      	push	{r7, lr}
   13902:	af00      	add	r7, sp, #0
	// TO BE IMPLEMENTED

	return true;
   13904:	2301      	movs	r3, #1
}
   13906:	0018      	movs	r0, r3
   13908:	46bd      	mov	sp, r7
   1390a:	bd80      	pop	{r7, pc}

0001390c <initKalman>:

void initKalman(float meas, float est, float _q)
{
   1390c:	b580      	push	{r7, lr}
   1390e:	b086      	sub	sp, #24
   13910:	af00      	add	r7, sp, #0
   13912:	60f8      	str	r0, [r7, #12]
   13914:	60b9      	str	r1, [r7, #8]
   13916:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < KalmanArraySize; i++){
   13918:	2300      	movs	r3, #0
   1391a:	617b      	str	r3, [r7, #20]
   1391c:	e020      	b.n	13960 <initKalman+0x54>
		err_measure[i] = meas;
   1391e:	4b26      	ldr	r3, [pc, #152]	; (139b8 <initKalman+0xac>)
   13920:	697a      	ldr	r2, [r7, #20]
   13922:	0092      	lsls	r2, r2, #2
   13924:	68f9      	ldr	r1, [r7, #12]
   13926:	50d1      	str	r1, [r2, r3]
		err_estimate[i] = est;
   13928:	4b24      	ldr	r3, [pc, #144]	; (139bc <initKalman+0xb0>)
   1392a:	697a      	ldr	r2, [r7, #20]
   1392c:	0092      	lsls	r2, r2, #2
   1392e:	68b9      	ldr	r1, [r7, #8]
   13930:	50d1      	str	r1, [r2, r3]
		q[i] = _q;
   13932:	4b23      	ldr	r3, [pc, #140]	; (139c0 <initKalman+0xb4>)
   13934:	697a      	ldr	r2, [r7, #20]
   13936:	0092      	lsls	r2, r2, #2
   13938:	6879      	ldr	r1, [r7, #4]
   1393a:	50d1      	str	r1, [r2, r3]
		current_estimate[i] = 0;
   1393c:	4b21      	ldr	r3, [pc, #132]	; (139c4 <initKalman+0xb8>)
   1393e:	697a      	ldr	r2, [r7, #20]
   13940:	0092      	lsls	r2, r2, #2
   13942:	2100      	movs	r1, #0
   13944:	50d1      	str	r1, [r2, r3]
		last_estimate[i] = 0;
   13946:	4b20      	ldr	r3, [pc, #128]	; (139c8 <initKalman+0xbc>)
   13948:	697a      	ldr	r2, [r7, #20]
   1394a:	0092      	lsls	r2, r2, #2
   1394c:	2100      	movs	r1, #0
   1394e:	50d1      	str	r1, [r2, r3]
		kalman_gain[i] = 0;
   13950:	4b1e      	ldr	r3, [pc, #120]	; (139cc <initKalman+0xc0>)
   13952:	697a      	ldr	r2, [r7, #20]
   13954:	0092      	lsls	r2, r2, #2
   13956:	2100      	movs	r1, #0
   13958:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < KalmanArraySize; i++){
   1395a:	697b      	ldr	r3, [r7, #20]
   1395c:	3301      	adds	r3, #1
   1395e:	617b      	str	r3, [r7, #20]
   13960:	697b      	ldr	r3, [r7, #20]
   13962:	2b06      	cmp	r3, #6
   13964:	dddb      	ble.n	1391e <initKalman+0x12>
	}

	err_measure[ax_kalman] = 15;
   13966:	4b14      	ldr	r3, [pc, #80]	; (139b8 <initKalman+0xac>)
   13968:	4a19      	ldr	r2, [pc, #100]	; (139d0 <initKalman+0xc4>)
   1396a:	601a      	str	r2, [r3, #0]
	err_estimate[ax_kalman] = 15;
   1396c:	4b13      	ldr	r3, [pc, #76]	; (139bc <initKalman+0xb0>)
   1396e:	4a18      	ldr	r2, [pc, #96]	; (139d0 <initKalman+0xc4>)
   13970:	601a      	str	r2, [r3, #0]
	q[ax_kalman] = 0.3;
   13972:	4b13      	ldr	r3, [pc, #76]	; (139c0 <initKalman+0xb4>)
   13974:	4a17      	ldr	r2, [pc, #92]	; (139d4 <initKalman+0xc8>)
   13976:	601a      	str	r2, [r3, #0]

	err_measure[ay_kalman] = 15;
   13978:	4b0f      	ldr	r3, [pc, #60]	; (139b8 <initKalman+0xac>)
   1397a:	4a15      	ldr	r2, [pc, #84]	; (139d0 <initKalman+0xc4>)
   1397c:	605a      	str	r2, [r3, #4]
	err_estimate[ay_kalman] = 15;
   1397e:	4b0f      	ldr	r3, [pc, #60]	; (139bc <initKalman+0xb0>)
   13980:	4a13      	ldr	r2, [pc, #76]	; (139d0 <initKalman+0xc4>)
   13982:	605a      	str	r2, [r3, #4]
	q[ay_kalman] = 0.3;
   13984:	4b0e      	ldr	r3, [pc, #56]	; (139c0 <initKalman+0xb4>)
   13986:	4a13      	ldr	r2, [pc, #76]	; (139d4 <initKalman+0xc8>)
   13988:	605a      	str	r2, [r3, #4]

// 	err_measure[ay_kalman] = 20;
// 	err_estimate[ay_kalman] = 20;
// 	q[ay_kalman] = 0.8;

	err_measure[az_kalman] = 30;
   1398a:	4b0b      	ldr	r3, [pc, #44]	; (139b8 <initKalman+0xac>)
   1398c:	4a12      	ldr	r2, [pc, #72]	; (139d8 <initKalman+0xcc>)
   1398e:	609a      	str	r2, [r3, #8]
	err_estimate[az_kalman] = 30;
   13990:	4b0a      	ldr	r3, [pc, #40]	; (139bc <initKalman+0xb0>)
   13992:	4a11      	ldr	r2, [pc, #68]	; (139d8 <initKalman+0xcc>)
   13994:	609a      	str	r2, [r3, #8]
	q[az_kalman] = 0.3;
   13996:	4b0a      	ldr	r3, [pc, #40]	; (139c0 <initKalman+0xb4>)
   13998:	4a0e      	ldr	r2, [pc, #56]	; (139d4 <initKalman+0xc8>)
   1399a:	609a      	str	r2, [r3, #8]
// 	
// 	err_measure[gz_kalman] = 0.1;
// 	err_estimate[gz_kalman] = 1;
// 	q[gz_kalman] = 0.99;

	err_measure[light_kalman] = 200;
   1399c:	4b06      	ldr	r3, [pc, #24]	; (139b8 <initKalman+0xac>)
   1399e:	4a0f      	ldr	r2, [pc, #60]	; (139dc <initKalman+0xd0>)
   139a0:	619a      	str	r2, [r3, #24]
	err_estimate[light_kalman] = 200;
   139a2:	4b06      	ldr	r3, [pc, #24]	; (139bc <initKalman+0xb0>)
   139a4:	4a0d      	ldr	r2, [pc, #52]	; (139dc <initKalman+0xd0>)
   139a6:	619a      	str	r2, [r3, #24]
	q[light_kalman] = 0.008;
   139a8:	4b05      	ldr	r3, [pc, #20]	; (139c0 <initKalman+0xb4>)
   139aa:	4a0d      	ldr	r2, [pc, #52]	; (139e0 <initKalman+0xd4>)
   139ac:	619a      	str	r2, [r3, #24]
}
   139ae:	46c0      	nop			; (mov r8, r8)
   139b0:	46bd      	mov	sp, r7
   139b2:	b006      	add	sp, #24
   139b4:	bd80      	pop	{r7, pc}
   139b6:	46c0      	nop			; (mov r8, r8)
   139b8:	20000a64 	.word	0x20000a64
   139bc:	200009ac 	.word	0x200009ac
   139c0:	20000d98 	.word	0x20000d98
   139c4:	20000a24 	.word	0x20000a24
   139c8:	200008f4 	.word	0x200008f4
   139cc:	20000ccc 	.word	0x20000ccc
   139d0:	41700000 	.word	0x41700000
   139d4:	3e99999a 	.word	0x3e99999a
   139d8:	41f00000 	.word	0x41f00000
   139dc:	43480000 	.word	0x43480000
   139e0:	3c03126f 	.word	0x3c03126f

000139e4 <updateKalman>:

float updateKalman(float meas, int kalmanIndex)
{
   139e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   139e6:	b083      	sub	sp, #12
   139e8:	af00      	add	r7, sp, #0
   139ea:	6078      	str	r0, [r7, #4]
   139ec:	6039      	str	r1, [r7, #0]
	  kalman_gain[kalmanIndex] = err_estimate[kalmanIndex]/(err_estimate[kalmanIndex] + err_measure[kalmanIndex]);
   139ee:	4b5e      	ldr	r3, [pc, #376]	; (13b68 <updateKalman+0x184>)
   139f0:	683a      	ldr	r2, [r7, #0]
   139f2:	0092      	lsls	r2, r2, #2
   139f4:	58d4      	ldr	r4, [r2, r3]
   139f6:	4b5c      	ldr	r3, [pc, #368]	; (13b68 <updateKalman+0x184>)
   139f8:	683a      	ldr	r2, [r7, #0]
   139fa:	0092      	lsls	r2, r2, #2
   139fc:	58d0      	ldr	r0, [r2, r3]
   139fe:	4b5b      	ldr	r3, [pc, #364]	; (13b6c <updateKalman+0x188>)
   13a00:	683a      	ldr	r2, [r7, #0]
   13a02:	0092      	lsls	r2, r2, #2
   13a04:	58d2      	ldr	r2, [r2, r3]
   13a06:	4b5a      	ldr	r3, [pc, #360]	; (13b70 <updateKalman+0x18c>)
   13a08:	1c11      	adds	r1, r2, #0
   13a0a:	4798      	blx	r3
   13a0c:	1c03      	adds	r3, r0, #0
   13a0e:	1c1a      	adds	r2, r3, #0
   13a10:	4b58      	ldr	r3, [pc, #352]	; (13b74 <updateKalman+0x190>)
   13a12:	1c11      	adds	r1, r2, #0
   13a14:	1c20      	adds	r0, r4, #0
   13a16:	4798      	blx	r3
   13a18:	1c03      	adds	r3, r0, #0
   13a1a:	1c19      	adds	r1, r3, #0
   13a1c:	4b56      	ldr	r3, [pc, #344]	; (13b78 <updateKalman+0x194>)
   13a1e:	683a      	ldr	r2, [r7, #0]
   13a20:	0092      	lsls	r2, r2, #2
   13a22:	50d1      	str	r1, [r2, r3]
	  kalman_gain[kalmanIndex] = max(kalman_gain[kalmanIndex],0.015);
   13a24:	4b54      	ldr	r3, [pc, #336]	; (13b78 <updateKalman+0x194>)
   13a26:	683a      	ldr	r2, [r7, #0]
   13a28:	0092      	lsls	r2, r2, #2
   13a2a:	58d2      	ldr	r2, [r2, r3]
   13a2c:	4b53      	ldr	r3, [pc, #332]	; (13b7c <updateKalman+0x198>)
   13a2e:	1c10      	adds	r0, r2, #0
   13a30:	4798      	blx	r3
   13a32:	4c53      	ldr	r4, [pc, #332]	; (13b80 <updateKalman+0x19c>)
   13a34:	4a53      	ldr	r2, [pc, #332]	; (13b84 <updateKalman+0x1a0>)
   13a36:	4b54      	ldr	r3, [pc, #336]	; (13b88 <updateKalman+0x1a4>)
   13a38:	47a0      	blx	r4
   13a3a:	1e03      	subs	r3, r0, #0
   13a3c:	d004      	beq.n	13a48 <updateKalman+0x64>
   13a3e:	4b4e      	ldr	r3, [pc, #312]	; (13b78 <updateKalman+0x194>)
   13a40:	683a      	ldr	r2, [r7, #0]
   13a42:	0092      	lsls	r2, r2, #2
   13a44:	58d3      	ldr	r3, [r2, r3]
   13a46:	e000      	b.n	13a4a <updateKalman+0x66>
   13a48:	4b50      	ldr	r3, [pc, #320]	; (13b8c <updateKalman+0x1a8>)
   13a4a:	4a4b      	ldr	r2, [pc, #300]	; (13b78 <updateKalman+0x194>)
   13a4c:	6839      	ldr	r1, [r7, #0]
   13a4e:	0089      	lsls	r1, r1, #2
   13a50:	508b      	str	r3, [r1, r2]
	  current_estimate[kalmanIndex] = last_estimate[kalmanIndex] + kalman_gain[kalmanIndex] * (meas - last_estimate[kalmanIndex]);
   13a52:	4b4f      	ldr	r3, [pc, #316]	; (13b90 <updateKalman+0x1ac>)
   13a54:	683a      	ldr	r2, [r7, #0]
   13a56:	0092      	lsls	r2, r2, #2
   13a58:	58d4      	ldr	r4, [r2, r3]
   13a5a:	4b47      	ldr	r3, [pc, #284]	; (13b78 <updateKalman+0x194>)
   13a5c:	683a      	ldr	r2, [r7, #0]
   13a5e:	0092      	lsls	r2, r2, #2
   13a60:	58d5      	ldr	r5, [r2, r3]
   13a62:	4b4b      	ldr	r3, [pc, #300]	; (13b90 <updateKalman+0x1ac>)
   13a64:	683a      	ldr	r2, [r7, #0]
   13a66:	0092      	lsls	r2, r2, #2
   13a68:	58d2      	ldr	r2, [r2, r3]
   13a6a:	4b4a      	ldr	r3, [pc, #296]	; (13b94 <updateKalman+0x1b0>)
   13a6c:	1c11      	adds	r1, r2, #0
   13a6e:	6878      	ldr	r0, [r7, #4]
   13a70:	4798      	blx	r3
   13a72:	1c03      	adds	r3, r0, #0
   13a74:	1c1a      	adds	r2, r3, #0
   13a76:	4b48      	ldr	r3, [pc, #288]	; (13b98 <updateKalman+0x1b4>)
   13a78:	1c11      	adds	r1, r2, #0
   13a7a:	1c28      	adds	r0, r5, #0
   13a7c:	4798      	blx	r3
   13a7e:	1c03      	adds	r3, r0, #0
   13a80:	1c1a      	adds	r2, r3, #0
   13a82:	4b3b      	ldr	r3, [pc, #236]	; (13b70 <updateKalman+0x18c>)
   13a84:	1c11      	adds	r1, r2, #0
   13a86:	1c20      	adds	r0, r4, #0
   13a88:	4798      	blx	r3
   13a8a:	1c03      	adds	r3, r0, #0
   13a8c:	1c19      	adds	r1, r3, #0
   13a8e:	4b43      	ldr	r3, [pc, #268]	; (13b9c <updateKalman+0x1b8>)
   13a90:	683a      	ldr	r2, [r7, #0]
   13a92:	0092      	lsls	r2, r2, #2
   13a94:	50d1      	str	r1, [r2, r3]
	  err_estimate[kalmanIndex] =  (1.0 - kalman_gain[kalmanIndex])*err_estimate[kalmanIndex] + abs(last_estimate[kalmanIndex]-current_estimate[kalmanIndex])*q[kalmanIndex];
   13a96:	4b38      	ldr	r3, [pc, #224]	; (13b78 <updateKalman+0x194>)
   13a98:	683a      	ldr	r2, [r7, #0]
   13a9a:	0092      	lsls	r2, r2, #2
   13a9c:	58d2      	ldr	r2, [r2, r3]
   13a9e:	4b37      	ldr	r3, [pc, #220]	; (13b7c <updateKalman+0x198>)
   13aa0:	1c10      	adds	r0, r2, #0
   13aa2:	4798      	blx	r3
   13aa4:	0002      	movs	r2, r0
   13aa6:	000b      	movs	r3, r1
   13aa8:	4c3d      	ldr	r4, [pc, #244]	; (13ba0 <updateKalman+0x1bc>)
   13aaa:	2000      	movs	r0, #0
   13aac:	493d      	ldr	r1, [pc, #244]	; (13ba4 <updateKalman+0x1c0>)
   13aae:	47a0      	blx	r4
   13ab0:	0003      	movs	r3, r0
   13ab2:	000c      	movs	r4, r1
   13ab4:	001d      	movs	r5, r3
   13ab6:	0026      	movs	r6, r4
   13ab8:	4b2b      	ldr	r3, [pc, #172]	; (13b68 <updateKalman+0x184>)
   13aba:	683a      	ldr	r2, [r7, #0]
   13abc:	0092      	lsls	r2, r2, #2
   13abe:	58d2      	ldr	r2, [r2, r3]
   13ac0:	4b2e      	ldr	r3, [pc, #184]	; (13b7c <updateKalman+0x198>)
   13ac2:	1c10      	adds	r0, r2, #0
   13ac4:	4798      	blx	r3
   13ac6:	0002      	movs	r2, r0
   13ac8:	000b      	movs	r3, r1
   13aca:	4c37      	ldr	r4, [pc, #220]	; (13ba8 <updateKalman+0x1c4>)
   13acc:	0028      	movs	r0, r5
   13ace:	0031      	movs	r1, r6
   13ad0:	47a0      	blx	r4
   13ad2:	0003      	movs	r3, r0
   13ad4:	000c      	movs	r4, r1
   13ad6:	001d      	movs	r5, r3
   13ad8:	0026      	movs	r6, r4
   13ada:	4b2d      	ldr	r3, [pc, #180]	; (13b90 <updateKalman+0x1ac>)
   13adc:	683a      	ldr	r2, [r7, #0]
   13ade:	0092      	lsls	r2, r2, #2
   13ae0:	58d0      	ldr	r0, [r2, r3]
   13ae2:	4b2e      	ldr	r3, [pc, #184]	; (13b9c <updateKalman+0x1b8>)
   13ae4:	683a      	ldr	r2, [r7, #0]
   13ae6:	0092      	lsls	r2, r2, #2
   13ae8:	58d2      	ldr	r2, [r2, r3]
   13aea:	4b2a      	ldr	r3, [pc, #168]	; (13b94 <updateKalman+0x1b0>)
   13aec:	1c11      	adds	r1, r2, #0
   13aee:	4798      	blx	r3
   13af0:	1c03      	adds	r3, r0, #0
   13af2:	1c1a      	adds	r2, r3, #0
   13af4:	4b2d      	ldr	r3, [pc, #180]	; (13bac <updateKalman+0x1c8>)
   13af6:	1c10      	adds	r0, r2, #0
   13af8:	4798      	blx	r3
   13afa:	0003      	movs	r3, r0
   13afc:	17d9      	asrs	r1, r3, #31
   13afe:	185a      	adds	r2, r3, r1
   13b00:	404a      	eors	r2, r1
   13b02:	4b2b      	ldr	r3, [pc, #172]	; (13bb0 <updateKalman+0x1cc>)
   13b04:	0010      	movs	r0, r2
   13b06:	4798      	blx	r3
   13b08:	4b2a      	ldr	r3, [pc, #168]	; (13bb4 <updateKalman+0x1d0>)
   13b0a:	683a      	ldr	r2, [r7, #0]
   13b0c:	0092      	lsls	r2, r2, #2
   13b0e:	58d2      	ldr	r2, [r2, r3]
   13b10:	4b21      	ldr	r3, [pc, #132]	; (13b98 <updateKalman+0x1b4>)
   13b12:	1c11      	adds	r1, r2, #0
   13b14:	4798      	blx	r3
   13b16:	1c03      	adds	r3, r0, #0
   13b18:	1c1a      	adds	r2, r3, #0
   13b1a:	4b18      	ldr	r3, [pc, #96]	; (13b7c <updateKalman+0x198>)
   13b1c:	1c10      	adds	r0, r2, #0
   13b1e:	4798      	blx	r3
   13b20:	0002      	movs	r2, r0
   13b22:	000b      	movs	r3, r1
   13b24:	4c24      	ldr	r4, [pc, #144]	; (13bb8 <updateKalman+0x1d4>)
   13b26:	0028      	movs	r0, r5
   13b28:	0031      	movs	r1, r6
   13b2a:	47a0      	blx	r4
   13b2c:	0003      	movs	r3, r0
   13b2e:	000c      	movs	r4, r1
   13b30:	0019      	movs	r1, r3
   13b32:	0022      	movs	r2, r4
   13b34:	4b21      	ldr	r3, [pc, #132]	; (13bbc <updateKalman+0x1d8>)
   13b36:	0008      	movs	r0, r1
   13b38:	0011      	movs	r1, r2
   13b3a:	4798      	blx	r3
   13b3c:	1c01      	adds	r1, r0, #0
   13b3e:	4b0a      	ldr	r3, [pc, #40]	; (13b68 <updateKalman+0x184>)
   13b40:	683a      	ldr	r2, [r7, #0]
   13b42:	0092      	lsls	r2, r2, #2
   13b44:	50d1      	str	r1, [r2, r3]
	  last_estimate[kalmanIndex]=current_estimate[kalmanIndex];
   13b46:	4b15      	ldr	r3, [pc, #84]	; (13b9c <updateKalman+0x1b8>)
   13b48:	683a      	ldr	r2, [r7, #0]
   13b4a:	0092      	lsls	r2, r2, #2
   13b4c:	58d1      	ldr	r1, [r2, r3]
   13b4e:	4b10      	ldr	r3, [pc, #64]	; (13b90 <updateKalman+0x1ac>)
   13b50:	683a      	ldr	r2, [r7, #0]
   13b52:	0092      	lsls	r2, r2, #2
   13b54:	50d1      	str	r1, [r2, r3]

	  return current_estimate[kalmanIndex];
   13b56:	4b11      	ldr	r3, [pc, #68]	; (13b9c <updateKalman+0x1b8>)
   13b58:	683a      	ldr	r2, [r7, #0]
   13b5a:	0092      	lsls	r2, r2, #2
   13b5c:	58d3      	ldr	r3, [r2, r3]
   13b5e:	1c18      	adds	r0, r3, #0
   13b60:	46bd      	mov	sp, r7
   13b62:	b003      	add	sp, #12
   13b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b66:	46c0      	nop			; (mov r8, r8)
   13b68:	200009ac 	.word	0x200009ac
   13b6c:	20000a64 	.word	0x20000a64
   13b70:	0001418d 	.word	0x0001418d
   13b74:	000144b1 	.word	0x000144b1
   13b78:	20000ccc 	.word	0x20000ccc
   13b7c:	00016a85 	.word	0x00016a85
   13b80:	00014031 	.word	0x00014031
   13b84:	eb851eb8 	.word	0xeb851eb8
   13b88:	3f8eb851 	.word	0x3f8eb851
   13b8c:	3c75c28f 	.word	0x3c75c28f
   13b90:	200008f4 	.word	0x200008f4
   13b94:	00014ad1 	.word	0x00014ad1
   13b98:	00014891 	.word	0x00014891
   13b9c:	20000a24 	.word	0x20000a24
   13ba0:	000162fd 	.word	0x000162fd
   13ba4:	3ff00000 	.word	0x3ff00000
   13ba8:	00015dfd 	.word	0x00015dfd
   13bac:	00014e09 	.word	0x00014e09
   13bb0:	00014e49 	.word	0x00014e49
   13bb4:	20000d98 	.word	0x20000d98
   13bb8:	00014f75 	.word	0x00014f75
   13bbc:	00016b29 	.word	0x00016b29

00013bc0 <ldexpf>:
   13bc0:	b570      	push	{r4, r5, r6, lr}
   13bc2:	1c04      	adds	r4, r0, #0
   13bc4:	000d      	movs	r5, r1
   13bc6:	f000 f889 	bl	13cdc <finitef>
   13bca:	2800      	cmp	r0, #0
   13bcc:	d005      	beq.n	13bda <ldexpf+0x1a>
   13bce:	2100      	movs	r1, #0
   13bd0:	1c20      	adds	r0, r4, #0
   13bd2:	f000 fa4d 	bl	14070 <__aeabi_fcmpeq>
   13bd6:	2800      	cmp	r0, #0
   13bd8:	d001      	beq.n	13bde <ldexpf+0x1e>
   13bda:	1c20      	adds	r0, r4, #0
   13bdc:	bd70      	pop	{r4, r5, r6, pc}
   13bde:	1c20      	adds	r0, r4, #0
   13be0:	0029      	movs	r1, r5
   13be2:	f000 f811 	bl	13c08 <scalbnf>
   13be6:	1c04      	adds	r4, r0, #0
   13be8:	f000 f878 	bl	13cdc <finitef>
   13bec:	2800      	cmp	r0, #0
   13bee:	d005      	beq.n	13bfc <ldexpf+0x3c>
   13bf0:	2100      	movs	r1, #0
   13bf2:	1c20      	adds	r0, r4, #0
   13bf4:	f000 fa3c 	bl	14070 <__aeabi_fcmpeq>
   13bf8:	2800      	cmp	r0, #0
   13bfa:	d0ee      	beq.n	13bda <ldexpf+0x1a>
   13bfc:	f003 f83c 	bl	16c78 <__errno>
   13c00:	2322      	movs	r3, #34	; 0x22
   13c02:	6003      	str	r3, [r0, #0]
   13c04:	e7e9      	b.n	13bda <ldexpf+0x1a>
   13c06:	46c0      	nop			; (mov r8, r8)

00013c08 <scalbnf>:
   13c08:	0043      	lsls	r3, r0, #1
   13c0a:	b570      	push	{r4, r5, r6, lr}
   13c0c:	1c02      	adds	r2, r0, #0
   13c0e:	000c      	movs	r4, r1
   13c10:	0005      	movs	r5, r0
   13c12:	0859      	lsrs	r1, r3, #1
   13c14:	d00f      	beq.n	13c36 <scalbnf+0x2e>
   13c16:	4e27      	ldr	r6, [pc, #156]	; (13cb4 <scalbnf+0xac>)
   13c18:	42b1      	cmp	r1, r6
   13c1a:	d80d      	bhi.n	13c38 <scalbnf+0x30>
   13c1c:	4826      	ldr	r0, [pc, #152]	; (13cb8 <scalbnf+0xb0>)
   13c1e:	4281      	cmp	r1, r0
   13c20:	d90e      	bls.n	13c40 <scalbnf+0x38>
   13c22:	0e1b      	lsrs	r3, r3, #24
   13c24:	191b      	adds	r3, r3, r4
   13c26:	2bfe      	cmp	r3, #254	; 0xfe
   13c28:	dc2a      	bgt.n	13c80 <scalbnf+0x78>
   13c2a:	2b00      	cmp	r3, #0
   13c2c:	dd16      	ble.n	13c5c <scalbnf+0x54>
   13c2e:	4823      	ldr	r0, [pc, #140]	; (13cbc <scalbnf+0xb4>)
   13c30:	05db      	lsls	r3, r3, #23
   13c32:	4028      	ands	r0, r5
   13c34:	4318      	orrs	r0, r3
   13c36:	bd70      	pop	{r4, r5, r6, pc}
   13c38:	1c01      	adds	r1, r0, #0
   13c3a:	f000 faa7 	bl	1418c <__aeabi_fadd>
   13c3e:	e7fa      	b.n	13c36 <scalbnf+0x2e>
   13c40:	2198      	movs	r1, #152	; 0x98
   13c42:	1c10      	adds	r0, r2, #0
   13c44:	05c9      	lsls	r1, r1, #23
   13c46:	f000 fe23 	bl	14890 <__aeabi_fmul>
   13c4a:	4b1d      	ldr	r3, [pc, #116]	; (13cc0 <scalbnf+0xb8>)
   13c4c:	1c02      	adds	r2, r0, #0
   13c4e:	429c      	cmp	r4, r3
   13c50:	db12      	blt.n	13c78 <scalbnf+0x70>
   13c52:	0043      	lsls	r3, r0, #1
   13c54:	0e1b      	lsrs	r3, r3, #24
   13c56:	0005      	movs	r5, r0
   13c58:	3b19      	subs	r3, #25
   13c5a:	e7e3      	b.n	13c24 <scalbnf+0x1c>
   13c5c:	0019      	movs	r1, r3
   13c5e:	3116      	adds	r1, #22
   13c60:	da16      	bge.n	13c90 <scalbnf+0x88>
   13c62:	4b18      	ldr	r3, [pc, #96]	; (13cc4 <scalbnf+0xbc>)
   13c64:	1c11      	adds	r1, r2, #0
   13c66:	429c      	cmp	r4, r3
   13c68:	dd1c      	ble.n	13ca4 <scalbnf+0x9c>
   13c6a:	4817      	ldr	r0, [pc, #92]	; (13cc8 <scalbnf+0xc0>)
   13c6c:	f000 f830 	bl	13cd0 <copysignf>
   13c70:	4915      	ldr	r1, [pc, #84]	; (13cc8 <scalbnf+0xc0>)
   13c72:	f000 fe0d 	bl	14890 <__aeabi_fmul>
   13c76:	e7de      	b.n	13c36 <scalbnf+0x2e>
   13c78:	4914      	ldr	r1, [pc, #80]	; (13ccc <scalbnf+0xc4>)
   13c7a:	f000 fe09 	bl	14890 <__aeabi_fmul>
   13c7e:	e7da      	b.n	13c36 <scalbnf+0x2e>
   13c80:	1c11      	adds	r1, r2, #0
   13c82:	4811      	ldr	r0, [pc, #68]	; (13cc8 <scalbnf+0xc0>)
   13c84:	f000 f824 	bl	13cd0 <copysignf>
   13c88:	490f      	ldr	r1, [pc, #60]	; (13cc8 <scalbnf+0xc0>)
   13c8a:	f000 fe01 	bl	14890 <__aeabi_fmul>
   13c8e:	e7d2      	b.n	13c36 <scalbnf+0x2e>
   13c90:	21cc      	movs	r1, #204	; 0xcc
   13c92:	3319      	adds	r3, #25
   13c94:	05d8      	lsls	r0, r3, #23
   13c96:	4b09      	ldr	r3, [pc, #36]	; (13cbc <scalbnf+0xb4>)
   13c98:	0589      	lsls	r1, r1, #22
   13c9a:	401d      	ands	r5, r3
   13c9c:	4328      	orrs	r0, r5
   13c9e:	f000 fdf7 	bl	14890 <__aeabi_fmul>
   13ca2:	e7c8      	b.n	13c36 <scalbnf+0x2e>
   13ca4:	4809      	ldr	r0, [pc, #36]	; (13ccc <scalbnf+0xc4>)
   13ca6:	f000 f813 	bl	13cd0 <copysignf>
   13caa:	4908      	ldr	r1, [pc, #32]	; (13ccc <scalbnf+0xc4>)
   13cac:	f000 fdf0 	bl	14890 <__aeabi_fmul>
   13cb0:	e7c1      	b.n	13c36 <scalbnf+0x2e>
   13cb2:	46c0      	nop			; (mov r8, r8)
   13cb4:	7f7fffff 	.word	0x7f7fffff
   13cb8:	007fffff 	.word	0x007fffff
   13cbc:	807fffff 	.word	0x807fffff
   13cc0:	ffff3cb0 	.word	0xffff3cb0
   13cc4:	0000c350 	.word	0x0000c350
   13cc8:	7149f2ca 	.word	0x7149f2ca
   13ccc:	0da24260 	.word	0x0da24260

00013cd0 <copysignf>:
   13cd0:	0040      	lsls	r0, r0, #1
   13cd2:	0fc9      	lsrs	r1, r1, #31
   13cd4:	07c9      	lsls	r1, r1, #31
   13cd6:	0840      	lsrs	r0, r0, #1
   13cd8:	4308      	orrs	r0, r1
   13cda:	4770      	bx	lr

00013cdc <finitef>:
   13cdc:	0043      	lsls	r3, r0, #1
   13cde:	2000      	movs	r0, #0
   13ce0:	4a02      	ldr	r2, [pc, #8]	; (13cec <finitef+0x10>)
   13ce2:	085b      	lsrs	r3, r3, #1
   13ce4:	429a      	cmp	r2, r3
   13ce6:	4140      	adcs	r0, r0
   13ce8:	4770      	bx	lr
   13cea:	46c0      	nop			; (mov r8, r8)
   13cec:	7f7fffff 	.word	0x7f7fffff

00013cf0 <__udivsi3>:
   13cf0:	2200      	movs	r2, #0
   13cf2:	0843      	lsrs	r3, r0, #1
   13cf4:	428b      	cmp	r3, r1
   13cf6:	d374      	bcc.n	13de2 <__udivsi3+0xf2>
   13cf8:	0903      	lsrs	r3, r0, #4
   13cfa:	428b      	cmp	r3, r1
   13cfc:	d35f      	bcc.n	13dbe <__udivsi3+0xce>
   13cfe:	0a03      	lsrs	r3, r0, #8
   13d00:	428b      	cmp	r3, r1
   13d02:	d344      	bcc.n	13d8e <__udivsi3+0x9e>
   13d04:	0b03      	lsrs	r3, r0, #12
   13d06:	428b      	cmp	r3, r1
   13d08:	d328      	bcc.n	13d5c <__udivsi3+0x6c>
   13d0a:	0c03      	lsrs	r3, r0, #16
   13d0c:	428b      	cmp	r3, r1
   13d0e:	d30d      	bcc.n	13d2c <__udivsi3+0x3c>
   13d10:	22ff      	movs	r2, #255	; 0xff
   13d12:	0209      	lsls	r1, r1, #8
   13d14:	ba12      	rev	r2, r2
   13d16:	0c03      	lsrs	r3, r0, #16
   13d18:	428b      	cmp	r3, r1
   13d1a:	d302      	bcc.n	13d22 <__udivsi3+0x32>
   13d1c:	1212      	asrs	r2, r2, #8
   13d1e:	0209      	lsls	r1, r1, #8
   13d20:	d065      	beq.n	13dee <__udivsi3+0xfe>
   13d22:	0b03      	lsrs	r3, r0, #12
   13d24:	428b      	cmp	r3, r1
   13d26:	d319      	bcc.n	13d5c <__udivsi3+0x6c>
   13d28:	e000      	b.n	13d2c <__udivsi3+0x3c>
   13d2a:	0a09      	lsrs	r1, r1, #8
   13d2c:	0bc3      	lsrs	r3, r0, #15
   13d2e:	428b      	cmp	r3, r1
   13d30:	d301      	bcc.n	13d36 <__udivsi3+0x46>
   13d32:	03cb      	lsls	r3, r1, #15
   13d34:	1ac0      	subs	r0, r0, r3
   13d36:	4152      	adcs	r2, r2
   13d38:	0b83      	lsrs	r3, r0, #14
   13d3a:	428b      	cmp	r3, r1
   13d3c:	d301      	bcc.n	13d42 <__udivsi3+0x52>
   13d3e:	038b      	lsls	r3, r1, #14
   13d40:	1ac0      	subs	r0, r0, r3
   13d42:	4152      	adcs	r2, r2
   13d44:	0b43      	lsrs	r3, r0, #13
   13d46:	428b      	cmp	r3, r1
   13d48:	d301      	bcc.n	13d4e <__udivsi3+0x5e>
   13d4a:	034b      	lsls	r3, r1, #13
   13d4c:	1ac0      	subs	r0, r0, r3
   13d4e:	4152      	adcs	r2, r2
   13d50:	0b03      	lsrs	r3, r0, #12
   13d52:	428b      	cmp	r3, r1
   13d54:	d301      	bcc.n	13d5a <__udivsi3+0x6a>
   13d56:	030b      	lsls	r3, r1, #12
   13d58:	1ac0      	subs	r0, r0, r3
   13d5a:	4152      	adcs	r2, r2
   13d5c:	0ac3      	lsrs	r3, r0, #11
   13d5e:	428b      	cmp	r3, r1
   13d60:	d301      	bcc.n	13d66 <__udivsi3+0x76>
   13d62:	02cb      	lsls	r3, r1, #11
   13d64:	1ac0      	subs	r0, r0, r3
   13d66:	4152      	adcs	r2, r2
   13d68:	0a83      	lsrs	r3, r0, #10
   13d6a:	428b      	cmp	r3, r1
   13d6c:	d301      	bcc.n	13d72 <__udivsi3+0x82>
   13d6e:	028b      	lsls	r3, r1, #10
   13d70:	1ac0      	subs	r0, r0, r3
   13d72:	4152      	adcs	r2, r2
   13d74:	0a43      	lsrs	r3, r0, #9
   13d76:	428b      	cmp	r3, r1
   13d78:	d301      	bcc.n	13d7e <__udivsi3+0x8e>
   13d7a:	024b      	lsls	r3, r1, #9
   13d7c:	1ac0      	subs	r0, r0, r3
   13d7e:	4152      	adcs	r2, r2
   13d80:	0a03      	lsrs	r3, r0, #8
   13d82:	428b      	cmp	r3, r1
   13d84:	d301      	bcc.n	13d8a <__udivsi3+0x9a>
   13d86:	020b      	lsls	r3, r1, #8
   13d88:	1ac0      	subs	r0, r0, r3
   13d8a:	4152      	adcs	r2, r2
   13d8c:	d2cd      	bcs.n	13d2a <__udivsi3+0x3a>
   13d8e:	09c3      	lsrs	r3, r0, #7
   13d90:	428b      	cmp	r3, r1
   13d92:	d301      	bcc.n	13d98 <__udivsi3+0xa8>
   13d94:	01cb      	lsls	r3, r1, #7
   13d96:	1ac0      	subs	r0, r0, r3
   13d98:	4152      	adcs	r2, r2
   13d9a:	0983      	lsrs	r3, r0, #6
   13d9c:	428b      	cmp	r3, r1
   13d9e:	d301      	bcc.n	13da4 <__udivsi3+0xb4>
   13da0:	018b      	lsls	r3, r1, #6
   13da2:	1ac0      	subs	r0, r0, r3
   13da4:	4152      	adcs	r2, r2
   13da6:	0943      	lsrs	r3, r0, #5
   13da8:	428b      	cmp	r3, r1
   13daa:	d301      	bcc.n	13db0 <__udivsi3+0xc0>
   13dac:	014b      	lsls	r3, r1, #5
   13dae:	1ac0      	subs	r0, r0, r3
   13db0:	4152      	adcs	r2, r2
   13db2:	0903      	lsrs	r3, r0, #4
   13db4:	428b      	cmp	r3, r1
   13db6:	d301      	bcc.n	13dbc <__udivsi3+0xcc>
   13db8:	010b      	lsls	r3, r1, #4
   13dba:	1ac0      	subs	r0, r0, r3
   13dbc:	4152      	adcs	r2, r2
   13dbe:	08c3      	lsrs	r3, r0, #3
   13dc0:	428b      	cmp	r3, r1
   13dc2:	d301      	bcc.n	13dc8 <__udivsi3+0xd8>
   13dc4:	00cb      	lsls	r3, r1, #3
   13dc6:	1ac0      	subs	r0, r0, r3
   13dc8:	4152      	adcs	r2, r2
   13dca:	0883      	lsrs	r3, r0, #2
   13dcc:	428b      	cmp	r3, r1
   13dce:	d301      	bcc.n	13dd4 <__udivsi3+0xe4>
   13dd0:	008b      	lsls	r3, r1, #2
   13dd2:	1ac0      	subs	r0, r0, r3
   13dd4:	4152      	adcs	r2, r2
   13dd6:	0843      	lsrs	r3, r0, #1
   13dd8:	428b      	cmp	r3, r1
   13dda:	d301      	bcc.n	13de0 <__udivsi3+0xf0>
   13ddc:	004b      	lsls	r3, r1, #1
   13dde:	1ac0      	subs	r0, r0, r3
   13de0:	4152      	adcs	r2, r2
   13de2:	1a41      	subs	r1, r0, r1
   13de4:	d200      	bcs.n	13de8 <__udivsi3+0xf8>
   13de6:	4601      	mov	r1, r0
   13de8:	4152      	adcs	r2, r2
   13dea:	4610      	mov	r0, r2
   13dec:	4770      	bx	lr
   13dee:	e7ff      	b.n	13df0 <__udivsi3+0x100>
   13df0:	b501      	push	{r0, lr}
   13df2:	2000      	movs	r0, #0
   13df4:	f000 f8f0 	bl	13fd8 <__aeabi_idiv0>
   13df8:	bd02      	pop	{r1, pc}
   13dfa:	46c0      	nop			; (mov r8, r8)

00013dfc <__aeabi_uidivmod>:
   13dfc:	2900      	cmp	r1, #0
   13dfe:	d0f7      	beq.n	13df0 <__udivsi3+0x100>
   13e00:	e776      	b.n	13cf0 <__udivsi3>
   13e02:	4770      	bx	lr

00013e04 <__divsi3>:
   13e04:	4603      	mov	r3, r0
   13e06:	430b      	orrs	r3, r1
   13e08:	d47f      	bmi.n	13f0a <__divsi3+0x106>
   13e0a:	2200      	movs	r2, #0
   13e0c:	0843      	lsrs	r3, r0, #1
   13e0e:	428b      	cmp	r3, r1
   13e10:	d374      	bcc.n	13efc <__divsi3+0xf8>
   13e12:	0903      	lsrs	r3, r0, #4
   13e14:	428b      	cmp	r3, r1
   13e16:	d35f      	bcc.n	13ed8 <__divsi3+0xd4>
   13e18:	0a03      	lsrs	r3, r0, #8
   13e1a:	428b      	cmp	r3, r1
   13e1c:	d344      	bcc.n	13ea8 <__divsi3+0xa4>
   13e1e:	0b03      	lsrs	r3, r0, #12
   13e20:	428b      	cmp	r3, r1
   13e22:	d328      	bcc.n	13e76 <__divsi3+0x72>
   13e24:	0c03      	lsrs	r3, r0, #16
   13e26:	428b      	cmp	r3, r1
   13e28:	d30d      	bcc.n	13e46 <__divsi3+0x42>
   13e2a:	22ff      	movs	r2, #255	; 0xff
   13e2c:	0209      	lsls	r1, r1, #8
   13e2e:	ba12      	rev	r2, r2
   13e30:	0c03      	lsrs	r3, r0, #16
   13e32:	428b      	cmp	r3, r1
   13e34:	d302      	bcc.n	13e3c <__divsi3+0x38>
   13e36:	1212      	asrs	r2, r2, #8
   13e38:	0209      	lsls	r1, r1, #8
   13e3a:	d065      	beq.n	13f08 <__divsi3+0x104>
   13e3c:	0b03      	lsrs	r3, r0, #12
   13e3e:	428b      	cmp	r3, r1
   13e40:	d319      	bcc.n	13e76 <__divsi3+0x72>
   13e42:	e000      	b.n	13e46 <__divsi3+0x42>
   13e44:	0a09      	lsrs	r1, r1, #8
   13e46:	0bc3      	lsrs	r3, r0, #15
   13e48:	428b      	cmp	r3, r1
   13e4a:	d301      	bcc.n	13e50 <__divsi3+0x4c>
   13e4c:	03cb      	lsls	r3, r1, #15
   13e4e:	1ac0      	subs	r0, r0, r3
   13e50:	4152      	adcs	r2, r2
   13e52:	0b83      	lsrs	r3, r0, #14
   13e54:	428b      	cmp	r3, r1
   13e56:	d301      	bcc.n	13e5c <__divsi3+0x58>
   13e58:	038b      	lsls	r3, r1, #14
   13e5a:	1ac0      	subs	r0, r0, r3
   13e5c:	4152      	adcs	r2, r2
   13e5e:	0b43      	lsrs	r3, r0, #13
   13e60:	428b      	cmp	r3, r1
   13e62:	d301      	bcc.n	13e68 <__divsi3+0x64>
   13e64:	034b      	lsls	r3, r1, #13
   13e66:	1ac0      	subs	r0, r0, r3
   13e68:	4152      	adcs	r2, r2
   13e6a:	0b03      	lsrs	r3, r0, #12
   13e6c:	428b      	cmp	r3, r1
   13e6e:	d301      	bcc.n	13e74 <__divsi3+0x70>
   13e70:	030b      	lsls	r3, r1, #12
   13e72:	1ac0      	subs	r0, r0, r3
   13e74:	4152      	adcs	r2, r2
   13e76:	0ac3      	lsrs	r3, r0, #11
   13e78:	428b      	cmp	r3, r1
   13e7a:	d301      	bcc.n	13e80 <__divsi3+0x7c>
   13e7c:	02cb      	lsls	r3, r1, #11
   13e7e:	1ac0      	subs	r0, r0, r3
   13e80:	4152      	adcs	r2, r2
   13e82:	0a83      	lsrs	r3, r0, #10
   13e84:	428b      	cmp	r3, r1
   13e86:	d301      	bcc.n	13e8c <__divsi3+0x88>
   13e88:	028b      	lsls	r3, r1, #10
   13e8a:	1ac0      	subs	r0, r0, r3
   13e8c:	4152      	adcs	r2, r2
   13e8e:	0a43      	lsrs	r3, r0, #9
   13e90:	428b      	cmp	r3, r1
   13e92:	d301      	bcc.n	13e98 <__divsi3+0x94>
   13e94:	024b      	lsls	r3, r1, #9
   13e96:	1ac0      	subs	r0, r0, r3
   13e98:	4152      	adcs	r2, r2
   13e9a:	0a03      	lsrs	r3, r0, #8
   13e9c:	428b      	cmp	r3, r1
   13e9e:	d301      	bcc.n	13ea4 <__divsi3+0xa0>
   13ea0:	020b      	lsls	r3, r1, #8
   13ea2:	1ac0      	subs	r0, r0, r3
   13ea4:	4152      	adcs	r2, r2
   13ea6:	d2cd      	bcs.n	13e44 <__divsi3+0x40>
   13ea8:	09c3      	lsrs	r3, r0, #7
   13eaa:	428b      	cmp	r3, r1
   13eac:	d301      	bcc.n	13eb2 <__divsi3+0xae>
   13eae:	01cb      	lsls	r3, r1, #7
   13eb0:	1ac0      	subs	r0, r0, r3
   13eb2:	4152      	adcs	r2, r2
   13eb4:	0983      	lsrs	r3, r0, #6
   13eb6:	428b      	cmp	r3, r1
   13eb8:	d301      	bcc.n	13ebe <__divsi3+0xba>
   13eba:	018b      	lsls	r3, r1, #6
   13ebc:	1ac0      	subs	r0, r0, r3
   13ebe:	4152      	adcs	r2, r2
   13ec0:	0943      	lsrs	r3, r0, #5
   13ec2:	428b      	cmp	r3, r1
   13ec4:	d301      	bcc.n	13eca <__divsi3+0xc6>
   13ec6:	014b      	lsls	r3, r1, #5
   13ec8:	1ac0      	subs	r0, r0, r3
   13eca:	4152      	adcs	r2, r2
   13ecc:	0903      	lsrs	r3, r0, #4
   13ece:	428b      	cmp	r3, r1
   13ed0:	d301      	bcc.n	13ed6 <__divsi3+0xd2>
   13ed2:	010b      	lsls	r3, r1, #4
   13ed4:	1ac0      	subs	r0, r0, r3
   13ed6:	4152      	adcs	r2, r2
   13ed8:	08c3      	lsrs	r3, r0, #3
   13eda:	428b      	cmp	r3, r1
   13edc:	d301      	bcc.n	13ee2 <__divsi3+0xde>
   13ede:	00cb      	lsls	r3, r1, #3
   13ee0:	1ac0      	subs	r0, r0, r3
   13ee2:	4152      	adcs	r2, r2
   13ee4:	0883      	lsrs	r3, r0, #2
   13ee6:	428b      	cmp	r3, r1
   13ee8:	d301      	bcc.n	13eee <__divsi3+0xea>
   13eea:	008b      	lsls	r3, r1, #2
   13eec:	1ac0      	subs	r0, r0, r3
   13eee:	4152      	adcs	r2, r2
   13ef0:	0843      	lsrs	r3, r0, #1
   13ef2:	428b      	cmp	r3, r1
   13ef4:	d301      	bcc.n	13efa <__divsi3+0xf6>
   13ef6:	004b      	lsls	r3, r1, #1
   13ef8:	1ac0      	subs	r0, r0, r3
   13efa:	4152      	adcs	r2, r2
   13efc:	1a41      	subs	r1, r0, r1
   13efe:	d200      	bcs.n	13f02 <__divsi3+0xfe>
   13f00:	4601      	mov	r1, r0
   13f02:	4152      	adcs	r2, r2
   13f04:	4610      	mov	r0, r2
   13f06:	4770      	bx	lr
   13f08:	e05d      	b.n	13fc6 <__divsi3+0x1c2>
   13f0a:	0fca      	lsrs	r2, r1, #31
   13f0c:	d000      	beq.n	13f10 <__divsi3+0x10c>
   13f0e:	4249      	negs	r1, r1
   13f10:	1003      	asrs	r3, r0, #32
   13f12:	d300      	bcc.n	13f16 <__divsi3+0x112>
   13f14:	4240      	negs	r0, r0
   13f16:	4053      	eors	r3, r2
   13f18:	2200      	movs	r2, #0
   13f1a:	469c      	mov	ip, r3
   13f1c:	0903      	lsrs	r3, r0, #4
   13f1e:	428b      	cmp	r3, r1
   13f20:	d32d      	bcc.n	13f7e <__divsi3+0x17a>
   13f22:	0a03      	lsrs	r3, r0, #8
   13f24:	428b      	cmp	r3, r1
   13f26:	d312      	bcc.n	13f4e <__divsi3+0x14a>
   13f28:	22fc      	movs	r2, #252	; 0xfc
   13f2a:	0189      	lsls	r1, r1, #6
   13f2c:	ba12      	rev	r2, r2
   13f2e:	0a03      	lsrs	r3, r0, #8
   13f30:	428b      	cmp	r3, r1
   13f32:	d30c      	bcc.n	13f4e <__divsi3+0x14a>
   13f34:	0189      	lsls	r1, r1, #6
   13f36:	1192      	asrs	r2, r2, #6
   13f38:	428b      	cmp	r3, r1
   13f3a:	d308      	bcc.n	13f4e <__divsi3+0x14a>
   13f3c:	0189      	lsls	r1, r1, #6
   13f3e:	1192      	asrs	r2, r2, #6
   13f40:	428b      	cmp	r3, r1
   13f42:	d304      	bcc.n	13f4e <__divsi3+0x14a>
   13f44:	0189      	lsls	r1, r1, #6
   13f46:	d03a      	beq.n	13fbe <__divsi3+0x1ba>
   13f48:	1192      	asrs	r2, r2, #6
   13f4a:	e000      	b.n	13f4e <__divsi3+0x14a>
   13f4c:	0989      	lsrs	r1, r1, #6
   13f4e:	09c3      	lsrs	r3, r0, #7
   13f50:	428b      	cmp	r3, r1
   13f52:	d301      	bcc.n	13f58 <__divsi3+0x154>
   13f54:	01cb      	lsls	r3, r1, #7
   13f56:	1ac0      	subs	r0, r0, r3
   13f58:	4152      	adcs	r2, r2
   13f5a:	0983      	lsrs	r3, r0, #6
   13f5c:	428b      	cmp	r3, r1
   13f5e:	d301      	bcc.n	13f64 <__divsi3+0x160>
   13f60:	018b      	lsls	r3, r1, #6
   13f62:	1ac0      	subs	r0, r0, r3
   13f64:	4152      	adcs	r2, r2
   13f66:	0943      	lsrs	r3, r0, #5
   13f68:	428b      	cmp	r3, r1
   13f6a:	d301      	bcc.n	13f70 <__divsi3+0x16c>
   13f6c:	014b      	lsls	r3, r1, #5
   13f6e:	1ac0      	subs	r0, r0, r3
   13f70:	4152      	adcs	r2, r2
   13f72:	0903      	lsrs	r3, r0, #4
   13f74:	428b      	cmp	r3, r1
   13f76:	d301      	bcc.n	13f7c <__divsi3+0x178>
   13f78:	010b      	lsls	r3, r1, #4
   13f7a:	1ac0      	subs	r0, r0, r3
   13f7c:	4152      	adcs	r2, r2
   13f7e:	08c3      	lsrs	r3, r0, #3
   13f80:	428b      	cmp	r3, r1
   13f82:	d301      	bcc.n	13f88 <__divsi3+0x184>
   13f84:	00cb      	lsls	r3, r1, #3
   13f86:	1ac0      	subs	r0, r0, r3
   13f88:	4152      	adcs	r2, r2
   13f8a:	0883      	lsrs	r3, r0, #2
   13f8c:	428b      	cmp	r3, r1
   13f8e:	d301      	bcc.n	13f94 <__divsi3+0x190>
   13f90:	008b      	lsls	r3, r1, #2
   13f92:	1ac0      	subs	r0, r0, r3
   13f94:	4152      	adcs	r2, r2
   13f96:	d2d9      	bcs.n	13f4c <__divsi3+0x148>
   13f98:	0843      	lsrs	r3, r0, #1
   13f9a:	428b      	cmp	r3, r1
   13f9c:	d301      	bcc.n	13fa2 <__divsi3+0x19e>
   13f9e:	004b      	lsls	r3, r1, #1
   13fa0:	1ac0      	subs	r0, r0, r3
   13fa2:	4152      	adcs	r2, r2
   13fa4:	1a41      	subs	r1, r0, r1
   13fa6:	d200      	bcs.n	13faa <__divsi3+0x1a6>
   13fa8:	4601      	mov	r1, r0
   13faa:	4663      	mov	r3, ip
   13fac:	4152      	adcs	r2, r2
   13fae:	105b      	asrs	r3, r3, #1
   13fb0:	4610      	mov	r0, r2
   13fb2:	d301      	bcc.n	13fb8 <__divsi3+0x1b4>
   13fb4:	4240      	negs	r0, r0
   13fb6:	2b00      	cmp	r3, #0
   13fb8:	d500      	bpl.n	13fbc <__divsi3+0x1b8>
   13fba:	4249      	negs	r1, r1
   13fbc:	4770      	bx	lr
   13fbe:	4663      	mov	r3, ip
   13fc0:	105b      	asrs	r3, r3, #1
   13fc2:	d300      	bcc.n	13fc6 <__divsi3+0x1c2>
   13fc4:	4240      	negs	r0, r0
   13fc6:	b501      	push	{r0, lr}
   13fc8:	2000      	movs	r0, #0
   13fca:	f000 f805 	bl	13fd8 <__aeabi_idiv0>
   13fce:	bd02      	pop	{r1, pc}

00013fd0 <__aeabi_idivmod>:
   13fd0:	2900      	cmp	r1, #0
   13fd2:	d0f8      	beq.n	13fc6 <__divsi3+0x1c2>
   13fd4:	e716      	b.n	13e04 <__divsi3>
   13fd6:	4770      	bx	lr

00013fd8 <__aeabi_idiv0>:
   13fd8:	4770      	bx	lr
   13fda:	46c0      	nop			; (mov r8, r8)

00013fdc <__aeabi_cdrcmple>:
   13fdc:	4684      	mov	ip, r0
   13fde:	1c10      	adds	r0, r2, #0
   13fe0:	4662      	mov	r2, ip
   13fe2:	468c      	mov	ip, r1
   13fe4:	1c19      	adds	r1, r3, #0
   13fe6:	4663      	mov	r3, ip
   13fe8:	e000      	b.n	13fec <__aeabi_cdcmpeq>
   13fea:	46c0      	nop			; (mov r8, r8)

00013fec <__aeabi_cdcmpeq>:
   13fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13fee:	f001 fea3 	bl	15d38 <__ledf2>
   13ff2:	2800      	cmp	r0, #0
   13ff4:	d401      	bmi.n	13ffa <__aeabi_cdcmpeq+0xe>
   13ff6:	2100      	movs	r1, #0
   13ff8:	42c8      	cmn	r0, r1
   13ffa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013ffc <__aeabi_dcmpeq>:
   13ffc:	b510      	push	{r4, lr}
   13ffe:	f001 fdfd 	bl	15bfc <__eqdf2>
   14002:	4240      	negs	r0, r0
   14004:	3001      	adds	r0, #1
   14006:	bd10      	pop	{r4, pc}

00014008 <__aeabi_dcmplt>:
   14008:	b510      	push	{r4, lr}
   1400a:	f001 fe95 	bl	15d38 <__ledf2>
   1400e:	2800      	cmp	r0, #0
   14010:	db01      	blt.n	14016 <__aeabi_dcmplt+0xe>
   14012:	2000      	movs	r0, #0
   14014:	bd10      	pop	{r4, pc}
   14016:	2001      	movs	r0, #1
   14018:	bd10      	pop	{r4, pc}
   1401a:	46c0      	nop			; (mov r8, r8)

0001401c <__aeabi_dcmple>:
   1401c:	b510      	push	{r4, lr}
   1401e:	f001 fe8b 	bl	15d38 <__ledf2>
   14022:	2800      	cmp	r0, #0
   14024:	dd01      	ble.n	1402a <__aeabi_dcmple+0xe>
   14026:	2000      	movs	r0, #0
   14028:	bd10      	pop	{r4, pc}
   1402a:	2001      	movs	r0, #1
   1402c:	bd10      	pop	{r4, pc}
   1402e:	46c0      	nop			; (mov r8, r8)

00014030 <__aeabi_dcmpgt>:
   14030:	b510      	push	{r4, lr}
   14032:	f001 fe1d 	bl	15c70 <__gedf2>
   14036:	2800      	cmp	r0, #0
   14038:	dc01      	bgt.n	1403e <__aeabi_dcmpgt+0xe>
   1403a:	2000      	movs	r0, #0
   1403c:	bd10      	pop	{r4, pc}
   1403e:	2001      	movs	r0, #1
   14040:	bd10      	pop	{r4, pc}
   14042:	46c0      	nop			; (mov r8, r8)

00014044 <__aeabi_dcmpge>:
   14044:	b510      	push	{r4, lr}
   14046:	f001 fe13 	bl	15c70 <__gedf2>
   1404a:	2800      	cmp	r0, #0
   1404c:	da01      	bge.n	14052 <__aeabi_dcmpge+0xe>
   1404e:	2000      	movs	r0, #0
   14050:	bd10      	pop	{r4, pc}
   14052:	2001      	movs	r0, #1
   14054:	bd10      	pop	{r4, pc}
   14056:	46c0      	nop			; (mov r8, r8)

00014058 <__aeabi_cfrcmple>:
   14058:	4684      	mov	ip, r0
   1405a:	1c08      	adds	r0, r1, #0
   1405c:	4661      	mov	r1, ip
   1405e:	e7ff      	b.n	14060 <__aeabi_cfcmpeq>

00014060 <__aeabi_cfcmpeq>:
   14060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14062:	f000 fbd3 	bl	1480c <__lesf2>
   14066:	2800      	cmp	r0, #0
   14068:	d401      	bmi.n	1406e <__aeabi_cfcmpeq+0xe>
   1406a:	2100      	movs	r1, #0
   1406c:	42c8      	cmn	r0, r1
   1406e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014070 <__aeabi_fcmpeq>:
   14070:	b510      	push	{r4, lr}
   14072:	f000 fb65 	bl	14740 <__eqsf2>
   14076:	4240      	negs	r0, r0
   14078:	3001      	adds	r0, #1
   1407a:	bd10      	pop	{r4, pc}

0001407c <__aeabi_fcmplt>:
   1407c:	b510      	push	{r4, lr}
   1407e:	f000 fbc5 	bl	1480c <__lesf2>
   14082:	2800      	cmp	r0, #0
   14084:	db01      	blt.n	1408a <__aeabi_fcmplt+0xe>
   14086:	2000      	movs	r0, #0
   14088:	bd10      	pop	{r4, pc}
   1408a:	2001      	movs	r0, #1
   1408c:	bd10      	pop	{r4, pc}
   1408e:	46c0      	nop			; (mov r8, r8)

00014090 <__aeabi_fcmple>:
   14090:	b510      	push	{r4, lr}
   14092:	f000 fbbb 	bl	1480c <__lesf2>
   14096:	2800      	cmp	r0, #0
   14098:	dd01      	ble.n	1409e <__aeabi_fcmple+0xe>
   1409a:	2000      	movs	r0, #0
   1409c:	bd10      	pop	{r4, pc}
   1409e:	2001      	movs	r0, #1
   140a0:	bd10      	pop	{r4, pc}
   140a2:	46c0      	nop			; (mov r8, r8)

000140a4 <__aeabi_fcmpgt>:
   140a4:	b510      	push	{r4, lr}
   140a6:	f000 fb71 	bl	1478c <__gesf2>
   140aa:	2800      	cmp	r0, #0
   140ac:	dc01      	bgt.n	140b2 <__aeabi_fcmpgt+0xe>
   140ae:	2000      	movs	r0, #0
   140b0:	bd10      	pop	{r4, pc}
   140b2:	2001      	movs	r0, #1
   140b4:	bd10      	pop	{r4, pc}
   140b6:	46c0      	nop			; (mov r8, r8)

000140b8 <__aeabi_fcmpge>:
   140b8:	b510      	push	{r4, lr}
   140ba:	f000 fb67 	bl	1478c <__gesf2>
   140be:	2800      	cmp	r0, #0
   140c0:	da01      	bge.n	140c6 <__aeabi_fcmpge+0xe>
   140c2:	2000      	movs	r0, #0
   140c4:	bd10      	pop	{r4, pc}
   140c6:	2001      	movs	r0, #1
   140c8:	bd10      	pop	{r4, pc}
   140ca:	46c0      	nop			; (mov r8, r8)

000140cc <__aeabi_lmul>:
   140cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   140ce:	46ce      	mov	lr, r9
   140d0:	4647      	mov	r7, r8
   140d2:	0415      	lsls	r5, r2, #16
   140d4:	0c2d      	lsrs	r5, r5, #16
   140d6:	002e      	movs	r6, r5
   140d8:	b580      	push	{r7, lr}
   140da:	0407      	lsls	r7, r0, #16
   140dc:	0c14      	lsrs	r4, r2, #16
   140de:	0c3f      	lsrs	r7, r7, #16
   140e0:	4699      	mov	r9, r3
   140e2:	0c03      	lsrs	r3, r0, #16
   140e4:	437e      	muls	r6, r7
   140e6:	435d      	muls	r5, r3
   140e8:	4367      	muls	r7, r4
   140ea:	4363      	muls	r3, r4
   140ec:	197f      	adds	r7, r7, r5
   140ee:	0c34      	lsrs	r4, r6, #16
   140f0:	19e4      	adds	r4, r4, r7
   140f2:	469c      	mov	ip, r3
   140f4:	42a5      	cmp	r5, r4
   140f6:	d903      	bls.n	14100 <__aeabi_lmul+0x34>
   140f8:	2380      	movs	r3, #128	; 0x80
   140fa:	025b      	lsls	r3, r3, #9
   140fc:	4698      	mov	r8, r3
   140fe:	44c4      	add	ip, r8
   14100:	464b      	mov	r3, r9
   14102:	4351      	muls	r1, r2
   14104:	4343      	muls	r3, r0
   14106:	0436      	lsls	r6, r6, #16
   14108:	0c36      	lsrs	r6, r6, #16
   1410a:	0c25      	lsrs	r5, r4, #16
   1410c:	0424      	lsls	r4, r4, #16
   1410e:	4465      	add	r5, ip
   14110:	19a4      	adds	r4, r4, r6
   14112:	1859      	adds	r1, r3, r1
   14114:	1949      	adds	r1, r1, r5
   14116:	0020      	movs	r0, r4
   14118:	bc0c      	pop	{r2, r3}
   1411a:	4690      	mov	r8, r2
   1411c:	4699      	mov	r9, r3
   1411e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014120 <__aeabi_f2uiz>:
   14120:	219e      	movs	r1, #158	; 0x9e
   14122:	b510      	push	{r4, lr}
   14124:	05c9      	lsls	r1, r1, #23
   14126:	1c04      	adds	r4, r0, #0
   14128:	f7ff ffc6 	bl	140b8 <__aeabi_fcmpge>
   1412c:	2800      	cmp	r0, #0
   1412e:	d103      	bne.n	14138 <__aeabi_f2uiz+0x18>
   14130:	1c20      	adds	r0, r4, #0
   14132:	f000 fe69 	bl	14e08 <__aeabi_f2iz>
   14136:	bd10      	pop	{r4, pc}
   14138:	219e      	movs	r1, #158	; 0x9e
   1413a:	1c20      	adds	r0, r4, #0
   1413c:	05c9      	lsls	r1, r1, #23
   1413e:	f000 fcc7 	bl	14ad0 <__aeabi_fsub>
   14142:	f000 fe61 	bl	14e08 <__aeabi_f2iz>
   14146:	2380      	movs	r3, #128	; 0x80
   14148:	061b      	lsls	r3, r3, #24
   1414a:	469c      	mov	ip, r3
   1414c:	4460      	add	r0, ip
   1414e:	e7f2      	b.n	14136 <__aeabi_f2uiz+0x16>

00014150 <__aeabi_d2uiz>:
   14150:	b570      	push	{r4, r5, r6, lr}
   14152:	2200      	movs	r2, #0
   14154:	4b0c      	ldr	r3, [pc, #48]	; (14188 <__aeabi_d2uiz+0x38>)
   14156:	0004      	movs	r4, r0
   14158:	000d      	movs	r5, r1
   1415a:	f7ff ff73 	bl	14044 <__aeabi_dcmpge>
   1415e:	2800      	cmp	r0, #0
   14160:	d104      	bne.n	1416c <__aeabi_d2uiz+0x1c>
   14162:	0020      	movs	r0, r4
   14164:	0029      	movs	r1, r5
   14166:	f002 fbdf 	bl	16928 <__aeabi_d2iz>
   1416a:	bd70      	pop	{r4, r5, r6, pc}
   1416c:	4b06      	ldr	r3, [pc, #24]	; (14188 <__aeabi_d2uiz+0x38>)
   1416e:	2200      	movs	r2, #0
   14170:	0020      	movs	r0, r4
   14172:	0029      	movs	r1, r5
   14174:	f002 f8c2 	bl	162fc <__aeabi_dsub>
   14178:	f002 fbd6 	bl	16928 <__aeabi_d2iz>
   1417c:	2380      	movs	r3, #128	; 0x80
   1417e:	061b      	lsls	r3, r3, #24
   14180:	469c      	mov	ip, r3
   14182:	4460      	add	r0, ip
   14184:	e7f1      	b.n	1416a <__aeabi_d2uiz+0x1a>
   14186:	46c0      	nop			; (mov r8, r8)
   14188:	41e00000 	.word	0x41e00000

0001418c <__aeabi_fadd>:
   1418c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1418e:	46c6      	mov	lr, r8
   14190:	024e      	lsls	r6, r1, #9
   14192:	0247      	lsls	r7, r0, #9
   14194:	0a76      	lsrs	r6, r6, #9
   14196:	0a7b      	lsrs	r3, r7, #9
   14198:	0044      	lsls	r4, r0, #1
   1419a:	0fc5      	lsrs	r5, r0, #31
   1419c:	00f7      	lsls	r7, r6, #3
   1419e:	0048      	lsls	r0, r1, #1
   141a0:	4698      	mov	r8, r3
   141a2:	b500      	push	{lr}
   141a4:	0e24      	lsrs	r4, r4, #24
   141a6:	002a      	movs	r2, r5
   141a8:	00db      	lsls	r3, r3, #3
   141aa:	0e00      	lsrs	r0, r0, #24
   141ac:	0fc9      	lsrs	r1, r1, #31
   141ae:	46bc      	mov	ip, r7
   141b0:	428d      	cmp	r5, r1
   141b2:	d067      	beq.n	14284 <__aeabi_fadd+0xf8>
   141b4:	1a22      	subs	r2, r4, r0
   141b6:	2a00      	cmp	r2, #0
   141b8:	dc00      	bgt.n	141bc <__aeabi_fadd+0x30>
   141ba:	e0a5      	b.n	14308 <__aeabi_fadd+0x17c>
   141bc:	2800      	cmp	r0, #0
   141be:	d13a      	bne.n	14236 <__aeabi_fadd+0xaa>
   141c0:	2f00      	cmp	r7, #0
   141c2:	d100      	bne.n	141c6 <__aeabi_fadd+0x3a>
   141c4:	e093      	b.n	142ee <__aeabi_fadd+0x162>
   141c6:	1e51      	subs	r1, r2, #1
   141c8:	2900      	cmp	r1, #0
   141ca:	d000      	beq.n	141ce <__aeabi_fadd+0x42>
   141cc:	e0bc      	b.n	14348 <__aeabi_fadd+0x1bc>
   141ce:	2401      	movs	r4, #1
   141d0:	1bdb      	subs	r3, r3, r7
   141d2:	015a      	lsls	r2, r3, #5
   141d4:	d546      	bpl.n	14264 <__aeabi_fadd+0xd8>
   141d6:	019b      	lsls	r3, r3, #6
   141d8:	099e      	lsrs	r6, r3, #6
   141da:	0030      	movs	r0, r6
   141dc:	f002 fd2e 	bl	16c3c <__clzsi2>
   141e0:	3805      	subs	r0, #5
   141e2:	4086      	lsls	r6, r0
   141e4:	4284      	cmp	r4, r0
   141e6:	dd00      	ble.n	141ea <__aeabi_fadd+0x5e>
   141e8:	e09d      	b.n	14326 <__aeabi_fadd+0x19a>
   141ea:	1b04      	subs	r4, r0, r4
   141ec:	0032      	movs	r2, r6
   141ee:	2020      	movs	r0, #32
   141f0:	3401      	adds	r4, #1
   141f2:	40e2      	lsrs	r2, r4
   141f4:	1b04      	subs	r4, r0, r4
   141f6:	40a6      	lsls	r6, r4
   141f8:	0033      	movs	r3, r6
   141fa:	1e5e      	subs	r6, r3, #1
   141fc:	41b3      	sbcs	r3, r6
   141fe:	2400      	movs	r4, #0
   14200:	4313      	orrs	r3, r2
   14202:	075a      	lsls	r2, r3, #29
   14204:	d004      	beq.n	14210 <__aeabi_fadd+0x84>
   14206:	220f      	movs	r2, #15
   14208:	401a      	ands	r2, r3
   1420a:	2a04      	cmp	r2, #4
   1420c:	d000      	beq.n	14210 <__aeabi_fadd+0x84>
   1420e:	3304      	adds	r3, #4
   14210:	015a      	lsls	r2, r3, #5
   14212:	d529      	bpl.n	14268 <__aeabi_fadd+0xdc>
   14214:	3401      	adds	r4, #1
   14216:	2cff      	cmp	r4, #255	; 0xff
   14218:	d100      	bne.n	1421c <__aeabi_fadd+0x90>
   1421a:	e081      	b.n	14320 <__aeabi_fadd+0x194>
   1421c:	002a      	movs	r2, r5
   1421e:	019b      	lsls	r3, r3, #6
   14220:	0a5b      	lsrs	r3, r3, #9
   14222:	b2e4      	uxtb	r4, r4
   14224:	025b      	lsls	r3, r3, #9
   14226:	05e4      	lsls	r4, r4, #23
   14228:	0a58      	lsrs	r0, r3, #9
   1422a:	07d2      	lsls	r2, r2, #31
   1422c:	4320      	orrs	r0, r4
   1422e:	4310      	orrs	r0, r2
   14230:	bc04      	pop	{r2}
   14232:	4690      	mov	r8, r2
   14234:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14236:	2cff      	cmp	r4, #255	; 0xff
   14238:	d0e3      	beq.n	14202 <__aeabi_fadd+0x76>
   1423a:	2180      	movs	r1, #128	; 0x80
   1423c:	0038      	movs	r0, r7
   1423e:	04c9      	lsls	r1, r1, #19
   14240:	4308      	orrs	r0, r1
   14242:	4684      	mov	ip, r0
   14244:	2a1b      	cmp	r2, #27
   14246:	dd00      	ble.n	1424a <__aeabi_fadd+0xbe>
   14248:	e082      	b.n	14350 <__aeabi_fadd+0x1c4>
   1424a:	2020      	movs	r0, #32
   1424c:	4661      	mov	r1, ip
   1424e:	40d1      	lsrs	r1, r2
   14250:	1a82      	subs	r2, r0, r2
   14252:	4660      	mov	r0, ip
   14254:	4090      	lsls	r0, r2
   14256:	0002      	movs	r2, r0
   14258:	1e50      	subs	r0, r2, #1
   1425a:	4182      	sbcs	r2, r0
   1425c:	430a      	orrs	r2, r1
   1425e:	1a9b      	subs	r3, r3, r2
   14260:	015a      	lsls	r2, r3, #5
   14262:	d4b8      	bmi.n	141d6 <__aeabi_fadd+0x4a>
   14264:	075a      	lsls	r2, r3, #29
   14266:	d1ce      	bne.n	14206 <__aeabi_fadd+0x7a>
   14268:	08de      	lsrs	r6, r3, #3
   1426a:	002a      	movs	r2, r5
   1426c:	2cff      	cmp	r4, #255	; 0xff
   1426e:	d13a      	bne.n	142e6 <__aeabi_fadd+0x15a>
   14270:	2e00      	cmp	r6, #0
   14272:	d100      	bne.n	14276 <__aeabi_fadd+0xea>
   14274:	e0ae      	b.n	143d4 <__aeabi_fadd+0x248>
   14276:	2380      	movs	r3, #128	; 0x80
   14278:	03db      	lsls	r3, r3, #15
   1427a:	4333      	orrs	r3, r6
   1427c:	025b      	lsls	r3, r3, #9
   1427e:	0a5b      	lsrs	r3, r3, #9
   14280:	24ff      	movs	r4, #255	; 0xff
   14282:	e7cf      	b.n	14224 <__aeabi_fadd+0x98>
   14284:	1a21      	subs	r1, r4, r0
   14286:	2900      	cmp	r1, #0
   14288:	dd52      	ble.n	14330 <__aeabi_fadd+0x1a4>
   1428a:	2800      	cmp	r0, #0
   1428c:	d031      	beq.n	142f2 <__aeabi_fadd+0x166>
   1428e:	2cff      	cmp	r4, #255	; 0xff
   14290:	d0b7      	beq.n	14202 <__aeabi_fadd+0x76>
   14292:	2080      	movs	r0, #128	; 0x80
   14294:	003e      	movs	r6, r7
   14296:	04c0      	lsls	r0, r0, #19
   14298:	4306      	orrs	r6, r0
   1429a:	46b4      	mov	ip, r6
   1429c:	291b      	cmp	r1, #27
   1429e:	dd00      	ble.n	142a2 <__aeabi_fadd+0x116>
   142a0:	e0aa      	b.n	143f8 <__aeabi_fadd+0x26c>
   142a2:	2620      	movs	r6, #32
   142a4:	4660      	mov	r0, ip
   142a6:	40c8      	lsrs	r0, r1
   142a8:	1a71      	subs	r1, r6, r1
   142aa:	4666      	mov	r6, ip
   142ac:	408e      	lsls	r6, r1
   142ae:	0031      	movs	r1, r6
   142b0:	1e4e      	subs	r6, r1, #1
   142b2:	41b1      	sbcs	r1, r6
   142b4:	4301      	orrs	r1, r0
   142b6:	185b      	adds	r3, r3, r1
   142b8:	0159      	lsls	r1, r3, #5
   142ba:	d5d3      	bpl.n	14264 <__aeabi_fadd+0xd8>
   142bc:	3401      	adds	r4, #1
   142be:	2cff      	cmp	r4, #255	; 0xff
   142c0:	d100      	bne.n	142c4 <__aeabi_fadd+0x138>
   142c2:	e087      	b.n	143d4 <__aeabi_fadd+0x248>
   142c4:	2201      	movs	r2, #1
   142c6:	4978      	ldr	r1, [pc, #480]	; (144a8 <__aeabi_fadd+0x31c>)
   142c8:	401a      	ands	r2, r3
   142ca:	085b      	lsrs	r3, r3, #1
   142cc:	400b      	ands	r3, r1
   142ce:	4313      	orrs	r3, r2
   142d0:	e797      	b.n	14202 <__aeabi_fadd+0x76>
   142d2:	2c00      	cmp	r4, #0
   142d4:	d000      	beq.n	142d8 <__aeabi_fadd+0x14c>
   142d6:	e0a7      	b.n	14428 <__aeabi_fadd+0x29c>
   142d8:	2b00      	cmp	r3, #0
   142da:	d000      	beq.n	142de <__aeabi_fadd+0x152>
   142dc:	e0b6      	b.n	1444c <__aeabi_fadd+0x2c0>
   142de:	1e3b      	subs	r3, r7, #0
   142e0:	d162      	bne.n	143a8 <__aeabi_fadd+0x21c>
   142e2:	2600      	movs	r6, #0
   142e4:	2200      	movs	r2, #0
   142e6:	0273      	lsls	r3, r6, #9
   142e8:	0a5b      	lsrs	r3, r3, #9
   142ea:	b2e4      	uxtb	r4, r4
   142ec:	e79a      	b.n	14224 <__aeabi_fadd+0x98>
   142ee:	0014      	movs	r4, r2
   142f0:	e787      	b.n	14202 <__aeabi_fadd+0x76>
   142f2:	2f00      	cmp	r7, #0
   142f4:	d04d      	beq.n	14392 <__aeabi_fadd+0x206>
   142f6:	1e48      	subs	r0, r1, #1
   142f8:	2800      	cmp	r0, #0
   142fa:	d157      	bne.n	143ac <__aeabi_fadd+0x220>
   142fc:	4463      	add	r3, ip
   142fe:	2401      	movs	r4, #1
   14300:	015a      	lsls	r2, r3, #5
   14302:	d5af      	bpl.n	14264 <__aeabi_fadd+0xd8>
   14304:	2402      	movs	r4, #2
   14306:	e7dd      	b.n	142c4 <__aeabi_fadd+0x138>
   14308:	2a00      	cmp	r2, #0
   1430a:	d124      	bne.n	14356 <__aeabi_fadd+0x1ca>
   1430c:	1c62      	adds	r2, r4, #1
   1430e:	b2d2      	uxtb	r2, r2
   14310:	2a01      	cmp	r2, #1
   14312:	ddde      	ble.n	142d2 <__aeabi_fadd+0x146>
   14314:	1bde      	subs	r6, r3, r7
   14316:	0172      	lsls	r2, r6, #5
   14318:	d535      	bpl.n	14386 <__aeabi_fadd+0x1fa>
   1431a:	1afe      	subs	r6, r7, r3
   1431c:	000d      	movs	r5, r1
   1431e:	e75c      	b.n	141da <__aeabi_fadd+0x4e>
   14320:	002a      	movs	r2, r5
   14322:	2300      	movs	r3, #0
   14324:	e77e      	b.n	14224 <__aeabi_fadd+0x98>
   14326:	0033      	movs	r3, r6
   14328:	4a60      	ldr	r2, [pc, #384]	; (144ac <__aeabi_fadd+0x320>)
   1432a:	1a24      	subs	r4, r4, r0
   1432c:	4013      	ands	r3, r2
   1432e:	e768      	b.n	14202 <__aeabi_fadd+0x76>
   14330:	2900      	cmp	r1, #0
   14332:	d163      	bne.n	143fc <__aeabi_fadd+0x270>
   14334:	1c61      	adds	r1, r4, #1
   14336:	b2c8      	uxtb	r0, r1
   14338:	2801      	cmp	r0, #1
   1433a:	dd4e      	ble.n	143da <__aeabi_fadd+0x24e>
   1433c:	29ff      	cmp	r1, #255	; 0xff
   1433e:	d049      	beq.n	143d4 <__aeabi_fadd+0x248>
   14340:	4463      	add	r3, ip
   14342:	085b      	lsrs	r3, r3, #1
   14344:	000c      	movs	r4, r1
   14346:	e75c      	b.n	14202 <__aeabi_fadd+0x76>
   14348:	2aff      	cmp	r2, #255	; 0xff
   1434a:	d041      	beq.n	143d0 <__aeabi_fadd+0x244>
   1434c:	000a      	movs	r2, r1
   1434e:	e779      	b.n	14244 <__aeabi_fadd+0xb8>
   14350:	2201      	movs	r2, #1
   14352:	1a9b      	subs	r3, r3, r2
   14354:	e784      	b.n	14260 <__aeabi_fadd+0xd4>
   14356:	2c00      	cmp	r4, #0
   14358:	d01d      	beq.n	14396 <__aeabi_fadd+0x20a>
   1435a:	28ff      	cmp	r0, #255	; 0xff
   1435c:	d022      	beq.n	143a4 <__aeabi_fadd+0x218>
   1435e:	2480      	movs	r4, #128	; 0x80
   14360:	04e4      	lsls	r4, r4, #19
   14362:	4252      	negs	r2, r2
   14364:	4323      	orrs	r3, r4
   14366:	2a1b      	cmp	r2, #27
   14368:	dd00      	ble.n	1436c <__aeabi_fadd+0x1e0>
   1436a:	e08a      	b.n	14482 <__aeabi_fadd+0x2f6>
   1436c:	001c      	movs	r4, r3
   1436e:	2520      	movs	r5, #32
   14370:	40d4      	lsrs	r4, r2
   14372:	1aaa      	subs	r2, r5, r2
   14374:	4093      	lsls	r3, r2
   14376:	1e5a      	subs	r2, r3, #1
   14378:	4193      	sbcs	r3, r2
   1437a:	4323      	orrs	r3, r4
   1437c:	4662      	mov	r2, ip
   1437e:	0004      	movs	r4, r0
   14380:	1ad3      	subs	r3, r2, r3
   14382:	000d      	movs	r5, r1
   14384:	e725      	b.n	141d2 <__aeabi_fadd+0x46>
   14386:	2e00      	cmp	r6, #0
   14388:	d000      	beq.n	1438c <__aeabi_fadd+0x200>
   1438a:	e726      	b.n	141da <__aeabi_fadd+0x4e>
   1438c:	2200      	movs	r2, #0
   1438e:	2400      	movs	r4, #0
   14390:	e7a9      	b.n	142e6 <__aeabi_fadd+0x15a>
   14392:	000c      	movs	r4, r1
   14394:	e735      	b.n	14202 <__aeabi_fadd+0x76>
   14396:	2b00      	cmp	r3, #0
   14398:	d04d      	beq.n	14436 <__aeabi_fadd+0x2aa>
   1439a:	43d2      	mvns	r2, r2
   1439c:	2a00      	cmp	r2, #0
   1439e:	d0ed      	beq.n	1437c <__aeabi_fadd+0x1f0>
   143a0:	28ff      	cmp	r0, #255	; 0xff
   143a2:	d1e0      	bne.n	14366 <__aeabi_fadd+0x1da>
   143a4:	4663      	mov	r3, ip
   143a6:	24ff      	movs	r4, #255	; 0xff
   143a8:	000d      	movs	r5, r1
   143aa:	e72a      	b.n	14202 <__aeabi_fadd+0x76>
   143ac:	29ff      	cmp	r1, #255	; 0xff
   143ae:	d00f      	beq.n	143d0 <__aeabi_fadd+0x244>
   143b0:	0001      	movs	r1, r0
   143b2:	e773      	b.n	1429c <__aeabi_fadd+0x110>
   143b4:	2b00      	cmp	r3, #0
   143b6:	d061      	beq.n	1447c <__aeabi_fadd+0x2f0>
   143b8:	24ff      	movs	r4, #255	; 0xff
   143ba:	2f00      	cmp	r7, #0
   143bc:	d100      	bne.n	143c0 <__aeabi_fadd+0x234>
   143be:	e720      	b.n	14202 <__aeabi_fadd+0x76>
   143c0:	2280      	movs	r2, #128	; 0x80
   143c2:	4641      	mov	r1, r8
   143c4:	03d2      	lsls	r2, r2, #15
   143c6:	4211      	tst	r1, r2
   143c8:	d002      	beq.n	143d0 <__aeabi_fadd+0x244>
   143ca:	4216      	tst	r6, r2
   143cc:	d100      	bne.n	143d0 <__aeabi_fadd+0x244>
   143ce:	003b      	movs	r3, r7
   143d0:	24ff      	movs	r4, #255	; 0xff
   143d2:	e716      	b.n	14202 <__aeabi_fadd+0x76>
   143d4:	24ff      	movs	r4, #255	; 0xff
   143d6:	2300      	movs	r3, #0
   143d8:	e724      	b.n	14224 <__aeabi_fadd+0x98>
   143da:	2c00      	cmp	r4, #0
   143dc:	d1ea      	bne.n	143b4 <__aeabi_fadd+0x228>
   143de:	2b00      	cmp	r3, #0
   143e0:	d058      	beq.n	14494 <__aeabi_fadd+0x308>
   143e2:	2f00      	cmp	r7, #0
   143e4:	d100      	bne.n	143e8 <__aeabi_fadd+0x25c>
   143e6:	e70c      	b.n	14202 <__aeabi_fadd+0x76>
   143e8:	4463      	add	r3, ip
   143ea:	015a      	lsls	r2, r3, #5
   143ec:	d400      	bmi.n	143f0 <__aeabi_fadd+0x264>
   143ee:	e739      	b.n	14264 <__aeabi_fadd+0xd8>
   143f0:	4a2e      	ldr	r2, [pc, #184]	; (144ac <__aeabi_fadd+0x320>)
   143f2:	000c      	movs	r4, r1
   143f4:	4013      	ands	r3, r2
   143f6:	e704      	b.n	14202 <__aeabi_fadd+0x76>
   143f8:	2101      	movs	r1, #1
   143fa:	e75c      	b.n	142b6 <__aeabi_fadd+0x12a>
   143fc:	2c00      	cmp	r4, #0
   143fe:	d11e      	bne.n	1443e <__aeabi_fadd+0x2b2>
   14400:	2b00      	cmp	r3, #0
   14402:	d040      	beq.n	14486 <__aeabi_fadd+0x2fa>
   14404:	43c9      	mvns	r1, r1
   14406:	2900      	cmp	r1, #0
   14408:	d00b      	beq.n	14422 <__aeabi_fadd+0x296>
   1440a:	28ff      	cmp	r0, #255	; 0xff
   1440c:	d036      	beq.n	1447c <__aeabi_fadd+0x2f0>
   1440e:	291b      	cmp	r1, #27
   14410:	dc47      	bgt.n	144a2 <__aeabi_fadd+0x316>
   14412:	001c      	movs	r4, r3
   14414:	2620      	movs	r6, #32
   14416:	40cc      	lsrs	r4, r1
   14418:	1a71      	subs	r1, r6, r1
   1441a:	408b      	lsls	r3, r1
   1441c:	1e59      	subs	r1, r3, #1
   1441e:	418b      	sbcs	r3, r1
   14420:	4323      	orrs	r3, r4
   14422:	4463      	add	r3, ip
   14424:	0004      	movs	r4, r0
   14426:	e747      	b.n	142b8 <__aeabi_fadd+0x12c>
   14428:	2b00      	cmp	r3, #0
   1442a:	d118      	bne.n	1445e <__aeabi_fadd+0x2d2>
   1442c:	1e3b      	subs	r3, r7, #0
   1442e:	d02d      	beq.n	1448c <__aeabi_fadd+0x300>
   14430:	000d      	movs	r5, r1
   14432:	24ff      	movs	r4, #255	; 0xff
   14434:	e6e5      	b.n	14202 <__aeabi_fadd+0x76>
   14436:	003b      	movs	r3, r7
   14438:	0004      	movs	r4, r0
   1443a:	000d      	movs	r5, r1
   1443c:	e6e1      	b.n	14202 <__aeabi_fadd+0x76>
   1443e:	28ff      	cmp	r0, #255	; 0xff
   14440:	d01c      	beq.n	1447c <__aeabi_fadd+0x2f0>
   14442:	2480      	movs	r4, #128	; 0x80
   14444:	04e4      	lsls	r4, r4, #19
   14446:	4249      	negs	r1, r1
   14448:	4323      	orrs	r3, r4
   1444a:	e7e0      	b.n	1440e <__aeabi_fadd+0x282>
   1444c:	2f00      	cmp	r7, #0
   1444e:	d100      	bne.n	14452 <__aeabi_fadd+0x2c6>
   14450:	e6d7      	b.n	14202 <__aeabi_fadd+0x76>
   14452:	1bde      	subs	r6, r3, r7
   14454:	0172      	lsls	r2, r6, #5
   14456:	d51f      	bpl.n	14498 <__aeabi_fadd+0x30c>
   14458:	1afb      	subs	r3, r7, r3
   1445a:	000d      	movs	r5, r1
   1445c:	e6d1      	b.n	14202 <__aeabi_fadd+0x76>
   1445e:	24ff      	movs	r4, #255	; 0xff
   14460:	2f00      	cmp	r7, #0
   14462:	d100      	bne.n	14466 <__aeabi_fadd+0x2da>
   14464:	e6cd      	b.n	14202 <__aeabi_fadd+0x76>
   14466:	2280      	movs	r2, #128	; 0x80
   14468:	4640      	mov	r0, r8
   1446a:	03d2      	lsls	r2, r2, #15
   1446c:	4210      	tst	r0, r2
   1446e:	d0af      	beq.n	143d0 <__aeabi_fadd+0x244>
   14470:	4216      	tst	r6, r2
   14472:	d1ad      	bne.n	143d0 <__aeabi_fadd+0x244>
   14474:	003b      	movs	r3, r7
   14476:	000d      	movs	r5, r1
   14478:	24ff      	movs	r4, #255	; 0xff
   1447a:	e6c2      	b.n	14202 <__aeabi_fadd+0x76>
   1447c:	4663      	mov	r3, ip
   1447e:	24ff      	movs	r4, #255	; 0xff
   14480:	e6bf      	b.n	14202 <__aeabi_fadd+0x76>
   14482:	2301      	movs	r3, #1
   14484:	e77a      	b.n	1437c <__aeabi_fadd+0x1f0>
   14486:	003b      	movs	r3, r7
   14488:	0004      	movs	r4, r0
   1448a:	e6ba      	b.n	14202 <__aeabi_fadd+0x76>
   1448c:	2680      	movs	r6, #128	; 0x80
   1448e:	2200      	movs	r2, #0
   14490:	03f6      	lsls	r6, r6, #15
   14492:	e6f0      	b.n	14276 <__aeabi_fadd+0xea>
   14494:	003b      	movs	r3, r7
   14496:	e6b4      	b.n	14202 <__aeabi_fadd+0x76>
   14498:	1e33      	subs	r3, r6, #0
   1449a:	d000      	beq.n	1449e <__aeabi_fadd+0x312>
   1449c:	e6e2      	b.n	14264 <__aeabi_fadd+0xd8>
   1449e:	2200      	movs	r2, #0
   144a0:	e721      	b.n	142e6 <__aeabi_fadd+0x15a>
   144a2:	2301      	movs	r3, #1
   144a4:	e7bd      	b.n	14422 <__aeabi_fadd+0x296>
   144a6:	46c0      	nop			; (mov r8, r8)
   144a8:	7dffffff 	.word	0x7dffffff
   144ac:	fbffffff 	.word	0xfbffffff

000144b0 <__aeabi_fdiv>:
   144b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   144b2:	4657      	mov	r7, sl
   144b4:	464e      	mov	r6, r9
   144b6:	46de      	mov	lr, fp
   144b8:	4645      	mov	r5, r8
   144ba:	b5e0      	push	{r5, r6, r7, lr}
   144bc:	0244      	lsls	r4, r0, #9
   144be:	0043      	lsls	r3, r0, #1
   144c0:	0fc6      	lsrs	r6, r0, #31
   144c2:	b083      	sub	sp, #12
   144c4:	1c0f      	adds	r7, r1, #0
   144c6:	0a64      	lsrs	r4, r4, #9
   144c8:	0e1b      	lsrs	r3, r3, #24
   144ca:	46b2      	mov	sl, r6
   144cc:	d053      	beq.n	14576 <__aeabi_fdiv+0xc6>
   144ce:	2bff      	cmp	r3, #255	; 0xff
   144d0:	d027      	beq.n	14522 <__aeabi_fdiv+0x72>
   144d2:	2280      	movs	r2, #128	; 0x80
   144d4:	00e4      	lsls	r4, r4, #3
   144d6:	04d2      	lsls	r2, r2, #19
   144d8:	4314      	orrs	r4, r2
   144da:	227f      	movs	r2, #127	; 0x7f
   144dc:	4252      	negs	r2, r2
   144de:	4690      	mov	r8, r2
   144e0:	4498      	add	r8, r3
   144e2:	2300      	movs	r3, #0
   144e4:	4699      	mov	r9, r3
   144e6:	469b      	mov	fp, r3
   144e8:	027d      	lsls	r5, r7, #9
   144ea:	0078      	lsls	r0, r7, #1
   144ec:	0ffb      	lsrs	r3, r7, #31
   144ee:	0a6d      	lsrs	r5, r5, #9
   144f0:	0e00      	lsrs	r0, r0, #24
   144f2:	9300      	str	r3, [sp, #0]
   144f4:	d024      	beq.n	14540 <__aeabi_fdiv+0x90>
   144f6:	28ff      	cmp	r0, #255	; 0xff
   144f8:	d046      	beq.n	14588 <__aeabi_fdiv+0xd8>
   144fa:	2380      	movs	r3, #128	; 0x80
   144fc:	2100      	movs	r1, #0
   144fe:	00ed      	lsls	r5, r5, #3
   14500:	04db      	lsls	r3, r3, #19
   14502:	431d      	orrs	r5, r3
   14504:	387f      	subs	r0, #127	; 0x7f
   14506:	4647      	mov	r7, r8
   14508:	1a38      	subs	r0, r7, r0
   1450a:	464f      	mov	r7, r9
   1450c:	430f      	orrs	r7, r1
   1450e:	00bf      	lsls	r7, r7, #2
   14510:	46b9      	mov	r9, r7
   14512:	0033      	movs	r3, r6
   14514:	9a00      	ldr	r2, [sp, #0]
   14516:	4f87      	ldr	r7, [pc, #540]	; (14734 <__aeabi_fdiv+0x284>)
   14518:	4053      	eors	r3, r2
   1451a:	464a      	mov	r2, r9
   1451c:	58ba      	ldr	r2, [r7, r2]
   1451e:	9301      	str	r3, [sp, #4]
   14520:	4697      	mov	pc, r2
   14522:	2c00      	cmp	r4, #0
   14524:	d14e      	bne.n	145c4 <__aeabi_fdiv+0x114>
   14526:	2308      	movs	r3, #8
   14528:	4699      	mov	r9, r3
   1452a:	33f7      	adds	r3, #247	; 0xf7
   1452c:	4698      	mov	r8, r3
   1452e:	3bfd      	subs	r3, #253	; 0xfd
   14530:	469b      	mov	fp, r3
   14532:	027d      	lsls	r5, r7, #9
   14534:	0078      	lsls	r0, r7, #1
   14536:	0ffb      	lsrs	r3, r7, #31
   14538:	0a6d      	lsrs	r5, r5, #9
   1453a:	0e00      	lsrs	r0, r0, #24
   1453c:	9300      	str	r3, [sp, #0]
   1453e:	d1da      	bne.n	144f6 <__aeabi_fdiv+0x46>
   14540:	2d00      	cmp	r5, #0
   14542:	d126      	bne.n	14592 <__aeabi_fdiv+0xe2>
   14544:	2000      	movs	r0, #0
   14546:	2101      	movs	r1, #1
   14548:	0033      	movs	r3, r6
   1454a:	9a00      	ldr	r2, [sp, #0]
   1454c:	4f7a      	ldr	r7, [pc, #488]	; (14738 <__aeabi_fdiv+0x288>)
   1454e:	4053      	eors	r3, r2
   14550:	4642      	mov	r2, r8
   14552:	1a10      	subs	r0, r2, r0
   14554:	464a      	mov	r2, r9
   14556:	430a      	orrs	r2, r1
   14558:	0092      	lsls	r2, r2, #2
   1455a:	58ba      	ldr	r2, [r7, r2]
   1455c:	001d      	movs	r5, r3
   1455e:	4697      	mov	pc, r2
   14560:	9b00      	ldr	r3, [sp, #0]
   14562:	002c      	movs	r4, r5
   14564:	469a      	mov	sl, r3
   14566:	468b      	mov	fp, r1
   14568:	465b      	mov	r3, fp
   1456a:	2b02      	cmp	r3, #2
   1456c:	d131      	bne.n	145d2 <__aeabi_fdiv+0x122>
   1456e:	4653      	mov	r3, sl
   14570:	21ff      	movs	r1, #255	; 0xff
   14572:	2400      	movs	r4, #0
   14574:	e038      	b.n	145e8 <__aeabi_fdiv+0x138>
   14576:	2c00      	cmp	r4, #0
   14578:	d117      	bne.n	145aa <__aeabi_fdiv+0xfa>
   1457a:	2304      	movs	r3, #4
   1457c:	4699      	mov	r9, r3
   1457e:	2300      	movs	r3, #0
   14580:	4698      	mov	r8, r3
   14582:	3301      	adds	r3, #1
   14584:	469b      	mov	fp, r3
   14586:	e7af      	b.n	144e8 <__aeabi_fdiv+0x38>
   14588:	20ff      	movs	r0, #255	; 0xff
   1458a:	2d00      	cmp	r5, #0
   1458c:	d10b      	bne.n	145a6 <__aeabi_fdiv+0xf6>
   1458e:	2102      	movs	r1, #2
   14590:	e7da      	b.n	14548 <__aeabi_fdiv+0x98>
   14592:	0028      	movs	r0, r5
   14594:	f002 fb52 	bl	16c3c <__clzsi2>
   14598:	1f43      	subs	r3, r0, #5
   1459a:	409d      	lsls	r5, r3
   1459c:	2376      	movs	r3, #118	; 0x76
   1459e:	425b      	negs	r3, r3
   145a0:	1a18      	subs	r0, r3, r0
   145a2:	2100      	movs	r1, #0
   145a4:	e7af      	b.n	14506 <__aeabi_fdiv+0x56>
   145a6:	2103      	movs	r1, #3
   145a8:	e7ad      	b.n	14506 <__aeabi_fdiv+0x56>
   145aa:	0020      	movs	r0, r4
   145ac:	f002 fb46 	bl	16c3c <__clzsi2>
   145b0:	1f43      	subs	r3, r0, #5
   145b2:	409c      	lsls	r4, r3
   145b4:	2376      	movs	r3, #118	; 0x76
   145b6:	425b      	negs	r3, r3
   145b8:	1a1b      	subs	r3, r3, r0
   145ba:	4698      	mov	r8, r3
   145bc:	2300      	movs	r3, #0
   145be:	4699      	mov	r9, r3
   145c0:	469b      	mov	fp, r3
   145c2:	e791      	b.n	144e8 <__aeabi_fdiv+0x38>
   145c4:	230c      	movs	r3, #12
   145c6:	4699      	mov	r9, r3
   145c8:	33f3      	adds	r3, #243	; 0xf3
   145ca:	4698      	mov	r8, r3
   145cc:	3bfc      	subs	r3, #252	; 0xfc
   145ce:	469b      	mov	fp, r3
   145d0:	e78a      	b.n	144e8 <__aeabi_fdiv+0x38>
   145d2:	2b03      	cmp	r3, #3
   145d4:	d100      	bne.n	145d8 <__aeabi_fdiv+0x128>
   145d6:	e0a5      	b.n	14724 <__aeabi_fdiv+0x274>
   145d8:	4655      	mov	r5, sl
   145da:	2b01      	cmp	r3, #1
   145dc:	d000      	beq.n	145e0 <__aeabi_fdiv+0x130>
   145de:	e081      	b.n	146e4 <__aeabi_fdiv+0x234>
   145e0:	2301      	movs	r3, #1
   145e2:	2100      	movs	r1, #0
   145e4:	2400      	movs	r4, #0
   145e6:	402b      	ands	r3, r5
   145e8:	0264      	lsls	r4, r4, #9
   145ea:	05c9      	lsls	r1, r1, #23
   145ec:	0a60      	lsrs	r0, r4, #9
   145ee:	07db      	lsls	r3, r3, #31
   145f0:	4308      	orrs	r0, r1
   145f2:	4318      	orrs	r0, r3
   145f4:	b003      	add	sp, #12
   145f6:	bc3c      	pop	{r2, r3, r4, r5}
   145f8:	4690      	mov	r8, r2
   145fa:	4699      	mov	r9, r3
   145fc:	46a2      	mov	sl, r4
   145fe:	46ab      	mov	fp, r5
   14600:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14602:	2480      	movs	r4, #128	; 0x80
   14604:	2300      	movs	r3, #0
   14606:	03e4      	lsls	r4, r4, #15
   14608:	21ff      	movs	r1, #255	; 0xff
   1460a:	e7ed      	b.n	145e8 <__aeabi_fdiv+0x138>
   1460c:	21ff      	movs	r1, #255	; 0xff
   1460e:	2400      	movs	r4, #0
   14610:	e7ea      	b.n	145e8 <__aeabi_fdiv+0x138>
   14612:	2301      	movs	r3, #1
   14614:	1a59      	subs	r1, r3, r1
   14616:	291b      	cmp	r1, #27
   14618:	dd66      	ble.n	146e8 <__aeabi_fdiv+0x238>
   1461a:	9a01      	ldr	r2, [sp, #4]
   1461c:	4013      	ands	r3, r2
   1461e:	2100      	movs	r1, #0
   14620:	2400      	movs	r4, #0
   14622:	e7e1      	b.n	145e8 <__aeabi_fdiv+0x138>
   14624:	2380      	movs	r3, #128	; 0x80
   14626:	03db      	lsls	r3, r3, #15
   14628:	421c      	tst	r4, r3
   1462a:	d038      	beq.n	1469e <__aeabi_fdiv+0x1ee>
   1462c:	421d      	tst	r5, r3
   1462e:	d051      	beq.n	146d4 <__aeabi_fdiv+0x224>
   14630:	431c      	orrs	r4, r3
   14632:	0264      	lsls	r4, r4, #9
   14634:	0a64      	lsrs	r4, r4, #9
   14636:	0033      	movs	r3, r6
   14638:	21ff      	movs	r1, #255	; 0xff
   1463a:	e7d5      	b.n	145e8 <__aeabi_fdiv+0x138>
   1463c:	0163      	lsls	r3, r4, #5
   1463e:	016c      	lsls	r4, r5, #5
   14640:	42a3      	cmp	r3, r4
   14642:	d23b      	bcs.n	146bc <__aeabi_fdiv+0x20c>
   14644:	261b      	movs	r6, #27
   14646:	2100      	movs	r1, #0
   14648:	3801      	subs	r0, #1
   1464a:	2501      	movs	r5, #1
   1464c:	001f      	movs	r7, r3
   1464e:	0049      	lsls	r1, r1, #1
   14650:	005b      	lsls	r3, r3, #1
   14652:	2f00      	cmp	r7, #0
   14654:	db01      	blt.n	1465a <__aeabi_fdiv+0x1aa>
   14656:	429c      	cmp	r4, r3
   14658:	d801      	bhi.n	1465e <__aeabi_fdiv+0x1ae>
   1465a:	1b1b      	subs	r3, r3, r4
   1465c:	4329      	orrs	r1, r5
   1465e:	3e01      	subs	r6, #1
   14660:	2e00      	cmp	r6, #0
   14662:	d1f3      	bne.n	1464c <__aeabi_fdiv+0x19c>
   14664:	001c      	movs	r4, r3
   14666:	1e63      	subs	r3, r4, #1
   14668:	419c      	sbcs	r4, r3
   1466a:	430c      	orrs	r4, r1
   1466c:	0001      	movs	r1, r0
   1466e:	317f      	adds	r1, #127	; 0x7f
   14670:	2900      	cmp	r1, #0
   14672:	ddce      	ble.n	14612 <__aeabi_fdiv+0x162>
   14674:	0763      	lsls	r3, r4, #29
   14676:	d004      	beq.n	14682 <__aeabi_fdiv+0x1d2>
   14678:	230f      	movs	r3, #15
   1467a:	4023      	ands	r3, r4
   1467c:	2b04      	cmp	r3, #4
   1467e:	d000      	beq.n	14682 <__aeabi_fdiv+0x1d2>
   14680:	3404      	adds	r4, #4
   14682:	0123      	lsls	r3, r4, #4
   14684:	d503      	bpl.n	1468e <__aeabi_fdiv+0x1de>
   14686:	0001      	movs	r1, r0
   14688:	4b2c      	ldr	r3, [pc, #176]	; (1473c <__aeabi_fdiv+0x28c>)
   1468a:	3180      	adds	r1, #128	; 0x80
   1468c:	401c      	ands	r4, r3
   1468e:	29fe      	cmp	r1, #254	; 0xfe
   14690:	dd0d      	ble.n	146ae <__aeabi_fdiv+0x1fe>
   14692:	2301      	movs	r3, #1
   14694:	9a01      	ldr	r2, [sp, #4]
   14696:	21ff      	movs	r1, #255	; 0xff
   14698:	4013      	ands	r3, r2
   1469a:	2400      	movs	r4, #0
   1469c:	e7a4      	b.n	145e8 <__aeabi_fdiv+0x138>
   1469e:	2380      	movs	r3, #128	; 0x80
   146a0:	03db      	lsls	r3, r3, #15
   146a2:	431c      	orrs	r4, r3
   146a4:	0264      	lsls	r4, r4, #9
   146a6:	0a64      	lsrs	r4, r4, #9
   146a8:	0033      	movs	r3, r6
   146aa:	21ff      	movs	r1, #255	; 0xff
   146ac:	e79c      	b.n	145e8 <__aeabi_fdiv+0x138>
   146ae:	2301      	movs	r3, #1
   146b0:	9a01      	ldr	r2, [sp, #4]
   146b2:	01a4      	lsls	r4, r4, #6
   146b4:	0a64      	lsrs	r4, r4, #9
   146b6:	b2c9      	uxtb	r1, r1
   146b8:	4013      	ands	r3, r2
   146ba:	e795      	b.n	145e8 <__aeabi_fdiv+0x138>
   146bc:	1b1b      	subs	r3, r3, r4
   146be:	261a      	movs	r6, #26
   146c0:	2101      	movs	r1, #1
   146c2:	e7c2      	b.n	1464a <__aeabi_fdiv+0x19a>
   146c4:	9b00      	ldr	r3, [sp, #0]
   146c6:	468b      	mov	fp, r1
   146c8:	469a      	mov	sl, r3
   146ca:	2400      	movs	r4, #0
   146cc:	e74c      	b.n	14568 <__aeabi_fdiv+0xb8>
   146ce:	0263      	lsls	r3, r4, #9
   146d0:	d5e5      	bpl.n	1469e <__aeabi_fdiv+0x1ee>
   146d2:	2500      	movs	r5, #0
   146d4:	2480      	movs	r4, #128	; 0x80
   146d6:	03e4      	lsls	r4, r4, #15
   146d8:	432c      	orrs	r4, r5
   146da:	0264      	lsls	r4, r4, #9
   146dc:	0a64      	lsrs	r4, r4, #9
   146de:	9b00      	ldr	r3, [sp, #0]
   146e0:	21ff      	movs	r1, #255	; 0xff
   146e2:	e781      	b.n	145e8 <__aeabi_fdiv+0x138>
   146e4:	9501      	str	r5, [sp, #4]
   146e6:	e7c1      	b.n	1466c <__aeabi_fdiv+0x1bc>
   146e8:	0023      	movs	r3, r4
   146ea:	2020      	movs	r0, #32
   146ec:	40cb      	lsrs	r3, r1
   146ee:	1a41      	subs	r1, r0, r1
   146f0:	408c      	lsls	r4, r1
   146f2:	1e61      	subs	r1, r4, #1
   146f4:	418c      	sbcs	r4, r1
   146f6:	431c      	orrs	r4, r3
   146f8:	0763      	lsls	r3, r4, #29
   146fa:	d004      	beq.n	14706 <__aeabi_fdiv+0x256>
   146fc:	230f      	movs	r3, #15
   146fe:	4023      	ands	r3, r4
   14700:	2b04      	cmp	r3, #4
   14702:	d000      	beq.n	14706 <__aeabi_fdiv+0x256>
   14704:	3404      	adds	r4, #4
   14706:	0163      	lsls	r3, r4, #5
   14708:	d505      	bpl.n	14716 <__aeabi_fdiv+0x266>
   1470a:	2301      	movs	r3, #1
   1470c:	9a01      	ldr	r2, [sp, #4]
   1470e:	2101      	movs	r1, #1
   14710:	4013      	ands	r3, r2
   14712:	2400      	movs	r4, #0
   14714:	e768      	b.n	145e8 <__aeabi_fdiv+0x138>
   14716:	2301      	movs	r3, #1
   14718:	9a01      	ldr	r2, [sp, #4]
   1471a:	01a4      	lsls	r4, r4, #6
   1471c:	0a64      	lsrs	r4, r4, #9
   1471e:	4013      	ands	r3, r2
   14720:	2100      	movs	r1, #0
   14722:	e761      	b.n	145e8 <__aeabi_fdiv+0x138>
   14724:	2380      	movs	r3, #128	; 0x80
   14726:	03db      	lsls	r3, r3, #15
   14728:	431c      	orrs	r4, r3
   1472a:	0264      	lsls	r4, r4, #9
   1472c:	0a64      	lsrs	r4, r4, #9
   1472e:	4653      	mov	r3, sl
   14730:	21ff      	movs	r1, #255	; 0xff
   14732:	e759      	b.n	145e8 <__aeabi_fdiv+0x138>
   14734:	000175f8 	.word	0x000175f8
   14738:	00017638 	.word	0x00017638
   1473c:	f7ffffff 	.word	0xf7ffffff

00014740 <__eqsf2>:
   14740:	b570      	push	{r4, r5, r6, lr}
   14742:	0042      	lsls	r2, r0, #1
   14744:	0245      	lsls	r5, r0, #9
   14746:	024e      	lsls	r6, r1, #9
   14748:	004c      	lsls	r4, r1, #1
   1474a:	0fc3      	lsrs	r3, r0, #31
   1474c:	0a6d      	lsrs	r5, r5, #9
   1474e:	0e12      	lsrs	r2, r2, #24
   14750:	0a76      	lsrs	r6, r6, #9
   14752:	0e24      	lsrs	r4, r4, #24
   14754:	0fc9      	lsrs	r1, r1, #31
   14756:	2001      	movs	r0, #1
   14758:	2aff      	cmp	r2, #255	; 0xff
   1475a:	d006      	beq.n	1476a <__eqsf2+0x2a>
   1475c:	2cff      	cmp	r4, #255	; 0xff
   1475e:	d003      	beq.n	14768 <__eqsf2+0x28>
   14760:	42a2      	cmp	r2, r4
   14762:	d101      	bne.n	14768 <__eqsf2+0x28>
   14764:	42b5      	cmp	r5, r6
   14766:	d006      	beq.n	14776 <__eqsf2+0x36>
   14768:	bd70      	pop	{r4, r5, r6, pc}
   1476a:	2d00      	cmp	r5, #0
   1476c:	d1fc      	bne.n	14768 <__eqsf2+0x28>
   1476e:	2cff      	cmp	r4, #255	; 0xff
   14770:	d1fa      	bne.n	14768 <__eqsf2+0x28>
   14772:	2e00      	cmp	r6, #0
   14774:	d1f8      	bne.n	14768 <__eqsf2+0x28>
   14776:	428b      	cmp	r3, r1
   14778:	d006      	beq.n	14788 <__eqsf2+0x48>
   1477a:	2001      	movs	r0, #1
   1477c:	2a00      	cmp	r2, #0
   1477e:	d1f3      	bne.n	14768 <__eqsf2+0x28>
   14780:	0028      	movs	r0, r5
   14782:	1e45      	subs	r5, r0, #1
   14784:	41a8      	sbcs	r0, r5
   14786:	e7ef      	b.n	14768 <__eqsf2+0x28>
   14788:	2000      	movs	r0, #0
   1478a:	e7ed      	b.n	14768 <__eqsf2+0x28>

0001478c <__gesf2>:
   1478c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1478e:	0042      	lsls	r2, r0, #1
   14790:	0245      	lsls	r5, r0, #9
   14792:	024c      	lsls	r4, r1, #9
   14794:	0fc3      	lsrs	r3, r0, #31
   14796:	0048      	lsls	r0, r1, #1
   14798:	0a6d      	lsrs	r5, r5, #9
   1479a:	0e12      	lsrs	r2, r2, #24
   1479c:	0a64      	lsrs	r4, r4, #9
   1479e:	0e00      	lsrs	r0, r0, #24
   147a0:	0fc9      	lsrs	r1, r1, #31
   147a2:	2aff      	cmp	r2, #255	; 0xff
   147a4:	d01e      	beq.n	147e4 <__gesf2+0x58>
   147a6:	28ff      	cmp	r0, #255	; 0xff
   147a8:	d021      	beq.n	147ee <__gesf2+0x62>
   147aa:	2a00      	cmp	r2, #0
   147ac:	d10a      	bne.n	147c4 <__gesf2+0x38>
   147ae:	426e      	negs	r6, r5
   147b0:	416e      	adcs	r6, r5
   147b2:	b2f6      	uxtb	r6, r6
   147b4:	2800      	cmp	r0, #0
   147b6:	d10f      	bne.n	147d8 <__gesf2+0x4c>
   147b8:	2c00      	cmp	r4, #0
   147ba:	d10d      	bne.n	147d8 <__gesf2+0x4c>
   147bc:	2000      	movs	r0, #0
   147be:	2d00      	cmp	r5, #0
   147c0:	d009      	beq.n	147d6 <__gesf2+0x4a>
   147c2:	e005      	b.n	147d0 <__gesf2+0x44>
   147c4:	2800      	cmp	r0, #0
   147c6:	d101      	bne.n	147cc <__gesf2+0x40>
   147c8:	2c00      	cmp	r4, #0
   147ca:	d001      	beq.n	147d0 <__gesf2+0x44>
   147cc:	428b      	cmp	r3, r1
   147ce:	d011      	beq.n	147f4 <__gesf2+0x68>
   147d0:	2101      	movs	r1, #1
   147d2:	4258      	negs	r0, r3
   147d4:	4308      	orrs	r0, r1
   147d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147d8:	2e00      	cmp	r6, #0
   147da:	d0f7      	beq.n	147cc <__gesf2+0x40>
   147dc:	2001      	movs	r0, #1
   147de:	3901      	subs	r1, #1
   147e0:	4308      	orrs	r0, r1
   147e2:	e7f8      	b.n	147d6 <__gesf2+0x4a>
   147e4:	2d00      	cmp	r5, #0
   147e6:	d0de      	beq.n	147a6 <__gesf2+0x1a>
   147e8:	2002      	movs	r0, #2
   147ea:	4240      	negs	r0, r0
   147ec:	e7f3      	b.n	147d6 <__gesf2+0x4a>
   147ee:	2c00      	cmp	r4, #0
   147f0:	d0db      	beq.n	147aa <__gesf2+0x1e>
   147f2:	e7f9      	b.n	147e8 <__gesf2+0x5c>
   147f4:	4282      	cmp	r2, r0
   147f6:	dceb      	bgt.n	147d0 <__gesf2+0x44>
   147f8:	db04      	blt.n	14804 <__gesf2+0x78>
   147fa:	42a5      	cmp	r5, r4
   147fc:	d8e8      	bhi.n	147d0 <__gesf2+0x44>
   147fe:	2000      	movs	r0, #0
   14800:	42a5      	cmp	r5, r4
   14802:	d2e8      	bcs.n	147d6 <__gesf2+0x4a>
   14804:	2101      	movs	r1, #1
   14806:	1e58      	subs	r0, r3, #1
   14808:	4308      	orrs	r0, r1
   1480a:	e7e4      	b.n	147d6 <__gesf2+0x4a>

0001480c <__lesf2>:
   1480c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1480e:	0042      	lsls	r2, r0, #1
   14810:	024d      	lsls	r5, r1, #9
   14812:	004c      	lsls	r4, r1, #1
   14814:	0246      	lsls	r6, r0, #9
   14816:	0a76      	lsrs	r6, r6, #9
   14818:	0e12      	lsrs	r2, r2, #24
   1481a:	0fc3      	lsrs	r3, r0, #31
   1481c:	0a6d      	lsrs	r5, r5, #9
   1481e:	0e24      	lsrs	r4, r4, #24
   14820:	0fc9      	lsrs	r1, r1, #31
   14822:	2aff      	cmp	r2, #255	; 0xff
   14824:	d016      	beq.n	14854 <__lesf2+0x48>
   14826:	2cff      	cmp	r4, #255	; 0xff
   14828:	d018      	beq.n	1485c <__lesf2+0x50>
   1482a:	2a00      	cmp	r2, #0
   1482c:	d10a      	bne.n	14844 <__lesf2+0x38>
   1482e:	4270      	negs	r0, r6
   14830:	4170      	adcs	r0, r6
   14832:	b2c0      	uxtb	r0, r0
   14834:	2c00      	cmp	r4, #0
   14836:	d015      	beq.n	14864 <__lesf2+0x58>
   14838:	2800      	cmp	r0, #0
   1483a:	d005      	beq.n	14848 <__lesf2+0x3c>
   1483c:	2001      	movs	r0, #1
   1483e:	3901      	subs	r1, #1
   14840:	4308      	orrs	r0, r1
   14842:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14844:	2c00      	cmp	r4, #0
   14846:	d013      	beq.n	14870 <__lesf2+0x64>
   14848:	4299      	cmp	r1, r3
   1484a:	d014      	beq.n	14876 <__lesf2+0x6a>
   1484c:	2001      	movs	r0, #1
   1484e:	425b      	negs	r3, r3
   14850:	4318      	orrs	r0, r3
   14852:	e7f6      	b.n	14842 <__lesf2+0x36>
   14854:	2002      	movs	r0, #2
   14856:	2e00      	cmp	r6, #0
   14858:	d1f3      	bne.n	14842 <__lesf2+0x36>
   1485a:	e7e4      	b.n	14826 <__lesf2+0x1a>
   1485c:	2002      	movs	r0, #2
   1485e:	2d00      	cmp	r5, #0
   14860:	d1ef      	bne.n	14842 <__lesf2+0x36>
   14862:	e7e2      	b.n	1482a <__lesf2+0x1e>
   14864:	2d00      	cmp	r5, #0
   14866:	d1e7      	bne.n	14838 <__lesf2+0x2c>
   14868:	2000      	movs	r0, #0
   1486a:	2e00      	cmp	r6, #0
   1486c:	d0e9      	beq.n	14842 <__lesf2+0x36>
   1486e:	e7ed      	b.n	1484c <__lesf2+0x40>
   14870:	2d00      	cmp	r5, #0
   14872:	d1e9      	bne.n	14848 <__lesf2+0x3c>
   14874:	e7ea      	b.n	1484c <__lesf2+0x40>
   14876:	42a2      	cmp	r2, r4
   14878:	dc06      	bgt.n	14888 <__lesf2+0x7c>
   1487a:	dbdf      	blt.n	1483c <__lesf2+0x30>
   1487c:	42ae      	cmp	r6, r5
   1487e:	d803      	bhi.n	14888 <__lesf2+0x7c>
   14880:	2000      	movs	r0, #0
   14882:	42ae      	cmp	r6, r5
   14884:	d3da      	bcc.n	1483c <__lesf2+0x30>
   14886:	e7dc      	b.n	14842 <__lesf2+0x36>
   14888:	2001      	movs	r0, #1
   1488a:	4249      	negs	r1, r1
   1488c:	4308      	orrs	r0, r1
   1488e:	e7d8      	b.n	14842 <__lesf2+0x36>

00014890 <__aeabi_fmul>:
   14890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14892:	4657      	mov	r7, sl
   14894:	464e      	mov	r6, r9
   14896:	4645      	mov	r5, r8
   14898:	46de      	mov	lr, fp
   1489a:	b5e0      	push	{r5, r6, r7, lr}
   1489c:	0247      	lsls	r7, r0, #9
   1489e:	0046      	lsls	r6, r0, #1
   148a0:	4688      	mov	r8, r1
   148a2:	0a7f      	lsrs	r7, r7, #9
   148a4:	0e36      	lsrs	r6, r6, #24
   148a6:	0fc4      	lsrs	r4, r0, #31
   148a8:	2e00      	cmp	r6, #0
   148aa:	d047      	beq.n	1493c <__aeabi_fmul+0xac>
   148ac:	2eff      	cmp	r6, #255	; 0xff
   148ae:	d024      	beq.n	148fa <__aeabi_fmul+0x6a>
   148b0:	00fb      	lsls	r3, r7, #3
   148b2:	2780      	movs	r7, #128	; 0x80
   148b4:	04ff      	lsls	r7, r7, #19
   148b6:	431f      	orrs	r7, r3
   148b8:	2300      	movs	r3, #0
   148ba:	4699      	mov	r9, r3
   148bc:	469a      	mov	sl, r3
   148be:	3e7f      	subs	r6, #127	; 0x7f
   148c0:	4643      	mov	r3, r8
   148c2:	025d      	lsls	r5, r3, #9
   148c4:	0058      	lsls	r0, r3, #1
   148c6:	0fdb      	lsrs	r3, r3, #31
   148c8:	0a6d      	lsrs	r5, r5, #9
   148ca:	0e00      	lsrs	r0, r0, #24
   148cc:	4698      	mov	r8, r3
   148ce:	d043      	beq.n	14958 <__aeabi_fmul+0xc8>
   148d0:	28ff      	cmp	r0, #255	; 0xff
   148d2:	d03b      	beq.n	1494c <__aeabi_fmul+0xbc>
   148d4:	00eb      	lsls	r3, r5, #3
   148d6:	2580      	movs	r5, #128	; 0x80
   148d8:	2200      	movs	r2, #0
   148da:	04ed      	lsls	r5, r5, #19
   148dc:	431d      	orrs	r5, r3
   148de:	387f      	subs	r0, #127	; 0x7f
   148e0:	1836      	adds	r6, r6, r0
   148e2:	1c73      	adds	r3, r6, #1
   148e4:	4641      	mov	r1, r8
   148e6:	469b      	mov	fp, r3
   148e8:	464b      	mov	r3, r9
   148ea:	4061      	eors	r1, r4
   148ec:	4313      	orrs	r3, r2
   148ee:	2b0f      	cmp	r3, #15
   148f0:	d864      	bhi.n	149bc <__aeabi_fmul+0x12c>
   148f2:	4875      	ldr	r0, [pc, #468]	; (14ac8 <__aeabi_fmul+0x238>)
   148f4:	009b      	lsls	r3, r3, #2
   148f6:	58c3      	ldr	r3, [r0, r3]
   148f8:	469f      	mov	pc, r3
   148fa:	2f00      	cmp	r7, #0
   148fc:	d142      	bne.n	14984 <__aeabi_fmul+0xf4>
   148fe:	2308      	movs	r3, #8
   14900:	4699      	mov	r9, r3
   14902:	3b06      	subs	r3, #6
   14904:	26ff      	movs	r6, #255	; 0xff
   14906:	469a      	mov	sl, r3
   14908:	e7da      	b.n	148c0 <__aeabi_fmul+0x30>
   1490a:	4641      	mov	r1, r8
   1490c:	2a02      	cmp	r2, #2
   1490e:	d028      	beq.n	14962 <__aeabi_fmul+0xd2>
   14910:	2a03      	cmp	r2, #3
   14912:	d100      	bne.n	14916 <__aeabi_fmul+0x86>
   14914:	e0ce      	b.n	14ab4 <__aeabi_fmul+0x224>
   14916:	2a01      	cmp	r2, #1
   14918:	d000      	beq.n	1491c <__aeabi_fmul+0x8c>
   1491a:	e0ac      	b.n	14a76 <__aeabi_fmul+0x1e6>
   1491c:	4011      	ands	r1, r2
   1491e:	2000      	movs	r0, #0
   14920:	2200      	movs	r2, #0
   14922:	b2cc      	uxtb	r4, r1
   14924:	0240      	lsls	r0, r0, #9
   14926:	05d2      	lsls	r2, r2, #23
   14928:	0a40      	lsrs	r0, r0, #9
   1492a:	07e4      	lsls	r4, r4, #31
   1492c:	4310      	orrs	r0, r2
   1492e:	4320      	orrs	r0, r4
   14930:	bc3c      	pop	{r2, r3, r4, r5}
   14932:	4690      	mov	r8, r2
   14934:	4699      	mov	r9, r3
   14936:	46a2      	mov	sl, r4
   14938:	46ab      	mov	fp, r5
   1493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1493c:	2f00      	cmp	r7, #0
   1493e:	d115      	bne.n	1496c <__aeabi_fmul+0xdc>
   14940:	2304      	movs	r3, #4
   14942:	4699      	mov	r9, r3
   14944:	3b03      	subs	r3, #3
   14946:	2600      	movs	r6, #0
   14948:	469a      	mov	sl, r3
   1494a:	e7b9      	b.n	148c0 <__aeabi_fmul+0x30>
   1494c:	20ff      	movs	r0, #255	; 0xff
   1494e:	2202      	movs	r2, #2
   14950:	2d00      	cmp	r5, #0
   14952:	d0c5      	beq.n	148e0 <__aeabi_fmul+0x50>
   14954:	2203      	movs	r2, #3
   14956:	e7c3      	b.n	148e0 <__aeabi_fmul+0x50>
   14958:	2d00      	cmp	r5, #0
   1495a:	d119      	bne.n	14990 <__aeabi_fmul+0x100>
   1495c:	2000      	movs	r0, #0
   1495e:	2201      	movs	r2, #1
   14960:	e7be      	b.n	148e0 <__aeabi_fmul+0x50>
   14962:	2401      	movs	r4, #1
   14964:	22ff      	movs	r2, #255	; 0xff
   14966:	400c      	ands	r4, r1
   14968:	2000      	movs	r0, #0
   1496a:	e7db      	b.n	14924 <__aeabi_fmul+0x94>
   1496c:	0038      	movs	r0, r7
   1496e:	f002 f965 	bl	16c3c <__clzsi2>
   14972:	2676      	movs	r6, #118	; 0x76
   14974:	1f43      	subs	r3, r0, #5
   14976:	409f      	lsls	r7, r3
   14978:	2300      	movs	r3, #0
   1497a:	4276      	negs	r6, r6
   1497c:	1a36      	subs	r6, r6, r0
   1497e:	4699      	mov	r9, r3
   14980:	469a      	mov	sl, r3
   14982:	e79d      	b.n	148c0 <__aeabi_fmul+0x30>
   14984:	230c      	movs	r3, #12
   14986:	4699      	mov	r9, r3
   14988:	3b09      	subs	r3, #9
   1498a:	26ff      	movs	r6, #255	; 0xff
   1498c:	469a      	mov	sl, r3
   1498e:	e797      	b.n	148c0 <__aeabi_fmul+0x30>
   14990:	0028      	movs	r0, r5
   14992:	f002 f953 	bl	16c3c <__clzsi2>
   14996:	1f43      	subs	r3, r0, #5
   14998:	409d      	lsls	r5, r3
   1499a:	2376      	movs	r3, #118	; 0x76
   1499c:	425b      	negs	r3, r3
   1499e:	1a18      	subs	r0, r3, r0
   149a0:	2200      	movs	r2, #0
   149a2:	e79d      	b.n	148e0 <__aeabi_fmul+0x50>
   149a4:	2080      	movs	r0, #128	; 0x80
   149a6:	2400      	movs	r4, #0
   149a8:	03c0      	lsls	r0, r0, #15
   149aa:	22ff      	movs	r2, #255	; 0xff
   149ac:	e7ba      	b.n	14924 <__aeabi_fmul+0x94>
   149ae:	003d      	movs	r5, r7
   149b0:	4652      	mov	r2, sl
   149b2:	e7ab      	b.n	1490c <__aeabi_fmul+0x7c>
   149b4:	003d      	movs	r5, r7
   149b6:	0021      	movs	r1, r4
   149b8:	4652      	mov	r2, sl
   149ba:	e7a7      	b.n	1490c <__aeabi_fmul+0x7c>
   149bc:	0c3b      	lsrs	r3, r7, #16
   149be:	469c      	mov	ip, r3
   149c0:	042a      	lsls	r2, r5, #16
   149c2:	0c12      	lsrs	r2, r2, #16
   149c4:	0c2b      	lsrs	r3, r5, #16
   149c6:	0014      	movs	r4, r2
   149c8:	4660      	mov	r0, ip
   149ca:	4665      	mov	r5, ip
   149cc:	043f      	lsls	r7, r7, #16
   149ce:	0c3f      	lsrs	r7, r7, #16
   149d0:	437c      	muls	r4, r7
   149d2:	4342      	muls	r2, r0
   149d4:	435d      	muls	r5, r3
   149d6:	437b      	muls	r3, r7
   149d8:	0c27      	lsrs	r7, r4, #16
   149da:	189b      	adds	r3, r3, r2
   149dc:	18ff      	adds	r7, r7, r3
   149de:	42ba      	cmp	r2, r7
   149e0:	d903      	bls.n	149ea <__aeabi_fmul+0x15a>
   149e2:	2380      	movs	r3, #128	; 0x80
   149e4:	025b      	lsls	r3, r3, #9
   149e6:	469c      	mov	ip, r3
   149e8:	4465      	add	r5, ip
   149ea:	0424      	lsls	r4, r4, #16
   149ec:	043a      	lsls	r2, r7, #16
   149ee:	0c24      	lsrs	r4, r4, #16
   149f0:	1912      	adds	r2, r2, r4
   149f2:	0193      	lsls	r3, r2, #6
   149f4:	1e5c      	subs	r4, r3, #1
   149f6:	41a3      	sbcs	r3, r4
   149f8:	0c3f      	lsrs	r7, r7, #16
   149fa:	0e92      	lsrs	r2, r2, #26
   149fc:	197d      	adds	r5, r7, r5
   149fe:	431a      	orrs	r2, r3
   14a00:	01ad      	lsls	r5, r5, #6
   14a02:	4315      	orrs	r5, r2
   14a04:	012b      	lsls	r3, r5, #4
   14a06:	d504      	bpl.n	14a12 <__aeabi_fmul+0x182>
   14a08:	2301      	movs	r3, #1
   14a0a:	465e      	mov	r6, fp
   14a0c:	086a      	lsrs	r2, r5, #1
   14a0e:	401d      	ands	r5, r3
   14a10:	4315      	orrs	r5, r2
   14a12:	0032      	movs	r2, r6
   14a14:	327f      	adds	r2, #127	; 0x7f
   14a16:	2a00      	cmp	r2, #0
   14a18:	dd25      	ble.n	14a66 <__aeabi_fmul+0x1d6>
   14a1a:	076b      	lsls	r3, r5, #29
   14a1c:	d004      	beq.n	14a28 <__aeabi_fmul+0x198>
   14a1e:	230f      	movs	r3, #15
   14a20:	402b      	ands	r3, r5
   14a22:	2b04      	cmp	r3, #4
   14a24:	d000      	beq.n	14a28 <__aeabi_fmul+0x198>
   14a26:	3504      	adds	r5, #4
   14a28:	012b      	lsls	r3, r5, #4
   14a2a:	d503      	bpl.n	14a34 <__aeabi_fmul+0x1a4>
   14a2c:	0032      	movs	r2, r6
   14a2e:	4b27      	ldr	r3, [pc, #156]	; (14acc <__aeabi_fmul+0x23c>)
   14a30:	3280      	adds	r2, #128	; 0x80
   14a32:	401d      	ands	r5, r3
   14a34:	2afe      	cmp	r2, #254	; 0xfe
   14a36:	dc94      	bgt.n	14962 <__aeabi_fmul+0xd2>
   14a38:	2401      	movs	r4, #1
   14a3a:	01a8      	lsls	r0, r5, #6
   14a3c:	0a40      	lsrs	r0, r0, #9
   14a3e:	b2d2      	uxtb	r2, r2
   14a40:	400c      	ands	r4, r1
   14a42:	e76f      	b.n	14924 <__aeabi_fmul+0x94>
   14a44:	2080      	movs	r0, #128	; 0x80
   14a46:	03c0      	lsls	r0, r0, #15
   14a48:	4207      	tst	r7, r0
   14a4a:	d007      	beq.n	14a5c <__aeabi_fmul+0x1cc>
   14a4c:	4205      	tst	r5, r0
   14a4e:	d105      	bne.n	14a5c <__aeabi_fmul+0x1cc>
   14a50:	4328      	orrs	r0, r5
   14a52:	0240      	lsls	r0, r0, #9
   14a54:	0a40      	lsrs	r0, r0, #9
   14a56:	4644      	mov	r4, r8
   14a58:	22ff      	movs	r2, #255	; 0xff
   14a5a:	e763      	b.n	14924 <__aeabi_fmul+0x94>
   14a5c:	4338      	orrs	r0, r7
   14a5e:	0240      	lsls	r0, r0, #9
   14a60:	0a40      	lsrs	r0, r0, #9
   14a62:	22ff      	movs	r2, #255	; 0xff
   14a64:	e75e      	b.n	14924 <__aeabi_fmul+0x94>
   14a66:	2401      	movs	r4, #1
   14a68:	1aa3      	subs	r3, r4, r2
   14a6a:	2b1b      	cmp	r3, #27
   14a6c:	dd05      	ble.n	14a7a <__aeabi_fmul+0x1ea>
   14a6e:	400c      	ands	r4, r1
   14a70:	2200      	movs	r2, #0
   14a72:	2000      	movs	r0, #0
   14a74:	e756      	b.n	14924 <__aeabi_fmul+0x94>
   14a76:	465e      	mov	r6, fp
   14a78:	e7cb      	b.n	14a12 <__aeabi_fmul+0x182>
   14a7a:	002a      	movs	r2, r5
   14a7c:	2020      	movs	r0, #32
   14a7e:	40da      	lsrs	r2, r3
   14a80:	1ac3      	subs	r3, r0, r3
   14a82:	409d      	lsls	r5, r3
   14a84:	002b      	movs	r3, r5
   14a86:	1e5d      	subs	r5, r3, #1
   14a88:	41ab      	sbcs	r3, r5
   14a8a:	4313      	orrs	r3, r2
   14a8c:	075a      	lsls	r2, r3, #29
   14a8e:	d004      	beq.n	14a9a <__aeabi_fmul+0x20a>
   14a90:	220f      	movs	r2, #15
   14a92:	401a      	ands	r2, r3
   14a94:	2a04      	cmp	r2, #4
   14a96:	d000      	beq.n	14a9a <__aeabi_fmul+0x20a>
   14a98:	3304      	adds	r3, #4
   14a9a:	015a      	lsls	r2, r3, #5
   14a9c:	d504      	bpl.n	14aa8 <__aeabi_fmul+0x218>
   14a9e:	2401      	movs	r4, #1
   14aa0:	2201      	movs	r2, #1
   14aa2:	400c      	ands	r4, r1
   14aa4:	2000      	movs	r0, #0
   14aa6:	e73d      	b.n	14924 <__aeabi_fmul+0x94>
   14aa8:	2401      	movs	r4, #1
   14aaa:	019b      	lsls	r3, r3, #6
   14aac:	0a58      	lsrs	r0, r3, #9
   14aae:	400c      	ands	r4, r1
   14ab0:	2200      	movs	r2, #0
   14ab2:	e737      	b.n	14924 <__aeabi_fmul+0x94>
   14ab4:	2080      	movs	r0, #128	; 0x80
   14ab6:	2401      	movs	r4, #1
   14ab8:	03c0      	lsls	r0, r0, #15
   14aba:	4328      	orrs	r0, r5
   14abc:	0240      	lsls	r0, r0, #9
   14abe:	0a40      	lsrs	r0, r0, #9
   14ac0:	400c      	ands	r4, r1
   14ac2:	22ff      	movs	r2, #255	; 0xff
   14ac4:	e72e      	b.n	14924 <__aeabi_fmul+0x94>
   14ac6:	46c0      	nop			; (mov r8, r8)
   14ac8:	00017678 	.word	0x00017678
   14acc:	f7ffffff 	.word	0xf7ffffff

00014ad0 <__aeabi_fsub>:
   14ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ad2:	464f      	mov	r7, r9
   14ad4:	46d6      	mov	lr, sl
   14ad6:	4646      	mov	r6, r8
   14ad8:	0044      	lsls	r4, r0, #1
   14ada:	b5c0      	push	{r6, r7, lr}
   14adc:	0fc2      	lsrs	r2, r0, #31
   14ade:	0247      	lsls	r7, r0, #9
   14ae0:	0248      	lsls	r0, r1, #9
   14ae2:	0a40      	lsrs	r0, r0, #9
   14ae4:	4684      	mov	ip, r0
   14ae6:	4666      	mov	r6, ip
   14ae8:	0a7b      	lsrs	r3, r7, #9
   14aea:	0048      	lsls	r0, r1, #1
   14aec:	0fc9      	lsrs	r1, r1, #31
   14aee:	469a      	mov	sl, r3
   14af0:	0e24      	lsrs	r4, r4, #24
   14af2:	0015      	movs	r5, r2
   14af4:	00db      	lsls	r3, r3, #3
   14af6:	0e00      	lsrs	r0, r0, #24
   14af8:	4689      	mov	r9, r1
   14afa:	00f6      	lsls	r6, r6, #3
   14afc:	28ff      	cmp	r0, #255	; 0xff
   14afe:	d100      	bne.n	14b02 <__aeabi_fsub+0x32>
   14b00:	e08f      	b.n	14c22 <__aeabi_fsub+0x152>
   14b02:	2101      	movs	r1, #1
   14b04:	464f      	mov	r7, r9
   14b06:	404f      	eors	r7, r1
   14b08:	0039      	movs	r1, r7
   14b0a:	4291      	cmp	r1, r2
   14b0c:	d066      	beq.n	14bdc <__aeabi_fsub+0x10c>
   14b0e:	1a22      	subs	r2, r4, r0
   14b10:	2a00      	cmp	r2, #0
   14b12:	dc00      	bgt.n	14b16 <__aeabi_fsub+0x46>
   14b14:	e09d      	b.n	14c52 <__aeabi_fsub+0x182>
   14b16:	2800      	cmp	r0, #0
   14b18:	d13d      	bne.n	14b96 <__aeabi_fsub+0xc6>
   14b1a:	2e00      	cmp	r6, #0
   14b1c:	d100      	bne.n	14b20 <__aeabi_fsub+0x50>
   14b1e:	e08b      	b.n	14c38 <__aeabi_fsub+0x168>
   14b20:	1e51      	subs	r1, r2, #1
   14b22:	2900      	cmp	r1, #0
   14b24:	d000      	beq.n	14b28 <__aeabi_fsub+0x58>
   14b26:	e0b5      	b.n	14c94 <__aeabi_fsub+0x1c4>
   14b28:	2401      	movs	r4, #1
   14b2a:	1b9b      	subs	r3, r3, r6
   14b2c:	015a      	lsls	r2, r3, #5
   14b2e:	d544      	bpl.n	14bba <__aeabi_fsub+0xea>
   14b30:	019b      	lsls	r3, r3, #6
   14b32:	099f      	lsrs	r7, r3, #6
   14b34:	0038      	movs	r0, r7
   14b36:	f002 f881 	bl	16c3c <__clzsi2>
   14b3a:	3805      	subs	r0, #5
   14b3c:	4087      	lsls	r7, r0
   14b3e:	4284      	cmp	r4, r0
   14b40:	dd00      	ble.n	14b44 <__aeabi_fsub+0x74>
   14b42:	e096      	b.n	14c72 <__aeabi_fsub+0x1a2>
   14b44:	1b04      	subs	r4, r0, r4
   14b46:	003a      	movs	r2, r7
   14b48:	2020      	movs	r0, #32
   14b4a:	3401      	adds	r4, #1
   14b4c:	40e2      	lsrs	r2, r4
   14b4e:	1b04      	subs	r4, r0, r4
   14b50:	40a7      	lsls	r7, r4
   14b52:	003b      	movs	r3, r7
   14b54:	1e5f      	subs	r7, r3, #1
   14b56:	41bb      	sbcs	r3, r7
   14b58:	2400      	movs	r4, #0
   14b5a:	4313      	orrs	r3, r2
   14b5c:	075a      	lsls	r2, r3, #29
   14b5e:	d004      	beq.n	14b6a <__aeabi_fsub+0x9a>
   14b60:	220f      	movs	r2, #15
   14b62:	401a      	ands	r2, r3
   14b64:	2a04      	cmp	r2, #4
   14b66:	d000      	beq.n	14b6a <__aeabi_fsub+0x9a>
   14b68:	3304      	adds	r3, #4
   14b6a:	015a      	lsls	r2, r3, #5
   14b6c:	d527      	bpl.n	14bbe <__aeabi_fsub+0xee>
   14b6e:	3401      	adds	r4, #1
   14b70:	2cff      	cmp	r4, #255	; 0xff
   14b72:	d100      	bne.n	14b76 <__aeabi_fsub+0xa6>
   14b74:	e079      	b.n	14c6a <__aeabi_fsub+0x19a>
   14b76:	2201      	movs	r2, #1
   14b78:	019b      	lsls	r3, r3, #6
   14b7a:	0a5b      	lsrs	r3, r3, #9
   14b7c:	b2e4      	uxtb	r4, r4
   14b7e:	402a      	ands	r2, r5
   14b80:	025b      	lsls	r3, r3, #9
   14b82:	05e4      	lsls	r4, r4, #23
   14b84:	0a58      	lsrs	r0, r3, #9
   14b86:	07d2      	lsls	r2, r2, #31
   14b88:	4320      	orrs	r0, r4
   14b8a:	4310      	orrs	r0, r2
   14b8c:	bc1c      	pop	{r2, r3, r4}
   14b8e:	4690      	mov	r8, r2
   14b90:	4699      	mov	r9, r3
   14b92:	46a2      	mov	sl, r4
   14b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14b96:	2cff      	cmp	r4, #255	; 0xff
   14b98:	d0e0      	beq.n	14b5c <__aeabi_fsub+0x8c>
   14b9a:	2180      	movs	r1, #128	; 0x80
   14b9c:	04c9      	lsls	r1, r1, #19
   14b9e:	430e      	orrs	r6, r1
   14ba0:	2a1b      	cmp	r2, #27
   14ba2:	dc7b      	bgt.n	14c9c <__aeabi_fsub+0x1cc>
   14ba4:	0031      	movs	r1, r6
   14ba6:	2020      	movs	r0, #32
   14ba8:	40d1      	lsrs	r1, r2
   14baa:	1a82      	subs	r2, r0, r2
   14bac:	4096      	lsls	r6, r2
   14bae:	1e72      	subs	r2, r6, #1
   14bb0:	4196      	sbcs	r6, r2
   14bb2:	430e      	orrs	r6, r1
   14bb4:	1b9b      	subs	r3, r3, r6
   14bb6:	015a      	lsls	r2, r3, #5
   14bb8:	d4ba      	bmi.n	14b30 <__aeabi_fsub+0x60>
   14bba:	075a      	lsls	r2, r3, #29
   14bbc:	d1d0      	bne.n	14b60 <__aeabi_fsub+0x90>
   14bbe:	2201      	movs	r2, #1
   14bc0:	08df      	lsrs	r7, r3, #3
   14bc2:	402a      	ands	r2, r5
   14bc4:	2cff      	cmp	r4, #255	; 0xff
   14bc6:	d133      	bne.n	14c30 <__aeabi_fsub+0x160>
   14bc8:	2f00      	cmp	r7, #0
   14bca:	d100      	bne.n	14bce <__aeabi_fsub+0xfe>
   14bcc:	e0a8      	b.n	14d20 <__aeabi_fsub+0x250>
   14bce:	2380      	movs	r3, #128	; 0x80
   14bd0:	03db      	lsls	r3, r3, #15
   14bd2:	433b      	orrs	r3, r7
   14bd4:	025b      	lsls	r3, r3, #9
   14bd6:	0a5b      	lsrs	r3, r3, #9
   14bd8:	24ff      	movs	r4, #255	; 0xff
   14bda:	e7d1      	b.n	14b80 <__aeabi_fsub+0xb0>
   14bdc:	1a21      	subs	r1, r4, r0
   14bde:	2900      	cmp	r1, #0
   14be0:	dd4c      	ble.n	14c7c <__aeabi_fsub+0x1ac>
   14be2:	2800      	cmp	r0, #0
   14be4:	d02a      	beq.n	14c3c <__aeabi_fsub+0x16c>
   14be6:	2cff      	cmp	r4, #255	; 0xff
   14be8:	d0b8      	beq.n	14b5c <__aeabi_fsub+0x8c>
   14bea:	2080      	movs	r0, #128	; 0x80
   14bec:	04c0      	lsls	r0, r0, #19
   14bee:	4306      	orrs	r6, r0
   14bf0:	291b      	cmp	r1, #27
   14bf2:	dd00      	ble.n	14bf6 <__aeabi_fsub+0x126>
   14bf4:	e0af      	b.n	14d56 <__aeabi_fsub+0x286>
   14bf6:	0030      	movs	r0, r6
   14bf8:	2720      	movs	r7, #32
   14bfa:	40c8      	lsrs	r0, r1
   14bfc:	1a79      	subs	r1, r7, r1
   14bfe:	408e      	lsls	r6, r1
   14c00:	1e71      	subs	r1, r6, #1
   14c02:	418e      	sbcs	r6, r1
   14c04:	4306      	orrs	r6, r0
   14c06:	199b      	adds	r3, r3, r6
   14c08:	0159      	lsls	r1, r3, #5
   14c0a:	d5d6      	bpl.n	14bba <__aeabi_fsub+0xea>
   14c0c:	3401      	adds	r4, #1
   14c0e:	2cff      	cmp	r4, #255	; 0xff
   14c10:	d100      	bne.n	14c14 <__aeabi_fsub+0x144>
   14c12:	e085      	b.n	14d20 <__aeabi_fsub+0x250>
   14c14:	2201      	movs	r2, #1
   14c16:	497a      	ldr	r1, [pc, #488]	; (14e00 <__aeabi_fsub+0x330>)
   14c18:	401a      	ands	r2, r3
   14c1a:	085b      	lsrs	r3, r3, #1
   14c1c:	400b      	ands	r3, r1
   14c1e:	4313      	orrs	r3, r2
   14c20:	e79c      	b.n	14b5c <__aeabi_fsub+0x8c>
   14c22:	2e00      	cmp	r6, #0
   14c24:	d000      	beq.n	14c28 <__aeabi_fsub+0x158>
   14c26:	e770      	b.n	14b0a <__aeabi_fsub+0x3a>
   14c28:	e76b      	b.n	14b02 <__aeabi_fsub+0x32>
   14c2a:	1e3b      	subs	r3, r7, #0
   14c2c:	d1c5      	bne.n	14bba <__aeabi_fsub+0xea>
   14c2e:	2200      	movs	r2, #0
   14c30:	027b      	lsls	r3, r7, #9
   14c32:	0a5b      	lsrs	r3, r3, #9
   14c34:	b2e4      	uxtb	r4, r4
   14c36:	e7a3      	b.n	14b80 <__aeabi_fsub+0xb0>
   14c38:	0014      	movs	r4, r2
   14c3a:	e78f      	b.n	14b5c <__aeabi_fsub+0x8c>
   14c3c:	2e00      	cmp	r6, #0
   14c3e:	d04d      	beq.n	14cdc <__aeabi_fsub+0x20c>
   14c40:	1e48      	subs	r0, r1, #1
   14c42:	2800      	cmp	r0, #0
   14c44:	d157      	bne.n	14cf6 <__aeabi_fsub+0x226>
   14c46:	199b      	adds	r3, r3, r6
   14c48:	2401      	movs	r4, #1
   14c4a:	015a      	lsls	r2, r3, #5
   14c4c:	d5b5      	bpl.n	14bba <__aeabi_fsub+0xea>
   14c4e:	2402      	movs	r4, #2
   14c50:	e7e0      	b.n	14c14 <__aeabi_fsub+0x144>
   14c52:	2a00      	cmp	r2, #0
   14c54:	d125      	bne.n	14ca2 <__aeabi_fsub+0x1d2>
   14c56:	1c62      	adds	r2, r4, #1
   14c58:	b2d2      	uxtb	r2, r2
   14c5a:	2a01      	cmp	r2, #1
   14c5c:	dd72      	ble.n	14d44 <__aeabi_fsub+0x274>
   14c5e:	1b9f      	subs	r7, r3, r6
   14c60:	017a      	lsls	r2, r7, #5
   14c62:	d535      	bpl.n	14cd0 <__aeabi_fsub+0x200>
   14c64:	1af7      	subs	r7, r6, r3
   14c66:	000d      	movs	r5, r1
   14c68:	e764      	b.n	14b34 <__aeabi_fsub+0x64>
   14c6a:	2201      	movs	r2, #1
   14c6c:	2300      	movs	r3, #0
   14c6e:	402a      	ands	r2, r5
   14c70:	e786      	b.n	14b80 <__aeabi_fsub+0xb0>
   14c72:	003b      	movs	r3, r7
   14c74:	4a63      	ldr	r2, [pc, #396]	; (14e04 <__aeabi_fsub+0x334>)
   14c76:	1a24      	subs	r4, r4, r0
   14c78:	4013      	ands	r3, r2
   14c7a:	e76f      	b.n	14b5c <__aeabi_fsub+0x8c>
   14c7c:	2900      	cmp	r1, #0
   14c7e:	d16c      	bne.n	14d5a <__aeabi_fsub+0x28a>
   14c80:	1c61      	adds	r1, r4, #1
   14c82:	b2c8      	uxtb	r0, r1
   14c84:	2801      	cmp	r0, #1
   14c86:	dd4e      	ble.n	14d26 <__aeabi_fsub+0x256>
   14c88:	29ff      	cmp	r1, #255	; 0xff
   14c8a:	d049      	beq.n	14d20 <__aeabi_fsub+0x250>
   14c8c:	199b      	adds	r3, r3, r6
   14c8e:	085b      	lsrs	r3, r3, #1
   14c90:	000c      	movs	r4, r1
   14c92:	e763      	b.n	14b5c <__aeabi_fsub+0x8c>
   14c94:	2aff      	cmp	r2, #255	; 0xff
   14c96:	d041      	beq.n	14d1c <__aeabi_fsub+0x24c>
   14c98:	000a      	movs	r2, r1
   14c9a:	e781      	b.n	14ba0 <__aeabi_fsub+0xd0>
   14c9c:	2601      	movs	r6, #1
   14c9e:	1b9b      	subs	r3, r3, r6
   14ca0:	e789      	b.n	14bb6 <__aeabi_fsub+0xe6>
   14ca2:	2c00      	cmp	r4, #0
   14ca4:	d01c      	beq.n	14ce0 <__aeabi_fsub+0x210>
   14ca6:	28ff      	cmp	r0, #255	; 0xff
   14ca8:	d021      	beq.n	14cee <__aeabi_fsub+0x21e>
   14caa:	2480      	movs	r4, #128	; 0x80
   14cac:	04e4      	lsls	r4, r4, #19
   14cae:	4252      	negs	r2, r2
   14cb0:	4323      	orrs	r3, r4
   14cb2:	2a1b      	cmp	r2, #27
   14cb4:	dd00      	ble.n	14cb8 <__aeabi_fsub+0x1e8>
   14cb6:	e096      	b.n	14de6 <__aeabi_fsub+0x316>
   14cb8:	001c      	movs	r4, r3
   14cba:	2520      	movs	r5, #32
   14cbc:	40d4      	lsrs	r4, r2
   14cbe:	1aaa      	subs	r2, r5, r2
   14cc0:	4093      	lsls	r3, r2
   14cc2:	1e5a      	subs	r2, r3, #1
   14cc4:	4193      	sbcs	r3, r2
   14cc6:	4323      	orrs	r3, r4
   14cc8:	1af3      	subs	r3, r6, r3
   14cca:	0004      	movs	r4, r0
   14ccc:	000d      	movs	r5, r1
   14cce:	e72d      	b.n	14b2c <__aeabi_fsub+0x5c>
   14cd0:	2f00      	cmp	r7, #0
   14cd2:	d000      	beq.n	14cd6 <__aeabi_fsub+0x206>
   14cd4:	e72e      	b.n	14b34 <__aeabi_fsub+0x64>
   14cd6:	2200      	movs	r2, #0
   14cd8:	2400      	movs	r4, #0
   14cda:	e7a9      	b.n	14c30 <__aeabi_fsub+0x160>
   14cdc:	000c      	movs	r4, r1
   14cde:	e73d      	b.n	14b5c <__aeabi_fsub+0x8c>
   14ce0:	2b00      	cmp	r3, #0
   14ce2:	d058      	beq.n	14d96 <__aeabi_fsub+0x2c6>
   14ce4:	43d2      	mvns	r2, r2
   14ce6:	2a00      	cmp	r2, #0
   14ce8:	d0ee      	beq.n	14cc8 <__aeabi_fsub+0x1f8>
   14cea:	28ff      	cmp	r0, #255	; 0xff
   14cec:	d1e1      	bne.n	14cb2 <__aeabi_fsub+0x1e2>
   14cee:	0033      	movs	r3, r6
   14cf0:	24ff      	movs	r4, #255	; 0xff
   14cf2:	000d      	movs	r5, r1
   14cf4:	e732      	b.n	14b5c <__aeabi_fsub+0x8c>
   14cf6:	29ff      	cmp	r1, #255	; 0xff
   14cf8:	d010      	beq.n	14d1c <__aeabi_fsub+0x24c>
   14cfa:	0001      	movs	r1, r0
   14cfc:	e778      	b.n	14bf0 <__aeabi_fsub+0x120>
   14cfe:	2b00      	cmp	r3, #0
   14d00:	d06e      	beq.n	14de0 <__aeabi_fsub+0x310>
   14d02:	24ff      	movs	r4, #255	; 0xff
   14d04:	2e00      	cmp	r6, #0
   14d06:	d100      	bne.n	14d0a <__aeabi_fsub+0x23a>
   14d08:	e728      	b.n	14b5c <__aeabi_fsub+0x8c>
   14d0a:	2280      	movs	r2, #128	; 0x80
   14d0c:	4651      	mov	r1, sl
   14d0e:	03d2      	lsls	r2, r2, #15
   14d10:	4211      	tst	r1, r2
   14d12:	d003      	beq.n	14d1c <__aeabi_fsub+0x24c>
   14d14:	4661      	mov	r1, ip
   14d16:	4211      	tst	r1, r2
   14d18:	d100      	bne.n	14d1c <__aeabi_fsub+0x24c>
   14d1a:	0033      	movs	r3, r6
   14d1c:	24ff      	movs	r4, #255	; 0xff
   14d1e:	e71d      	b.n	14b5c <__aeabi_fsub+0x8c>
   14d20:	24ff      	movs	r4, #255	; 0xff
   14d22:	2300      	movs	r3, #0
   14d24:	e72c      	b.n	14b80 <__aeabi_fsub+0xb0>
   14d26:	2c00      	cmp	r4, #0
   14d28:	d1e9      	bne.n	14cfe <__aeabi_fsub+0x22e>
   14d2a:	2b00      	cmp	r3, #0
   14d2c:	d063      	beq.n	14df6 <__aeabi_fsub+0x326>
   14d2e:	2e00      	cmp	r6, #0
   14d30:	d100      	bne.n	14d34 <__aeabi_fsub+0x264>
   14d32:	e713      	b.n	14b5c <__aeabi_fsub+0x8c>
   14d34:	199b      	adds	r3, r3, r6
   14d36:	015a      	lsls	r2, r3, #5
   14d38:	d400      	bmi.n	14d3c <__aeabi_fsub+0x26c>
   14d3a:	e73e      	b.n	14bba <__aeabi_fsub+0xea>
   14d3c:	4a31      	ldr	r2, [pc, #196]	; (14e04 <__aeabi_fsub+0x334>)
   14d3e:	000c      	movs	r4, r1
   14d40:	4013      	ands	r3, r2
   14d42:	e70b      	b.n	14b5c <__aeabi_fsub+0x8c>
   14d44:	2c00      	cmp	r4, #0
   14d46:	d11e      	bne.n	14d86 <__aeabi_fsub+0x2b6>
   14d48:	2b00      	cmp	r3, #0
   14d4a:	d12f      	bne.n	14dac <__aeabi_fsub+0x2dc>
   14d4c:	2e00      	cmp	r6, #0
   14d4e:	d04f      	beq.n	14df0 <__aeabi_fsub+0x320>
   14d50:	0033      	movs	r3, r6
   14d52:	000d      	movs	r5, r1
   14d54:	e702      	b.n	14b5c <__aeabi_fsub+0x8c>
   14d56:	2601      	movs	r6, #1
   14d58:	e755      	b.n	14c06 <__aeabi_fsub+0x136>
   14d5a:	2c00      	cmp	r4, #0
   14d5c:	d11f      	bne.n	14d9e <__aeabi_fsub+0x2ce>
   14d5e:	2b00      	cmp	r3, #0
   14d60:	d043      	beq.n	14dea <__aeabi_fsub+0x31a>
   14d62:	43c9      	mvns	r1, r1
   14d64:	2900      	cmp	r1, #0
   14d66:	d00b      	beq.n	14d80 <__aeabi_fsub+0x2b0>
   14d68:	28ff      	cmp	r0, #255	; 0xff
   14d6a:	d039      	beq.n	14de0 <__aeabi_fsub+0x310>
   14d6c:	291b      	cmp	r1, #27
   14d6e:	dc44      	bgt.n	14dfa <__aeabi_fsub+0x32a>
   14d70:	001c      	movs	r4, r3
   14d72:	2720      	movs	r7, #32
   14d74:	40cc      	lsrs	r4, r1
   14d76:	1a79      	subs	r1, r7, r1
   14d78:	408b      	lsls	r3, r1
   14d7a:	1e59      	subs	r1, r3, #1
   14d7c:	418b      	sbcs	r3, r1
   14d7e:	4323      	orrs	r3, r4
   14d80:	199b      	adds	r3, r3, r6
   14d82:	0004      	movs	r4, r0
   14d84:	e740      	b.n	14c08 <__aeabi_fsub+0x138>
   14d86:	2b00      	cmp	r3, #0
   14d88:	d11a      	bne.n	14dc0 <__aeabi_fsub+0x2f0>
   14d8a:	2e00      	cmp	r6, #0
   14d8c:	d124      	bne.n	14dd8 <__aeabi_fsub+0x308>
   14d8e:	2780      	movs	r7, #128	; 0x80
   14d90:	2200      	movs	r2, #0
   14d92:	03ff      	lsls	r7, r7, #15
   14d94:	e71b      	b.n	14bce <__aeabi_fsub+0xfe>
   14d96:	0033      	movs	r3, r6
   14d98:	0004      	movs	r4, r0
   14d9a:	000d      	movs	r5, r1
   14d9c:	e6de      	b.n	14b5c <__aeabi_fsub+0x8c>
   14d9e:	28ff      	cmp	r0, #255	; 0xff
   14da0:	d01e      	beq.n	14de0 <__aeabi_fsub+0x310>
   14da2:	2480      	movs	r4, #128	; 0x80
   14da4:	04e4      	lsls	r4, r4, #19
   14da6:	4249      	negs	r1, r1
   14da8:	4323      	orrs	r3, r4
   14daa:	e7df      	b.n	14d6c <__aeabi_fsub+0x29c>
   14dac:	2e00      	cmp	r6, #0
   14dae:	d100      	bne.n	14db2 <__aeabi_fsub+0x2e2>
   14db0:	e6d4      	b.n	14b5c <__aeabi_fsub+0x8c>
   14db2:	1b9f      	subs	r7, r3, r6
   14db4:	017a      	lsls	r2, r7, #5
   14db6:	d400      	bmi.n	14dba <__aeabi_fsub+0x2ea>
   14db8:	e737      	b.n	14c2a <__aeabi_fsub+0x15a>
   14dba:	1af3      	subs	r3, r6, r3
   14dbc:	000d      	movs	r5, r1
   14dbe:	e6cd      	b.n	14b5c <__aeabi_fsub+0x8c>
   14dc0:	24ff      	movs	r4, #255	; 0xff
   14dc2:	2e00      	cmp	r6, #0
   14dc4:	d100      	bne.n	14dc8 <__aeabi_fsub+0x2f8>
   14dc6:	e6c9      	b.n	14b5c <__aeabi_fsub+0x8c>
   14dc8:	2280      	movs	r2, #128	; 0x80
   14dca:	4650      	mov	r0, sl
   14dcc:	03d2      	lsls	r2, r2, #15
   14dce:	4210      	tst	r0, r2
   14dd0:	d0a4      	beq.n	14d1c <__aeabi_fsub+0x24c>
   14dd2:	4660      	mov	r0, ip
   14dd4:	4210      	tst	r0, r2
   14dd6:	d1a1      	bne.n	14d1c <__aeabi_fsub+0x24c>
   14dd8:	0033      	movs	r3, r6
   14dda:	000d      	movs	r5, r1
   14ddc:	24ff      	movs	r4, #255	; 0xff
   14dde:	e6bd      	b.n	14b5c <__aeabi_fsub+0x8c>
   14de0:	0033      	movs	r3, r6
   14de2:	24ff      	movs	r4, #255	; 0xff
   14de4:	e6ba      	b.n	14b5c <__aeabi_fsub+0x8c>
   14de6:	2301      	movs	r3, #1
   14de8:	e76e      	b.n	14cc8 <__aeabi_fsub+0x1f8>
   14dea:	0033      	movs	r3, r6
   14dec:	0004      	movs	r4, r0
   14dee:	e6b5      	b.n	14b5c <__aeabi_fsub+0x8c>
   14df0:	2700      	movs	r7, #0
   14df2:	2200      	movs	r2, #0
   14df4:	e71c      	b.n	14c30 <__aeabi_fsub+0x160>
   14df6:	0033      	movs	r3, r6
   14df8:	e6b0      	b.n	14b5c <__aeabi_fsub+0x8c>
   14dfa:	2301      	movs	r3, #1
   14dfc:	e7c0      	b.n	14d80 <__aeabi_fsub+0x2b0>
   14dfe:	46c0      	nop			; (mov r8, r8)
   14e00:	7dffffff 	.word	0x7dffffff
   14e04:	fbffffff 	.word	0xfbffffff

00014e08 <__aeabi_f2iz>:
   14e08:	0241      	lsls	r1, r0, #9
   14e0a:	0043      	lsls	r3, r0, #1
   14e0c:	0fc2      	lsrs	r2, r0, #31
   14e0e:	0a49      	lsrs	r1, r1, #9
   14e10:	0e1b      	lsrs	r3, r3, #24
   14e12:	2000      	movs	r0, #0
   14e14:	2b7e      	cmp	r3, #126	; 0x7e
   14e16:	dd0d      	ble.n	14e34 <__aeabi_f2iz+0x2c>
   14e18:	2b9d      	cmp	r3, #157	; 0x9d
   14e1a:	dc0c      	bgt.n	14e36 <__aeabi_f2iz+0x2e>
   14e1c:	2080      	movs	r0, #128	; 0x80
   14e1e:	0400      	lsls	r0, r0, #16
   14e20:	4301      	orrs	r1, r0
   14e22:	2b95      	cmp	r3, #149	; 0x95
   14e24:	dc0a      	bgt.n	14e3c <__aeabi_f2iz+0x34>
   14e26:	2096      	movs	r0, #150	; 0x96
   14e28:	1ac3      	subs	r3, r0, r3
   14e2a:	40d9      	lsrs	r1, r3
   14e2c:	4248      	negs	r0, r1
   14e2e:	2a00      	cmp	r2, #0
   14e30:	d100      	bne.n	14e34 <__aeabi_f2iz+0x2c>
   14e32:	0008      	movs	r0, r1
   14e34:	4770      	bx	lr
   14e36:	4b03      	ldr	r3, [pc, #12]	; (14e44 <__aeabi_f2iz+0x3c>)
   14e38:	18d0      	adds	r0, r2, r3
   14e3a:	e7fb      	b.n	14e34 <__aeabi_f2iz+0x2c>
   14e3c:	3b96      	subs	r3, #150	; 0x96
   14e3e:	4099      	lsls	r1, r3
   14e40:	e7f4      	b.n	14e2c <__aeabi_f2iz+0x24>
   14e42:	46c0      	nop			; (mov r8, r8)
   14e44:	7fffffff 	.word	0x7fffffff

00014e48 <__aeabi_i2f>:
   14e48:	b570      	push	{r4, r5, r6, lr}
   14e4a:	2800      	cmp	r0, #0
   14e4c:	d030      	beq.n	14eb0 <__aeabi_i2f+0x68>
   14e4e:	17c3      	asrs	r3, r0, #31
   14e50:	18c4      	adds	r4, r0, r3
   14e52:	405c      	eors	r4, r3
   14e54:	0fc5      	lsrs	r5, r0, #31
   14e56:	0020      	movs	r0, r4
   14e58:	f001 fef0 	bl	16c3c <__clzsi2>
   14e5c:	239e      	movs	r3, #158	; 0x9e
   14e5e:	1a1b      	subs	r3, r3, r0
   14e60:	2b96      	cmp	r3, #150	; 0x96
   14e62:	dc0d      	bgt.n	14e80 <__aeabi_i2f+0x38>
   14e64:	2296      	movs	r2, #150	; 0x96
   14e66:	1ad2      	subs	r2, r2, r3
   14e68:	4094      	lsls	r4, r2
   14e6a:	002a      	movs	r2, r5
   14e6c:	0264      	lsls	r4, r4, #9
   14e6e:	0a64      	lsrs	r4, r4, #9
   14e70:	b2db      	uxtb	r3, r3
   14e72:	0264      	lsls	r4, r4, #9
   14e74:	05db      	lsls	r3, r3, #23
   14e76:	0a60      	lsrs	r0, r4, #9
   14e78:	07d2      	lsls	r2, r2, #31
   14e7a:	4318      	orrs	r0, r3
   14e7c:	4310      	orrs	r0, r2
   14e7e:	bd70      	pop	{r4, r5, r6, pc}
   14e80:	2b99      	cmp	r3, #153	; 0x99
   14e82:	dc19      	bgt.n	14eb8 <__aeabi_i2f+0x70>
   14e84:	2299      	movs	r2, #153	; 0x99
   14e86:	1ad2      	subs	r2, r2, r3
   14e88:	2a00      	cmp	r2, #0
   14e8a:	dd29      	ble.n	14ee0 <__aeabi_i2f+0x98>
   14e8c:	4094      	lsls	r4, r2
   14e8e:	0022      	movs	r2, r4
   14e90:	4c14      	ldr	r4, [pc, #80]	; (14ee4 <__aeabi_i2f+0x9c>)
   14e92:	4014      	ands	r4, r2
   14e94:	0751      	lsls	r1, r2, #29
   14e96:	d004      	beq.n	14ea2 <__aeabi_i2f+0x5a>
   14e98:	210f      	movs	r1, #15
   14e9a:	400a      	ands	r2, r1
   14e9c:	2a04      	cmp	r2, #4
   14e9e:	d000      	beq.n	14ea2 <__aeabi_i2f+0x5a>
   14ea0:	3404      	adds	r4, #4
   14ea2:	0162      	lsls	r2, r4, #5
   14ea4:	d413      	bmi.n	14ece <__aeabi_i2f+0x86>
   14ea6:	01a4      	lsls	r4, r4, #6
   14ea8:	0a64      	lsrs	r4, r4, #9
   14eaa:	b2db      	uxtb	r3, r3
   14eac:	002a      	movs	r2, r5
   14eae:	e7e0      	b.n	14e72 <__aeabi_i2f+0x2a>
   14eb0:	2200      	movs	r2, #0
   14eb2:	2300      	movs	r3, #0
   14eb4:	2400      	movs	r4, #0
   14eb6:	e7dc      	b.n	14e72 <__aeabi_i2f+0x2a>
   14eb8:	2205      	movs	r2, #5
   14eba:	0021      	movs	r1, r4
   14ebc:	1a12      	subs	r2, r2, r0
   14ebe:	40d1      	lsrs	r1, r2
   14ec0:	22b9      	movs	r2, #185	; 0xb9
   14ec2:	1ad2      	subs	r2, r2, r3
   14ec4:	4094      	lsls	r4, r2
   14ec6:	1e62      	subs	r2, r4, #1
   14ec8:	4194      	sbcs	r4, r2
   14eca:	430c      	orrs	r4, r1
   14ecc:	e7da      	b.n	14e84 <__aeabi_i2f+0x3c>
   14ece:	4b05      	ldr	r3, [pc, #20]	; (14ee4 <__aeabi_i2f+0x9c>)
   14ed0:	002a      	movs	r2, r5
   14ed2:	401c      	ands	r4, r3
   14ed4:	239f      	movs	r3, #159	; 0x9f
   14ed6:	01a4      	lsls	r4, r4, #6
   14ed8:	1a1b      	subs	r3, r3, r0
   14eda:	0a64      	lsrs	r4, r4, #9
   14edc:	b2db      	uxtb	r3, r3
   14ede:	e7c8      	b.n	14e72 <__aeabi_i2f+0x2a>
   14ee0:	0022      	movs	r2, r4
   14ee2:	e7d5      	b.n	14e90 <__aeabi_i2f+0x48>
   14ee4:	fbffffff 	.word	0xfbffffff

00014ee8 <__aeabi_ui2f>:
   14ee8:	b510      	push	{r4, lr}
   14eea:	1e04      	subs	r4, r0, #0
   14eec:	d027      	beq.n	14f3e <__aeabi_ui2f+0x56>
   14eee:	f001 fea5 	bl	16c3c <__clzsi2>
   14ef2:	239e      	movs	r3, #158	; 0x9e
   14ef4:	1a1b      	subs	r3, r3, r0
   14ef6:	2b96      	cmp	r3, #150	; 0x96
   14ef8:	dc0a      	bgt.n	14f10 <__aeabi_ui2f+0x28>
   14efa:	2296      	movs	r2, #150	; 0x96
   14efc:	1ad2      	subs	r2, r2, r3
   14efe:	4094      	lsls	r4, r2
   14f00:	0264      	lsls	r4, r4, #9
   14f02:	0a64      	lsrs	r4, r4, #9
   14f04:	b2db      	uxtb	r3, r3
   14f06:	0264      	lsls	r4, r4, #9
   14f08:	05db      	lsls	r3, r3, #23
   14f0a:	0a60      	lsrs	r0, r4, #9
   14f0c:	4318      	orrs	r0, r3
   14f0e:	bd10      	pop	{r4, pc}
   14f10:	2b99      	cmp	r3, #153	; 0x99
   14f12:	dc17      	bgt.n	14f44 <__aeabi_ui2f+0x5c>
   14f14:	2299      	movs	r2, #153	; 0x99
   14f16:	1ad2      	subs	r2, r2, r3
   14f18:	2a00      	cmp	r2, #0
   14f1a:	dd27      	ble.n	14f6c <__aeabi_ui2f+0x84>
   14f1c:	4094      	lsls	r4, r2
   14f1e:	0022      	movs	r2, r4
   14f20:	4c13      	ldr	r4, [pc, #76]	; (14f70 <__aeabi_ui2f+0x88>)
   14f22:	4014      	ands	r4, r2
   14f24:	0751      	lsls	r1, r2, #29
   14f26:	d004      	beq.n	14f32 <__aeabi_ui2f+0x4a>
   14f28:	210f      	movs	r1, #15
   14f2a:	400a      	ands	r2, r1
   14f2c:	2a04      	cmp	r2, #4
   14f2e:	d000      	beq.n	14f32 <__aeabi_ui2f+0x4a>
   14f30:	3404      	adds	r4, #4
   14f32:	0162      	lsls	r2, r4, #5
   14f34:	d412      	bmi.n	14f5c <__aeabi_ui2f+0x74>
   14f36:	01a4      	lsls	r4, r4, #6
   14f38:	0a64      	lsrs	r4, r4, #9
   14f3a:	b2db      	uxtb	r3, r3
   14f3c:	e7e3      	b.n	14f06 <__aeabi_ui2f+0x1e>
   14f3e:	2300      	movs	r3, #0
   14f40:	2400      	movs	r4, #0
   14f42:	e7e0      	b.n	14f06 <__aeabi_ui2f+0x1e>
   14f44:	22b9      	movs	r2, #185	; 0xb9
   14f46:	0021      	movs	r1, r4
   14f48:	1ad2      	subs	r2, r2, r3
   14f4a:	4091      	lsls	r1, r2
   14f4c:	000a      	movs	r2, r1
   14f4e:	1e51      	subs	r1, r2, #1
   14f50:	418a      	sbcs	r2, r1
   14f52:	2105      	movs	r1, #5
   14f54:	1a09      	subs	r1, r1, r0
   14f56:	40cc      	lsrs	r4, r1
   14f58:	4314      	orrs	r4, r2
   14f5a:	e7db      	b.n	14f14 <__aeabi_ui2f+0x2c>
   14f5c:	4b04      	ldr	r3, [pc, #16]	; (14f70 <__aeabi_ui2f+0x88>)
   14f5e:	401c      	ands	r4, r3
   14f60:	239f      	movs	r3, #159	; 0x9f
   14f62:	01a4      	lsls	r4, r4, #6
   14f64:	1a1b      	subs	r3, r3, r0
   14f66:	0a64      	lsrs	r4, r4, #9
   14f68:	b2db      	uxtb	r3, r3
   14f6a:	e7cc      	b.n	14f06 <__aeabi_ui2f+0x1e>
   14f6c:	0022      	movs	r2, r4
   14f6e:	e7d7      	b.n	14f20 <__aeabi_ui2f+0x38>
   14f70:	fbffffff 	.word	0xfbffffff

00014f74 <__aeabi_dadd>:
   14f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f76:	4645      	mov	r5, r8
   14f78:	46de      	mov	lr, fp
   14f7a:	4657      	mov	r7, sl
   14f7c:	464e      	mov	r6, r9
   14f7e:	030c      	lsls	r4, r1, #12
   14f80:	b5e0      	push	{r5, r6, r7, lr}
   14f82:	004e      	lsls	r6, r1, #1
   14f84:	0fc9      	lsrs	r1, r1, #31
   14f86:	4688      	mov	r8, r1
   14f88:	000d      	movs	r5, r1
   14f8a:	0a61      	lsrs	r1, r4, #9
   14f8c:	0f44      	lsrs	r4, r0, #29
   14f8e:	430c      	orrs	r4, r1
   14f90:	00c7      	lsls	r7, r0, #3
   14f92:	0319      	lsls	r1, r3, #12
   14f94:	0058      	lsls	r0, r3, #1
   14f96:	0fdb      	lsrs	r3, r3, #31
   14f98:	469b      	mov	fp, r3
   14f9a:	0a4b      	lsrs	r3, r1, #9
   14f9c:	0f51      	lsrs	r1, r2, #29
   14f9e:	430b      	orrs	r3, r1
   14fa0:	0d76      	lsrs	r6, r6, #21
   14fa2:	0d40      	lsrs	r0, r0, #21
   14fa4:	0019      	movs	r1, r3
   14fa6:	00d2      	lsls	r2, r2, #3
   14fa8:	45d8      	cmp	r8, fp
   14faa:	d100      	bne.n	14fae <__aeabi_dadd+0x3a>
   14fac:	e0ae      	b.n	1510c <__aeabi_dadd+0x198>
   14fae:	1a35      	subs	r5, r6, r0
   14fb0:	2d00      	cmp	r5, #0
   14fb2:	dc00      	bgt.n	14fb6 <__aeabi_dadd+0x42>
   14fb4:	e0f6      	b.n	151a4 <__aeabi_dadd+0x230>
   14fb6:	2800      	cmp	r0, #0
   14fb8:	d10f      	bne.n	14fda <__aeabi_dadd+0x66>
   14fba:	4313      	orrs	r3, r2
   14fbc:	d100      	bne.n	14fc0 <__aeabi_dadd+0x4c>
   14fbe:	e0db      	b.n	15178 <__aeabi_dadd+0x204>
   14fc0:	1e6b      	subs	r3, r5, #1
   14fc2:	2b00      	cmp	r3, #0
   14fc4:	d000      	beq.n	14fc8 <__aeabi_dadd+0x54>
   14fc6:	e137      	b.n	15238 <__aeabi_dadd+0x2c4>
   14fc8:	1aba      	subs	r2, r7, r2
   14fca:	4297      	cmp	r7, r2
   14fcc:	41bf      	sbcs	r7, r7
   14fce:	1a64      	subs	r4, r4, r1
   14fd0:	427f      	negs	r7, r7
   14fd2:	1be4      	subs	r4, r4, r7
   14fd4:	2601      	movs	r6, #1
   14fd6:	0017      	movs	r7, r2
   14fd8:	e024      	b.n	15024 <__aeabi_dadd+0xb0>
   14fda:	4bc6      	ldr	r3, [pc, #792]	; (152f4 <__aeabi_dadd+0x380>)
   14fdc:	429e      	cmp	r6, r3
   14fde:	d04d      	beq.n	1507c <__aeabi_dadd+0x108>
   14fe0:	2380      	movs	r3, #128	; 0x80
   14fe2:	041b      	lsls	r3, r3, #16
   14fe4:	4319      	orrs	r1, r3
   14fe6:	2d38      	cmp	r5, #56	; 0x38
   14fe8:	dd00      	ble.n	14fec <__aeabi_dadd+0x78>
   14fea:	e107      	b.n	151fc <__aeabi_dadd+0x288>
   14fec:	2d1f      	cmp	r5, #31
   14fee:	dd00      	ble.n	14ff2 <__aeabi_dadd+0x7e>
   14ff0:	e138      	b.n	15264 <__aeabi_dadd+0x2f0>
   14ff2:	2020      	movs	r0, #32
   14ff4:	1b43      	subs	r3, r0, r5
   14ff6:	469a      	mov	sl, r3
   14ff8:	000b      	movs	r3, r1
   14ffa:	4650      	mov	r0, sl
   14ffc:	4083      	lsls	r3, r0
   14ffe:	4699      	mov	r9, r3
   15000:	0013      	movs	r3, r2
   15002:	4648      	mov	r0, r9
   15004:	40eb      	lsrs	r3, r5
   15006:	4318      	orrs	r0, r3
   15008:	0003      	movs	r3, r0
   1500a:	4650      	mov	r0, sl
   1500c:	4082      	lsls	r2, r0
   1500e:	1e50      	subs	r0, r2, #1
   15010:	4182      	sbcs	r2, r0
   15012:	40e9      	lsrs	r1, r5
   15014:	431a      	orrs	r2, r3
   15016:	1aba      	subs	r2, r7, r2
   15018:	1a61      	subs	r1, r4, r1
   1501a:	4297      	cmp	r7, r2
   1501c:	41a4      	sbcs	r4, r4
   1501e:	0017      	movs	r7, r2
   15020:	4264      	negs	r4, r4
   15022:	1b0c      	subs	r4, r1, r4
   15024:	0223      	lsls	r3, r4, #8
   15026:	d562      	bpl.n	150ee <__aeabi_dadd+0x17a>
   15028:	0264      	lsls	r4, r4, #9
   1502a:	0a65      	lsrs	r5, r4, #9
   1502c:	2d00      	cmp	r5, #0
   1502e:	d100      	bne.n	15032 <__aeabi_dadd+0xbe>
   15030:	e0df      	b.n	151f2 <__aeabi_dadd+0x27e>
   15032:	0028      	movs	r0, r5
   15034:	f001 fe02 	bl	16c3c <__clzsi2>
   15038:	0003      	movs	r3, r0
   1503a:	3b08      	subs	r3, #8
   1503c:	2b1f      	cmp	r3, #31
   1503e:	dd00      	ble.n	15042 <__aeabi_dadd+0xce>
   15040:	e0d2      	b.n	151e8 <__aeabi_dadd+0x274>
   15042:	2220      	movs	r2, #32
   15044:	003c      	movs	r4, r7
   15046:	1ad2      	subs	r2, r2, r3
   15048:	409d      	lsls	r5, r3
   1504a:	40d4      	lsrs	r4, r2
   1504c:	409f      	lsls	r7, r3
   1504e:	4325      	orrs	r5, r4
   15050:	429e      	cmp	r6, r3
   15052:	dd00      	ble.n	15056 <__aeabi_dadd+0xe2>
   15054:	e0c4      	b.n	151e0 <__aeabi_dadd+0x26c>
   15056:	1b9e      	subs	r6, r3, r6
   15058:	1c73      	adds	r3, r6, #1
   1505a:	2b1f      	cmp	r3, #31
   1505c:	dd00      	ble.n	15060 <__aeabi_dadd+0xec>
   1505e:	e0f1      	b.n	15244 <__aeabi_dadd+0x2d0>
   15060:	2220      	movs	r2, #32
   15062:	0038      	movs	r0, r7
   15064:	0029      	movs	r1, r5
   15066:	1ad2      	subs	r2, r2, r3
   15068:	40d8      	lsrs	r0, r3
   1506a:	4091      	lsls	r1, r2
   1506c:	4097      	lsls	r7, r2
   1506e:	002c      	movs	r4, r5
   15070:	4301      	orrs	r1, r0
   15072:	1e78      	subs	r0, r7, #1
   15074:	4187      	sbcs	r7, r0
   15076:	40dc      	lsrs	r4, r3
   15078:	2600      	movs	r6, #0
   1507a:	430f      	orrs	r7, r1
   1507c:	077b      	lsls	r3, r7, #29
   1507e:	d009      	beq.n	15094 <__aeabi_dadd+0x120>
   15080:	230f      	movs	r3, #15
   15082:	403b      	ands	r3, r7
   15084:	2b04      	cmp	r3, #4
   15086:	d005      	beq.n	15094 <__aeabi_dadd+0x120>
   15088:	1d3b      	adds	r3, r7, #4
   1508a:	42bb      	cmp	r3, r7
   1508c:	41bf      	sbcs	r7, r7
   1508e:	427f      	negs	r7, r7
   15090:	19e4      	adds	r4, r4, r7
   15092:	001f      	movs	r7, r3
   15094:	0223      	lsls	r3, r4, #8
   15096:	d52c      	bpl.n	150f2 <__aeabi_dadd+0x17e>
   15098:	4b96      	ldr	r3, [pc, #600]	; (152f4 <__aeabi_dadd+0x380>)
   1509a:	3601      	adds	r6, #1
   1509c:	429e      	cmp	r6, r3
   1509e:	d100      	bne.n	150a2 <__aeabi_dadd+0x12e>
   150a0:	e09a      	b.n	151d8 <__aeabi_dadd+0x264>
   150a2:	4645      	mov	r5, r8
   150a4:	4b94      	ldr	r3, [pc, #592]	; (152f8 <__aeabi_dadd+0x384>)
   150a6:	08ff      	lsrs	r7, r7, #3
   150a8:	401c      	ands	r4, r3
   150aa:	0760      	lsls	r0, r4, #29
   150ac:	0576      	lsls	r6, r6, #21
   150ae:	0264      	lsls	r4, r4, #9
   150b0:	4307      	orrs	r7, r0
   150b2:	0b24      	lsrs	r4, r4, #12
   150b4:	0d76      	lsrs	r6, r6, #21
   150b6:	2100      	movs	r1, #0
   150b8:	0324      	lsls	r4, r4, #12
   150ba:	0b23      	lsrs	r3, r4, #12
   150bc:	0d0c      	lsrs	r4, r1, #20
   150be:	4a8f      	ldr	r2, [pc, #572]	; (152fc <__aeabi_dadd+0x388>)
   150c0:	0524      	lsls	r4, r4, #20
   150c2:	431c      	orrs	r4, r3
   150c4:	4014      	ands	r4, r2
   150c6:	0533      	lsls	r3, r6, #20
   150c8:	4323      	orrs	r3, r4
   150ca:	005b      	lsls	r3, r3, #1
   150cc:	07ed      	lsls	r5, r5, #31
   150ce:	085b      	lsrs	r3, r3, #1
   150d0:	432b      	orrs	r3, r5
   150d2:	0038      	movs	r0, r7
   150d4:	0019      	movs	r1, r3
   150d6:	bc3c      	pop	{r2, r3, r4, r5}
   150d8:	4690      	mov	r8, r2
   150da:	4699      	mov	r9, r3
   150dc:	46a2      	mov	sl, r4
   150de:	46ab      	mov	fp, r5
   150e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   150e2:	4664      	mov	r4, ip
   150e4:	4304      	orrs	r4, r0
   150e6:	d100      	bne.n	150ea <__aeabi_dadd+0x176>
   150e8:	e211      	b.n	1550e <__aeabi_dadd+0x59a>
   150ea:	0004      	movs	r4, r0
   150ec:	4667      	mov	r7, ip
   150ee:	077b      	lsls	r3, r7, #29
   150f0:	d1c6      	bne.n	15080 <__aeabi_dadd+0x10c>
   150f2:	4645      	mov	r5, r8
   150f4:	0760      	lsls	r0, r4, #29
   150f6:	08ff      	lsrs	r7, r7, #3
   150f8:	4307      	orrs	r7, r0
   150fa:	08e4      	lsrs	r4, r4, #3
   150fc:	4b7d      	ldr	r3, [pc, #500]	; (152f4 <__aeabi_dadd+0x380>)
   150fe:	429e      	cmp	r6, r3
   15100:	d030      	beq.n	15164 <__aeabi_dadd+0x1f0>
   15102:	0324      	lsls	r4, r4, #12
   15104:	0576      	lsls	r6, r6, #21
   15106:	0b24      	lsrs	r4, r4, #12
   15108:	0d76      	lsrs	r6, r6, #21
   1510a:	e7d4      	b.n	150b6 <__aeabi_dadd+0x142>
   1510c:	1a33      	subs	r3, r6, r0
   1510e:	469a      	mov	sl, r3
   15110:	2b00      	cmp	r3, #0
   15112:	dd78      	ble.n	15206 <__aeabi_dadd+0x292>
   15114:	2800      	cmp	r0, #0
   15116:	d031      	beq.n	1517c <__aeabi_dadd+0x208>
   15118:	4876      	ldr	r0, [pc, #472]	; (152f4 <__aeabi_dadd+0x380>)
   1511a:	4286      	cmp	r6, r0
   1511c:	d0ae      	beq.n	1507c <__aeabi_dadd+0x108>
   1511e:	2080      	movs	r0, #128	; 0x80
   15120:	0400      	lsls	r0, r0, #16
   15122:	4301      	orrs	r1, r0
   15124:	4653      	mov	r3, sl
   15126:	2b38      	cmp	r3, #56	; 0x38
   15128:	dc00      	bgt.n	1512c <__aeabi_dadd+0x1b8>
   1512a:	e0e9      	b.n	15300 <__aeabi_dadd+0x38c>
   1512c:	430a      	orrs	r2, r1
   1512e:	1e51      	subs	r1, r2, #1
   15130:	418a      	sbcs	r2, r1
   15132:	2100      	movs	r1, #0
   15134:	19d2      	adds	r2, r2, r7
   15136:	42ba      	cmp	r2, r7
   15138:	41bf      	sbcs	r7, r7
   1513a:	1909      	adds	r1, r1, r4
   1513c:	427c      	negs	r4, r7
   1513e:	0017      	movs	r7, r2
   15140:	190c      	adds	r4, r1, r4
   15142:	0223      	lsls	r3, r4, #8
   15144:	d5d3      	bpl.n	150ee <__aeabi_dadd+0x17a>
   15146:	4b6b      	ldr	r3, [pc, #428]	; (152f4 <__aeabi_dadd+0x380>)
   15148:	3601      	adds	r6, #1
   1514a:	429e      	cmp	r6, r3
   1514c:	d100      	bne.n	15150 <__aeabi_dadd+0x1dc>
   1514e:	e13a      	b.n	153c6 <__aeabi_dadd+0x452>
   15150:	2001      	movs	r0, #1
   15152:	4b69      	ldr	r3, [pc, #420]	; (152f8 <__aeabi_dadd+0x384>)
   15154:	401c      	ands	r4, r3
   15156:	087b      	lsrs	r3, r7, #1
   15158:	4007      	ands	r7, r0
   1515a:	431f      	orrs	r7, r3
   1515c:	07e0      	lsls	r0, r4, #31
   1515e:	4307      	orrs	r7, r0
   15160:	0864      	lsrs	r4, r4, #1
   15162:	e78b      	b.n	1507c <__aeabi_dadd+0x108>
   15164:	0023      	movs	r3, r4
   15166:	433b      	orrs	r3, r7
   15168:	d100      	bne.n	1516c <__aeabi_dadd+0x1f8>
   1516a:	e1cb      	b.n	15504 <__aeabi_dadd+0x590>
   1516c:	2280      	movs	r2, #128	; 0x80
   1516e:	0312      	lsls	r2, r2, #12
   15170:	4314      	orrs	r4, r2
   15172:	0324      	lsls	r4, r4, #12
   15174:	0b24      	lsrs	r4, r4, #12
   15176:	e79e      	b.n	150b6 <__aeabi_dadd+0x142>
   15178:	002e      	movs	r6, r5
   1517a:	e77f      	b.n	1507c <__aeabi_dadd+0x108>
   1517c:	0008      	movs	r0, r1
   1517e:	4310      	orrs	r0, r2
   15180:	d100      	bne.n	15184 <__aeabi_dadd+0x210>
   15182:	e0b4      	b.n	152ee <__aeabi_dadd+0x37a>
   15184:	1e58      	subs	r0, r3, #1
   15186:	2800      	cmp	r0, #0
   15188:	d000      	beq.n	1518c <__aeabi_dadd+0x218>
   1518a:	e0de      	b.n	1534a <__aeabi_dadd+0x3d6>
   1518c:	18ba      	adds	r2, r7, r2
   1518e:	42ba      	cmp	r2, r7
   15190:	419b      	sbcs	r3, r3
   15192:	1864      	adds	r4, r4, r1
   15194:	425b      	negs	r3, r3
   15196:	18e4      	adds	r4, r4, r3
   15198:	0017      	movs	r7, r2
   1519a:	2601      	movs	r6, #1
   1519c:	0223      	lsls	r3, r4, #8
   1519e:	d5a6      	bpl.n	150ee <__aeabi_dadd+0x17a>
   151a0:	2602      	movs	r6, #2
   151a2:	e7d5      	b.n	15150 <__aeabi_dadd+0x1dc>
   151a4:	2d00      	cmp	r5, #0
   151a6:	d16e      	bne.n	15286 <__aeabi_dadd+0x312>
   151a8:	1c70      	adds	r0, r6, #1
   151aa:	0540      	lsls	r0, r0, #21
   151ac:	0d40      	lsrs	r0, r0, #21
   151ae:	2801      	cmp	r0, #1
   151b0:	dc00      	bgt.n	151b4 <__aeabi_dadd+0x240>
   151b2:	e0f9      	b.n	153a8 <__aeabi_dadd+0x434>
   151b4:	1ab8      	subs	r0, r7, r2
   151b6:	4684      	mov	ip, r0
   151b8:	4287      	cmp	r7, r0
   151ba:	4180      	sbcs	r0, r0
   151bc:	1ae5      	subs	r5, r4, r3
   151be:	4240      	negs	r0, r0
   151c0:	1a2d      	subs	r5, r5, r0
   151c2:	0228      	lsls	r0, r5, #8
   151c4:	d400      	bmi.n	151c8 <__aeabi_dadd+0x254>
   151c6:	e089      	b.n	152dc <__aeabi_dadd+0x368>
   151c8:	1bd7      	subs	r7, r2, r7
   151ca:	42ba      	cmp	r2, r7
   151cc:	4192      	sbcs	r2, r2
   151ce:	1b1c      	subs	r4, r3, r4
   151d0:	4252      	negs	r2, r2
   151d2:	1aa5      	subs	r5, r4, r2
   151d4:	46d8      	mov	r8, fp
   151d6:	e729      	b.n	1502c <__aeabi_dadd+0xb8>
   151d8:	4645      	mov	r5, r8
   151da:	2400      	movs	r4, #0
   151dc:	2700      	movs	r7, #0
   151de:	e76a      	b.n	150b6 <__aeabi_dadd+0x142>
   151e0:	4c45      	ldr	r4, [pc, #276]	; (152f8 <__aeabi_dadd+0x384>)
   151e2:	1af6      	subs	r6, r6, r3
   151e4:	402c      	ands	r4, r5
   151e6:	e749      	b.n	1507c <__aeabi_dadd+0x108>
   151e8:	003d      	movs	r5, r7
   151ea:	3828      	subs	r0, #40	; 0x28
   151ec:	4085      	lsls	r5, r0
   151ee:	2700      	movs	r7, #0
   151f0:	e72e      	b.n	15050 <__aeabi_dadd+0xdc>
   151f2:	0038      	movs	r0, r7
   151f4:	f001 fd22 	bl	16c3c <__clzsi2>
   151f8:	3020      	adds	r0, #32
   151fa:	e71d      	b.n	15038 <__aeabi_dadd+0xc4>
   151fc:	430a      	orrs	r2, r1
   151fe:	1e51      	subs	r1, r2, #1
   15200:	418a      	sbcs	r2, r1
   15202:	2100      	movs	r1, #0
   15204:	e707      	b.n	15016 <__aeabi_dadd+0xa2>
   15206:	2b00      	cmp	r3, #0
   15208:	d000      	beq.n	1520c <__aeabi_dadd+0x298>
   1520a:	e0f3      	b.n	153f4 <__aeabi_dadd+0x480>
   1520c:	1c70      	adds	r0, r6, #1
   1520e:	0543      	lsls	r3, r0, #21
   15210:	0d5b      	lsrs	r3, r3, #21
   15212:	2b01      	cmp	r3, #1
   15214:	dc00      	bgt.n	15218 <__aeabi_dadd+0x2a4>
   15216:	e0ad      	b.n	15374 <__aeabi_dadd+0x400>
   15218:	4b36      	ldr	r3, [pc, #216]	; (152f4 <__aeabi_dadd+0x380>)
   1521a:	4298      	cmp	r0, r3
   1521c:	d100      	bne.n	15220 <__aeabi_dadd+0x2ac>
   1521e:	e0d1      	b.n	153c4 <__aeabi_dadd+0x450>
   15220:	18ba      	adds	r2, r7, r2
   15222:	42ba      	cmp	r2, r7
   15224:	41bf      	sbcs	r7, r7
   15226:	1864      	adds	r4, r4, r1
   15228:	427f      	negs	r7, r7
   1522a:	19e4      	adds	r4, r4, r7
   1522c:	07e7      	lsls	r7, r4, #31
   1522e:	0852      	lsrs	r2, r2, #1
   15230:	4317      	orrs	r7, r2
   15232:	0864      	lsrs	r4, r4, #1
   15234:	0006      	movs	r6, r0
   15236:	e721      	b.n	1507c <__aeabi_dadd+0x108>
   15238:	482e      	ldr	r0, [pc, #184]	; (152f4 <__aeabi_dadd+0x380>)
   1523a:	4285      	cmp	r5, r0
   1523c:	d100      	bne.n	15240 <__aeabi_dadd+0x2cc>
   1523e:	e093      	b.n	15368 <__aeabi_dadd+0x3f4>
   15240:	001d      	movs	r5, r3
   15242:	e6d0      	b.n	14fe6 <__aeabi_dadd+0x72>
   15244:	0029      	movs	r1, r5
   15246:	3e1f      	subs	r6, #31
   15248:	40f1      	lsrs	r1, r6
   1524a:	2b20      	cmp	r3, #32
   1524c:	d100      	bne.n	15250 <__aeabi_dadd+0x2dc>
   1524e:	e08d      	b.n	1536c <__aeabi_dadd+0x3f8>
   15250:	2240      	movs	r2, #64	; 0x40
   15252:	1ad3      	subs	r3, r2, r3
   15254:	409d      	lsls	r5, r3
   15256:	432f      	orrs	r7, r5
   15258:	1e7d      	subs	r5, r7, #1
   1525a:	41af      	sbcs	r7, r5
   1525c:	2400      	movs	r4, #0
   1525e:	430f      	orrs	r7, r1
   15260:	2600      	movs	r6, #0
   15262:	e744      	b.n	150ee <__aeabi_dadd+0x17a>
   15264:	002b      	movs	r3, r5
   15266:	0008      	movs	r0, r1
   15268:	3b20      	subs	r3, #32
   1526a:	40d8      	lsrs	r0, r3
   1526c:	0003      	movs	r3, r0
   1526e:	2d20      	cmp	r5, #32
   15270:	d100      	bne.n	15274 <__aeabi_dadd+0x300>
   15272:	e07d      	b.n	15370 <__aeabi_dadd+0x3fc>
   15274:	2040      	movs	r0, #64	; 0x40
   15276:	1b45      	subs	r5, r0, r5
   15278:	40a9      	lsls	r1, r5
   1527a:	430a      	orrs	r2, r1
   1527c:	1e51      	subs	r1, r2, #1
   1527e:	418a      	sbcs	r2, r1
   15280:	2100      	movs	r1, #0
   15282:	431a      	orrs	r2, r3
   15284:	e6c7      	b.n	15016 <__aeabi_dadd+0xa2>
   15286:	2e00      	cmp	r6, #0
   15288:	d050      	beq.n	1532c <__aeabi_dadd+0x3b8>
   1528a:	4e1a      	ldr	r6, [pc, #104]	; (152f4 <__aeabi_dadd+0x380>)
   1528c:	42b0      	cmp	r0, r6
   1528e:	d057      	beq.n	15340 <__aeabi_dadd+0x3cc>
   15290:	2680      	movs	r6, #128	; 0x80
   15292:	426b      	negs	r3, r5
   15294:	4699      	mov	r9, r3
   15296:	0436      	lsls	r6, r6, #16
   15298:	4334      	orrs	r4, r6
   1529a:	464b      	mov	r3, r9
   1529c:	2b38      	cmp	r3, #56	; 0x38
   1529e:	dd00      	ble.n	152a2 <__aeabi_dadd+0x32e>
   152a0:	e0d6      	b.n	15450 <__aeabi_dadd+0x4dc>
   152a2:	2b1f      	cmp	r3, #31
   152a4:	dd00      	ble.n	152a8 <__aeabi_dadd+0x334>
   152a6:	e135      	b.n	15514 <__aeabi_dadd+0x5a0>
   152a8:	2620      	movs	r6, #32
   152aa:	1af5      	subs	r5, r6, r3
   152ac:	0026      	movs	r6, r4
   152ae:	40ae      	lsls	r6, r5
   152b0:	46b2      	mov	sl, r6
   152b2:	003e      	movs	r6, r7
   152b4:	40de      	lsrs	r6, r3
   152b6:	46ac      	mov	ip, r5
   152b8:	0035      	movs	r5, r6
   152ba:	4656      	mov	r6, sl
   152bc:	432e      	orrs	r6, r5
   152be:	4665      	mov	r5, ip
   152c0:	40af      	lsls	r7, r5
   152c2:	1e7d      	subs	r5, r7, #1
   152c4:	41af      	sbcs	r7, r5
   152c6:	40dc      	lsrs	r4, r3
   152c8:	4337      	orrs	r7, r6
   152ca:	1bd7      	subs	r7, r2, r7
   152cc:	42ba      	cmp	r2, r7
   152ce:	4192      	sbcs	r2, r2
   152d0:	1b0c      	subs	r4, r1, r4
   152d2:	4252      	negs	r2, r2
   152d4:	1aa4      	subs	r4, r4, r2
   152d6:	0006      	movs	r6, r0
   152d8:	46d8      	mov	r8, fp
   152da:	e6a3      	b.n	15024 <__aeabi_dadd+0xb0>
   152dc:	4664      	mov	r4, ip
   152de:	4667      	mov	r7, ip
   152e0:	432c      	orrs	r4, r5
   152e2:	d000      	beq.n	152e6 <__aeabi_dadd+0x372>
   152e4:	e6a2      	b.n	1502c <__aeabi_dadd+0xb8>
   152e6:	2500      	movs	r5, #0
   152e8:	2600      	movs	r6, #0
   152ea:	2700      	movs	r7, #0
   152ec:	e706      	b.n	150fc <__aeabi_dadd+0x188>
   152ee:	001e      	movs	r6, r3
   152f0:	e6c4      	b.n	1507c <__aeabi_dadd+0x108>
   152f2:	46c0      	nop			; (mov r8, r8)
   152f4:	000007ff 	.word	0x000007ff
   152f8:	ff7fffff 	.word	0xff7fffff
   152fc:	800fffff 	.word	0x800fffff
   15300:	2b1f      	cmp	r3, #31
   15302:	dc63      	bgt.n	153cc <__aeabi_dadd+0x458>
   15304:	2020      	movs	r0, #32
   15306:	1ac3      	subs	r3, r0, r3
   15308:	0008      	movs	r0, r1
   1530a:	4098      	lsls	r0, r3
   1530c:	469c      	mov	ip, r3
   1530e:	4683      	mov	fp, r0
   15310:	4653      	mov	r3, sl
   15312:	0010      	movs	r0, r2
   15314:	40d8      	lsrs	r0, r3
   15316:	0003      	movs	r3, r0
   15318:	4658      	mov	r0, fp
   1531a:	4318      	orrs	r0, r3
   1531c:	4663      	mov	r3, ip
   1531e:	409a      	lsls	r2, r3
   15320:	1e53      	subs	r3, r2, #1
   15322:	419a      	sbcs	r2, r3
   15324:	4653      	mov	r3, sl
   15326:	4302      	orrs	r2, r0
   15328:	40d9      	lsrs	r1, r3
   1532a:	e703      	b.n	15134 <__aeabi_dadd+0x1c0>
   1532c:	0026      	movs	r6, r4
   1532e:	433e      	orrs	r6, r7
   15330:	d006      	beq.n	15340 <__aeabi_dadd+0x3cc>
   15332:	43eb      	mvns	r3, r5
   15334:	4699      	mov	r9, r3
   15336:	2b00      	cmp	r3, #0
   15338:	d0c7      	beq.n	152ca <__aeabi_dadd+0x356>
   1533a:	4e94      	ldr	r6, [pc, #592]	; (1558c <__aeabi_dadd+0x618>)
   1533c:	42b0      	cmp	r0, r6
   1533e:	d1ac      	bne.n	1529a <__aeabi_dadd+0x326>
   15340:	000c      	movs	r4, r1
   15342:	0017      	movs	r7, r2
   15344:	0006      	movs	r6, r0
   15346:	46d8      	mov	r8, fp
   15348:	e698      	b.n	1507c <__aeabi_dadd+0x108>
   1534a:	4b90      	ldr	r3, [pc, #576]	; (1558c <__aeabi_dadd+0x618>)
   1534c:	459a      	cmp	sl, r3
   1534e:	d00b      	beq.n	15368 <__aeabi_dadd+0x3f4>
   15350:	4682      	mov	sl, r0
   15352:	e6e7      	b.n	15124 <__aeabi_dadd+0x1b0>
   15354:	2800      	cmp	r0, #0
   15356:	d000      	beq.n	1535a <__aeabi_dadd+0x3e6>
   15358:	e09e      	b.n	15498 <__aeabi_dadd+0x524>
   1535a:	0018      	movs	r0, r3
   1535c:	4310      	orrs	r0, r2
   1535e:	d100      	bne.n	15362 <__aeabi_dadd+0x3ee>
   15360:	e0e9      	b.n	15536 <__aeabi_dadd+0x5c2>
   15362:	001c      	movs	r4, r3
   15364:	0017      	movs	r7, r2
   15366:	46d8      	mov	r8, fp
   15368:	4e88      	ldr	r6, [pc, #544]	; (1558c <__aeabi_dadd+0x618>)
   1536a:	e687      	b.n	1507c <__aeabi_dadd+0x108>
   1536c:	2500      	movs	r5, #0
   1536e:	e772      	b.n	15256 <__aeabi_dadd+0x2e2>
   15370:	2100      	movs	r1, #0
   15372:	e782      	b.n	1527a <__aeabi_dadd+0x306>
   15374:	0023      	movs	r3, r4
   15376:	433b      	orrs	r3, r7
   15378:	2e00      	cmp	r6, #0
   1537a:	d000      	beq.n	1537e <__aeabi_dadd+0x40a>
   1537c:	e0ab      	b.n	154d6 <__aeabi_dadd+0x562>
   1537e:	2b00      	cmp	r3, #0
   15380:	d100      	bne.n	15384 <__aeabi_dadd+0x410>
   15382:	e0e7      	b.n	15554 <__aeabi_dadd+0x5e0>
   15384:	000b      	movs	r3, r1
   15386:	4313      	orrs	r3, r2
   15388:	d100      	bne.n	1538c <__aeabi_dadd+0x418>
   1538a:	e677      	b.n	1507c <__aeabi_dadd+0x108>
   1538c:	18ba      	adds	r2, r7, r2
   1538e:	42ba      	cmp	r2, r7
   15390:	41bf      	sbcs	r7, r7
   15392:	1864      	adds	r4, r4, r1
   15394:	427f      	negs	r7, r7
   15396:	19e4      	adds	r4, r4, r7
   15398:	0223      	lsls	r3, r4, #8
   1539a:	d400      	bmi.n	1539e <__aeabi_dadd+0x42a>
   1539c:	e0f2      	b.n	15584 <__aeabi_dadd+0x610>
   1539e:	4b7c      	ldr	r3, [pc, #496]	; (15590 <__aeabi_dadd+0x61c>)
   153a0:	0017      	movs	r7, r2
   153a2:	401c      	ands	r4, r3
   153a4:	0006      	movs	r6, r0
   153a6:	e669      	b.n	1507c <__aeabi_dadd+0x108>
   153a8:	0020      	movs	r0, r4
   153aa:	4338      	orrs	r0, r7
   153ac:	2e00      	cmp	r6, #0
   153ae:	d1d1      	bne.n	15354 <__aeabi_dadd+0x3e0>
   153b0:	2800      	cmp	r0, #0
   153b2:	d15b      	bne.n	1546c <__aeabi_dadd+0x4f8>
   153b4:	001c      	movs	r4, r3
   153b6:	4314      	orrs	r4, r2
   153b8:	d100      	bne.n	153bc <__aeabi_dadd+0x448>
   153ba:	e0a8      	b.n	1550e <__aeabi_dadd+0x59a>
   153bc:	001c      	movs	r4, r3
   153be:	0017      	movs	r7, r2
   153c0:	46d8      	mov	r8, fp
   153c2:	e65b      	b.n	1507c <__aeabi_dadd+0x108>
   153c4:	0006      	movs	r6, r0
   153c6:	2400      	movs	r4, #0
   153c8:	2700      	movs	r7, #0
   153ca:	e697      	b.n	150fc <__aeabi_dadd+0x188>
   153cc:	4650      	mov	r0, sl
   153ce:	000b      	movs	r3, r1
   153d0:	3820      	subs	r0, #32
   153d2:	40c3      	lsrs	r3, r0
   153d4:	4699      	mov	r9, r3
   153d6:	4653      	mov	r3, sl
   153d8:	2b20      	cmp	r3, #32
   153da:	d100      	bne.n	153de <__aeabi_dadd+0x46a>
   153dc:	e095      	b.n	1550a <__aeabi_dadd+0x596>
   153de:	2340      	movs	r3, #64	; 0x40
   153e0:	4650      	mov	r0, sl
   153e2:	1a1b      	subs	r3, r3, r0
   153e4:	4099      	lsls	r1, r3
   153e6:	430a      	orrs	r2, r1
   153e8:	1e51      	subs	r1, r2, #1
   153ea:	418a      	sbcs	r2, r1
   153ec:	464b      	mov	r3, r9
   153ee:	2100      	movs	r1, #0
   153f0:	431a      	orrs	r2, r3
   153f2:	e69f      	b.n	15134 <__aeabi_dadd+0x1c0>
   153f4:	2e00      	cmp	r6, #0
   153f6:	d130      	bne.n	1545a <__aeabi_dadd+0x4e6>
   153f8:	0026      	movs	r6, r4
   153fa:	433e      	orrs	r6, r7
   153fc:	d067      	beq.n	154ce <__aeabi_dadd+0x55a>
   153fe:	43db      	mvns	r3, r3
   15400:	469a      	mov	sl, r3
   15402:	2b00      	cmp	r3, #0
   15404:	d01c      	beq.n	15440 <__aeabi_dadd+0x4cc>
   15406:	4e61      	ldr	r6, [pc, #388]	; (1558c <__aeabi_dadd+0x618>)
   15408:	42b0      	cmp	r0, r6
   1540a:	d060      	beq.n	154ce <__aeabi_dadd+0x55a>
   1540c:	4653      	mov	r3, sl
   1540e:	2b38      	cmp	r3, #56	; 0x38
   15410:	dd00      	ble.n	15414 <__aeabi_dadd+0x4a0>
   15412:	e096      	b.n	15542 <__aeabi_dadd+0x5ce>
   15414:	2b1f      	cmp	r3, #31
   15416:	dd00      	ble.n	1541a <__aeabi_dadd+0x4a6>
   15418:	e09f      	b.n	1555a <__aeabi_dadd+0x5e6>
   1541a:	2620      	movs	r6, #32
   1541c:	1af3      	subs	r3, r6, r3
   1541e:	0026      	movs	r6, r4
   15420:	409e      	lsls	r6, r3
   15422:	469c      	mov	ip, r3
   15424:	46b3      	mov	fp, r6
   15426:	4653      	mov	r3, sl
   15428:	003e      	movs	r6, r7
   1542a:	40de      	lsrs	r6, r3
   1542c:	0033      	movs	r3, r6
   1542e:	465e      	mov	r6, fp
   15430:	431e      	orrs	r6, r3
   15432:	4663      	mov	r3, ip
   15434:	409f      	lsls	r7, r3
   15436:	1e7b      	subs	r3, r7, #1
   15438:	419f      	sbcs	r7, r3
   1543a:	4653      	mov	r3, sl
   1543c:	40dc      	lsrs	r4, r3
   1543e:	4337      	orrs	r7, r6
   15440:	18bf      	adds	r7, r7, r2
   15442:	4297      	cmp	r7, r2
   15444:	4192      	sbcs	r2, r2
   15446:	1864      	adds	r4, r4, r1
   15448:	4252      	negs	r2, r2
   1544a:	18a4      	adds	r4, r4, r2
   1544c:	0006      	movs	r6, r0
   1544e:	e678      	b.n	15142 <__aeabi_dadd+0x1ce>
   15450:	4327      	orrs	r7, r4
   15452:	1e7c      	subs	r4, r7, #1
   15454:	41a7      	sbcs	r7, r4
   15456:	2400      	movs	r4, #0
   15458:	e737      	b.n	152ca <__aeabi_dadd+0x356>
   1545a:	4e4c      	ldr	r6, [pc, #304]	; (1558c <__aeabi_dadd+0x618>)
   1545c:	42b0      	cmp	r0, r6
   1545e:	d036      	beq.n	154ce <__aeabi_dadd+0x55a>
   15460:	2680      	movs	r6, #128	; 0x80
   15462:	425b      	negs	r3, r3
   15464:	0436      	lsls	r6, r6, #16
   15466:	469a      	mov	sl, r3
   15468:	4334      	orrs	r4, r6
   1546a:	e7cf      	b.n	1540c <__aeabi_dadd+0x498>
   1546c:	0018      	movs	r0, r3
   1546e:	4310      	orrs	r0, r2
   15470:	d100      	bne.n	15474 <__aeabi_dadd+0x500>
   15472:	e603      	b.n	1507c <__aeabi_dadd+0x108>
   15474:	1ab8      	subs	r0, r7, r2
   15476:	4684      	mov	ip, r0
   15478:	4567      	cmp	r7, ip
   1547a:	41ad      	sbcs	r5, r5
   1547c:	1ae0      	subs	r0, r4, r3
   1547e:	426d      	negs	r5, r5
   15480:	1b40      	subs	r0, r0, r5
   15482:	0205      	lsls	r5, r0, #8
   15484:	d400      	bmi.n	15488 <__aeabi_dadd+0x514>
   15486:	e62c      	b.n	150e2 <__aeabi_dadd+0x16e>
   15488:	1bd7      	subs	r7, r2, r7
   1548a:	42ba      	cmp	r2, r7
   1548c:	4192      	sbcs	r2, r2
   1548e:	1b1c      	subs	r4, r3, r4
   15490:	4252      	negs	r2, r2
   15492:	1aa4      	subs	r4, r4, r2
   15494:	46d8      	mov	r8, fp
   15496:	e5f1      	b.n	1507c <__aeabi_dadd+0x108>
   15498:	0018      	movs	r0, r3
   1549a:	4310      	orrs	r0, r2
   1549c:	d100      	bne.n	154a0 <__aeabi_dadd+0x52c>
   1549e:	e763      	b.n	15368 <__aeabi_dadd+0x3f4>
   154a0:	08f8      	lsrs	r0, r7, #3
   154a2:	0767      	lsls	r7, r4, #29
   154a4:	4307      	orrs	r7, r0
   154a6:	2080      	movs	r0, #128	; 0x80
   154a8:	08e4      	lsrs	r4, r4, #3
   154aa:	0300      	lsls	r0, r0, #12
   154ac:	4204      	tst	r4, r0
   154ae:	d008      	beq.n	154c2 <__aeabi_dadd+0x54e>
   154b0:	08dd      	lsrs	r5, r3, #3
   154b2:	4205      	tst	r5, r0
   154b4:	d105      	bne.n	154c2 <__aeabi_dadd+0x54e>
   154b6:	08d2      	lsrs	r2, r2, #3
   154b8:	0759      	lsls	r1, r3, #29
   154ba:	4311      	orrs	r1, r2
   154bc:	000f      	movs	r7, r1
   154be:	002c      	movs	r4, r5
   154c0:	46d8      	mov	r8, fp
   154c2:	0f7b      	lsrs	r3, r7, #29
   154c4:	00e4      	lsls	r4, r4, #3
   154c6:	431c      	orrs	r4, r3
   154c8:	00ff      	lsls	r7, r7, #3
   154ca:	4e30      	ldr	r6, [pc, #192]	; (1558c <__aeabi_dadd+0x618>)
   154cc:	e5d6      	b.n	1507c <__aeabi_dadd+0x108>
   154ce:	000c      	movs	r4, r1
   154d0:	0017      	movs	r7, r2
   154d2:	0006      	movs	r6, r0
   154d4:	e5d2      	b.n	1507c <__aeabi_dadd+0x108>
   154d6:	2b00      	cmp	r3, #0
   154d8:	d038      	beq.n	1554c <__aeabi_dadd+0x5d8>
   154da:	000b      	movs	r3, r1
   154dc:	4313      	orrs	r3, r2
   154de:	d100      	bne.n	154e2 <__aeabi_dadd+0x56e>
   154e0:	e742      	b.n	15368 <__aeabi_dadd+0x3f4>
   154e2:	08f8      	lsrs	r0, r7, #3
   154e4:	0767      	lsls	r7, r4, #29
   154e6:	4307      	orrs	r7, r0
   154e8:	2080      	movs	r0, #128	; 0x80
   154ea:	08e4      	lsrs	r4, r4, #3
   154ec:	0300      	lsls	r0, r0, #12
   154ee:	4204      	tst	r4, r0
   154f0:	d0e7      	beq.n	154c2 <__aeabi_dadd+0x54e>
   154f2:	08cb      	lsrs	r3, r1, #3
   154f4:	4203      	tst	r3, r0
   154f6:	d1e4      	bne.n	154c2 <__aeabi_dadd+0x54e>
   154f8:	08d2      	lsrs	r2, r2, #3
   154fa:	0749      	lsls	r1, r1, #29
   154fc:	4311      	orrs	r1, r2
   154fe:	000f      	movs	r7, r1
   15500:	001c      	movs	r4, r3
   15502:	e7de      	b.n	154c2 <__aeabi_dadd+0x54e>
   15504:	2700      	movs	r7, #0
   15506:	2400      	movs	r4, #0
   15508:	e5d5      	b.n	150b6 <__aeabi_dadd+0x142>
   1550a:	2100      	movs	r1, #0
   1550c:	e76b      	b.n	153e6 <__aeabi_dadd+0x472>
   1550e:	2500      	movs	r5, #0
   15510:	2700      	movs	r7, #0
   15512:	e5f3      	b.n	150fc <__aeabi_dadd+0x188>
   15514:	464e      	mov	r6, r9
   15516:	0025      	movs	r5, r4
   15518:	3e20      	subs	r6, #32
   1551a:	40f5      	lsrs	r5, r6
   1551c:	464b      	mov	r3, r9
   1551e:	002e      	movs	r6, r5
   15520:	2b20      	cmp	r3, #32
   15522:	d02d      	beq.n	15580 <__aeabi_dadd+0x60c>
   15524:	2540      	movs	r5, #64	; 0x40
   15526:	1aed      	subs	r5, r5, r3
   15528:	40ac      	lsls	r4, r5
   1552a:	4327      	orrs	r7, r4
   1552c:	1e7c      	subs	r4, r7, #1
   1552e:	41a7      	sbcs	r7, r4
   15530:	2400      	movs	r4, #0
   15532:	4337      	orrs	r7, r6
   15534:	e6c9      	b.n	152ca <__aeabi_dadd+0x356>
   15536:	2480      	movs	r4, #128	; 0x80
   15538:	2500      	movs	r5, #0
   1553a:	0324      	lsls	r4, r4, #12
   1553c:	4e13      	ldr	r6, [pc, #76]	; (1558c <__aeabi_dadd+0x618>)
   1553e:	2700      	movs	r7, #0
   15540:	e5dc      	b.n	150fc <__aeabi_dadd+0x188>
   15542:	4327      	orrs	r7, r4
   15544:	1e7c      	subs	r4, r7, #1
   15546:	41a7      	sbcs	r7, r4
   15548:	2400      	movs	r4, #0
   1554a:	e779      	b.n	15440 <__aeabi_dadd+0x4cc>
   1554c:	000c      	movs	r4, r1
   1554e:	0017      	movs	r7, r2
   15550:	4e0e      	ldr	r6, [pc, #56]	; (1558c <__aeabi_dadd+0x618>)
   15552:	e593      	b.n	1507c <__aeabi_dadd+0x108>
   15554:	000c      	movs	r4, r1
   15556:	0017      	movs	r7, r2
   15558:	e590      	b.n	1507c <__aeabi_dadd+0x108>
   1555a:	4656      	mov	r6, sl
   1555c:	0023      	movs	r3, r4
   1555e:	3e20      	subs	r6, #32
   15560:	40f3      	lsrs	r3, r6
   15562:	4699      	mov	r9, r3
   15564:	4653      	mov	r3, sl
   15566:	2b20      	cmp	r3, #32
   15568:	d00e      	beq.n	15588 <__aeabi_dadd+0x614>
   1556a:	2340      	movs	r3, #64	; 0x40
   1556c:	4656      	mov	r6, sl
   1556e:	1b9b      	subs	r3, r3, r6
   15570:	409c      	lsls	r4, r3
   15572:	4327      	orrs	r7, r4
   15574:	1e7c      	subs	r4, r7, #1
   15576:	41a7      	sbcs	r7, r4
   15578:	464b      	mov	r3, r9
   1557a:	2400      	movs	r4, #0
   1557c:	431f      	orrs	r7, r3
   1557e:	e75f      	b.n	15440 <__aeabi_dadd+0x4cc>
   15580:	2400      	movs	r4, #0
   15582:	e7d2      	b.n	1552a <__aeabi_dadd+0x5b6>
   15584:	0017      	movs	r7, r2
   15586:	e5b2      	b.n	150ee <__aeabi_dadd+0x17a>
   15588:	2400      	movs	r4, #0
   1558a:	e7f2      	b.n	15572 <__aeabi_dadd+0x5fe>
   1558c:	000007ff 	.word	0x000007ff
   15590:	ff7fffff 	.word	0xff7fffff

00015594 <__aeabi_ddiv>:
   15594:	b5f0      	push	{r4, r5, r6, r7, lr}
   15596:	4657      	mov	r7, sl
   15598:	4645      	mov	r5, r8
   1559a:	46de      	mov	lr, fp
   1559c:	464e      	mov	r6, r9
   1559e:	b5e0      	push	{r5, r6, r7, lr}
   155a0:	004c      	lsls	r4, r1, #1
   155a2:	030e      	lsls	r6, r1, #12
   155a4:	b087      	sub	sp, #28
   155a6:	4683      	mov	fp, r0
   155a8:	4692      	mov	sl, r2
   155aa:	001d      	movs	r5, r3
   155ac:	4680      	mov	r8, r0
   155ae:	0b36      	lsrs	r6, r6, #12
   155b0:	0d64      	lsrs	r4, r4, #21
   155b2:	0fcf      	lsrs	r7, r1, #31
   155b4:	2c00      	cmp	r4, #0
   155b6:	d04f      	beq.n	15658 <__aeabi_ddiv+0xc4>
   155b8:	4b6f      	ldr	r3, [pc, #444]	; (15778 <__aeabi_ddiv+0x1e4>)
   155ba:	429c      	cmp	r4, r3
   155bc:	d035      	beq.n	1562a <__aeabi_ddiv+0x96>
   155be:	2380      	movs	r3, #128	; 0x80
   155c0:	0f42      	lsrs	r2, r0, #29
   155c2:	041b      	lsls	r3, r3, #16
   155c4:	00f6      	lsls	r6, r6, #3
   155c6:	4313      	orrs	r3, r2
   155c8:	4333      	orrs	r3, r6
   155ca:	4699      	mov	r9, r3
   155cc:	00c3      	lsls	r3, r0, #3
   155ce:	4698      	mov	r8, r3
   155d0:	4b6a      	ldr	r3, [pc, #424]	; (1577c <__aeabi_ddiv+0x1e8>)
   155d2:	2600      	movs	r6, #0
   155d4:	469c      	mov	ip, r3
   155d6:	2300      	movs	r3, #0
   155d8:	4464      	add	r4, ip
   155da:	9303      	str	r3, [sp, #12]
   155dc:	032b      	lsls	r3, r5, #12
   155de:	0b1b      	lsrs	r3, r3, #12
   155e0:	469b      	mov	fp, r3
   155e2:	006b      	lsls	r3, r5, #1
   155e4:	0fed      	lsrs	r5, r5, #31
   155e6:	4650      	mov	r0, sl
   155e8:	0d5b      	lsrs	r3, r3, #21
   155ea:	9501      	str	r5, [sp, #4]
   155ec:	d05e      	beq.n	156ac <__aeabi_ddiv+0x118>
   155ee:	4a62      	ldr	r2, [pc, #392]	; (15778 <__aeabi_ddiv+0x1e4>)
   155f0:	4293      	cmp	r3, r2
   155f2:	d053      	beq.n	1569c <__aeabi_ddiv+0x108>
   155f4:	465a      	mov	r2, fp
   155f6:	00d1      	lsls	r1, r2, #3
   155f8:	2280      	movs	r2, #128	; 0x80
   155fa:	0f40      	lsrs	r0, r0, #29
   155fc:	0412      	lsls	r2, r2, #16
   155fe:	4302      	orrs	r2, r0
   15600:	430a      	orrs	r2, r1
   15602:	4693      	mov	fp, r2
   15604:	4652      	mov	r2, sl
   15606:	00d1      	lsls	r1, r2, #3
   15608:	4a5c      	ldr	r2, [pc, #368]	; (1577c <__aeabi_ddiv+0x1e8>)
   1560a:	4694      	mov	ip, r2
   1560c:	2200      	movs	r2, #0
   1560e:	4463      	add	r3, ip
   15610:	0038      	movs	r0, r7
   15612:	4068      	eors	r0, r5
   15614:	4684      	mov	ip, r0
   15616:	9002      	str	r0, [sp, #8]
   15618:	1ae4      	subs	r4, r4, r3
   1561a:	4316      	orrs	r6, r2
   1561c:	2e0f      	cmp	r6, #15
   1561e:	d900      	bls.n	15622 <__aeabi_ddiv+0x8e>
   15620:	e0b4      	b.n	1578c <__aeabi_ddiv+0x1f8>
   15622:	4b57      	ldr	r3, [pc, #348]	; (15780 <__aeabi_ddiv+0x1ec>)
   15624:	00b6      	lsls	r6, r6, #2
   15626:	599b      	ldr	r3, [r3, r6]
   15628:	469f      	mov	pc, r3
   1562a:	0003      	movs	r3, r0
   1562c:	4333      	orrs	r3, r6
   1562e:	4699      	mov	r9, r3
   15630:	d16c      	bne.n	1570c <__aeabi_ddiv+0x178>
   15632:	2300      	movs	r3, #0
   15634:	4698      	mov	r8, r3
   15636:	3302      	adds	r3, #2
   15638:	2608      	movs	r6, #8
   1563a:	9303      	str	r3, [sp, #12]
   1563c:	e7ce      	b.n	155dc <__aeabi_ddiv+0x48>
   1563e:	46cb      	mov	fp, r9
   15640:	4641      	mov	r1, r8
   15642:	9a03      	ldr	r2, [sp, #12]
   15644:	9701      	str	r7, [sp, #4]
   15646:	2a02      	cmp	r2, #2
   15648:	d165      	bne.n	15716 <__aeabi_ddiv+0x182>
   1564a:	9b01      	ldr	r3, [sp, #4]
   1564c:	4c4a      	ldr	r4, [pc, #296]	; (15778 <__aeabi_ddiv+0x1e4>)
   1564e:	469c      	mov	ip, r3
   15650:	2300      	movs	r3, #0
   15652:	2200      	movs	r2, #0
   15654:	4698      	mov	r8, r3
   15656:	e06b      	b.n	15730 <__aeabi_ddiv+0x19c>
   15658:	0003      	movs	r3, r0
   1565a:	4333      	orrs	r3, r6
   1565c:	4699      	mov	r9, r3
   1565e:	d04e      	beq.n	156fe <__aeabi_ddiv+0x16a>
   15660:	2e00      	cmp	r6, #0
   15662:	d100      	bne.n	15666 <__aeabi_ddiv+0xd2>
   15664:	e1bc      	b.n	159e0 <__aeabi_ddiv+0x44c>
   15666:	0030      	movs	r0, r6
   15668:	f001 fae8 	bl	16c3c <__clzsi2>
   1566c:	0003      	movs	r3, r0
   1566e:	3b0b      	subs	r3, #11
   15670:	2b1c      	cmp	r3, #28
   15672:	dd00      	ble.n	15676 <__aeabi_ddiv+0xe2>
   15674:	e1ac      	b.n	159d0 <__aeabi_ddiv+0x43c>
   15676:	221d      	movs	r2, #29
   15678:	1ad3      	subs	r3, r2, r3
   1567a:	465a      	mov	r2, fp
   1567c:	0001      	movs	r1, r0
   1567e:	40da      	lsrs	r2, r3
   15680:	3908      	subs	r1, #8
   15682:	408e      	lsls	r6, r1
   15684:	0013      	movs	r3, r2
   15686:	4333      	orrs	r3, r6
   15688:	4699      	mov	r9, r3
   1568a:	465b      	mov	r3, fp
   1568c:	408b      	lsls	r3, r1
   1568e:	4698      	mov	r8, r3
   15690:	2300      	movs	r3, #0
   15692:	4c3c      	ldr	r4, [pc, #240]	; (15784 <__aeabi_ddiv+0x1f0>)
   15694:	2600      	movs	r6, #0
   15696:	1a24      	subs	r4, r4, r0
   15698:	9303      	str	r3, [sp, #12]
   1569a:	e79f      	b.n	155dc <__aeabi_ddiv+0x48>
   1569c:	4651      	mov	r1, sl
   1569e:	465a      	mov	r2, fp
   156a0:	4311      	orrs	r1, r2
   156a2:	d129      	bne.n	156f8 <__aeabi_ddiv+0x164>
   156a4:	2200      	movs	r2, #0
   156a6:	4693      	mov	fp, r2
   156a8:	3202      	adds	r2, #2
   156aa:	e7b1      	b.n	15610 <__aeabi_ddiv+0x7c>
   156ac:	4659      	mov	r1, fp
   156ae:	4301      	orrs	r1, r0
   156b0:	d01e      	beq.n	156f0 <__aeabi_ddiv+0x15c>
   156b2:	465b      	mov	r3, fp
   156b4:	2b00      	cmp	r3, #0
   156b6:	d100      	bne.n	156ba <__aeabi_ddiv+0x126>
   156b8:	e19e      	b.n	159f8 <__aeabi_ddiv+0x464>
   156ba:	4658      	mov	r0, fp
   156bc:	f001 fabe 	bl	16c3c <__clzsi2>
   156c0:	0003      	movs	r3, r0
   156c2:	3b0b      	subs	r3, #11
   156c4:	2b1c      	cmp	r3, #28
   156c6:	dd00      	ble.n	156ca <__aeabi_ddiv+0x136>
   156c8:	e18f      	b.n	159ea <__aeabi_ddiv+0x456>
   156ca:	0002      	movs	r2, r0
   156cc:	4659      	mov	r1, fp
   156ce:	3a08      	subs	r2, #8
   156d0:	4091      	lsls	r1, r2
   156d2:	468b      	mov	fp, r1
   156d4:	211d      	movs	r1, #29
   156d6:	1acb      	subs	r3, r1, r3
   156d8:	4651      	mov	r1, sl
   156da:	40d9      	lsrs	r1, r3
   156dc:	000b      	movs	r3, r1
   156de:	4659      	mov	r1, fp
   156e0:	430b      	orrs	r3, r1
   156e2:	4651      	mov	r1, sl
   156e4:	469b      	mov	fp, r3
   156e6:	4091      	lsls	r1, r2
   156e8:	4b26      	ldr	r3, [pc, #152]	; (15784 <__aeabi_ddiv+0x1f0>)
   156ea:	2200      	movs	r2, #0
   156ec:	1a1b      	subs	r3, r3, r0
   156ee:	e78f      	b.n	15610 <__aeabi_ddiv+0x7c>
   156f0:	2300      	movs	r3, #0
   156f2:	2201      	movs	r2, #1
   156f4:	469b      	mov	fp, r3
   156f6:	e78b      	b.n	15610 <__aeabi_ddiv+0x7c>
   156f8:	4651      	mov	r1, sl
   156fa:	2203      	movs	r2, #3
   156fc:	e788      	b.n	15610 <__aeabi_ddiv+0x7c>
   156fe:	2300      	movs	r3, #0
   15700:	4698      	mov	r8, r3
   15702:	3301      	adds	r3, #1
   15704:	2604      	movs	r6, #4
   15706:	2400      	movs	r4, #0
   15708:	9303      	str	r3, [sp, #12]
   1570a:	e767      	b.n	155dc <__aeabi_ddiv+0x48>
   1570c:	2303      	movs	r3, #3
   1570e:	46b1      	mov	r9, r6
   15710:	9303      	str	r3, [sp, #12]
   15712:	260c      	movs	r6, #12
   15714:	e762      	b.n	155dc <__aeabi_ddiv+0x48>
   15716:	2a03      	cmp	r2, #3
   15718:	d100      	bne.n	1571c <__aeabi_ddiv+0x188>
   1571a:	e25c      	b.n	15bd6 <__aeabi_ddiv+0x642>
   1571c:	9b01      	ldr	r3, [sp, #4]
   1571e:	2a01      	cmp	r2, #1
   15720:	d000      	beq.n	15724 <__aeabi_ddiv+0x190>
   15722:	e1e4      	b.n	15aee <__aeabi_ddiv+0x55a>
   15724:	4013      	ands	r3, r2
   15726:	469c      	mov	ip, r3
   15728:	2300      	movs	r3, #0
   1572a:	2400      	movs	r4, #0
   1572c:	2200      	movs	r2, #0
   1572e:	4698      	mov	r8, r3
   15730:	2100      	movs	r1, #0
   15732:	0312      	lsls	r2, r2, #12
   15734:	0b13      	lsrs	r3, r2, #12
   15736:	0d0a      	lsrs	r2, r1, #20
   15738:	0512      	lsls	r2, r2, #20
   1573a:	431a      	orrs	r2, r3
   1573c:	0523      	lsls	r3, r4, #20
   1573e:	4c12      	ldr	r4, [pc, #72]	; (15788 <__aeabi_ddiv+0x1f4>)
   15740:	4640      	mov	r0, r8
   15742:	4022      	ands	r2, r4
   15744:	4313      	orrs	r3, r2
   15746:	4662      	mov	r2, ip
   15748:	005b      	lsls	r3, r3, #1
   1574a:	07d2      	lsls	r2, r2, #31
   1574c:	085b      	lsrs	r3, r3, #1
   1574e:	4313      	orrs	r3, r2
   15750:	0019      	movs	r1, r3
   15752:	b007      	add	sp, #28
   15754:	bc3c      	pop	{r2, r3, r4, r5}
   15756:	4690      	mov	r8, r2
   15758:	4699      	mov	r9, r3
   1575a:	46a2      	mov	sl, r4
   1575c:	46ab      	mov	fp, r5
   1575e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15760:	2300      	movs	r3, #0
   15762:	2280      	movs	r2, #128	; 0x80
   15764:	469c      	mov	ip, r3
   15766:	0312      	lsls	r2, r2, #12
   15768:	4698      	mov	r8, r3
   1576a:	4c03      	ldr	r4, [pc, #12]	; (15778 <__aeabi_ddiv+0x1e4>)
   1576c:	e7e0      	b.n	15730 <__aeabi_ddiv+0x19c>
   1576e:	2300      	movs	r3, #0
   15770:	4c01      	ldr	r4, [pc, #4]	; (15778 <__aeabi_ddiv+0x1e4>)
   15772:	2200      	movs	r2, #0
   15774:	4698      	mov	r8, r3
   15776:	e7db      	b.n	15730 <__aeabi_ddiv+0x19c>
   15778:	000007ff 	.word	0x000007ff
   1577c:	fffffc01 	.word	0xfffffc01
   15780:	000176b8 	.word	0x000176b8
   15784:	fffffc0d 	.word	0xfffffc0d
   15788:	800fffff 	.word	0x800fffff
   1578c:	45d9      	cmp	r9, fp
   1578e:	d900      	bls.n	15792 <__aeabi_ddiv+0x1fe>
   15790:	e139      	b.n	15a06 <__aeabi_ddiv+0x472>
   15792:	d100      	bne.n	15796 <__aeabi_ddiv+0x202>
   15794:	e134      	b.n	15a00 <__aeabi_ddiv+0x46c>
   15796:	2300      	movs	r3, #0
   15798:	4646      	mov	r6, r8
   1579a:	464d      	mov	r5, r9
   1579c:	469a      	mov	sl, r3
   1579e:	3c01      	subs	r4, #1
   157a0:	465b      	mov	r3, fp
   157a2:	0e0a      	lsrs	r2, r1, #24
   157a4:	021b      	lsls	r3, r3, #8
   157a6:	431a      	orrs	r2, r3
   157a8:	020b      	lsls	r3, r1, #8
   157aa:	0c17      	lsrs	r7, r2, #16
   157ac:	9303      	str	r3, [sp, #12]
   157ae:	0413      	lsls	r3, r2, #16
   157b0:	0c1b      	lsrs	r3, r3, #16
   157b2:	0039      	movs	r1, r7
   157b4:	0028      	movs	r0, r5
   157b6:	4690      	mov	r8, r2
   157b8:	9301      	str	r3, [sp, #4]
   157ba:	f7fe fa99 	bl	13cf0 <__udivsi3>
   157be:	0002      	movs	r2, r0
   157c0:	9b01      	ldr	r3, [sp, #4]
   157c2:	4683      	mov	fp, r0
   157c4:	435a      	muls	r2, r3
   157c6:	0028      	movs	r0, r5
   157c8:	0039      	movs	r1, r7
   157ca:	4691      	mov	r9, r2
   157cc:	f7fe fb16 	bl	13dfc <__aeabi_uidivmod>
   157d0:	0c35      	lsrs	r5, r6, #16
   157d2:	0409      	lsls	r1, r1, #16
   157d4:	430d      	orrs	r5, r1
   157d6:	45a9      	cmp	r9, r5
   157d8:	d90d      	bls.n	157f6 <__aeabi_ddiv+0x262>
   157da:	465b      	mov	r3, fp
   157dc:	4445      	add	r5, r8
   157de:	3b01      	subs	r3, #1
   157e0:	45a8      	cmp	r8, r5
   157e2:	d900      	bls.n	157e6 <__aeabi_ddiv+0x252>
   157e4:	e13a      	b.n	15a5c <__aeabi_ddiv+0x4c8>
   157e6:	45a9      	cmp	r9, r5
   157e8:	d800      	bhi.n	157ec <__aeabi_ddiv+0x258>
   157ea:	e137      	b.n	15a5c <__aeabi_ddiv+0x4c8>
   157ec:	2302      	movs	r3, #2
   157ee:	425b      	negs	r3, r3
   157f0:	469c      	mov	ip, r3
   157f2:	4445      	add	r5, r8
   157f4:	44e3      	add	fp, ip
   157f6:	464b      	mov	r3, r9
   157f8:	1aeb      	subs	r3, r5, r3
   157fa:	0039      	movs	r1, r7
   157fc:	0018      	movs	r0, r3
   157fe:	9304      	str	r3, [sp, #16]
   15800:	f7fe fa76 	bl	13cf0 <__udivsi3>
   15804:	9b01      	ldr	r3, [sp, #4]
   15806:	0005      	movs	r5, r0
   15808:	4343      	muls	r3, r0
   1580a:	0039      	movs	r1, r7
   1580c:	9804      	ldr	r0, [sp, #16]
   1580e:	4699      	mov	r9, r3
   15810:	f7fe faf4 	bl	13dfc <__aeabi_uidivmod>
   15814:	0433      	lsls	r3, r6, #16
   15816:	0409      	lsls	r1, r1, #16
   15818:	0c1b      	lsrs	r3, r3, #16
   1581a:	430b      	orrs	r3, r1
   1581c:	4599      	cmp	r9, r3
   1581e:	d909      	bls.n	15834 <__aeabi_ddiv+0x2a0>
   15820:	4443      	add	r3, r8
   15822:	1e6a      	subs	r2, r5, #1
   15824:	4598      	cmp	r8, r3
   15826:	d900      	bls.n	1582a <__aeabi_ddiv+0x296>
   15828:	e11a      	b.n	15a60 <__aeabi_ddiv+0x4cc>
   1582a:	4599      	cmp	r9, r3
   1582c:	d800      	bhi.n	15830 <__aeabi_ddiv+0x29c>
   1582e:	e117      	b.n	15a60 <__aeabi_ddiv+0x4cc>
   15830:	3d02      	subs	r5, #2
   15832:	4443      	add	r3, r8
   15834:	464a      	mov	r2, r9
   15836:	1a9b      	subs	r3, r3, r2
   15838:	465a      	mov	r2, fp
   1583a:	0412      	lsls	r2, r2, #16
   1583c:	432a      	orrs	r2, r5
   1583e:	9903      	ldr	r1, [sp, #12]
   15840:	4693      	mov	fp, r2
   15842:	0c10      	lsrs	r0, r2, #16
   15844:	0c0a      	lsrs	r2, r1, #16
   15846:	4691      	mov	r9, r2
   15848:	0409      	lsls	r1, r1, #16
   1584a:	465a      	mov	r2, fp
   1584c:	0c09      	lsrs	r1, r1, #16
   1584e:	464e      	mov	r6, r9
   15850:	000d      	movs	r5, r1
   15852:	0412      	lsls	r2, r2, #16
   15854:	0c12      	lsrs	r2, r2, #16
   15856:	4345      	muls	r5, r0
   15858:	9105      	str	r1, [sp, #20]
   1585a:	4351      	muls	r1, r2
   1585c:	4372      	muls	r2, r6
   1585e:	4370      	muls	r0, r6
   15860:	1952      	adds	r2, r2, r5
   15862:	0c0e      	lsrs	r6, r1, #16
   15864:	18b2      	adds	r2, r6, r2
   15866:	4295      	cmp	r5, r2
   15868:	d903      	bls.n	15872 <__aeabi_ddiv+0x2de>
   1586a:	2580      	movs	r5, #128	; 0x80
   1586c:	026d      	lsls	r5, r5, #9
   1586e:	46ac      	mov	ip, r5
   15870:	4460      	add	r0, ip
   15872:	0c15      	lsrs	r5, r2, #16
   15874:	0409      	lsls	r1, r1, #16
   15876:	0412      	lsls	r2, r2, #16
   15878:	0c09      	lsrs	r1, r1, #16
   1587a:	1828      	adds	r0, r5, r0
   1587c:	1852      	adds	r2, r2, r1
   1587e:	4283      	cmp	r3, r0
   15880:	d200      	bcs.n	15884 <__aeabi_ddiv+0x2f0>
   15882:	e0ce      	b.n	15a22 <__aeabi_ddiv+0x48e>
   15884:	d100      	bne.n	15888 <__aeabi_ddiv+0x2f4>
   15886:	e0c8      	b.n	15a1a <__aeabi_ddiv+0x486>
   15888:	1a1d      	subs	r5, r3, r0
   1588a:	4653      	mov	r3, sl
   1588c:	1a9e      	subs	r6, r3, r2
   1588e:	45b2      	cmp	sl, r6
   15890:	4192      	sbcs	r2, r2
   15892:	4252      	negs	r2, r2
   15894:	1aab      	subs	r3, r5, r2
   15896:	469a      	mov	sl, r3
   15898:	4598      	cmp	r8, r3
   1589a:	d100      	bne.n	1589e <__aeabi_ddiv+0x30a>
   1589c:	e117      	b.n	15ace <__aeabi_ddiv+0x53a>
   1589e:	0039      	movs	r1, r7
   158a0:	0018      	movs	r0, r3
   158a2:	f7fe fa25 	bl	13cf0 <__udivsi3>
   158a6:	9b01      	ldr	r3, [sp, #4]
   158a8:	0005      	movs	r5, r0
   158aa:	4343      	muls	r3, r0
   158ac:	0039      	movs	r1, r7
   158ae:	4650      	mov	r0, sl
   158b0:	9304      	str	r3, [sp, #16]
   158b2:	f7fe faa3 	bl	13dfc <__aeabi_uidivmod>
   158b6:	9804      	ldr	r0, [sp, #16]
   158b8:	040b      	lsls	r3, r1, #16
   158ba:	0c31      	lsrs	r1, r6, #16
   158bc:	4319      	orrs	r1, r3
   158be:	4288      	cmp	r0, r1
   158c0:	d909      	bls.n	158d6 <__aeabi_ddiv+0x342>
   158c2:	4441      	add	r1, r8
   158c4:	1e6b      	subs	r3, r5, #1
   158c6:	4588      	cmp	r8, r1
   158c8:	d900      	bls.n	158cc <__aeabi_ddiv+0x338>
   158ca:	e107      	b.n	15adc <__aeabi_ddiv+0x548>
   158cc:	4288      	cmp	r0, r1
   158ce:	d800      	bhi.n	158d2 <__aeabi_ddiv+0x33e>
   158d0:	e104      	b.n	15adc <__aeabi_ddiv+0x548>
   158d2:	3d02      	subs	r5, #2
   158d4:	4441      	add	r1, r8
   158d6:	9b04      	ldr	r3, [sp, #16]
   158d8:	1acb      	subs	r3, r1, r3
   158da:	0018      	movs	r0, r3
   158dc:	0039      	movs	r1, r7
   158de:	9304      	str	r3, [sp, #16]
   158e0:	f7fe fa06 	bl	13cf0 <__udivsi3>
   158e4:	9b01      	ldr	r3, [sp, #4]
   158e6:	4682      	mov	sl, r0
   158e8:	4343      	muls	r3, r0
   158ea:	0039      	movs	r1, r7
   158ec:	9804      	ldr	r0, [sp, #16]
   158ee:	9301      	str	r3, [sp, #4]
   158f0:	f7fe fa84 	bl	13dfc <__aeabi_uidivmod>
   158f4:	9801      	ldr	r0, [sp, #4]
   158f6:	040b      	lsls	r3, r1, #16
   158f8:	0431      	lsls	r1, r6, #16
   158fa:	0c09      	lsrs	r1, r1, #16
   158fc:	4319      	orrs	r1, r3
   158fe:	4288      	cmp	r0, r1
   15900:	d90d      	bls.n	1591e <__aeabi_ddiv+0x38a>
   15902:	4653      	mov	r3, sl
   15904:	4441      	add	r1, r8
   15906:	3b01      	subs	r3, #1
   15908:	4588      	cmp	r8, r1
   1590a:	d900      	bls.n	1590e <__aeabi_ddiv+0x37a>
   1590c:	e0e8      	b.n	15ae0 <__aeabi_ddiv+0x54c>
   1590e:	4288      	cmp	r0, r1
   15910:	d800      	bhi.n	15914 <__aeabi_ddiv+0x380>
   15912:	e0e5      	b.n	15ae0 <__aeabi_ddiv+0x54c>
   15914:	2302      	movs	r3, #2
   15916:	425b      	negs	r3, r3
   15918:	469c      	mov	ip, r3
   1591a:	4441      	add	r1, r8
   1591c:	44e2      	add	sl, ip
   1591e:	9b01      	ldr	r3, [sp, #4]
   15920:	042d      	lsls	r5, r5, #16
   15922:	1ace      	subs	r6, r1, r3
   15924:	4651      	mov	r1, sl
   15926:	4329      	orrs	r1, r5
   15928:	9d05      	ldr	r5, [sp, #20]
   1592a:	464f      	mov	r7, r9
   1592c:	002a      	movs	r2, r5
   1592e:	040b      	lsls	r3, r1, #16
   15930:	0c08      	lsrs	r0, r1, #16
   15932:	0c1b      	lsrs	r3, r3, #16
   15934:	435a      	muls	r2, r3
   15936:	4345      	muls	r5, r0
   15938:	437b      	muls	r3, r7
   1593a:	4378      	muls	r0, r7
   1593c:	195b      	adds	r3, r3, r5
   1593e:	0c17      	lsrs	r7, r2, #16
   15940:	18fb      	adds	r3, r7, r3
   15942:	429d      	cmp	r5, r3
   15944:	d903      	bls.n	1594e <__aeabi_ddiv+0x3ba>
   15946:	2580      	movs	r5, #128	; 0x80
   15948:	026d      	lsls	r5, r5, #9
   1594a:	46ac      	mov	ip, r5
   1594c:	4460      	add	r0, ip
   1594e:	0c1d      	lsrs	r5, r3, #16
   15950:	0412      	lsls	r2, r2, #16
   15952:	041b      	lsls	r3, r3, #16
   15954:	0c12      	lsrs	r2, r2, #16
   15956:	1828      	adds	r0, r5, r0
   15958:	189b      	adds	r3, r3, r2
   1595a:	4286      	cmp	r6, r0
   1595c:	d200      	bcs.n	15960 <__aeabi_ddiv+0x3cc>
   1595e:	e093      	b.n	15a88 <__aeabi_ddiv+0x4f4>
   15960:	d100      	bne.n	15964 <__aeabi_ddiv+0x3d0>
   15962:	e08e      	b.n	15a82 <__aeabi_ddiv+0x4ee>
   15964:	2301      	movs	r3, #1
   15966:	4319      	orrs	r1, r3
   15968:	4ba0      	ldr	r3, [pc, #640]	; (15bec <__aeabi_ddiv+0x658>)
   1596a:	18e3      	adds	r3, r4, r3
   1596c:	2b00      	cmp	r3, #0
   1596e:	dc00      	bgt.n	15972 <__aeabi_ddiv+0x3de>
   15970:	e099      	b.n	15aa6 <__aeabi_ddiv+0x512>
   15972:	074a      	lsls	r2, r1, #29
   15974:	d000      	beq.n	15978 <__aeabi_ddiv+0x3e4>
   15976:	e09e      	b.n	15ab6 <__aeabi_ddiv+0x522>
   15978:	465a      	mov	r2, fp
   1597a:	01d2      	lsls	r2, r2, #7
   1597c:	d506      	bpl.n	1598c <__aeabi_ddiv+0x3f8>
   1597e:	465a      	mov	r2, fp
   15980:	4b9b      	ldr	r3, [pc, #620]	; (15bf0 <__aeabi_ddiv+0x65c>)
   15982:	401a      	ands	r2, r3
   15984:	2380      	movs	r3, #128	; 0x80
   15986:	4693      	mov	fp, r2
   15988:	00db      	lsls	r3, r3, #3
   1598a:	18e3      	adds	r3, r4, r3
   1598c:	4a99      	ldr	r2, [pc, #612]	; (15bf4 <__aeabi_ddiv+0x660>)
   1598e:	4293      	cmp	r3, r2
   15990:	dd68      	ble.n	15a64 <__aeabi_ddiv+0x4d0>
   15992:	2301      	movs	r3, #1
   15994:	9a02      	ldr	r2, [sp, #8]
   15996:	4c98      	ldr	r4, [pc, #608]	; (15bf8 <__aeabi_ddiv+0x664>)
   15998:	401a      	ands	r2, r3
   1599a:	2300      	movs	r3, #0
   1599c:	4694      	mov	ip, r2
   1599e:	4698      	mov	r8, r3
   159a0:	2200      	movs	r2, #0
   159a2:	e6c5      	b.n	15730 <__aeabi_ddiv+0x19c>
   159a4:	2280      	movs	r2, #128	; 0x80
   159a6:	464b      	mov	r3, r9
   159a8:	0312      	lsls	r2, r2, #12
   159aa:	4213      	tst	r3, r2
   159ac:	d00a      	beq.n	159c4 <__aeabi_ddiv+0x430>
   159ae:	465b      	mov	r3, fp
   159b0:	4213      	tst	r3, r2
   159b2:	d106      	bne.n	159c2 <__aeabi_ddiv+0x42e>
   159b4:	431a      	orrs	r2, r3
   159b6:	0312      	lsls	r2, r2, #12
   159b8:	0b12      	lsrs	r2, r2, #12
   159ba:	46ac      	mov	ip, r5
   159bc:	4688      	mov	r8, r1
   159be:	4c8e      	ldr	r4, [pc, #568]	; (15bf8 <__aeabi_ddiv+0x664>)
   159c0:	e6b6      	b.n	15730 <__aeabi_ddiv+0x19c>
   159c2:	464b      	mov	r3, r9
   159c4:	431a      	orrs	r2, r3
   159c6:	0312      	lsls	r2, r2, #12
   159c8:	0b12      	lsrs	r2, r2, #12
   159ca:	46bc      	mov	ip, r7
   159cc:	4c8a      	ldr	r4, [pc, #552]	; (15bf8 <__aeabi_ddiv+0x664>)
   159ce:	e6af      	b.n	15730 <__aeabi_ddiv+0x19c>
   159d0:	0003      	movs	r3, r0
   159d2:	465a      	mov	r2, fp
   159d4:	3b28      	subs	r3, #40	; 0x28
   159d6:	409a      	lsls	r2, r3
   159d8:	2300      	movs	r3, #0
   159da:	4691      	mov	r9, r2
   159dc:	4698      	mov	r8, r3
   159de:	e657      	b.n	15690 <__aeabi_ddiv+0xfc>
   159e0:	4658      	mov	r0, fp
   159e2:	f001 f92b 	bl	16c3c <__clzsi2>
   159e6:	3020      	adds	r0, #32
   159e8:	e640      	b.n	1566c <__aeabi_ddiv+0xd8>
   159ea:	0003      	movs	r3, r0
   159ec:	4652      	mov	r2, sl
   159ee:	3b28      	subs	r3, #40	; 0x28
   159f0:	409a      	lsls	r2, r3
   159f2:	2100      	movs	r1, #0
   159f4:	4693      	mov	fp, r2
   159f6:	e677      	b.n	156e8 <__aeabi_ddiv+0x154>
   159f8:	f001 f920 	bl	16c3c <__clzsi2>
   159fc:	3020      	adds	r0, #32
   159fe:	e65f      	b.n	156c0 <__aeabi_ddiv+0x12c>
   15a00:	4588      	cmp	r8, r1
   15a02:	d200      	bcs.n	15a06 <__aeabi_ddiv+0x472>
   15a04:	e6c7      	b.n	15796 <__aeabi_ddiv+0x202>
   15a06:	464b      	mov	r3, r9
   15a08:	07de      	lsls	r6, r3, #31
   15a0a:	085d      	lsrs	r5, r3, #1
   15a0c:	4643      	mov	r3, r8
   15a0e:	085b      	lsrs	r3, r3, #1
   15a10:	431e      	orrs	r6, r3
   15a12:	4643      	mov	r3, r8
   15a14:	07db      	lsls	r3, r3, #31
   15a16:	469a      	mov	sl, r3
   15a18:	e6c2      	b.n	157a0 <__aeabi_ddiv+0x20c>
   15a1a:	2500      	movs	r5, #0
   15a1c:	4592      	cmp	sl, r2
   15a1e:	d300      	bcc.n	15a22 <__aeabi_ddiv+0x48e>
   15a20:	e733      	b.n	1588a <__aeabi_ddiv+0x2f6>
   15a22:	9e03      	ldr	r6, [sp, #12]
   15a24:	4659      	mov	r1, fp
   15a26:	46b4      	mov	ip, r6
   15a28:	44e2      	add	sl, ip
   15a2a:	45b2      	cmp	sl, r6
   15a2c:	41ad      	sbcs	r5, r5
   15a2e:	426d      	negs	r5, r5
   15a30:	4445      	add	r5, r8
   15a32:	18eb      	adds	r3, r5, r3
   15a34:	3901      	subs	r1, #1
   15a36:	4598      	cmp	r8, r3
   15a38:	d207      	bcs.n	15a4a <__aeabi_ddiv+0x4b6>
   15a3a:	4298      	cmp	r0, r3
   15a3c:	d900      	bls.n	15a40 <__aeabi_ddiv+0x4ac>
   15a3e:	e07f      	b.n	15b40 <__aeabi_ddiv+0x5ac>
   15a40:	d100      	bne.n	15a44 <__aeabi_ddiv+0x4b0>
   15a42:	e0bc      	b.n	15bbe <__aeabi_ddiv+0x62a>
   15a44:	1a1d      	subs	r5, r3, r0
   15a46:	468b      	mov	fp, r1
   15a48:	e71f      	b.n	1588a <__aeabi_ddiv+0x2f6>
   15a4a:	4598      	cmp	r8, r3
   15a4c:	d1fa      	bne.n	15a44 <__aeabi_ddiv+0x4b0>
   15a4e:	9d03      	ldr	r5, [sp, #12]
   15a50:	4555      	cmp	r5, sl
   15a52:	d9f2      	bls.n	15a3a <__aeabi_ddiv+0x4a6>
   15a54:	4643      	mov	r3, r8
   15a56:	468b      	mov	fp, r1
   15a58:	1a1d      	subs	r5, r3, r0
   15a5a:	e716      	b.n	1588a <__aeabi_ddiv+0x2f6>
   15a5c:	469b      	mov	fp, r3
   15a5e:	e6ca      	b.n	157f6 <__aeabi_ddiv+0x262>
   15a60:	0015      	movs	r5, r2
   15a62:	e6e7      	b.n	15834 <__aeabi_ddiv+0x2a0>
   15a64:	465a      	mov	r2, fp
   15a66:	08c9      	lsrs	r1, r1, #3
   15a68:	0752      	lsls	r2, r2, #29
   15a6a:	430a      	orrs	r2, r1
   15a6c:	055b      	lsls	r3, r3, #21
   15a6e:	4690      	mov	r8, r2
   15a70:	0d5c      	lsrs	r4, r3, #21
   15a72:	465a      	mov	r2, fp
   15a74:	2301      	movs	r3, #1
   15a76:	9902      	ldr	r1, [sp, #8]
   15a78:	0252      	lsls	r2, r2, #9
   15a7a:	4019      	ands	r1, r3
   15a7c:	0b12      	lsrs	r2, r2, #12
   15a7e:	468c      	mov	ip, r1
   15a80:	e656      	b.n	15730 <__aeabi_ddiv+0x19c>
   15a82:	2b00      	cmp	r3, #0
   15a84:	d100      	bne.n	15a88 <__aeabi_ddiv+0x4f4>
   15a86:	e76f      	b.n	15968 <__aeabi_ddiv+0x3d4>
   15a88:	4446      	add	r6, r8
   15a8a:	1e4a      	subs	r2, r1, #1
   15a8c:	45b0      	cmp	r8, r6
   15a8e:	d929      	bls.n	15ae4 <__aeabi_ddiv+0x550>
   15a90:	0011      	movs	r1, r2
   15a92:	4286      	cmp	r6, r0
   15a94:	d000      	beq.n	15a98 <__aeabi_ddiv+0x504>
   15a96:	e765      	b.n	15964 <__aeabi_ddiv+0x3d0>
   15a98:	9a03      	ldr	r2, [sp, #12]
   15a9a:	4293      	cmp	r3, r2
   15a9c:	d000      	beq.n	15aa0 <__aeabi_ddiv+0x50c>
   15a9e:	e761      	b.n	15964 <__aeabi_ddiv+0x3d0>
   15aa0:	e762      	b.n	15968 <__aeabi_ddiv+0x3d4>
   15aa2:	2101      	movs	r1, #1
   15aa4:	4249      	negs	r1, r1
   15aa6:	2001      	movs	r0, #1
   15aa8:	1ac2      	subs	r2, r0, r3
   15aaa:	2a38      	cmp	r2, #56	; 0x38
   15aac:	dd21      	ble.n	15af2 <__aeabi_ddiv+0x55e>
   15aae:	9b02      	ldr	r3, [sp, #8]
   15ab0:	4003      	ands	r3, r0
   15ab2:	469c      	mov	ip, r3
   15ab4:	e638      	b.n	15728 <__aeabi_ddiv+0x194>
   15ab6:	220f      	movs	r2, #15
   15ab8:	400a      	ands	r2, r1
   15aba:	2a04      	cmp	r2, #4
   15abc:	d100      	bne.n	15ac0 <__aeabi_ddiv+0x52c>
   15abe:	e75b      	b.n	15978 <__aeabi_ddiv+0x3e4>
   15ac0:	000a      	movs	r2, r1
   15ac2:	1d11      	adds	r1, r2, #4
   15ac4:	4291      	cmp	r1, r2
   15ac6:	4192      	sbcs	r2, r2
   15ac8:	4252      	negs	r2, r2
   15aca:	4493      	add	fp, r2
   15acc:	e754      	b.n	15978 <__aeabi_ddiv+0x3e4>
   15ace:	4b47      	ldr	r3, [pc, #284]	; (15bec <__aeabi_ddiv+0x658>)
   15ad0:	18e3      	adds	r3, r4, r3
   15ad2:	2b00      	cmp	r3, #0
   15ad4:	dde5      	ble.n	15aa2 <__aeabi_ddiv+0x50e>
   15ad6:	2201      	movs	r2, #1
   15ad8:	4252      	negs	r2, r2
   15ada:	e7f2      	b.n	15ac2 <__aeabi_ddiv+0x52e>
   15adc:	001d      	movs	r5, r3
   15ade:	e6fa      	b.n	158d6 <__aeabi_ddiv+0x342>
   15ae0:	469a      	mov	sl, r3
   15ae2:	e71c      	b.n	1591e <__aeabi_ddiv+0x38a>
   15ae4:	42b0      	cmp	r0, r6
   15ae6:	d839      	bhi.n	15b5c <__aeabi_ddiv+0x5c8>
   15ae8:	d06e      	beq.n	15bc8 <__aeabi_ddiv+0x634>
   15aea:	0011      	movs	r1, r2
   15aec:	e73a      	b.n	15964 <__aeabi_ddiv+0x3d0>
   15aee:	9302      	str	r3, [sp, #8]
   15af0:	e73a      	b.n	15968 <__aeabi_ddiv+0x3d4>
   15af2:	2a1f      	cmp	r2, #31
   15af4:	dc3c      	bgt.n	15b70 <__aeabi_ddiv+0x5dc>
   15af6:	2320      	movs	r3, #32
   15af8:	1a9b      	subs	r3, r3, r2
   15afa:	000c      	movs	r4, r1
   15afc:	4658      	mov	r0, fp
   15afe:	4099      	lsls	r1, r3
   15b00:	4098      	lsls	r0, r3
   15b02:	1e4b      	subs	r3, r1, #1
   15b04:	4199      	sbcs	r1, r3
   15b06:	465b      	mov	r3, fp
   15b08:	40d4      	lsrs	r4, r2
   15b0a:	40d3      	lsrs	r3, r2
   15b0c:	4320      	orrs	r0, r4
   15b0e:	4308      	orrs	r0, r1
   15b10:	001a      	movs	r2, r3
   15b12:	0743      	lsls	r3, r0, #29
   15b14:	d009      	beq.n	15b2a <__aeabi_ddiv+0x596>
   15b16:	230f      	movs	r3, #15
   15b18:	4003      	ands	r3, r0
   15b1a:	2b04      	cmp	r3, #4
   15b1c:	d005      	beq.n	15b2a <__aeabi_ddiv+0x596>
   15b1e:	0001      	movs	r1, r0
   15b20:	1d08      	adds	r0, r1, #4
   15b22:	4288      	cmp	r0, r1
   15b24:	419b      	sbcs	r3, r3
   15b26:	425b      	negs	r3, r3
   15b28:	18d2      	adds	r2, r2, r3
   15b2a:	0213      	lsls	r3, r2, #8
   15b2c:	d53a      	bpl.n	15ba4 <__aeabi_ddiv+0x610>
   15b2e:	2301      	movs	r3, #1
   15b30:	9a02      	ldr	r2, [sp, #8]
   15b32:	2401      	movs	r4, #1
   15b34:	401a      	ands	r2, r3
   15b36:	2300      	movs	r3, #0
   15b38:	4694      	mov	ip, r2
   15b3a:	4698      	mov	r8, r3
   15b3c:	2200      	movs	r2, #0
   15b3e:	e5f7      	b.n	15730 <__aeabi_ddiv+0x19c>
   15b40:	2102      	movs	r1, #2
   15b42:	4249      	negs	r1, r1
   15b44:	468c      	mov	ip, r1
   15b46:	9d03      	ldr	r5, [sp, #12]
   15b48:	44e3      	add	fp, ip
   15b4a:	46ac      	mov	ip, r5
   15b4c:	44e2      	add	sl, ip
   15b4e:	45aa      	cmp	sl, r5
   15b50:	41ad      	sbcs	r5, r5
   15b52:	426d      	negs	r5, r5
   15b54:	4445      	add	r5, r8
   15b56:	18ed      	adds	r5, r5, r3
   15b58:	1a2d      	subs	r5, r5, r0
   15b5a:	e696      	b.n	1588a <__aeabi_ddiv+0x2f6>
   15b5c:	1e8a      	subs	r2, r1, #2
   15b5e:	9903      	ldr	r1, [sp, #12]
   15b60:	004d      	lsls	r5, r1, #1
   15b62:	428d      	cmp	r5, r1
   15b64:	4189      	sbcs	r1, r1
   15b66:	4249      	negs	r1, r1
   15b68:	4441      	add	r1, r8
   15b6a:	1876      	adds	r6, r6, r1
   15b6c:	9503      	str	r5, [sp, #12]
   15b6e:	e78f      	b.n	15a90 <__aeabi_ddiv+0x4fc>
   15b70:	201f      	movs	r0, #31
   15b72:	4240      	negs	r0, r0
   15b74:	1ac3      	subs	r3, r0, r3
   15b76:	4658      	mov	r0, fp
   15b78:	40d8      	lsrs	r0, r3
   15b7a:	0003      	movs	r3, r0
   15b7c:	2a20      	cmp	r2, #32
   15b7e:	d028      	beq.n	15bd2 <__aeabi_ddiv+0x63e>
   15b80:	2040      	movs	r0, #64	; 0x40
   15b82:	465d      	mov	r5, fp
   15b84:	1a82      	subs	r2, r0, r2
   15b86:	4095      	lsls	r5, r2
   15b88:	4329      	orrs	r1, r5
   15b8a:	1e4a      	subs	r2, r1, #1
   15b8c:	4191      	sbcs	r1, r2
   15b8e:	4319      	orrs	r1, r3
   15b90:	2307      	movs	r3, #7
   15b92:	2200      	movs	r2, #0
   15b94:	400b      	ands	r3, r1
   15b96:	d009      	beq.n	15bac <__aeabi_ddiv+0x618>
   15b98:	230f      	movs	r3, #15
   15b9a:	2200      	movs	r2, #0
   15b9c:	400b      	ands	r3, r1
   15b9e:	0008      	movs	r0, r1
   15ba0:	2b04      	cmp	r3, #4
   15ba2:	d1bd      	bne.n	15b20 <__aeabi_ddiv+0x58c>
   15ba4:	0001      	movs	r1, r0
   15ba6:	0753      	lsls	r3, r2, #29
   15ba8:	0252      	lsls	r2, r2, #9
   15baa:	0b12      	lsrs	r2, r2, #12
   15bac:	08c9      	lsrs	r1, r1, #3
   15bae:	4319      	orrs	r1, r3
   15bb0:	2301      	movs	r3, #1
   15bb2:	4688      	mov	r8, r1
   15bb4:	9902      	ldr	r1, [sp, #8]
   15bb6:	2400      	movs	r4, #0
   15bb8:	4019      	ands	r1, r3
   15bba:	468c      	mov	ip, r1
   15bbc:	e5b8      	b.n	15730 <__aeabi_ddiv+0x19c>
   15bbe:	4552      	cmp	r2, sl
   15bc0:	d8be      	bhi.n	15b40 <__aeabi_ddiv+0x5ac>
   15bc2:	468b      	mov	fp, r1
   15bc4:	2500      	movs	r5, #0
   15bc6:	e660      	b.n	1588a <__aeabi_ddiv+0x2f6>
   15bc8:	9d03      	ldr	r5, [sp, #12]
   15bca:	429d      	cmp	r5, r3
   15bcc:	d3c6      	bcc.n	15b5c <__aeabi_ddiv+0x5c8>
   15bce:	0011      	movs	r1, r2
   15bd0:	e762      	b.n	15a98 <__aeabi_ddiv+0x504>
   15bd2:	2500      	movs	r5, #0
   15bd4:	e7d8      	b.n	15b88 <__aeabi_ddiv+0x5f4>
   15bd6:	2280      	movs	r2, #128	; 0x80
   15bd8:	465b      	mov	r3, fp
   15bda:	0312      	lsls	r2, r2, #12
   15bdc:	431a      	orrs	r2, r3
   15bde:	9b01      	ldr	r3, [sp, #4]
   15be0:	0312      	lsls	r2, r2, #12
   15be2:	0b12      	lsrs	r2, r2, #12
   15be4:	469c      	mov	ip, r3
   15be6:	4688      	mov	r8, r1
   15be8:	4c03      	ldr	r4, [pc, #12]	; (15bf8 <__aeabi_ddiv+0x664>)
   15bea:	e5a1      	b.n	15730 <__aeabi_ddiv+0x19c>
   15bec:	000003ff 	.word	0x000003ff
   15bf0:	feffffff 	.word	0xfeffffff
   15bf4:	000007fe 	.word	0x000007fe
   15bf8:	000007ff 	.word	0x000007ff

00015bfc <__eqdf2>:
   15bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   15bfe:	464f      	mov	r7, r9
   15c00:	4646      	mov	r6, r8
   15c02:	46d6      	mov	lr, sl
   15c04:	005c      	lsls	r4, r3, #1
   15c06:	b5c0      	push	{r6, r7, lr}
   15c08:	031f      	lsls	r7, r3, #12
   15c0a:	0fdb      	lsrs	r3, r3, #31
   15c0c:	469a      	mov	sl, r3
   15c0e:	4b17      	ldr	r3, [pc, #92]	; (15c6c <__eqdf2+0x70>)
   15c10:	030e      	lsls	r6, r1, #12
   15c12:	004d      	lsls	r5, r1, #1
   15c14:	4684      	mov	ip, r0
   15c16:	4680      	mov	r8, r0
   15c18:	0b36      	lsrs	r6, r6, #12
   15c1a:	0d6d      	lsrs	r5, r5, #21
   15c1c:	0fc9      	lsrs	r1, r1, #31
   15c1e:	4691      	mov	r9, r2
   15c20:	0b3f      	lsrs	r7, r7, #12
   15c22:	0d64      	lsrs	r4, r4, #21
   15c24:	2001      	movs	r0, #1
   15c26:	429d      	cmp	r5, r3
   15c28:	d008      	beq.n	15c3c <__eqdf2+0x40>
   15c2a:	429c      	cmp	r4, r3
   15c2c:	d001      	beq.n	15c32 <__eqdf2+0x36>
   15c2e:	42a5      	cmp	r5, r4
   15c30:	d00b      	beq.n	15c4a <__eqdf2+0x4e>
   15c32:	bc1c      	pop	{r2, r3, r4}
   15c34:	4690      	mov	r8, r2
   15c36:	4699      	mov	r9, r3
   15c38:	46a2      	mov	sl, r4
   15c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c3c:	4663      	mov	r3, ip
   15c3e:	4333      	orrs	r3, r6
   15c40:	d1f7      	bne.n	15c32 <__eqdf2+0x36>
   15c42:	42ac      	cmp	r4, r5
   15c44:	d1f5      	bne.n	15c32 <__eqdf2+0x36>
   15c46:	433a      	orrs	r2, r7
   15c48:	d1f3      	bne.n	15c32 <__eqdf2+0x36>
   15c4a:	2001      	movs	r0, #1
   15c4c:	42be      	cmp	r6, r7
   15c4e:	d1f0      	bne.n	15c32 <__eqdf2+0x36>
   15c50:	45c8      	cmp	r8, r9
   15c52:	d1ee      	bne.n	15c32 <__eqdf2+0x36>
   15c54:	4551      	cmp	r1, sl
   15c56:	d007      	beq.n	15c68 <__eqdf2+0x6c>
   15c58:	2d00      	cmp	r5, #0
   15c5a:	d1ea      	bne.n	15c32 <__eqdf2+0x36>
   15c5c:	4663      	mov	r3, ip
   15c5e:	431e      	orrs	r6, r3
   15c60:	0030      	movs	r0, r6
   15c62:	1e46      	subs	r6, r0, #1
   15c64:	41b0      	sbcs	r0, r6
   15c66:	e7e4      	b.n	15c32 <__eqdf2+0x36>
   15c68:	2000      	movs	r0, #0
   15c6a:	e7e2      	b.n	15c32 <__eqdf2+0x36>
   15c6c:	000007ff 	.word	0x000007ff

00015c70 <__gedf2>:
   15c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c72:	4645      	mov	r5, r8
   15c74:	46de      	mov	lr, fp
   15c76:	4657      	mov	r7, sl
   15c78:	464e      	mov	r6, r9
   15c7a:	b5e0      	push	{r5, r6, r7, lr}
   15c7c:	031f      	lsls	r7, r3, #12
   15c7e:	0b3d      	lsrs	r5, r7, #12
   15c80:	4f2c      	ldr	r7, [pc, #176]	; (15d34 <__gedf2+0xc4>)
   15c82:	030e      	lsls	r6, r1, #12
   15c84:	004c      	lsls	r4, r1, #1
   15c86:	46ab      	mov	fp, r5
   15c88:	005d      	lsls	r5, r3, #1
   15c8a:	4684      	mov	ip, r0
   15c8c:	0b36      	lsrs	r6, r6, #12
   15c8e:	0d64      	lsrs	r4, r4, #21
   15c90:	0fc9      	lsrs	r1, r1, #31
   15c92:	4690      	mov	r8, r2
   15c94:	0d6d      	lsrs	r5, r5, #21
   15c96:	0fdb      	lsrs	r3, r3, #31
   15c98:	42bc      	cmp	r4, r7
   15c9a:	d02a      	beq.n	15cf2 <__gedf2+0x82>
   15c9c:	4f25      	ldr	r7, [pc, #148]	; (15d34 <__gedf2+0xc4>)
   15c9e:	42bd      	cmp	r5, r7
   15ca0:	d02d      	beq.n	15cfe <__gedf2+0x8e>
   15ca2:	2c00      	cmp	r4, #0
   15ca4:	d10f      	bne.n	15cc6 <__gedf2+0x56>
   15ca6:	4330      	orrs	r0, r6
   15ca8:	0007      	movs	r7, r0
   15caa:	4681      	mov	r9, r0
   15cac:	4278      	negs	r0, r7
   15cae:	4178      	adcs	r0, r7
   15cb0:	b2c0      	uxtb	r0, r0
   15cb2:	2d00      	cmp	r5, #0
   15cb4:	d117      	bne.n	15ce6 <__gedf2+0x76>
   15cb6:	465f      	mov	r7, fp
   15cb8:	433a      	orrs	r2, r7
   15cba:	d114      	bne.n	15ce6 <__gedf2+0x76>
   15cbc:	464b      	mov	r3, r9
   15cbe:	2000      	movs	r0, #0
   15cc0:	2b00      	cmp	r3, #0
   15cc2:	d00a      	beq.n	15cda <__gedf2+0x6a>
   15cc4:	e006      	b.n	15cd4 <__gedf2+0x64>
   15cc6:	2d00      	cmp	r5, #0
   15cc8:	d102      	bne.n	15cd0 <__gedf2+0x60>
   15cca:	4658      	mov	r0, fp
   15ccc:	4302      	orrs	r2, r0
   15cce:	d001      	beq.n	15cd4 <__gedf2+0x64>
   15cd0:	4299      	cmp	r1, r3
   15cd2:	d018      	beq.n	15d06 <__gedf2+0x96>
   15cd4:	4248      	negs	r0, r1
   15cd6:	2101      	movs	r1, #1
   15cd8:	4308      	orrs	r0, r1
   15cda:	bc3c      	pop	{r2, r3, r4, r5}
   15cdc:	4690      	mov	r8, r2
   15cde:	4699      	mov	r9, r3
   15ce0:	46a2      	mov	sl, r4
   15ce2:	46ab      	mov	fp, r5
   15ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ce6:	2800      	cmp	r0, #0
   15ce8:	d0f2      	beq.n	15cd0 <__gedf2+0x60>
   15cea:	2001      	movs	r0, #1
   15cec:	3b01      	subs	r3, #1
   15cee:	4318      	orrs	r0, r3
   15cf0:	e7f3      	b.n	15cda <__gedf2+0x6a>
   15cf2:	0037      	movs	r7, r6
   15cf4:	4307      	orrs	r7, r0
   15cf6:	d0d1      	beq.n	15c9c <__gedf2+0x2c>
   15cf8:	2002      	movs	r0, #2
   15cfa:	4240      	negs	r0, r0
   15cfc:	e7ed      	b.n	15cda <__gedf2+0x6a>
   15cfe:	465f      	mov	r7, fp
   15d00:	4317      	orrs	r7, r2
   15d02:	d0ce      	beq.n	15ca2 <__gedf2+0x32>
   15d04:	e7f8      	b.n	15cf8 <__gedf2+0x88>
   15d06:	42ac      	cmp	r4, r5
   15d08:	dce4      	bgt.n	15cd4 <__gedf2+0x64>
   15d0a:	da03      	bge.n	15d14 <__gedf2+0xa4>
   15d0c:	1e48      	subs	r0, r1, #1
   15d0e:	2101      	movs	r1, #1
   15d10:	4308      	orrs	r0, r1
   15d12:	e7e2      	b.n	15cda <__gedf2+0x6a>
   15d14:	455e      	cmp	r6, fp
   15d16:	d8dd      	bhi.n	15cd4 <__gedf2+0x64>
   15d18:	d006      	beq.n	15d28 <__gedf2+0xb8>
   15d1a:	2000      	movs	r0, #0
   15d1c:	455e      	cmp	r6, fp
   15d1e:	d2dc      	bcs.n	15cda <__gedf2+0x6a>
   15d20:	2301      	movs	r3, #1
   15d22:	1e48      	subs	r0, r1, #1
   15d24:	4318      	orrs	r0, r3
   15d26:	e7d8      	b.n	15cda <__gedf2+0x6a>
   15d28:	45c4      	cmp	ip, r8
   15d2a:	d8d3      	bhi.n	15cd4 <__gedf2+0x64>
   15d2c:	2000      	movs	r0, #0
   15d2e:	45c4      	cmp	ip, r8
   15d30:	d3f6      	bcc.n	15d20 <__gedf2+0xb0>
   15d32:	e7d2      	b.n	15cda <__gedf2+0x6a>
   15d34:	000007ff 	.word	0x000007ff

00015d38 <__ledf2>:
   15d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d3a:	464e      	mov	r6, r9
   15d3c:	4645      	mov	r5, r8
   15d3e:	46de      	mov	lr, fp
   15d40:	4657      	mov	r7, sl
   15d42:	005c      	lsls	r4, r3, #1
   15d44:	b5e0      	push	{r5, r6, r7, lr}
   15d46:	031f      	lsls	r7, r3, #12
   15d48:	0fdb      	lsrs	r3, r3, #31
   15d4a:	4699      	mov	r9, r3
   15d4c:	4b2a      	ldr	r3, [pc, #168]	; (15df8 <__ledf2+0xc0>)
   15d4e:	030e      	lsls	r6, r1, #12
   15d50:	004d      	lsls	r5, r1, #1
   15d52:	0fc9      	lsrs	r1, r1, #31
   15d54:	4684      	mov	ip, r0
   15d56:	0b36      	lsrs	r6, r6, #12
   15d58:	0d6d      	lsrs	r5, r5, #21
   15d5a:	468b      	mov	fp, r1
   15d5c:	4690      	mov	r8, r2
   15d5e:	0b3f      	lsrs	r7, r7, #12
   15d60:	0d64      	lsrs	r4, r4, #21
   15d62:	429d      	cmp	r5, r3
   15d64:	d020      	beq.n	15da8 <__ledf2+0x70>
   15d66:	4b24      	ldr	r3, [pc, #144]	; (15df8 <__ledf2+0xc0>)
   15d68:	429c      	cmp	r4, r3
   15d6a:	d022      	beq.n	15db2 <__ledf2+0x7a>
   15d6c:	2d00      	cmp	r5, #0
   15d6e:	d112      	bne.n	15d96 <__ledf2+0x5e>
   15d70:	4330      	orrs	r0, r6
   15d72:	4243      	negs	r3, r0
   15d74:	4143      	adcs	r3, r0
   15d76:	b2db      	uxtb	r3, r3
   15d78:	2c00      	cmp	r4, #0
   15d7a:	d01f      	beq.n	15dbc <__ledf2+0x84>
   15d7c:	2b00      	cmp	r3, #0
   15d7e:	d00c      	beq.n	15d9a <__ledf2+0x62>
   15d80:	464b      	mov	r3, r9
   15d82:	2001      	movs	r0, #1
   15d84:	3b01      	subs	r3, #1
   15d86:	4303      	orrs	r3, r0
   15d88:	0018      	movs	r0, r3
   15d8a:	bc3c      	pop	{r2, r3, r4, r5}
   15d8c:	4690      	mov	r8, r2
   15d8e:	4699      	mov	r9, r3
   15d90:	46a2      	mov	sl, r4
   15d92:	46ab      	mov	fp, r5
   15d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15d96:	2c00      	cmp	r4, #0
   15d98:	d016      	beq.n	15dc8 <__ledf2+0x90>
   15d9a:	45cb      	cmp	fp, r9
   15d9c:	d017      	beq.n	15dce <__ledf2+0x96>
   15d9e:	465b      	mov	r3, fp
   15da0:	4259      	negs	r1, r3
   15da2:	2301      	movs	r3, #1
   15da4:	430b      	orrs	r3, r1
   15da6:	e7ef      	b.n	15d88 <__ledf2+0x50>
   15da8:	0031      	movs	r1, r6
   15daa:	2302      	movs	r3, #2
   15dac:	4301      	orrs	r1, r0
   15dae:	d1eb      	bne.n	15d88 <__ledf2+0x50>
   15db0:	e7d9      	b.n	15d66 <__ledf2+0x2e>
   15db2:	0039      	movs	r1, r7
   15db4:	2302      	movs	r3, #2
   15db6:	4311      	orrs	r1, r2
   15db8:	d1e6      	bne.n	15d88 <__ledf2+0x50>
   15dba:	e7d7      	b.n	15d6c <__ledf2+0x34>
   15dbc:	433a      	orrs	r2, r7
   15dbe:	d1dd      	bne.n	15d7c <__ledf2+0x44>
   15dc0:	2300      	movs	r3, #0
   15dc2:	2800      	cmp	r0, #0
   15dc4:	d0e0      	beq.n	15d88 <__ledf2+0x50>
   15dc6:	e7ea      	b.n	15d9e <__ledf2+0x66>
   15dc8:	433a      	orrs	r2, r7
   15dca:	d1e6      	bne.n	15d9a <__ledf2+0x62>
   15dcc:	e7e7      	b.n	15d9e <__ledf2+0x66>
   15dce:	42a5      	cmp	r5, r4
   15dd0:	dce5      	bgt.n	15d9e <__ledf2+0x66>
   15dd2:	db05      	blt.n	15de0 <__ledf2+0xa8>
   15dd4:	42be      	cmp	r6, r7
   15dd6:	d8e2      	bhi.n	15d9e <__ledf2+0x66>
   15dd8:	d007      	beq.n	15dea <__ledf2+0xb2>
   15dda:	2300      	movs	r3, #0
   15ddc:	42be      	cmp	r6, r7
   15dde:	d2d3      	bcs.n	15d88 <__ledf2+0x50>
   15de0:	4659      	mov	r1, fp
   15de2:	2301      	movs	r3, #1
   15de4:	3901      	subs	r1, #1
   15de6:	430b      	orrs	r3, r1
   15de8:	e7ce      	b.n	15d88 <__ledf2+0x50>
   15dea:	45c4      	cmp	ip, r8
   15dec:	d8d7      	bhi.n	15d9e <__ledf2+0x66>
   15dee:	2300      	movs	r3, #0
   15df0:	45c4      	cmp	ip, r8
   15df2:	d3f5      	bcc.n	15de0 <__ledf2+0xa8>
   15df4:	e7c8      	b.n	15d88 <__ledf2+0x50>
   15df6:	46c0      	nop			; (mov r8, r8)
   15df8:	000007ff 	.word	0x000007ff

00015dfc <__aeabi_dmul>:
   15dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   15dfe:	4657      	mov	r7, sl
   15e00:	4645      	mov	r5, r8
   15e02:	46de      	mov	lr, fp
   15e04:	464e      	mov	r6, r9
   15e06:	b5e0      	push	{r5, r6, r7, lr}
   15e08:	030c      	lsls	r4, r1, #12
   15e0a:	4698      	mov	r8, r3
   15e0c:	004e      	lsls	r6, r1, #1
   15e0e:	0b23      	lsrs	r3, r4, #12
   15e10:	b087      	sub	sp, #28
   15e12:	0007      	movs	r7, r0
   15e14:	4692      	mov	sl, r2
   15e16:	469b      	mov	fp, r3
   15e18:	0d76      	lsrs	r6, r6, #21
   15e1a:	0fcd      	lsrs	r5, r1, #31
   15e1c:	2e00      	cmp	r6, #0
   15e1e:	d06b      	beq.n	15ef8 <__aeabi_dmul+0xfc>
   15e20:	4b6d      	ldr	r3, [pc, #436]	; (15fd8 <__aeabi_dmul+0x1dc>)
   15e22:	429e      	cmp	r6, r3
   15e24:	d035      	beq.n	15e92 <__aeabi_dmul+0x96>
   15e26:	2480      	movs	r4, #128	; 0x80
   15e28:	465b      	mov	r3, fp
   15e2a:	0f42      	lsrs	r2, r0, #29
   15e2c:	0424      	lsls	r4, r4, #16
   15e2e:	00db      	lsls	r3, r3, #3
   15e30:	4314      	orrs	r4, r2
   15e32:	431c      	orrs	r4, r3
   15e34:	00c3      	lsls	r3, r0, #3
   15e36:	4699      	mov	r9, r3
   15e38:	4b68      	ldr	r3, [pc, #416]	; (15fdc <__aeabi_dmul+0x1e0>)
   15e3a:	46a3      	mov	fp, r4
   15e3c:	469c      	mov	ip, r3
   15e3e:	2300      	movs	r3, #0
   15e40:	2700      	movs	r7, #0
   15e42:	4466      	add	r6, ip
   15e44:	9302      	str	r3, [sp, #8]
   15e46:	4643      	mov	r3, r8
   15e48:	031c      	lsls	r4, r3, #12
   15e4a:	005a      	lsls	r2, r3, #1
   15e4c:	0fdb      	lsrs	r3, r3, #31
   15e4e:	4650      	mov	r0, sl
   15e50:	0b24      	lsrs	r4, r4, #12
   15e52:	0d52      	lsrs	r2, r2, #21
   15e54:	4698      	mov	r8, r3
   15e56:	d100      	bne.n	15e5a <__aeabi_dmul+0x5e>
   15e58:	e076      	b.n	15f48 <__aeabi_dmul+0x14c>
   15e5a:	4b5f      	ldr	r3, [pc, #380]	; (15fd8 <__aeabi_dmul+0x1dc>)
   15e5c:	429a      	cmp	r2, r3
   15e5e:	d06d      	beq.n	15f3c <__aeabi_dmul+0x140>
   15e60:	2380      	movs	r3, #128	; 0x80
   15e62:	0f41      	lsrs	r1, r0, #29
   15e64:	041b      	lsls	r3, r3, #16
   15e66:	430b      	orrs	r3, r1
   15e68:	495c      	ldr	r1, [pc, #368]	; (15fdc <__aeabi_dmul+0x1e0>)
   15e6a:	00e4      	lsls	r4, r4, #3
   15e6c:	468c      	mov	ip, r1
   15e6e:	431c      	orrs	r4, r3
   15e70:	00c3      	lsls	r3, r0, #3
   15e72:	2000      	movs	r0, #0
   15e74:	4462      	add	r2, ip
   15e76:	4641      	mov	r1, r8
   15e78:	18b6      	adds	r6, r6, r2
   15e7a:	4069      	eors	r1, r5
   15e7c:	1c72      	adds	r2, r6, #1
   15e7e:	9101      	str	r1, [sp, #4]
   15e80:	4694      	mov	ip, r2
   15e82:	4307      	orrs	r7, r0
   15e84:	2f0f      	cmp	r7, #15
   15e86:	d900      	bls.n	15e8a <__aeabi_dmul+0x8e>
   15e88:	e0b0      	b.n	15fec <__aeabi_dmul+0x1f0>
   15e8a:	4a55      	ldr	r2, [pc, #340]	; (15fe0 <__aeabi_dmul+0x1e4>)
   15e8c:	00bf      	lsls	r7, r7, #2
   15e8e:	59d2      	ldr	r2, [r2, r7]
   15e90:	4697      	mov	pc, r2
   15e92:	465b      	mov	r3, fp
   15e94:	4303      	orrs	r3, r0
   15e96:	4699      	mov	r9, r3
   15e98:	d000      	beq.n	15e9c <__aeabi_dmul+0xa0>
   15e9a:	e087      	b.n	15fac <__aeabi_dmul+0x1b0>
   15e9c:	2300      	movs	r3, #0
   15e9e:	469b      	mov	fp, r3
   15ea0:	3302      	adds	r3, #2
   15ea2:	2708      	movs	r7, #8
   15ea4:	9302      	str	r3, [sp, #8]
   15ea6:	e7ce      	b.n	15e46 <__aeabi_dmul+0x4a>
   15ea8:	4642      	mov	r2, r8
   15eaa:	9201      	str	r2, [sp, #4]
   15eac:	2802      	cmp	r0, #2
   15eae:	d067      	beq.n	15f80 <__aeabi_dmul+0x184>
   15eb0:	2803      	cmp	r0, #3
   15eb2:	d100      	bne.n	15eb6 <__aeabi_dmul+0xba>
   15eb4:	e20e      	b.n	162d4 <__aeabi_dmul+0x4d8>
   15eb6:	2801      	cmp	r0, #1
   15eb8:	d000      	beq.n	15ebc <__aeabi_dmul+0xc0>
   15eba:	e162      	b.n	16182 <__aeabi_dmul+0x386>
   15ebc:	2300      	movs	r3, #0
   15ebe:	2400      	movs	r4, #0
   15ec0:	2200      	movs	r2, #0
   15ec2:	4699      	mov	r9, r3
   15ec4:	9901      	ldr	r1, [sp, #4]
   15ec6:	4001      	ands	r1, r0
   15ec8:	b2cd      	uxtb	r5, r1
   15eca:	2100      	movs	r1, #0
   15ecc:	0312      	lsls	r2, r2, #12
   15ece:	0d0b      	lsrs	r3, r1, #20
   15ed0:	0b12      	lsrs	r2, r2, #12
   15ed2:	051b      	lsls	r3, r3, #20
   15ed4:	4313      	orrs	r3, r2
   15ed6:	4a43      	ldr	r2, [pc, #268]	; (15fe4 <__aeabi_dmul+0x1e8>)
   15ed8:	0524      	lsls	r4, r4, #20
   15eda:	4013      	ands	r3, r2
   15edc:	431c      	orrs	r4, r3
   15ede:	0064      	lsls	r4, r4, #1
   15ee0:	07ed      	lsls	r5, r5, #31
   15ee2:	0864      	lsrs	r4, r4, #1
   15ee4:	432c      	orrs	r4, r5
   15ee6:	4648      	mov	r0, r9
   15ee8:	0021      	movs	r1, r4
   15eea:	b007      	add	sp, #28
   15eec:	bc3c      	pop	{r2, r3, r4, r5}
   15eee:	4690      	mov	r8, r2
   15ef0:	4699      	mov	r9, r3
   15ef2:	46a2      	mov	sl, r4
   15ef4:	46ab      	mov	fp, r5
   15ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ef8:	4303      	orrs	r3, r0
   15efa:	4699      	mov	r9, r3
   15efc:	d04f      	beq.n	15f9e <__aeabi_dmul+0x1a2>
   15efe:	465b      	mov	r3, fp
   15f00:	2b00      	cmp	r3, #0
   15f02:	d100      	bne.n	15f06 <__aeabi_dmul+0x10a>
   15f04:	e189      	b.n	1621a <__aeabi_dmul+0x41e>
   15f06:	4658      	mov	r0, fp
   15f08:	f000 fe98 	bl	16c3c <__clzsi2>
   15f0c:	0003      	movs	r3, r0
   15f0e:	3b0b      	subs	r3, #11
   15f10:	2b1c      	cmp	r3, #28
   15f12:	dd00      	ble.n	15f16 <__aeabi_dmul+0x11a>
   15f14:	e17a      	b.n	1620c <__aeabi_dmul+0x410>
   15f16:	221d      	movs	r2, #29
   15f18:	1ad3      	subs	r3, r2, r3
   15f1a:	003a      	movs	r2, r7
   15f1c:	0001      	movs	r1, r0
   15f1e:	465c      	mov	r4, fp
   15f20:	40da      	lsrs	r2, r3
   15f22:	3908      	subs	r1, #8
   15f24:	408c      	lsls	r4, r1
   15f26:	0013      	movs	r3, r2
   15f28:	408f      	lsls	r7, r1
   15f2a:	4323      	orrs	r3, r4
   15f2c:	469b      	mov	fp, r3
   15f2e:	46b9      	mov	r9, r7
   15f30:	2300      	movs	r3, #0
   15f32:	4e2d      	ldr	r6, [pc, #180]	; (15fe8 <__aeabi_dmul+0x1ec>)
   15f34:	2700      	movs	r7, #0
   15f36:	1a36      	subs	r6, r6, r0
   15f38:	9302      	str	r3, [sp, #8]
   15f3a:	e784      	b.n	15e46 <__aeabi_dmul+0x4a>
   15f3c:	4653      	mov	r3, sl
   15f3e:	4323      	orrs	r3, r4
   15f40:	d12a      	bne.n	15f98 <__aeabi_dmul+0x19c>
   15f42:	2400      	movs	r4, #0
   15f44:	2002      	movs	r0, #2
   15f46:	e796      	b.n	15e76 <__aeabi_dmul+0x7a>
   15f48:	4653      	mov	r3, sl
   15f4a:	4323      	orrs	r3, r4
   15f4c:	d020      	beq.n	15f90 <__aeabi_dmul+0x194>
   15f4e:	2c00      	cmp	r4, #0
   15f50:	d100      	bne.n	15f54 <__aeabi_dmul+0x158>
   15f52:	e157      	b.n	16204 <__aeabi_dmul+0x408>
   15f54:	0020      	movs	r0, r4
   15f56:	f000 fe71 	bl	16c3c <__clzsi2>
   15f5a:	0003      	movs	r3, r0
   15f5c:	3b0b      	subs	r3, #11
   15f5e:	2b1c      	cmp	r3, #28
   15f60:	dd00      	ble.n	15f64 <__aeabi_dmul+0x168>
   15f62:	e149      	b.n	161f8 <__aeabi_dmul+0x3fc>
   15f64:	211d      	movs	r1, #29
   15f66:	1acb      	subs	r3, r1, r3
   15f68:	4651      	mov	r1, sl
   15f6a:	0002      	movs	r2, r0
   15f6c:	40d9      	lsrs	r1, r3
   15f6e:	4653      	mov	r3, sl
   15f70:	3a08      	subs	r2, #8
   15f72:	4094      	lsls	r4, r2
   15f74:	4093      	lsls	r3, r2
   15f76:	430c      	orrs	r4, r1
   15f78:	4a1b      	ldr	r2, [pc, #108]	; (15fe8 <__aeabi_dmul+0x1ec>)
   15f7a:	1a12      	subs	r2, r2, r0
   15f7c:	2000      	movs	r0, #0
   15f7e:	e77a      	b.n	15e76 <__aeabi_dmul+0x7a>
   15f80:	2501      	movs	r5, #1
   15f82:	9b01      	ldr	r3, [sp, #4]
   15f84:	4c14      	ldr	r4, [pc, #80]	; (15fd8 <__aeabi_dmul+0x1dc>)
   15f86:	401d      	ands	r5, r3
   15f88:	2300      	movs	r3, #0
   15f8a:	2200      	movs	r2, #0
   15f8c:	4699      	mov	r9, r3
   15f8e:	e79c      	b.n	15eca <__aeabi_dmul+0xce>
   15f90:	2400      	movs	r4, #0
   15f92:	2200      	movs	r2, #0
   15f94:	2001      	movs	r0, #1
   15f96:	e76e      	b.n	15e76 <__aeabi_dmul+0x7a>
   15f98:	4653      	mov	r3, sl
   15f9a:	2003      	movs	r0, #3
   15f9c:	e76b      	b.n	15e76 <__aeabi_dmul+0x7a>
   15f9e:	2300      	movs	r3, #0
   15fa0:	469b      	mov	fp, r3
   15fa2:	3301      	adds	r3, #1
   15fa4:	2704      	movs	r7, #4
   15fa6:	2600      	movs	r6, #0
   15fa8:	9302      	str	r3, [sp, #8]
   15faa:	e74c      	b.n	15e46 <__aeabi_dmul+0x4a>
   15fac:	2303      	movs	r3, #3
   15fae:	4681      	mov	r9, r0
   15fb0:	270c      	movs	r7, #12
   15fb2:	9302      	str	r3, [sp, #8]
   15fb4:	e747      	b.n	15e46 <__aeabi_dmul+0x4a>
   15fb6:	2280      	movs	r2, #128	; 0x80
   15fb8:	2300      	movs	r3, #0
   15fba:	2500      	movs	r5, #0
   15fbc:	0312      	lsls	r2, r2, #12
   15fbe:	4699      	mov	r9, r3
   15fc0:	4c05      	ldr	r4, [pc, #20]	; (15fd8 <__aeabi_dmul+0x1dc>)
   15fc2:	e782      	b.n	15eca <__aeabi_dmul+0xce>
   15fc4:	465c      	mov	r4, fp
   15fc6:	464b      	mov	r3, r9
   15fc8:	9802      	ldr	r0, [sp, #8]
   15fca:	e76f      	b.n	15eac <__aeabi_dmul+0xb0>
   15fcc:	465c      	mov	r4, fp
   15fce:	464b      	mov	r3, r9
   15fd0:	9501      	str	r5, [sp, #4]
   15fd2:	9802      	ldr	r0, [sp, #8]
   15fd4:	e76a      	b.n	15eac <__aeabi_dmul+0xb0>
   15fd6:	46c0      	nop			; (mov r8, r8)
   15fd8:	000007ff 	.word	0x000007ff
   15fdc:	fffffc01 	.word	0xfffffc01
   15fe0:	000176f8 	.word	0x000176f8
   15fe4:	800fffff 	.word	0x800fffff
   15fe8:	fffffc0d 	.word	0xfffffc0d
   15fec:	464a      	mov	r2, r9
   15fee:	4649      	mov	r1, r9
   15ff0:	0c17      	lsrs	r7, r2, #16
   15ff2:	0c1a      	lsrs	r2, r3, #16
   15ff4:	041b      	lsls	r3, r3, #16
   15ff6:	0c1b      	lsrs	r3, r3, #16
   15ff8:	0408      	lsls	r0, r1, #16
   15ffa:	0019      	movs	r1, r3
   15ffc:	0c00      	lsrs	r0, r0, #16
   15ffe:	4341      	muls	r1, r0
   16000:	0015      	movs	r5, r2
   16002:	4688      	mov	r8, r1
   16004:	0019      	movs	r1, r3
   16006:	437d      	muls	r5, r7
   16008:	4379      	muls	r1, r7
   1600a:	9503      	str	r5, [sp, #12]
   1600c:	4689      	mov	r9, r1
   1600e:	0029      	movs	r1, r5
   16010:	0015      	movs	r5, r2
   16012:	4345      	muls	r5, r0
   16014:	444d      	add	r5, r9
   16016:	9502      	str	r5, [sp, #8]
   16018:	4645      	mov	r5, r8
   1601a:	0c2d      	lsrs	r5, r5, #16
   1601c:	46aa      	mov	sl, r5
   1601e:	9d02      	ldr	r5, [sp, #8]
   16020:	4455      	add	r5, sl
   16022:	45a9      	cmp	r9, r5
   16024:	d906      	bls.n	16034 <__aeabi_dmul+0x238>
   16026:	468a      	mov	sl, r1
   16028:	2180      	movs	r1, #128	; 0x80
   1602a:	0249      	lsls	r1, r1, #9
   1602c:	4689      	mov	r9, r1
   1602e:	44ca      	add	sl, r9
   16030:	4651      	mov	r1, sl
   16032:	9103      	str	r1, [sp, #12]
   16034:	0c29      	lsrs	r1, r5, #16
   16036:	9104      	str	r1, [sp, #16]
   16038:	4641      	mov	r1, r8
   1603a:	0409      	lsls	r1, r1, #16
   1603c:	042d      	lsls	r5, r5, #16
   1603e:	0c09      	lsrs	r1, r1, #16
   16040:	4688      	mov	r8, r1
   16042:	0029      	movs	r1, r5
   16044:	0c25      	lsrs	r5, r4, #16
   16046:	0424      	lsls	r4, r4, #16
   16048:	4441      	add	r1, r8
   1604a:	0c24      	lsrs	r4, r4, #16
   1604c:	9105      	str	r1, [sp, #20]
   1604e:	0021      	movs	r1, r4
   16050:	4341      	muls	r1, r0
   16052:	4688      	mov	r8, r1
   16054:	0021      	movs	r1, r4
   16056:	4379      	muls	r1, r7
   16058:	468a      	mov	sl, r1
   1605a:	4368      	muls	r0, r5
   1605c:	4641      	mov	r1, r8
   1605e:	4450      	add	r0, sl
   16060:	4681      	mov	r9, r0
   16062:	0c08      	lsrs	r0, r1, #16
   16064:	4448      	add	r0, r9
   16066:	436f      	muls	r7, r5
   16068:	4582      	cmp	sl, r0
   1606a:	d903      	bls.n	16074 <__aeabi_dmul+0x278>
   1606c:	2180      	movs	r1, #128	; 0x80
   1606e:	0249      	lsls	r1, r1, #9
   16070:	4689      	mov	r9, r1
   16072:	444f      	add	r7, r9
   16074:	0c01      	lsrs	r1, r0, #16
   16076:	4689      	mov	r9, r1
   16078:	0039      	movs	r1, r7
   1607a:	4449      	add	r1, r9
   1607c:	9102      	str	r1, [sp, #8]
   1607e:	4641      	mov	r1, r8
   16080:	040f      	lsls	r7, r1, #16
   16082:	9904      	ldr	r1, [sp, #16]
   16084:	0c3f      	lsrs	r7, r7, #16
   16086:	4688      	mov	r8, r1
   16088:	0400      	lsls	r0, r0, #16
   1608a:	19c0      	adds	r0, r0, r7
   1608c:	4480      	add	r8, r0
   1608e:	4641      	mov	r1, r8
   16090:	9104      	str	r1, [sp, #16]
   16092:	4659      	mov	r1, fp
   16094:	0c0f      	lsrs	r7, r1, #16
   16096:	0409      	lsls	r1, r1, #16
   16098:	0c09      	lsrs	r1, r1, #16
   1609a:	4688      	mov	r8, r1
   1609c:	4359      	muls	r1, r3
   1609e:	468a      	mov	sl, r1
   160a0:	0039      	movs	r1, r7
   160a2:	4351      	muls	r1, r2
   160a4:	4689      	mov	r9, r1
   160a6:	4641      	mov	r1, r8
   160a8:	434a      	muls	r2, r1
   160aa:	4651      	mov	r1, sl
   160ac:	0c09      	lsrs	r1, r1, #16
   160ae:	468b      	mov	fp, r1
   160b0:	437b      	muls	r3, r7
   160b2:	18d2      	adds	r2, r2, r3
   160b4:	445a      	add	r2, fp
   160b6:	4293      	cmp	r3, r2
   160b8:	d903      	bls.n	160c2 <__aeabi_dmul+0x2c6>
   160ba:	2380      	movs	r3, #128	; 0x80
   160bc:	025b      	lsls	r3, r3, #9
   160be:	469b      	mov	fp, r3
   160c0:	44d9      	add	r9, fp
   160c2:	4651      	mov	r1, sl
   160c4:	0409      	lsls	r1, r1, #16
   160c6:	0c09      	lsrs	r1, r1, #16
   160c8:	468a      	mov	sl, r1
   160ca:	4641      	mov	r1, r8
   160cc:	4361      	muls	r1, r4
   160ce:	437c      	muls	r4, r7
   160d0:	0c13      	lsrs	r3, r2, #16
   160d2:	0412      	lsls	r2, r2, #16
   160d4:	444b      	add	r3, r9
   160d6:	4452      	add	r2, sl
   160d8:	46a1      	mov	r9, r4
   160da:	468a      	mov	sl, r1
   160dc:	003c      	movs	r4, r7
   160de:	4641      	mov	r1, r8
   160e0:	436c      	muls	r4, r5
   160e2:	434d      	muls	r5, r1
   160e4:	4651      	mov	r1, sl
   160e6:	444d      	add	r5, r9
   160e8:	0c0f      	lsrs	r7, r1, #16
   160ea:	197d      	adds	r5, r7, r5
   160ec:	45a9      	cmp	r9, r5
   160ee:	d903      	bls.n	160f8 <__aeabi_dmul+0x2fc>
   160f0:	2180      	movs	r1, #128	; 0x80
   160f2:	0249      	lsls	r1, r1, #9
   160f4:	4688      	mov	r8, r1
   160f6:	4444      	add	r4, r8
   160f8:	9f04      	ldr	r7, [sp, #16]
   160fa:	9903      	ldr	r1, [sp, #12]
   160fc:	46b8      	mov	r8, r7
   160fe:	4441      	add	r1, r8
   16100:	468b      	mov	fp, r1
   16102:	4583      	cmp	fp, r0
   16104:	4180      	sbcs	r0, r0
   16106:	4241      	negs	r1, r0
   16108:	4688      	mov	r8, r1
   1610a:	4651      	mov	r1, sl
   1610c:	0408      	lsls	r0, r1, #16
   1610e:	042f      	lsls	r7, r5, #16
   16110:	0c00      	lsrs	r0, r0, #16
   16112:	183f      	adds	r7, r7, r0
   16114:	4658      	mov	r0, fp
   16116:	9902      	ldr	r1, [sp, #8]
   16118:	1810      	adds	r0, r2, r0
   1611a:	4689      	mov	r9, r1
   1611c:	4290      	cmp	r0, r2
   1611e:	4192      	sbcs	r2, r2
   16120:	444f      	add	r7, r9
   16122:	46ba      	mov	sl, r7
   16124:	4252      	negs	r2, r2
   16126:	4699      	mov	r9, r3
   16128:	4693      	mov	fp, r2
   1612a:	44c2      	add	sl, r8
   1612c:	44d1      	add	r9, sl
   1612e:	44cb      	add	fp, r9
   16130:	428f      	cmp	r7, r1
   16132:	41bf      	sbcs	r7, r7
   16134:	45c2      	cmp	sl, r8
   16136:	4189      	sbcs	r1, r1
   16138:	4599      	cmp	r9, r3
   1613a:	419b      	sbcs	r3, r3
   1613c:	4593      	cmp	fp, r2
   1613e:	4192      	sbcs	r2, r2
   16140:	427f      	negs	r7, r7
   16142:	4249      	negs	r1, r1
   16144:	0c2d      	lsrs	r5, r5, #16
   16146:	4252      	negs	r2, r2
   16148:	430f      	orrs	r7, r1
   1614a:	425b      	negs	r3, r3
   1614c:	4313      	orrs	r3, r2
   1614e:	197f      	adds	r7, r7, r5
   16150:	18ff      	adds	r7, r7, r3
   16152:	465b      	mov	r3, fp
   16154:	193c      	adds	r4, r7, r4
   16156:	0ddb      	lsrs	r3, r3, #23
   16158:	9a05      	ldr	r2, [sp, #20]
   1615a:	0264      	lsls	r4, r4, #9
   1615c:	431c      	orrs	r4, r3
   1615e:	0243      	lsls	r3, r0, #9
   16160:	4313      	orrs	r3, r2
   16162:	1e5d      	subs	r5, r3, #1
   16164:	41ab      	sbcs	r3, r5
   16166:	465a      	mov	r2, fp
   16168:	0dc0      	lsrs	r0, r0, #23
   1616a:	4303      	orrs	r3, r0
   1616c:	0252      	lsls	r2, r2, #9
   1616e:	4313      	orrs	r3, r2
   16170:	01e2      	lsls	r2, r4, #7
   16172:	d556      	bpl.n	16222 <__aeabi_dmul+0x426>
   16174:	2001      	movs	r0, #1
   16176:	085a      	lsrs	r2, r3, #1
   16178:	4003      	ands	r3, r0
   1617a:	4313      	orrs	r3, r2
   1617c:	07e2      	lsls	r2, r4, #31
   1617e:	4313      	orrs	r3, r2
   16180:	0864      	lsrs	r4, r4, #1
   16182:	485a      	ldr	r0, [pc, #360]	; (162ec <__aeabi_dmul+0x4f0>)
   16184:	4460      	add	r0, ip
   16186:	2800      	cmp	r0, #0
   16188:	dd4d      	ble.n	16226 <__aeabi_dmul+0x42a>
   1618a:	075a      	lsls	r2, r3, #29
   1618c:	d009      	beq.n	161a2 <__aeabi_dmul+0x3a6>
   1618e:	220f      	movs	r2, #15
   16190:	401a      	ands	r2, r3
   16192:	2a04      	cmp	r2, #4
   16194:	d005      	beq.n	161a2 <__aeabi_dmul+0x3a6>
   16196:	1d1a      	adds	r2, r3, #4
   16198:	429a      	cmp	r2, r3
   1619a:	419b      	sbcs	r3, r3
   1619c:	425b      	negs	r3, r3
   1619e:	18e4      	adds	r4, r4, r3
   161a0:	0013      	movs	r3, r2
   161a2:	01e2      	lsls	r2, r4, #7
   161a4:	d504      	bpl.n	161b0 <__aeabi_dmul+0x3b4>
   161a6:	2080      	movs	r0, #128	; 0x80
   161a8:	4a51      	ldr	r2, [pc, #324]	; (162f0 <__aeabi_dmul+0x4f4>)
   161aa:	00c0      	lsls	r0, r0, #3
   161ac:	4014      	ands	r4, r2
   161ae:	4460      	add	r0, ip
   161b0:	4a50      	ldr	r2, [pc, #320]	; (162f4 <__aeabi_dmul+0x4f8>)
   161b2:	4290      	cmp	r0, r2
   161b4:	dd00      	ble.n	161b8 <__aeabi_dmul+0x3bc>
   161b6:	e6e3      	b.n	15f80 <__aeabi_dmul+0x184>
   161b8:	2501      	movs	r5, #1
   161ba:	08db      	lsrs	r3, r3, #3
   161bc:	0762      	lsls	r2, r4, #29
   161be:	431a      	orrs	r2, r3
   161c0:	0264      	lsls	r4, r4, #9
   161c2:	9b01      	ldr	r3, [sp, #4]
   161c4:	4691      	mov	r9, r2
   161c6:	0b22      	lsrs	r2, r4, #12
   161c8:	0544      	lsls	r4, r0, #21
   161ca:	0d64      	lsrs	r4, r4, #21
   161cc:	401d      	ands	r5, r3
   161ce:	e67c      	b.n	15eca <__aeabi_dmul+0xce>
   161d0:	2280      	movs	r2, #128	; 0x80
   161d2:	4659      	mov	r1, fp
   161d4:	0312      	lsls	r2, r2, #12
   161d6:	4211      	tst	r1, r2
   161d8:	d008      	beq.n	161ec <__aeabi_dmul+0x3f0>
   161da:	4214      	tst	r4, r2
   161dc:	d106      	bne.n	161ec <__aeabi_dmul+0x3f0>
   161de:	4322      	orrs	r2, r4
   161e0:	0312      	lsls	r2, r2, #12
   161e2:	0b12      	lsrs	r2, r2, #12
   161e4:	4645      	mov	r5, r8
   161e6:	4699      	mov	r9, r3
   161e8:	4c43      	ldr	r4, [pc, #268]	; (162f8 <__aeabi_dmul+0x4fc>)
   161ea:	e66e      	b.n	15eca <__aeabi_dmul+0xce>
   161ec:	465b      	mov	r3, fp
   161ee:	431a      	orrs	r2, r3
   161f0:	0312      	lsls	r2, r2, #12
   161f2:	0b12      	lsrs	r2, r2, #12
   161f4:	4c40      	ldr	r4, [pc, #256]	; (162f8 <__aeabi_dmul+0x4fc>)
   161f6:	e668      	b.n	15eca <__aeabi_dmul+0xce>
   161f8:	0003      	movs	r3, r0
   161fa:	4654      	mov	r4, sl
   161fc:	3b28      	subs	r3, #40	; 0x28
   161fe:	409c      	lsls	r4, r3
   16200:	2300      	movs	r3, #0
   16202:	e6b9      	b.n	15f78 <__aeabi_dmul+0x17c>
   16204:	f000 fd1a 	bl	16c3c <__clzsi2>
   16208:	3020      	adds	r0, #32
   1620a:	e6a6      	b.n	15f5a <__aeabi_dmul+0x15e>
   1620c:	0003      	movs	r3, r0
   1620e:	3b28      	subs	r3, #40	; 0x28
   16210:	409f      	lsls	r7, r3
   16212:	2300      	movs	r3, #0
   16214:	46bb      	mov	fp, r7
   16216:	4699      	mov	r9, r3
   16218:	e68a      	b.n	15f30 <__aeabi_dmul+0x134>
   1621a:	f000 fd0f 	bl	16c3c <__clzsi2>
   1621e:	3020      	adds	r0, #32
   16220:	e674      	b.n	15f0c <__aeabi_dmul+0x110>
   16222:	46b4      	mov	ip, r6
   16224:	e7ad      	b.n	16182 <__aeabi_dmul+0x386>
   16226:	2501      	movs	r5, #1
   16228:	1a2a      	subs	r2, r5, r0
   1622a:	2a38      	cmp	r2, #56	; 0x38
   1622c:	dd06      	ble.n	1623c <__aeabi_dmul+0x440>
   1622e:	9b01      	ldr	r3, [sp, #4]
   16230:	2400      	movs	r4, #0
   16232:	401d      	ands	r5, r3
   16234:	2300      	movs	r3, #0
   16236:	2200      	movs	r2, #0
   16238:	4699      	mov	r9, r3
   1623a:	e646      	b.n	15eca <__aeabi_dmul+0xce>
   1623c:	2a1f      	cmp	r2, #31
   1623e:	dc21      	bgt.n	16284 <__aeabi_dmul+0x488>
   16240:	2520      	movs	r5, #32
   16242:	0020      	movs	r0, r4
   16244:	1aad      	subs	r5, r5, r2
   16246:	001e      	movs	r6, r3
   16248:	40ab      	lsls	r3, r5
   1624a:	40a8      	lsls	r0, r5
   1624c:	40d6      	lsrs	r6, r2
   1624e:	1e5d      	subs	r5, r3, #1
   16250:	41ab      	sbcs	r3, r5
   16252:	4330      	orrs	r0, r6
   16254:	4318      	orrs	r0, r3
   16256:	40d4      	lsrs	r4, r2
   16258:	0743      	lsls	r3, r0, #29
   1625a:	d009      	beq.n	16270 <__aeabi_dmul+0x474>
   1625c:	230f      	movs	r3, #15
   1625e:	4003      	ands	r3, r0
   16260:	2b04      	cmp	r3, #4
   16262:	d005      	beq.n	16270 <__aeabi_dmul+0x474>
   16264:	0003      	movs	r3, r0
   16266:	1d18      	adds	r0, r3, #4
   16268:	4298      	cmp	r0, r3
   1626a:	419b      	sbcs	r3, r3
   1626c:	425b      	negs	r3, r3
   1626e:	18e4      	adds	r4, r4, r3
   16270:	0223      	lsls	r3, r4, #8
   16272:	d521      	bpl.n	162b8 <__aeabi_dmul+0x4bc>
   16274:	2501      	movs	r5, #1
   16276:	9b01      	ldr	r3, [sp, #4]
   16278:	2401      	movs	r4, #1
   1627a:	401d      	ands	r5, r3
   1627c:	2300      	movs	r3, #0
   1627e:	2200      	movs	r2, #0
   16280:	4699      	mov	r9, r3
   16282:	e622      	b.n	15eca <__aeabi_dmul+0xce>
   16284:	251f      	movs	r5, #31
   16286:	0021      	movs	r1, r4
   16288:	426d      	negs	r5, r5
   1628a:	1a28      	subs	r0, r5, r0
   1628c:	40c1      	lsrs	r1, r0
   1628e:	0008      	movs	r0, r1
   16290:	2a20      	cmp	r2, #32
   16292:	d01d      	beq.n	162d0 <__aeabi_dmul+0x4d4>
   16294:	355f      	adds	r5, #95	; 0x5f
   16296:	1aaa      	subs	r2, r5, r2
   16298:	4094      	lsls	r4, r2
   1629a:	4323      	orrs	r3, r4
   1629c:	1e5c      	subs	r4, r3, #1
   1629e:	41a3      	sbcs	r3, r4
   162a0:	2507      	movs	r5, #7
   162a2:	4303      	orrs	r3, r0
   162a4:	401d      	ands	r5, r3
   162a6:	2200      	movs	r2, #0
   162a8:	2d00      	cmp	r5, #0
   162aa:	d009      	beq.n	162c0 <__aeabi_dmul+0x4c4>
   162ac:	220f      	movs	r2, #15
   162ae:	2400      	movs	r4, #0
   162b0:	401a      	ands	r2, r3
   162b2:	0018      	movs	r0, r3
   162b4:	2a04      	cmp	r2, #4
   162b6:	d1d6      	bne.n	16266 <__aeabi_dmul+0x46a>
   162b8:	0003      	movs	r3, r0
   162ba:	0765      	lsls	r5, r4, #29
   162bc:	0264      	lsls	r4, r4, #9
   162be:	0b22      	lsrs	r2, r4, #12
   162c0:	08db      	lsrs	r3, r3, #3
   162c2:	432b      	orrs	r3, r5
   162c4:	2501      	movs	r5, #1
   162c6:	4699      	mov	r9, r3
   162c8:	9b01      	ldr	r3, [sp, #4]
   162ca:	2400      	movs	r4, #0
   162cc:	401d      	ands	r5, r3
   162ce:	e5fc      	b.n	15eca <__aeabi_dmul+0xce>
   162d0:	2400      	movs	r4, #0
   162d2:	e7e2      	b.n	1629a <__aeabi_dmul+0x49e>
   162d4:	2280      	movs	r2, #128	; 0x80
   162d6:	2501      	movs	r5, #1
   162d8:	0312      	lsls	r2, r2, #12
   162da:	4322      	orrs	r2, r4
   162dc:	9901      	ldr	r1, [sp, #4]
   162de:	0312      	lsls	r2, r2, #12
   162e0:	0b12      	lsrs	r2, r2, #12
   162e2:	400d      	ands	r5, r1
   162e4:	4699      	mov	r9, r3
   162e6:	4c04      	ldr	r4, [pc, #16]	; (162f8 <__aeabi_dmul+0x4fc>)
   162e8:	e5ef      	b.n	15eca <__aeabi_dmul+0xce>
   162ea:	46c0      	nop			; (mov r8, r8)
   162ec:	000003ff 	.word	0x000003ff
   162f0:	feffffff 	.word	0xfeffffff
   162f4:	000007fe 	.word	0x000007fe
   162f8:	000007ff 	.word	0x000007ff

000162fc <__aeabi_dsub>:
   162fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   162fe:	4646      	mov	r6, r8
   16300:	46d6      	mov	lr, sl
   16302:	464f      	mov	r7, r9
   16304:	030c      	lsls	r4, r1, #12
   16306:	b5c0      	push	{r6, r7, lr}
   16308:	0fcd      	lsrs	r5, r1, #31
   1630a:	004e      	lsls	r6, r1, #1
   1630c:	0a61      	lsrs	r1, r4, #9
   1630e:	0f44      	lsrs	r4, r0, #29
   16310:	430c      	orrs	r4, r1
   16312:	00c1      	lsls	r1, r0, #3
   16314:	0058      	lsls	r0, r3, #1
   16316:	0d40      	lsrs	r0, r0, #21
   16318:	4684      	mov	ip, r0
   1631a:	468a      	mov	sl, r1
   1631c:	000f      	movs	r7, r1
   1631e:	0319      	lsls	r1, r3, #12
   16320:	0f50      	lsrs	r0, r2, #29
   16322:	0a49      	lsrs	r1, r1, #9
   16324:	4301      	orrs	r1, r0
   16326:	48c6      	ldr	r0, [pc, #792]	; (16640 <__aeabi_dsub+0x344>)
   16328:	0d76      	lsrs	r6, r6, #21
   1632a:	46a8      	mov	r8, r5
   1632c:	0fdb      	lsrs	r3, r3, #31
   1632e:	00d2      	lsls	r2, r2, #3
   16330:	4584      	cmp	ip, r0
   16332:	d100      	bne.n	16336 <__aeabi_dsub+0x3a>
   16334:	e0d8      	b.n	164e8 <__aeabi_dsub+0x1ec>
   16336:	2001      	movs	r0, #1
   16338:	4043      	eors	r3, r0
   1633a:	42ab      	cmp	r3, r5
   1633c:	d100      	bne.n	16340 <__aeabi_dsub+0x44>
   1633e:	e0a6      	b.n	1648e <__aeabi_dsub+0x192>
   16340:	4660      	mov	r0, ip
   16342:	1a35      	subs	r5, r6, r0
   16344:	2d00      	cmp	r5, #0
   16346:	dc00      	bgt.n	1634a <__aeabi_dsub+0x4e>
   16348:	e105      	b.n	16556 <__aeabi_dsub+0x25a>
   1634a:	2800      	cmp	r0, #0
   1634c:	d110      	bne.n	16370 <__aeabi_dsub+0x74>
   1634e:	000b      	movs	r3, r1
   16350:	4313      	orrs	r3, r2
   16352:	d100      	bne.n	16356 <__aeabi_dsub+0x5a>
   16354:	e0d7      	b.n	16506 <__aeabi_dsub+0x20a>
   16356:	1e6b      	subs	r3, r5, #1
   16358:	2b00      	cmp	r3, #0
   1635a:	d000      	beq.n	1635e <__aeabi_dsub+0x62>
   1635c:	e14b      	b.n	165f6 <__aeabi_dsub+0x2fa>
   1635e:	4653      	mov	r3, sl
   16360:	1a9f      	subs	r7, r3, r2
   16362:	45ba      	cmp	sl, r7
   16364:	4180      	sbcs	r0, r0
   16366:	1a64      	subs	r4, r4, r1
   16368:	4240      	negs	r0, r0
   1636a:	1a24      	subs	r4, r4, r0
   1636c:	2601      	movs	r6, #1
   1636e:	e01e      	b.n	163ae <__aeabi_dsub+0xb2>
   16370:	4bb3      	ldr	r3, [pc, #716]	; (16640 <__aeabi_dsub+0x344>)
   16372:	429e      	cmp	r6, r3
   16374:	d048      	beq.n	16408 <__aeabi_dsub+0x10c>
   16376:	2380      	movs	r3, #128	; 0x80
   16378:	041b      	lsls	r3, r3, #16
   1637a:	4319      	orrs	r1, r3
   1637c:	2d38      	cmp	r5, #56	; 0x38
   1637e:	dd00      	ble.n	16382 <__aeabi_dsub+0x86>
   16380:	e119      	b.n	165b6 <__aeabi_dsub+0x2ba>
   16382:	2d1f      	cmp	r5, #31
   16384:	dd00      	ble.n	16388 <__aeabi_dsub+0x8c>
   16386:	e14c      	b.n	16622 <__aeabi_dsub+0x326>
   16388:	2320      	movs	r3, #32
   1638a:	000f      	movs	r7, r1
   1638c:	1b5b      	subs	r3, r3, r5
   1638e:	0010      	movs	r0, r2
   16390:	409a      	lsls	r2, r3
   16392:	409f      	lsls	r7, r3
   16394:	40e8      	lsrs	r0, r5
   16396:	1e53      	subs	r3, r2, #1
   16398:	419a      	sbcs	r2, r3
   1639a:	40e9      	lsrs	r1, r5
   1639c:	4307      	orrs	r7, r0
   1639e:	4317      	orrs	r7, r2
   163a0:	4653      	mov	r3, sl
   163a2:	1bdf      	subs	r7, r3, r7
   163a4:	1a61      	subs	r1, r4, r1
   163a6:	45ba      	cmp	sl, r7
   163a8:	41a4      	sbcs	r4, r4
   163aa:	4264      	negs	r4, r4
   163ac:	1b0c      	subs	r4, r1, r4
   163ae:	0223      	lsls	r3, r4, #8
   163b0:	d400      	bmi.n	163b4 <__aeabi_dsub+0xb8>
   163b2:	e0c5      	b.n	16540 <__aeabi_dsub+0x244>
   163b4:	0264      	lsls	r4, r4, #9
   163b6:	0a65      	lsrs	r5, r4, #9
   163b8:	2d00      	cmp	r5, #0
   163ba:	d100      	bne.n	163be <__aeabi_dsub+0xc2>
   163bc:	e0f6      	b.n	165ac <__aeabi_dsub+0x2b0>
   163be:	0028      	movs	r0, r5
   163c0:	f000 fc3c 	bl	16c3c <__clzsi2>
   163c4:	0003      	movs	r3, r0
   163c6:	3b08      	subs	r3, #8
   163c8:	2b1f      	cmp	r3, #31
   163ca:	dd00      	ble.n	163ce <__aeabi_dsub+0xd2>
   163cc:	e0e9      	b.n	165a2 <__aeabi_dsub+0x2a6>
   163ce:	2220      	movs	r2, #32
   163d0:	003c      	movs	r4, r7
   163d2:	1ad2      	subs	r2, r2, r3
   163d4:	409d      	lsls	r5, r3
   163d6:	40d4      	lsrs	r4, r2
   163d8:	409f      	lsls	r7, r3
   163da:	4325      	orrs	r5, r4
   163dc:	429e      	cmp	r6, r3
   163de:	dd00      	ble.n	163e2 <__aeabi_dsub+0xe6>
   163e0:	e0db      	b.n	1659a <__aeabi_dsub+0x29e>
   163e2:	1b9e      	subs	r6, r3, r6
   163e4:	1c73      	adds	r3, r6, #1
   163e6:	2b1f      	cmp	r3, #31
   163e8:	dd00      	ble.n	163ec <__aeabi_dsub+0xf0>
   163ea:	e10a      	b.n	16602 <__aeabi_dsub+0x306>
   163ec:	2220      	movs	r2, #32
   163ee:	0038      	movs	r0, r7
   163f0:	1ad2      	subs	r2, r2, r3
   163f2:	0029      	movs	r1, r5
   163f4:	4097      	lsls	r7, r2
   163f6:	002c      	movs	r4, r5
   163f8:	4091      	lsls	r1, r2
   163fa:	40d8      	lsrs	r0, r3
   163fc:	1e7a      	subs	r2, r7, #1
   163fe:	4197      	sbcs	r7, r2
   16400:	40dc      	lsrs	r4, r3
   16402:	2600      	movs	r6, #0
   16404:	4301      	orrs	r1, r0
   16406:	430f      	orrs	r7, r1
   16408:	077b      	lsls	r3, r7, #29
   1640a:	d009      	beq.n	16420 <__aeabi_dsub+0x124>
   1640c:	230f      	movs	r3, #15
   1640e:	403b      	ands	r3, r7
   16410:	2b04      	cmp	r3, #4
   16412:	d005      	beq.n	16420 <__aeabi_dsub+0x124>
   16414:	1d3b      	adds	r3, r7, #4
   16416:	42bb      	cmp	r3, r7
   16418:	41bf      	sbcs	r7, r7
   1641a:	427f      	negs	r7, r7
   1641c:	19e4      	adds	r4, r4, r7
   1641e:	001f      	movs	r7, r3
   16420:	0223      	lsls	r3, r4, #8
   16422:	d525      	bpl.n	16470 <__aeabi_dsub+0x174>
   16424:	4b86      	ldr	r3, [pc, #536]	; (16640 <__aeabi_dsub+0x344>)
   16426:	3601      	adds	r6, #1
   16428:	429e      	cmp	r6, r3
   1642a:	d100      	bne.n	1642e <__aeabi_dsub+0x132>
   1642c:	e0af      	b.n	1658e <__aeabi_dsub+0x292>
   1642e:	4b85      	ldr	r3, [pc, #532]	; (16644 <__aeabi_dsub+0x348>)
   16430:	2501      	movs	r5, #1
   16432:	401c      	ands	r4, r3
   16434:	4643      	mov	r3, r8
   16436:	0762      	lsls	r2, r4, #29
   16438:	08ff      	lsrs	r7, r7, #3
   1643a:	0264      	lsls	r4, r4, #9
   1643c:	0576      	lsls	r6, r6, #21
   1643e:	4317      	orrs	r7, r2
   16440:	0b24      	lsrs	r4, r4, #12
   16442:	0d76      	lsrs	r6, r6, #21
   16444:	401d      	ands	r5, r3
   16446:	2100      	movs	r1, #0
   16448:	0324      	lsls	r4, r4, #12
   1644a:	0b23      	lsrs	r3, r4, #12
   1644c:	0d0c      	lsrs	r4, r1, #20
   1644e:	4a7e      	ldr	r2, [pc, #504]	; (16648 <__aeabi_dsub+0x34c>)
   16450:	0524      	lsls	r4, r4, #20
   16452:	431c      	orrs	r4, r3
   16454:	4014      	ands	r4, r2
   16456:	0533      	lsls	r3, r6, #20
   16458:	4323      	orrs	r3, r4
   1645a:	005b      	lsls	r3, r3, #1
   1645c:	07ed      	lsls	r5, r5, #31
   1645e:	085b      	lsrs	r3, r3, #1
   16460:	432b      	orrs	r3, r5
   16462:	0038      	movs	r0, r7
   16464:	0019      	movs	r1, r3
   16466:	bc1c      	pop	{r2, r3, r4}
   16468:	4690      	mov	r8, r2
   1646a:	4699      	mov	r9, r3
   1646c:	46a2      	mov	sl, r4
   1646e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16470:	2501      	movs	r5, #1
   16472:	4643      	mov	r3, r8
   16474:	0762      	lsls	r2, r4, #29
   16476:	08ff      	lsrs	r7, r7, #3
   16478:	4317      	orrs	r7, r2
   1647a:	08e4      	lsrs	r4, r4, #3
   1647c:	401d      	ands	r5, r3
   1647e:	4b70      	ldr	r3, [pc, #448]	; (16640 <__aeabi_dsub+0x344>)
   16480:	429e      	cmp	r6, r3
   16482:	d036      	beq.n	164f2 <__aeabi_dsub+0x1f6>
   16484:	0324      	lsls	r4, r4, #12
   16486:	0576      	lsls	r6, r6, #21
   16488:	0b24      	lsrs	r4, r4, #12
   1648a:	0d76      	lsrs	r6, r6, #21
   1648c:	e7db      	b.n	16446 <__aeabi_dsub+0x14a>
   1648e:	4663      	mov	r3, ip
   16490:	1af3      	subs	r3, r6, r3
   16492:	2b00      	cmp	r3, #0
   16494:	dc00      	bgt.n	16498 <__aeabi_dsub+0x19c>
   16496:	e094      	b.n	165c2 <__aeabi_dsub+0x2c6>
   16498:	4660      	mov	r0, ip
   1649a:	2800      	cmp	r0, #0
   1649c:	d035      	beq.n	1650a <__aeabi_dsub+0x20e>
   1649e:	4868      	ldr	r0, [pc, #416]	; (16640 <__aeabi_dsub+0x344>)
   164a0:	4286      	cmp	r6, r0
   164a2:	d0b1      	beq.n	16408 <__aeabi_dsub+0x10c>
   164a4:	2780      	movs	r7, #128	; 0x80
   164a6:	043f      	lsls	r7, r7, #16
   164a8:	4339      	orrs	r1, r7
   164aa:	2b38      	cmp	r3, #56	; 0x38
   164ac:	dc00      	bgt.n	164b0 <__aeabi_dsub+0x1b4>
   164ae:	e0fd      	b.n	166ac <__aeabi_dsub+0x3b0>
   164b0:	430a      	orrs	r2, r1
   164b2:	0017      	movs	r7, r2
   164b4:	2100      	movs	r1, #0
   164b6:	1e7a      	subs	r2, r7, #1
   164b8:	4197      	sbcs	r7, r2
   164ba:	4457      	add	r7, sl
   164bc:	4557      	cmp	r7, sl
   164be:	4180      	sbcs	r0, r0
   164c0:	1909      	adds	r1, r1, r4
   164c2:	4244      	negs	r4, r0
   164c4:	190c      	adds	r4, r1, r4
   164c6:	0223      	lsls	r3, r4, #8
   164c8:	d53a      	bpl.n	16540 <__aeabi_dsub+0x244>
   164ca:	4b5d      	ldr	r3, [pc, #372]	; (16640 <__aeabi_dsub+0x344>)
   164cc:	3601      	adds	r6, #1
   164ce:	429e      	cmp	r6, r3
   164d0:	d100      	bne.n	164d4 <__aeabi_dsub+0x1d8>
   164d2:	e14b      	b.n	1676c <__aeabi_dsub+0x470>
   164d4:	2201      	movs	r2, #1
   164d6:	4b5b      	ldr	r3, [pc, #364]	; (16644 <__aeabi_dsub+0x348>)
   164d8:	401c      	ands	r4, r3
   164da:	087b      	lsrs	r3, r7, #1
   164dc:	4017      	ands	r7, r2
   164de:	431f      	orrs	r7, r3
   164e0:	07e2      	lsls	r2, r4, #31
   164e2:	4317      	orrs	r7, r2
   164e4:	0864      	lsrs	r4, r4, #1
   164e6:	e78f      	b.n	16408 <__aeabi_dsub+0x10c>
   164e8:	0008      	movs	r0, r1
   164ea:	4310      	orrs	r0, r2
   164ec:	d000      	beq.n	164f0 <__aeabi_dsub+0x1f4>
   164ee:	e724      	b.n	1633a <__aeabi_dsub+0x3e>
   164f0:	e721      	b.n	16336 <__aeabi_dsub+0x3a>
   164f2:	0023      	movs	r3, r4
   164f4:	433b      	orrs	r3, r7
   164f6:	d100      	bne.n	164fa <__aeabi_dsub+0x1fe>
   164f8:	e1b9      	b.n	1686e <__aeabi_dsub+0x572>
   164fa:	2280      	movs	r2, #128	; 0x80
   164fc:	0312      	lsls	r2, r2, #12
   164fe:	4314      	orrs	r4, r2
   16500:	0324      	lsls	r4, r4, #12
   16502:	0b24      	lsrs	r4, r4, #12
   16504:	e79f      	b.n	16446 <__aeabi_dsub+0x14a>
   16506:	002e      	movs	r6, r5
   16508:	e77e      	b.n	16408 <__aeabi_dsub+0x10c>
   1650a:	0008      	movs	r0, r1
   1650c:	4310      	orrs	r0, r2
   1650e:	d100      	bne.n	16512 <__aeabi_dsub+0x216>
   16510:	e0ca      	b.n	166a8 <__aeabi_dsub+0x3ac>
   16512:	1e58      	subs	r0, r3, #1
   16514:	4684      	mov	ip, r0
   16516:	2800      	cmp	r0, #0
   16518:	d000      	beq.n	1651c <__aeabi_dsub+0x220>
   1651a:	e0e7      	b.n	166ec <__aeabi_dsub+0x3f0>
   1651c:	4452      	add	r2, sl
   1651e:	4552      	cmp	r2, sl
   16520:	4180      	sbcs	r0, r0
   16522:	1864      	adds	r4, r4, r1
   16524:	4240      	negs	r0, r0
   16526:	1824      	adds	r4, r4, r0
   16528:	0017      	movs	r7, r2
   1652a:	2601      	movs	r6, #1
   1652c:	0223      	lsls	r3, r4, #8
   1652e:	d507      	bpl.n	16540 <__aeabi_dsub+0x244>
   16530:	2602      	movs	r6, #2
   16532:	e7cf      	b.n	164d4 <__aeabi_dsub+0x1d8>
   16534:	4664      	mov	r4, ip
   16536:	432c      	orrs	r4, r5
   16538:	d100      	bne.n	1653c <__aeabi_dsub+0x240>
   1653a:	e1b3      	b.n	168a4 <__aeabi_dsub+0x5a8>
   1653c:	002c      	movs	r4, r5
   1653e:	4667      	mov	r7, ip
   16540:	077b      	lsls	r3, r7, #29
   16542:	d000      	beq.n	16546 <__aeabi_dsub+0x24a>
   16544:	e762      	b.n	1640c <__aeabi_dsub+0x110>
   16546:	0763      	lsls	r3, r4, #29
   16548:	08ff      	lsrs	r7, r7, #3
   1654a:	431f      	orrs	r7, r3
   1654c:	2501      	movs	r5, #1
   1654e:	4643      	mov	r3, r8
   16550:	08e4      	lsrs	r4, r4, #3
   16552:	401d      	ands	r5, r3
   16554:	e793      	b.n	1647e <__aeabi_dsub+0x182>
   16556:	2d00      	cmp	r5, #0
   16558:	d178      	bne.n	1664c <__aeabi_dsub+0x350>
   1655a:	1c75      	adds	r5, r6, #1
   1655c:	056d      	lsls	r5, r5, #21
   1655e:	0d6d      	lsrs	r5, r5, #21
   16560:	2d01      	cmp	r5, #1
   16562:	dc00      	bgt.n	16566 <__aeabi_dsub+0x26a>
   16564:	e0f2      	b.n	1674c <__aeabi_dsub+0x450>
   16566:	4650      	mov	r0, sl
   16568:	1a80      	subs	r0, r0, r2
   1656a:	4582      	cmp	sl, r0
   1656c:	41bf      	sbcs	r7, r7
   1656e:	1a65      	subs	r5, r4, r1
   16570:	427f      	negs	r7, r7
   16572:	1bed      	subs	r5, r5, r7
   16574:	4684      	mov	ip, r0
   16576:	0228      	lsls	r0, r5, #8
   16578:	d400      	bmi.n	1657c <__aeabi_dsub+0x280>
   1657a:	e08c      	b.n	16696 <__aeabi_dsub+0x39a>
   1657c:	4650      	mov	r0, sl
   1657e:	1a17      	subs	r7, r2, r0
   16580:	42ba      	cmp	r2, r7
   16582:	4192      	sbcs	r2, r2
   16584:	1b0c      	subs	r4, r1, r4
   16586:	4255      	negs	r5, r2
   16588:	1b65      	subs	r5, r4, r5
   1658a:	4698      	mov	r8, r3
   1658c:	e714      	b.n	163b8 <__aeabi_dsub+0xbc>
   1658e:	2501      	movs	r5, #1
   16590:	4643      	mov	r3, r8
   16592:	2400      	movs	r4, #0
   16594:	401d      	ands	r5, r3
   16596:	2700      	movs	r7, #0
   16598:	e755      	b.n	16446 <__aeabi_dsub+0x14a>
   1659a:	4c2a      	ldr	r4, [pc, #168]	; (16644 <__aeabi_dsub+0x348>)
   1659c:	1af6      	subs	r6, r6, r3
   1659e:	402c      	ands	r4, r5
   165a0:	e732      	b.n	16408 <__aeabi_dsub+0x10c>
   165a2:	003d      	movs	r5, r7
   165a4:	3828      	subs	r0, #40	; 0x28
   165a6:	4085      	lsls	r5, r0
   165a8:	2700      	movs	r7, #0
   165aa:	e717      	b.n	163dc <__aeabi_dsub+0xe0>
   165ac:	0038      	movs	r0, r7
   165ae:	f000 fb45 	bl	16c3c <__clzsi2>
   165b2:	3020      	adds	r0, #32
   165b4:	e706      	b.n	163c4 <__aeabi_dsub+0xc8>
   165b6:	430a      	orrs	r2, r1
   165b8:	0017      	movs	r7, r2
   165ba:	2100      	movs	r1, #0
   165bc:	1e7a      	subs	r2, r7, #1
   165be:	4197      	sbcs	r7, r2
   165c0:	e6ee      	b.n	163a0 <__aeabi_dsub+0xa4>
   165c2:	2b00      	cmp	r3, #0
   165c4:	d000      	beq.n	165c8 <__aeabi_dsub+0x2cc>
   165c6:	e0e5      	b.n	16794 <__aeabi_dsub+0x498>
   165c8:	1c73      	adds	r3, r6, #1
   165ca:	469c      	mov	ip, r3
   165cc:	055b      	lsls	r3, r3, #21
   165ce:	0d5b      	lsrs	r3, r3, #21
   165d0:	2b01      	cmp	r3, #1
   165d2:	dc00      	bgt.n	165d6 <__aeabi_dsub+0x2da>
   165d4:	e09f      	b.n	16716 <__aeabi_dsub+0x41a>
   165d6:	4b1a      	ldr	r3, [pc, #104]	; (16640 <__aeabi_dsub+0x344>)
   165d8:	459c      	cmp	ip, r3
   165da:	d100      	bne.n	165de <__aeabi_dsub+0x2e2>
   165dc:	e0c5      	b.n	1676a <__aeabi_dsub+0x46e>
   165de:	4452      	add	r2, sl
   165e0:	4552      	cmp	r2, sl
   165e2:	4180      	sbcs	r0, r0
   165e4:	1864      	adds	r4, r4, r1
   165e6:	4240      	negs	r0, r0
   165e8:	1824      	adds	r4, r4, r0
   165ea:	07e7      	lsls	r7, r4, #31
   165ec:	0852      	lsrs	r2, r2, #1
   165ee:	4317      	orrs	r7, r2
   165f0:	0864      	lsrs	r4, r4, #1
   165f2:	4666      	mov	r6, ip
   165f4:	e708      	b.n	16408 <__aeabi_dsub+0x10c>
   165f6:	4812      	ldr	r0, [pc, #72]	; (16640 <__aeabi_dsub+0x344>)
   165f8:	4285      	cmp	r5, r0
   165fa:	d100      	bne.n	165fe <__aeabi_dsub+0x302>
   165fc:	e085      	b.n	1670a <__aeabi_dsub+0x40e>
   165fe:	001d      	movs	r5, r3
   16600:	e6bc      	b.n	1637c <__aeabi_dsub+0x80>
   16602:	0029      	movs	r1, r5
   16604:	3e1f      	subs	r6, #31
   16606:	40f1      	lsrs	r1, r6
   16608:	2b20      	cmp	r3, #32
   1660a:	d100      	bne.n	1660e <__aeabi_dsub+0x312>
   1660c:	e07f      	b.n	1670e <__aeabi_dsub+0x412>
   1660e:	2240      	movs	r2, #64	; 0x40
   16610:	1ad3      	subs	r3, r2, r3
   16612:	409d      	lsls	r5, r3
   16614:	432f      	orrs	r7, r5
   16616:	1e7d      	subs	r5, r7, #1
   16618:	41af      	sbcs	r7, r5
   1661a:	2400      	movs	r4, #0
   1661c:	430f      	orrs	r7, r1
   1661e:	2600      	movs	r6, #0
   16620:	e78e      	b.n	16540 <__aeabi_dsub+0x244>
   16622:	002b      	movs	r3, r5
   16624:	000f      	movs	r7, r1
   16626:	3b20      	subs	r3, #32
   16628:	40df      	lsrs	r7, r3
   1662a:	2d20      	cmp	r5, #32
   1662c:	d071      	beq.n	16712 <__aeabi_dsub+0x416>
   1662e:	2340      	movs	r3, #64	; 0x40
   16630:	1b5d      	subs	r5, r3, r5
   16632:	40a9      	lsls	r1, r5
   16634:	430a      	orrs	r2, r1
   16636:	1e51      	subs	r1, r2, #1
   16638:	418a      	sbcs	r2, r1
   1663a:	2100      	movs	r1, #0
   1663c:	4317      	orrs	r7, r2
   1663e:	e6af      	b.n	163a0 <__aeabi_dsub+0xa4>
   16640:	000007ff 	.word	0x000007ff
   16644:	ff7fffff 	.word	0xff7fffff
   16648:	800fffff 	.word	0x800fffff
   1664c:	2e00      	cmp	r6, #0
   1664e:	d03e      	beq.n	166ce <__aeabi_dsub+0x3d2>
   16650:	4eb3      	ldr	r6, [pc, #716]	; (16920 <__aeabi_dsub+0x624>)
   16652:	45b4      	cmp	ip, r6
   16654:	d045      	beq.n	166e2 <__aeabi_dsub+0x3e6>
   16656:	2680      	movs	r6, #128	; 0x80
   16658:	0436      	lsls	r6, r6, #16
   1665a:	426d      	negs	r5, r5
   1665c:	4334      	orrs	r4, r6
   1665e:	2d38      	cmp	r5, #56	; 0x38
   16660:	dd00      	ble.n	16664 <__aeabi_dsub+0x368>
   16662:	e0a8      	b.n	167b6 <__aeabi_dsub+0x4ba>
   16664:	2d1f      	cmp	r5, #31
   16666:	dd00      	ble.n	1666a <__aeabi_dsub+0x36e>
   16668:	e11f      	b.n	168aa <__aeabi_dsub+0x5ae>
   1666a:	2620      	movs	r6, #32
   1666c:	0027      	movs	r7, r4
   1666e:	4650      	mov	r0, sl
   16670:	1b76      	subs	r6, r6, r5
   16672:	40b7      	lsls	r7, r6
   16674:	40e8      	lsrs	r0, r5
   16676:	4307      	orrs	r7, r0
   16678:	4650      	mov	r0, sl
   1667a:	40b0      	lsls	r0, r6
   1667c:	1e46      	subs	r6, r0, #1
   1667e:	41b0      	sbcs	r0, r6
   16680:	40ec      	lsrs	r4, r5
   16682:	4338      	orrs	r0, r7
   16684:	1a17      	subs	r7, r2, r0
   16686:	42ba      	cmp	r2, r7
   16688:	4192      	sbcs	r2, r2
   1668a:	1b0c      	subs	r4, r1, r4
   1668c:	4252      	negs	r2, r2
   1668e:	1aa4      	subs	r4, r4, r2
   16690:	4666      	mov	r6, ip
   16692:	4698      	mov	r8, r3
   16694:	e68b      	b.n	163ae <__aeabi_dsub+0xb2>
   16696:	4664      	mov	r4, ip
   16698:	4667      	mov	r7, ip
   1669a:	432c      	orrs	r4, r5
   1669c:	d000      	beq.n	166a0 <__aeabi_dsub+0x3a4>
   1669e:	e68b      	b.n	163b8 <__aeabi_dsub+0xbc>
   166a0:	2500      	movs	r5, #0
   166a2:	2600      	movs	r6, #0
   166a4:	2700      	movs	r7, #0
   166a6:	e6ea      	b.n	1647e <__aeabi_dsub+0x182>
   166a8:	001e      	movs	r6, r3
   166aa:	e6ad      	b.n	16408 <__aeabi_dsub+0x10c>
   166ac:	2b1f      	cmp	r3, #31
   166ae:	dc60      	bgt.n	16772 <__aeabi_dsub+0x476>
   166b0:	2720      	movs	r7, #32
   166b2:	1af8      	subs	r0, r7, r3
   166b4:	000f      	movs	r7, r1
   166b6:	4684      	mov	ip, r0
   166b8:	4087      	lsls	r7, r0
   166ba:	0010      	movs	r0, r2
   166bc:	40d8      	lsrs	r0, r3
   166be:	4307      	orrs	r7, r0
   166c0:	4660      	mov	r0, ip
   166c2:	4082      	lsls	r2, r0
   166c4:	1e50      	subs	r0, r2, #1
   166c6:	4182      	sbcs	r2, r0
   166c8:	40d9      	lsrs	r1, r3
   166ca:	4317      	orrs	r7, r2
   166cc:	e6f5      	b.n	164ba <__aeabi_dsub+0x1be>
   166ce:	0026      	movs	r6, r4
   166d0:	4650      	mov	r0, sl
   166d2:	4306      	orrs	r6, r0
   166d4:	d005      	beq.n	166e2 <__aeabi_dsub+0x3e6>
   166d6:	43ed      	mvns	r5, r5
   166d8:	2d00      	cmp	r5, #0
   166da:	d0d3      	beq.n	16684 <__aeabi_dsub+0x388>
   166dc:	4e90      	ldr	r6, [pc, #576]	; (16920 <__aeabi_dsub+0x624>)
   166de:	45b4      	cmp	ip, r6
   166e0:	d1bd      	bne.n	1665e <__aeabi_dsub+0x362>
   166e2:	000c      	movs	r4, r1
   166e4:	0017      	movs	r7, r2
   166e6:	4666      	mov	r6, ip
   166e8:	4698      	mov	r8, r3
   166ea:	e68d      	b.n	16408 <__aeabi_dsub+0x10c>
   166ec:	488c      	ldr	r0, [pc, #560]	; (16920 <__aeabi_dsub+0x624>)
   166ee:	4283      	cmp	r3, r0
   166f0:	d00b      	beq.n	1670a <__aeabi_dsub+0x40e>
   166f2:	4663      	mov	r3, ip
   166f4:	e6d9      	b.n	164aa <__aeabi_dsub+0x1ae>
   166f6:	2d00      	cmp	r5, #0
   166f8:	d000      	beq.n	166fc <__aeabi_dsub+0x400>
   166fa:	e096      	b.n	1682a <__aeabi_dsub+0x52e>
   166fc:	0008      	movs	r0, r1
   166fe:	4310      	orrs	r0, r2
   16700:	d100      	bne.n	16704 <__aeabi_dsub+0x408>
   16702:	e0e2      	b.n	168ca <__aeabi_dsub+0x5ce>
   16704:	000c      	movs	r4, r1
   16706:	0017      	movs	r7, r2
   16708:	4698      	mov	r8, r3
   1670a:	4e85      	ldr	r6, [pc, #532]	; (16920 <__aeabi_dsub+0x624>)
   1670c:	e67c      	b.n	16408 <__aeabi_dsub+0x10c>
   1670e:	2500      	movs	r5, #0
   16710:	e780      	b.n	16614 <__aeabi_dsub+0x318>
   16712:	2100      	movs	r1, #0
   16714:	e78e      	b.n	16634 <__aeabi_dsub+0x338>
   16716:	0023      	movs	r3, r4
   16718:	4650      	mov	r0, sl
   1671a:	4303      	orrs	r3, r0
   1671c:	2e00      	cmp	r6, #0
   1671e:	d000      	beq.n	16722 <__aeabi_dsub+0x426>
   16720:	e0a8      	b.n	16874 <__aeabi_dsub+0x578>
   16722:	2b00      	cmp	r3, #0
   16724:	d100      	bne.n	16728 <__aeabi_dsub+0x42c>
   16726:	e0de      	b.n	168e6 <__aeabi_dsub+0x5ea>
   16728:	000b      	movs	r3, r1
   1672a:	4313      	orrs	r3, r2
   1672c:	d100      	bne.n	16730 <__aeabi_dsub+0x434>
   1672e:	e66b      	b.n	16408 <__aeabi_dsub+0x10c>
   16730:	4452      	add	r2, sl
   16732:	4552      	cmp	r2, sl
   16734:	4180      	sbcs	r0, r0
   16736:	1864      	adds	r4, r4, r1
   16738:	4240      	negs	r0, r0
   1673a:	1824      	adds	r4, r4, r0
   1673c:	0017      	movs	r7, r2
   1673e:	0223      	lsls	r3, r4, #8
   16740:	d400      	bmi.n	16744 <__aeabi_dsub+0x448>
   16742:	e6fd      	b.n	16540 <__aeabi_dsub+0x244>
   16744:	4b77      	ldr	r3, [pc, #476]	; (16924 <__aeabi_dsub+0x628>)
   16746:	4666      	mov	r6, ip
   16748:	401c      	ands	r4, r3
   1674a:	e65d      	b.n	16408 <__aeabi_dsub+0x10c>
   1674c:	0025      	movs	r5, r4
   1674e:	4650      	mov	r0, sl
   16750:	4305      	orrs	r5, r0
   16752:	2e00      	cmp	r6, #0
   16754:	d1cf      	bne.n	166f6 <__aeabi_dsub+0x3fa>
   16756:	2d00      	cmp	r5, #0
   16758:	d14f      	bne.n	167fa <__aeabi_dsub+0x4fe>
   1675a:	000c      	movs	r4, r1
   1675c:	4314      	orrs	r4, r2
   1675e:	d100      	bne.n	16762 <__aeabi_dsub+0x466>
   16760:	e0a0      	b.n	168a4 <__aeabi_dsub+0x5a8>
   16762:	000c      	movs	r4, r1
   16764:	0017      	movs	r7, r2
   16766:	4698      	mov	r8, r3
   16768:	e64e      	b.n	16408 <__aeabi_dsub+0x10c>
   1676a:	4666      	mov	r6, ip
   1676c:	2400      	movs	r4, #0
   1676e:	2700      	movs	r7, #0
   16770:	e685      	b.n	1647e <__aeabi_dsub+0x182>
   16772:	001f      	movs	r7, r3
   16774:	0008      	movs	r0, r1
   16776:	3f20      	subs	r7, #32
   16778:	40f8      	lsrs	r0, r7
   1677a:	0007      	movs	r7, r0
   1677c:	2b20      	cmp	r3, #32
   1677e:	d100      	bne.n	16782 <__aeabi_dsub+0x486>
   16780:	e08e      	b.n	168a0 <__aeabi_dsub+0x5a4>
   16782:	2040      	movs	r0, #64	; 0x40
   16784:	1ac3      	subs	r3, r0, r3
   16786:	4099      	lsls	r1, r3
   16788:	430a      	orrs	r2, r1
   1678a:	1e51      	subs	r1, r2, #1
   1678c:	418a      	sbcs	r2, r1
   1678e:	2100      	movs	r1, #0
   16790:	4317      	orrs	r7, r2
   16792:	e692      	b.n	164ba <__aeabi_dsub+0x1be>
   16794:	2e00      	cmp	r6, #0
   16796:	d114      	bne.n	167c2 <__aeabi_dsub+0x4c6>
   16798:	0026      	movs	r6, r4
   1679a:	4650      	mov	r0, sl
   1679c:	4306      	orrs	r6, r0
   1679e:	d062      	beq.n	16866 <__aeabi_dsub+0x56a>
   167a0:	43db      	mvns	r3, r3
   167a2:	2b00      	cmp	r3, #0
   167a4:	d15c      	bne.n	16860 <__aeabi_dsub+0x564>
   167a6:	1887      	adds	r7, r0, r2
   167a8:	4297      	cmp	r7, r2
   167aa:	4192      	sbcs	r2, r2
   167ac:	1864      	adds	r4, r4, r1
   167ae:	4252      	negs	r2, r2
   167b0:	18a4      	adds	r4, r4, r2
   167b2:	4666      	mov	r6, ip
   167b4:	e687      	b.n	164c6 <__aeabi_dsub+0x1ca>
   167b6:	4650      	mov	r0, sl
   167b8:	4320      	orrs	r0, r4
   167ba:	1e44      	subs	r4, r0, #1
   167bc:	41a0      	sbcs	r0, r4
   167be:	2400      	movs	r4, #0
   167c0:	e760      	b.n	16684 <__aeabi_dsub+0x388>
   167c2:	4e57      	ldr	r6, [pc, #348]	; (16920 <__aeabi_dsub+0x624>)
   167c4:	45b4      	cmp	ip, r6
   167c6:	d04e      	beq.n	16866 <__aeabi_dsub+0x56a>
   167c8:	2680      	movs	r6, #128	; 0x80
   167ca:	0436      	lsls	r6, r6, #16
   167cc:	425b      	negs	r3, r3
   167ce:	4334      	orrs	r4, r6
   167d0:	2b38      	cmp	r3, #56	; 0x38
   167d2:	dd00      	ble.n	167d6 <__aeabi_dsub+0x4da>
   167d4:	e07f      	b.n	168d6 <__aeabi_dsub+0x5da>
   167d6:	2b1f      	cmp	r3, #31
   167d8:	dd00      	ble.n	167dc <__aeabi_dsub+0x4e0>
   167da:	e08b      	b.n	168f4 <__aeabi_dsub+0x5f8>
   167dc:	2620      	movs	r6, #32
   167de:	0027      	movs	r7, r4
   167e0:	4650      	mov	r0, sl
   167e2:	1af6      	subs	r6, r6, r3
   167e4:	40b7      	lsls	r7, r6
   167e6:	40d8      	lsrs	r0, r3
   167e8:	4307      	orrs	r7, r0
   167ea:	4650      	mov	r0, sl
   167ec:	40b0      	lsls	r0, r6
   167ee:	1e46      	subs	r6, r0, #1
   167f0:	41b0      	sbcs	r0, r6
   167f2:	4307      	orrs	r7, r0
   167f4:	40dc      	lsrs	r4, r3
   167f6:	18bf      	adds	r7, r7, r2
   167f8:	e7d6      	b.n	167a8 <__aeabi_dsub+0x4ac>
   167fa:	000d      	movs	r5, r1
   167fc:	4315      	orrs	r5, r2
   167fe:	d100      	bne.n	16802 <__aeabi_dsub+0x506>
   16800:	e602      	b.n	16408 <__aeabi_dsub+0x10c>
   16802:	4650      	mov	r0, sl
   16804:	1a80      	subs	r0, r0, r2
   16806:	4582      	cmp	sl, r0
   16808:	41bf      	sbcs	r7, r7
   1680a:	1a65      	subs	r5, r4, r1
   1680c:	427f      	negs	r7, r7
   1680e:	1bed      	subs	r5, r5, r7
   16810:	4684      	mov	ip, r0
   16812:	0228      	lsls	r0, r5, #8
   16814:	d400      	bmi.n	16818 <__aeabi_dsub+0x51c>
   16816:	e68d      	b.n	16534 <__aeabi_dsub+0x238>
   16818:	4650      	mov	r0, sl
   1681a:	1a17      	subs	r7, r2, r0
   1681c:	42ba      	cmp	r2, r7
   1681e:	4192      	sbcs	r2, r2
   16820:	1b0c      	subs	r4, r1, r4
   16822:	4252      	negs	r2, r2
   16824:	1aa4      	subs	r4, r4, r2
   16826:	4698      	mov	r8, r3
   16828:	e5ee      	b.n	16408 <__aeabi_dsub+0x10c>
   1682a:	000d      	movs	r5, r1
   1682c:	4315      	orrs	r5, r2
   1682e:	d100      	bne.n	16832 <__aeabi_dsub+0x536>
   16830:	e76b      	b.n	1670a <__aeabi_dsub+0x40e>
   16832:	4650      	mov	r0, sl
   16834:	0767      	lsls	r7, r4, #29
   16836:	08c0      	lsrs	r0, r0, #3
   16838:	4307      	orrs	r7, r0
   1683a:	2080      	movs	r0, #128	; 0x80
   1683c:	08e4      	lsrs	r4, r4, #3
   1683e:	0300      	lsls	r0, r0, #12
   16840:	4204      	tst	r4, r0
   16842:	d007      	beq.n	16854 <__aeabi_dsub+0x558>
   16844:	08cd      	lsrs	r5, r1, #3
   16846:	4205      	tst	r5, r0
   16848:	d104      	bne.n	16854 <__aeabi_dsub+0x558>
   1684a:	002c      	movs	r4, r5
   1684c:	4698      	mov	r8, r3
   1684e:	08d7      	lsrs	r7, r2, #3
   16850:	0749      	lsls	r1, r1, #29
   16852:	430f      	orrs	r7, r1
   16854:	0f7b      	lsrs	r3, r7, #29
   16856:	00e4      	lsls	r4, r4, #3
   16858:	431c      	orrs	r4, r3
   1685a:	00ff      	lsls	r7, r7, #3
   1685c:	4e30      	ldr	r6, [pc, #192]	; (16920 <__aeabi_dsub+0x624>)
   1685e:	e5d3      	b.n	16408 <__aeabi_dsub+0x10c>
   16860:	4e2f      	ldr	r6, [pc, #188]	; (16920 <__aeabi_dsub+0x624>)
   16862:	45b4      	cmp	ip, r6
   16864:	d1b4      	bne.n	167d0 <__aeabi_dsub+0x4d4>
   16866:	000c      	movs	r4, r1
   16868:	0017      	movs	r7, r2
   1686a:	4666      	mov	r6, ip
   1686c:	e5cc      	b.n	16408 <__aeabi_dsub+0x10c>
   1686e:	2700      	movs	r7, #0
   16870:	2400      	movs	r4, #0
   16872:	e5e8      	b.n	16446 <__aeabi_dsub+0x14a>
   16874:	2b00      	cmp	r3, #0
   16876:	d039      	beq.n	168ec <__aeabi_dsub+0x5f0>
   16878:	000b      	movs	r3, r1
   1687a:	4313      	orrs	r3, r2
   1687c:	d100      	bne.n	16880 <__aeabi_dsub+0x584>
   1687e:	e744      	b.n	1670a <__aeabi_dsub+0x40e>
   16880:	08c0      	lsrs	r0, r0, #3
   16882:	0767      	lsls	r7, r4, #29
   16884:	4307      	orrs	r7, r0
   16886:	2080      	movs	r0, #128	; 0x80
   16888:	08e4      	lsrs	r4, r4, #3
   1688a:	0300      	lsls	r0, r0, #12
   1688c:	4204      	tst	r4, r0
   1688e:	d0e1      	beq.n	16854 <__aeabi_dsub+0x558>
   16890:	08cb      	lsrs	r3, r1, #3
   16892:	4203      	tst	r3, r0
   16894:	d1de      	bne.n	16854 <__aeabi_dsub+0x558>
   16896:	08d7      	lsrs	r7, r2, #3
   16898:	0749      	lsls	r1, r1, #29
   1689a:	430f      	orrs	r7, r1
   1689c:	001c      	movs	r4, r3
   1689e:	e7d9      	b.n	16854 <__aeabi_dsub+0x558>
   168a0:	2100      	movs	r1, #0
   168a2:	e771      	b.n	16788 <__aeabi_dsub+0x48c>
   168a4:	2500      	movs	r5, #0
   168a6:	2700      	movs	r7, #0
   168a8:	e5e9      	b.n	1647e <__aeabi_dsub+0x182>
   168aa:	002e      	movs	r6, r5
   168ac:	0027      	movs	r7, r4
   168ae:	3e20      	subs	r6, #32
   168b0:	40f7      	lsrs	r7, r6
   168b2:	2d20      	cmp	r5, #32
   168b4:	d02f      	beq.n	16916 <__aeabi_dsub+0x61a>
   168b6:	2640      	movs	r6, #64	; 0x40
   168b8:	1b75      	subs	r5, r6, r5
   168ba:	40ac      	lsls	r4, r5
   168bc:	4650      	mov	r0, sl
   168be:	4320      	orrs	r0, r4
   168c0:	1e44      	subs	r4, r0, #1
   168c2:	41a0      	sbcs	r0, r4
   168c4:	2400      	movs	r4, #0
   168c6:	4338      	orrs	r0, r7
   168c8:	e6dc      	b.n	16684 <__aeabi_dsub+0x388>
   168ca:	2480      	movs	r4, #128	; 0x80
   168cc:	2500      	movs	r5, #0
   168ce:	0324      	lsls	r4, r4, #12
   168d0:	4e13      	ldr	r6, [pc, #76]	; (16920 <__aeabi_dsub+0x624>)
   168d2:	2700      	movs	r7, #0
   168d4:	e5d3      	b.n	1647e <__aeabi_dsub+0x182>
   168d6:	4650      	mov	r0, sl
   168d8:	4320      	orrs	r0, r4
   168da:	0007      	movs	r7, r0
   168dc:	1e78      	subs	r0, r7, #1
   168de:	4187      	sbcs	r7, r0
   168e0:	2400      	movs	r4, #0
   168e2:	18bf      	adds	r7, r7, r2
   168e4:	e760      	b.n	167a8 <__aeabi_dsub+0x4ac>
   168e6:	000c      	movs	r4, r1
   168e8:	0017      	movs	r7, r2
   168ea:	e58d      	b.n	16408 <__aeabi_dsub+0x10c>
   168ec:	000c      	movs	r4, r1
   168ee:	0017      	movs	r7, r2
   168f0:	4e0b      	ldr	r6, [pc, #44]	; (16920 <__aeabi_dsub+0x624>)
   168f2:	e589      	b.n	16408 <__aeabi_dsub+0x10c>
   168f4:	001e      	movs	r6, r3
   168f6:	0027      	movs	r7, r4
   168f8:	3e20      	subs	r6, #32
   168fa:	40f7      	lsrs	r7, r6
   168fc:	2b20      	cmp	r3, #32
   168fe:	d00c      	beq.n	1691a <__aeabi_dsub+0x61e>
   16900:	2640      	movs	r6, #64	; 0x40
   16902:	1af3      	subs	r3, r6, r3
   16904:	409c      	lsls	r4, r3
   16906:	4650      	mov	r0, sl
   16908:	4320      	orrs	r0, r4
   1690a:	1e44      	subs	r4, r0, #1
   1690c:	41a0      	sbcs	r0, r4
   1690e:	4307      	orrs	r7, r0
   16910:	2400      	movs	r4, #0
   16912:	18bf      	adds	r7, r7, r2
   16914:	e748      	b.n	167a8 <__aeabi_dsub+0x4ac>
   16916:	2400      	movs	r4, #0
   16918:	e7d0      	b.n	168bc <__aeabi_dsub+0x5c0>
   1691a:	2400      	movs	r4, #0
   1691c:	e7f3      	b.n	16906 <__aeabi_dsub+0x60a>
   1691e:	46c0      	nop			; (mov r8, r8)
   16920:	000007ff 	.word	0x000007ff
   16924:	ff7fffff 	.word	0xff7fffff

00016928 <__aeabi_d2iz>:
   16928:	b530      	push	{r4, r5, lr}
   1692a:	4d13      	ldr	r5, [pc, #76]	; (16978 <__aeabi_d2iz+0x50>)
   1692c:	030a      	lsls	r2, r1, #12
   1692e:	004b      	lsls	r3, r1, #1
   16930:	0b12      	lsrs	r2, r2, #12
   16932:	0d5b      	lsrs	r3, r3, #21
   16934:	0fc9      	lsrs	r1, r1, #31
   16936:	2400      	movs	r4, #0
   16938:	42ab      	cmp	r3, r5
   1693a:	dd10      	ble.n	1695e <__aeabi_d2iz+0x36>
   1693c:	4c0f      	ldr	r4, [pc, #60]	; (1697c <__aeabi_d2iz+0x54>)
   1693e:	42a3      	cmp	r3, r4
   16940:	dc0f      	bgt.n	16962 <__aeabi_d2iz+0x3a>
   16942:	2480      	movs	r4, #128	; 0x80
   16944:	4d0e      	ldr	r5, [pc, #56]	; (16980 <__aeabi_d2iz+0x58>)
   16946:	0364      	lsls	r4, r4, #13
   16948:	4322      	orrs	r2, r4
   1694a:	1aed      	subs	r5, r5, r3
   1694c:	2d1f      	cmp	r5, #31
   1694e:	dd0b      	ble.n	16968 <__aeabi_d2iz+0x40>
   16950:	480c      	ldr	r0, [pc, #48]	; (16984 <__aeabi_d2iz+0x5c>)
   16952:	1ac3      	subs	r3, r0, r3
   16954:	40da      	lsrs	r2, r3
   16956:	4254      	negs	r4, r2
   16958:	2900      	cmp	r1, #0
   1695a:	d100      	bne.n	1695e <__aeabi_d2iz+0x36>
   1695c:	0014      	movs	r4, r2
   1695e:	0020      	movs	r0, r4
   16960:	bd30      	pop	{r4, r5, pc}
   16962:	4b09      	ldr	r3, [pc, #36]	; (16988 <__aeabi_d2iz+0x60>)
   16964:	18cc      	adds	r4, r1, r3
   16966:	e7fa      	b.n	1695e <__aeabi_d2iz+0x36>
   16968:	4c08      	ldr	r4, [pc, #32]	; (1698c <__aeabi_d2iz+0x64>)
   1696a:	40e8      	lsrs	r0, r5
   1696c:	46a4      	mov	ip, r4
   1696e:	4463      	add	r3, ip
   16970:	409a      	lsls	r2, r3
   16972:	4302      	orrs	r2, r0
   16974:	e7ef      	b.n	16956 <__aeabi_d2iz+0x2e>
   16976:	46c0      	nop			; (mov r8, r8)
   16978:	000003fe 	.word	0x000003fe
   1697c:	0000041d 	.word	0x0000041d
   16980:	00000433 	.word	0x00000433
   16984:	00000413 	.word	0x00000413
   16988:	7fffffff 	.word	0x7fffffff
   1698c:	fffffbed 	.word	0xfffffbed

00016990 <__aeabi_i2d>:
   16990:	b570      	push	{r4, r5, r6, lr}
   16992:	2800      	cmp	r0, #0
   16994:	d030      	beq.n	169f8 <__aeabi_i2d+0x68>
   16996:	17c3      	asrs	r3, r0, #31
   16998:	18c4      	adds	r4, r0, r3
   1699a:	405c      	eors	r4, r3
   1699c:	0fc5      	lsrs	r5, r0, #31
   1699e:	0020      	movs	r0, r4
   169a0:	f000 f94c 	bl	16c3c <__clzsi2>
   169a4:	4b17      	ldr	r3, [pc, #92]	; (16a04 <__aeabi_i2d+0x74>)
   169a6:	4a18      	ldr	r2, [pc, #96]	; (16a08 <__aeabi_i2d+0x78>)
   169a8:	1a1b      	subs	r3, r3, r0
   169aa:	1ad2      	subs	r2, r2, r3
   169ac:	2a1f      	cmp	r2, #31
   169ae:	dd18      	ble.n	169e2 <__aeabi_i2d+0x52>
   169b0:	4a16      	ldr	r2, [pc, #88]	; (16a0c <__aeabi_i2d+0x7c>)
   169b2:	1ad2      	subs	r2, r2, r3
   169b4:	4094      	lsls	r4, r2
   169b6:	2200      	movs	r2, #0
   169b8:	0324      	lsls	r4, r4, #12
   169ba:	055b      	lsls	r3, r3, #21
   169bc:	0b24      	lsrs	r4, r4, #12
   169be:	0d5b      	lsrs	r3, r3, #21
   169c0:	2100      	movs	r1, #0
   169c2:	0010      	movs	r0, r2
   169c4:	0324      	lsls	r4, r4, #12
   169c6:	0d0a      	lsrs	r2, r1, #20
   169c8:	0b24      	lsrs	r4, r4, #12
   169ca:	0512      	lsls	r2, r2, #20
   169cc:	4322      	orrs	r2, r4
   169ce:	4c10      	ldr	r4, [pc, #64]	; (16a10 <__aeabi_i2d+0x80>)
   169d0:	051b      	lsls	r3, r3, #20
   169d2:	4022      	ands	r2, r4
   169d4:	4313      	orrs	r3, r2
   169d6:	005b      	lsls	r3, r3, #1
   169d8:	07ed      	lsls	r5, r5, #31
   169da:	085b      	lsrs	r3, r3, #1
   169dc:	432b      	orrs	r3, r5
   169de:	0019      	movs	r1, r3
   169e0:	bd70      	pop	{r4, r5, r6, pc}
   169e2:	0021      	movs	r1, r4
   169e4:	4091      	lsls	r1, r2
   169e6:	000a      	movs	r2, r1
   169e8:	210b      	movs	r1, #11
   169ea:	1a08      	subs	r0, r1, r0
   169ec:	40c4      	lsrs	r4, r0
   169ee:	055b      	lsls	r3, r3, #21
   169f0:	0324      	lsls	r4, r4, #12
   169f2:	0b24      	lsrs	r4, r4, #12
   169f4:	0d5b      	lsrs	r3, r3, #21
   169f6:	e7e3      	b.n	169c0 <__aeabi_i2d+0x30>
   169f8:	2500      	movs	r5, #0
   169fa:	2300      	movs	r3, #0
   169fc:	2400      	movs	r4, #0
   169fe:	2200      	movs	r2, #0
   16a00:	e7de      	b.n	169c0 <__aeabi_i2d+0x30>
   16a02:	46c0      	nop			; (mov r8, r8)
   16a04:	0000041e 	.word	0x0000041e
   16a08:	00000433 	.word	0x00000433
   16a0c:	00000413 	.word	0x00000413
   16a10:	800fffff 	.word	0x800fffff

00016a14 <__aeabi_ui2d>:
   16a14:	b510      	push	{r4, lr}
   16a16:	1e04      	subs	r4, r0, #0
   16a18:	d028      	beq.n	16a6c <__aeabi_ui2d+0x58>
   16a1a:	f000 f90f 	bl	16c3c <__clzsi2>
   16a1e:	4b15      	ldr	r3, [pc, #84]	; (16a74 <__aeabi_ui2d+0x60>)
   16a20:	4a15      	ldr	r2, [pc, #84]	; (16a78 <__aeabi_ui2d+0x64>)
   16a22:	1a1b      	subs	r3, r3, r0
   16a24:	1ad2      	subs	r2, r2, r3
   16a26:	2a1f      	cmp	r2, #31
   16a28:	dd15      	ble.n	16a56 <__aeabi_ui2d+0x42>
   16a2a:	4a14      	ldr	r2, [pc, #80]	; (16a7c <__aeabi_ui2d+0x68>)
   16a2c:	1ad2      	subs	r2, r2, r3
   16a2e:	4094      	lsls	r4, r2
   16a30:	2200      	movs	r2, #0
   16a32:	0324      	lsls	r4, r4, #12
   16a34:	055b      	lsls	r3, r3, #21
   16a36:	0b24      	lsrs	r4, r4, #12
   16a38:	0d5b      	lsrs	r3, r3, #21
   16a3a:	2100      	movs	r1, #0
   16a3c:	0010      	movs	r0, r2
   16a3e:	0324      	lsls	r4, r4, #12
   16a40:	0d0a      	lsrs	r2, r1, #20
   16a42:	0b24      	lsrs	r4, r4, #12
   16a44:	0512      	lsls	r2, r2, #20
   16a46:	4322      	orrs	r2, r4
   16a48:	4c0d      	ldr	r4, [pc, #52]	; (16a80 <__aeabi_ui2d+0x6c>)
   16a4a:	051b      	lsls	r3, r3, #20
   16a4c:	4022      	ands	r2, r4
   16a4e:	4313      	orrs	r3, r2
   16a50:	005b      	lsls	r3, r3, #1
   16a52:	0859      	lsrs	r1, r3, #1
   16a54:	bd10      	pop	{r4, pc}
   16a56:	0021      	movs	r1, r4
   16a58:	4091      	lsls	r1, r2
   16a5a:	000a      	movs	r2, r1
   16a5c:	210b      	movs	r1, #11
   16a5e:	1a08      	subs	r0, r1, r0
   16a60:	40c4      	lsrs	r4, r0
   16a62:	055b      	lsls	r3, r3, #21
   16a64:	0324      	lsls	r4, r4, #12
   16a66:	0b24      	lsrs	r4, r4, #12
   16a68:	0d5b      	lsrs	r3, r3, #21
   16a6a:	e7e6      	b.n	16a3a <__aeabi_ui2d+0x26>
   16a6c:	2300      	movs	r3, #0
   16a6e:	2400      	movs	r4, #0
   16a70:	2200      	movs	r2, #0
   16a72:	e7e2      	b.n	16a3a <__aeabi_ui2d+0x26>
   16a74:	0000041e 	.word	0x0000041e
   16a78:	00000433 	.word	0x00000433
   16a7c:	00000413 	.word	0x00000413
   16a80:	800fffff 	.word	0x800fffff

00016a84 <__aeabi_f2d>:
   16a84:	0041      	lsls	r1, r0, #1
   16a86:	0e09      	lsrs	r1, r1, #24
   16a88:	1c4b      	adds	r3, r1, #1
   16a8a:	b570      	push	{r4, r5, r6, lr}
   16a8c:	b2db      	uxtb	r3, r3
   16a8e:	0246      	lsls	r6, r0, #9
   16a90:	0a75      	lsrs	r5, r6, #9
   16a92:	0fc4      	lsrs	r4, r0, #31
   16a94:	2b01      	cmp	r3, #1
   16a96:	dd14      	ble.n	16ac2 <__aeabi_f2d+0x3e>
   16a98:	23e0      	movs	r3, #224	; 0xe0
   16a9a:	009b      	lsls	r3, r3, #2
   16a9c:	076d      	lsls	r5, r5, #29
   16a9e:	0b36      	lsrs	r6, r6, #12
   16aa0:	18cb      	adds	r3, r1, r3
   16aa2:	2100      	movs	r1, #0
   16aa4:	0d0a      	lsrs	r2, r1, #20
   16aa6:	0028      	movs	r0, r5
   16aa8:	0512      	lsls	r2, r2, #20
   16aaa:	4d1c      	ldr	r5, [pc, #112]	; (16b1c <__aeabi_f2d+0x98>)
   16aac:	4332      	orrs	r2, r6
   16aae:	055b      	lsls	r3, r3, #21
   16ab0:	402a      	ands	r2, r5
   16ab2:	085b      	lsrs	r3, r3, #1
   16ab4:	4313      	orrs	r3, r2
   16ab6:	005b      	lsls	r3, r3, #1
   16ab8:	07e4      	lsls	r4, r4, #31
   16aba:	085b      	lsrs	r3, r3, #1
   16abc:	4323      	orrs	r3, r4
   16abe:	0019      	movs	r1, r3
   16ac0:	bd70      	pop	{r4, r5, r6, pc}
   16ac2:	2900      	cmp	r1, #0
   16ac4:	d114      	bne.n	16af0 <__aeabi_f2d+0x6c>
   16ac6:	2d00      	cmp	r5, #0
   16ac8:	d01e      	beq.n	16b08 <__aeabi_f2d+0x84>
   16aca:	0028      	movs	r0, r5
   16acc:	f000 f8b6 	bl	16c3c <__clzsi2>
   16ad0:	280a      	cmp	r0, #10
   16ad2:	dc1c      	bgt.n	16b0e <__aeabi_f2d+0x8a>
   16ad4:	230b      	movs	r3, #11
   16ad6:	002a      	movs	r2, r5
   16ad8:	1a1b      	subs	r3, r3, r0
   16ada:	40da      	lsrs	r2, r3
   16adc:	0003      	movs	r3, r0
   16ade:	3315      	adds	r3, #21
   16ae0:	409d      	lsls	r5, r3
   16ae2:	4b0f      	ldr	r3, [pc, #60]	; (16b20 <__aeabi_f2d+0x9c>)
   16ae4:	0312      	lsls	r2, r2, #12
   16ae6:	1a1b      	subs	r3, r3, r0
   16ae8:	055b      	lsls	r3, r3, #21
   16aea:	0b16      	lsrs	r6, r2, #12
   16aec:	0d5b      	lsrs	r3, r3, #21
   16aee:	e7d8      	b.n	16aa2 <__aeabi_f2d+0x1e>
   16af0:	2d00      	cmp	r5, #0
   16af2:	d006      	beq.n	16b02 <__aeabi_f2d+0x7e>
   16af4:	0b32      	lsrs	r2, r6, #12
   16af6:	2680      	movs	r6, #128	; 0x80
   16af8:	0336      	lsls	r6, r6, #12
   16afa:	076d      	lsls	r5, r5, #29
   16afc:	4316      	orrs	r6, r2
   16afe:	4b09      	ldr	r3, [pc, #36]	; (16b24 <__aeabi_f2d+0xa0>)
   16b00:	e7cf      	b.n	16aa2 <__aeabi_f2d+0x1e>
   16b02:	4b08      	ldr	r3, [pc, #32]	; (16b24 <__aeabi_f2d+0xa0>)
   16b04:	2600      	movs	r6, #0
   16b06:	e7cc      	b.n	16aa2 <__aeabi_f2d+0x1e>
   16b08:	2300      	movs	r3, #0
   16b0a:	2600      	movs	r6, #0
   16b0c:	e7c9      	b.n	16aa2 <__aeabi_f2d+0x1e>
   16b0e:	0003      	movs	r3, r0
   16b10:	002a      	movs	r2, r5
   16b12:	3b0b      	subs	r3, #11
   16b14:	409a      	lsls	r2, r3
   16b16:	2500      	movs	r5, #0
   16b18:	e7e3      	b.n	16ae2 <__aeabi_f2d+0x5e>
   16b1a:	46c0      	nop			; (mov r8, r8)
   16b1c:	800fffff 	.word	0x800fffff
   16b20:	00000389 	.word	0x00000389
   16b24:	000007ff 	.word	0x000007ff

00016b28 <__aeabi_d2f>:
   16b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b2a:	004c      	lsls	r4, r1, #1
   16b2c:	0d64      	lsrs	r4, r4, #21
   16b2e:	030b      	lsls	r3, r1, #12
   16b30:	1c62      	adds	r2, r4, #1
   16b32:	0f45      	lsrs	r5, r0, #29
   16b34:	0a5b      	lsrs	r3, r3, #9
   16b36:	0552      	lsls	r2, r2, #21
   16b38:	432b      	orrs	r3, r5
   16b3a:	0fc9      	lsrs	r1, r1, #31
   16b3c:	00c5      	lsls	r5, r0, #3
   16b3e:	0d52      	lsrs	r2, r2, #21
   16b40:	2a01      	cmp	r2, #1
   16b42:	dd28      	ble.n	16b96 <__aeabi_d2f+0x6e>
   16b44:	4a3a      	ldr	r2, [pc, #232]	; (16c30 <__aeabi_d2f+0x108>)
   16b46:	18a6      	adds	r6, r4, r2
   16b48:	2efe      	cmp	r6, #254	; 0xfe
   16b4a:	dc1b      	bgt.n	16b84 <__aeabi_d2f+0x5c>
   16b4c:	2e00      	cmp	r6, #0
   16b4e:	dd3e      	ble.n	16bce <__aeabi_d2f+0xa6>
   16b50:	0180      	lsls	r0, r0, #6
   16b52:	0002      	movs	r2, r0
   16b54:	1e50      	subs	r0, r2, #1
   16b56:	4182      	sbcs	r2, r0
   16b58:	0f6d      	lsrs	r5, r5, #29
   16b5a:	432a      	orrs	r2, r5
   16b5c:	00db      	lsls	r3, r3, #3
   16b5e:	4313      	orrs	r3, r2
   16b60:	075a      	lsls	r2, r3, #29
   16b62:	d004      	beq.n	16b6e <__aeabi_d2f+0x46>
   16b64:	220f      	movs	r2, #15
   16b66:	401a      	ands	r2, r3
   16b68:	2a04      	cmp	r2, #4
   16b6a:	d000      	beq.n	16b6e <__aeabi_d2f+0x46>
   16b6c:	3304      	adds	r3, #4
   16b6e:	2280      	movs	r2, #128	; 0x80
   16b70:	04d2      	lsls	r2, r2, #19
   16b72:	401a      	ands	r2, r3
   16b74:	d05a      	beq.n	16c2c <__aeabi_d2f+0x104>
   16b76:	3601      	adds	r6, #1
   16b78:	2eff      	cmp	r6, #255	; 0xff
   16b7a:	d003      	beq.n	16b84 <__aeabi_d2f+0x5c>
   16b7c:	019b      	lsls	r3, r3, #6
   16b7e:	0a5b      	lsrs	r3, r3, #9
   16b80:	b2f4      	uxtb	r4, r6
   16b82:	e001      	b.n	16b88 <__aeabi_d2f+0x60>
   16b84:	24ff      	movs	r4, #255	; 0xff
   16b86:	2300      	movs	r3, #0
   16b88:	0258      	lsls	r0, r3, #9
   16b8a:	05e4      	lsls	r4, r4, #23
   16b8c:	0a40      	lsrs	r0, r0, #9
   16b8e:	07c9      	lsls	r1, r1, #31
   16b90:	4320      	orrs	r0, r4
   16b92:	4308      	orrs	r0, r1
   16b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b96:	2c00      	cmp	r4, #0
   16b98:	d007      	beq.n	16baa <__aeabi_d2f+0x82>
   16b9a:	431d      	orrs	r5, r3
   16b9c:	d0f2      	beq.n	16b84 <__aeabi_d2f+0x5c>
   16b9e:	2080      	movs	r0, #128	; 0x80
   16ba0:	00db      	lsls	r3, r3, #3
   16ba2:	0480      	lsls	r0, r0, #18
   16ba4:	4303      	orrs	r3, r0
   16ba6:	26ff      	movs	r6, #255	; 0xff
   16ba8:	e7da      	b.n	16b60 <__aeabi_d2f+0x38>
   16baa:	432b      	orrs	r3, r5
   16bac:	d003      	beq.n	16bb6 <__aeabi_d2f+0x8e>
   16bae:	2305      	movs	r3, #5
   16bb0:	08db      	lsrs	r3, r3, #3
   16bb2:	2cff      	cmp	r4, #255	; 0xff
   16bb4:	d003      	beq.n	16bbe <__aeabi_d2f+0x96>
   16bb6:	025b      	lsls	r3, r3, #9
   16bb8:	0a5b      	lsrs	r3, r3, #9
   16bba:	b2e4      	uxtb	r4, r4
   16bbc:	e7e4      	b.n	16b88 <__aeabi_d2f+0x60>
   16bbe:	2b00      	cmp	r3, #0
   16bc0:	d032      	beq.n	16c28 <__aeabi_d2f+0x100>
   16bc2:	2080      	movs	r0, #128	; 0x80
   16bc4:	03c0      	lsls	r0, r0, #15
   16bc6:	4303      	orrs	r3, r0
   16bc8:	025b      	lsls	r3, r3, #9
   16bca:	0a5b      	lsrs	r3, r3, #9
   16bcc:	e7dc      	b.n	16b88 <__aeabi_d2f+0x60>
   16bce:	0032      	movs	r2, r6
   16bd0:	3217      	adds	r2, #23
   16bd2:	db14      	blt.n	16bfe <__aeabi_d2f+0xd6>
   16bd4:	2280      	movs	r2, #128	; 0x80
   16bd6:	271e      	movs	r7, #30
   16bd8:	0412      	lsls	r2, r2, #16
   16bda:	4313      	orrs	r3, r2
   16bdc:	1bbf      	subs	r7, r7, r6
   16bde:	2f1f      	cmp	r7, #31
   16be0:	dc0f      	bgt.n	16c02 <__aeabi_d2f+0xda>
   16be2:	4a14      	ldr	r2, [pc, #80]	; (16c34 <__aeabi_d2f+0x10c>)
   16be4:	4694      	mov	ip, r2
   16be6:	4464      	add	r4, ip
   16be8:	002a      	movs	r2, r5
   16bea:	40a5      	lsls	r5, r4
   16bec:	002e      	movs	r6, r5
   16bee:	40a3      	lsls	r3, r4
   16bf0:	1e75      	subs	r5, r6, #1
   16bf2:	41ae      	sbcs	r6, r5
   16bf4:	40fa      	lsrs	r2, r7
   16bf6:	4333      	orrs	r3, r6
   16bf8:	4313      	orrs	r3, r2
   16bfa:	2600      	movs	r6, #0
   16bfc:	e7b0      	b.n	16b60 <__aeabi_d2f+0x38>
   16bfe:	2400      	movs	r4, #0
   16c00:	e7d5      	b.n	16bae <__aeabi_d2f+0x86>
   16c02:	2202      	movs	r2, #2
   16c04:	4252      	negs	r2, r2
   16c06:	1b96      	subs	r6, r2, r6
   16c08:	001a      	movs	r2, r3
   16c0a:	40f2      	lsrs	r2, r6
   16c0c:	2f20      	cmp	r7, #32
   16c0e:	d009      	beq.n	16c24 <__aeabi_d2f+0xfc>
   16c10:	4809      	ldr	r0, [pc, #36]	; (16c38 <__aeabi_d2f+0x110>)
   16c12:	4684      	mov	ip, r0
   16c14:	4464      	add	r4, ip
   16c16:	40a3      	lsls	r3, r4
   16c18:	432b      	orrs	r3, r5
   16c1a:	1e5d      	subs	r5, r3, #1
   16c1c:	41ab      	sbcs	r3, r5
   16c1e:	2600      	movs	r6, #0
   16c20:	4313      	orrs	r3, r2
   16c22:	e79d      	b.n	16b60 <__aeabi_d2f+0x38>
   16c24:	2300      	movs	r3, #0
   16c26:	e7f7      	b.n	16c18 <__aeabi_d2f+0xf0>
   16c28:	2300      	movs	r3, #0
   16c2a:	e7ad      	b.n	16b88 <__aeabi_d2f+0x60>
   16c2c:	0034      	movs	r4, r6
   16c2e:	e7bf      	b.n	16bb0 <__aeabi_d2f+0x88>
   16c30:	fffffc80 	.word	0xfffffc80
   16c34:	fffffc82 	.word	0xfffffc82
   16c38:	fffffca2 	.word	0xfffffca2

00016c3c <__clzsi2>:
   16c3c:	211c      	movs	r1, #28
   16c3e:	2301      	movs	r3, #1
   16c40:	041b      	lsls	r3, r3, #16
   16c42:	4298      	cmp	r0, r3
   16c44:	d301      	bcc.n	16c4a <__clzsi2+0xe>
   16c46:	0c00      	lsrs	r0, r0, #16
   16c48:	3910      	subs	r1, #16
   16c4a:	0a1b      	lsrs	r3, r3, #8
   16c4c:	4298      	cmp	r0, r3
   16c4e:	d301      	bcc.n	16c54 <__clzsi2+0x18>
   16c50:	0a00      	lsrs	r0, r0, #8
   16c52:	3908      	subs	r1, #8
   16c54:	091b      	lsrs	r3, r3, #4
   16c56:	4298      	cmp	r0, r3
   16c58:	d301      	bcc.n	16c5e <__clzsi2+0x22>
   16c5a:	0900      	lsrs	r0, r0, #4
   16c5c:	3904      	subs	r1, #4
   16c5e:	a202      	add	r2, pc, #8	; (adr r2, 16c68 <__clzsi2+0x2c>)
   16c60:	5c10      	ldrb	r0, [r2, r0]
   16c62:	1840      	adds	r0, r0, r1
   16c64:	4770      	bx	lr
   16c66:	46c0      	nop			; (mov r8, r8)
   16c68:	02020304 	.word	0x02020304
   16c6c:	01010101 	.word	0x01010101
	...

00016c78 <__errno>:
   16c78:	4b01      	ldr	r3, [pc, #4]	; (16c80 <__errno+0x8>)
   16c7a:	6818      	ldr	r0, [r3, #0]
   16c7c:	4770      	bx	lr
   16c7e:	46c0      	nop			; (mov r8, r8)
   16c80:	200000e8 	.word	0x200000e8

00016c84 <__libc_init_array>:
   16c84:	b570      	push	{r4, r5, r6, lr}
   16c86:	2600      	movs	r6, #0
   16c88:	4d0c      	ldr	r5, [pc, #48]	; (16cbc <__libc_init_array+0x38>)
   16c8a:	4c0d      	ldr	r4, [pc, #52]	; (16cc0 <__libc_init_array+0x3c>)
   16c8c:	1b64      	subs	r4, r4, r5
   16c8e:	10a4      	asrs	r4, r4, #2
   16c90:	42a6      	cmp	r6, r4
   16c92:	d109      	bne.n	16ca8 <__libc_init_array+0x24>
   16c94:	2600      	movs	r6, #0
   16c96:	f000 fd7f 	bl	17798 <_init>
   16c9a:	4d0a      	ldr	r5, [pc, #40]	; (16cc4 <__libc_init_array+0x40>)
   16c9c:	4c0a      	ldr	r4, [pc, #40]	; (16cc8 <__libc_init_array+0x44>)
   16c9e:	1b64      	subs	r4, r4, r5
   16ca0:	10a4      	asrs	r4, r4, #2
   16ca2:	42a6      	cmp	r6, r4
   16ca4:	d105      	bne.n	16cb2 <__libc_init_array+0x2e>
   16ca6:	bd70      	pop	{r4, r5, r6, pc}
   16ca8:	00b3      	lsls	r3, r6, #2
   16caa:	58eb      	ldr	r3, [r5, r3]
   16cac:	4798      	blx	r3
   16cae:	3601      	adds	r6, #1
   16cb0:	e7ee      	b.n	16c90 <__libc_init_array+0xc>
   16cb2:	00b3      	lsls	r3, r6, #2
   16cb4:	58eb      	ldr	r3, [r5, r3]
   16cb6:	4798      	blx	r3
   16cb8:	3601      	adds	r6, #1
   16cba:	e7f2      	b.n	16ca2 <__libc_init_array+0x1e>
   16cbc:	000177a4 	.word	0x000177a4
   16cc0:	000177a4 	.word	0x000177a4
   16cc4:	000177a4 	.word	0x000177a4
   16cc8:	000177a8 	.word	0x000177a8

00016ccc <memcpy>:
   16ccc:	2300      	movs	r3, #0
   16cce:	b510      	push	{r4, lr}
   16cd0:	429a      	cmp	r2, r3
   16cd2:	d100      	bne.n	16cd6 <memcpy+0xa>
   16cd4:	bd10      	pop	{r4, pc}
   16cd6:	5ccc      	ldrb	r4, [r1, r3]
   16cd8:	54c4      	strb	r4, [r0, r3]
   16cda:	3301      	adds	r3, #1
   16cdc:	e7f8      	b.n	16cd0 <memcpy+0x4>

00016cde <memset>:
   16cde:	0003      	movs	r3, r0
   16ce0:	1882      	adds	r2, r0, r2
   16ce2:	4293      	cmp	r3, r2
   16ce4:	d100      	bne.n	16ce8 <memset+0xa>
   16ce6:	4770      	bx	lr
   16ce8:	7019      	strb	r1, [r3, #0]
   16cea:	3301      	adds	r3, #1
   16cec:	e7f9      	b.n	16ce2 <memset+0x4>
   16cee:	0000      	movs	r0, r0
   16cf0:	00000002 	.word	0x00000002
   16cf4:	00000003 	.word	0x00000003
   16cf8:	00000028 	.word	0x00000028
   16cfc:	00000029 	.word	0x00000029
   16d00:	00000004 	.word	0x00000004
   16d04:	00000005 	.word	0x00000005
   16d08:	00000006 	.word	0x00000006
   16d0c:	00000007 	.word	0x00000007
   16d10:	0000ffff 	.word	0x0000ffff
   16d14:	0000ffff 	.word	0x0000ffff
   16d18:	00000022 	.word	0x00000022
   16d1c:	00000023 	.word	0x00000023
   16d20:	0000ffff 	.word	0x0000ffff
   16d24:	0000ffff 	.word	0x0000ffff
   16d28:	0000ffff 	.word	0x0000ffff
   16d2c:	0000ffff 	.word	0x0000ffff
   16d30:	00000008 	.word	0x00000008
   16d34:	00000009 	.word	0x00000009
   16d38:	0000000a 	.word	0x0000000a
   16d3c:	0000000b 	.word	0x0000000b
   16d40:	000024da 	.word	0x000024da
   16d44:	000024e0 	.word	0x000024e0
   16d48:	000024e0 	.word	0x000024e0
   16d4c:	000024e0 	.word	0x000024e0
   16d50:	000024e0 	.word	0x000024e0
   16d54:	000024e0 	.word	0x000024e0
   16d58:	000024e0 	.word	0x000024e0
   16d5c:	000024e0 	.word	0x000024e0
   16d60:	000024e0 	.word	0x000024e0
   16d64:	000024e0 	.word	0x000024e0
   16d68:	000024e0 	.word	0x000024e0
   16d6c:	000024e0 	.word	0x000024e0
   16d70:	000024e0 	.word	0x000024e0
   16d74:	000024e0 	.word	0x000024e0
   16d78:	000024e0 	.word	0x000024e0
   16d7c:	000024e0 	.word	0x000024e0
   16d80:	000024b8 	.word	0x000024b8
   16d84:	000024e0 	.word	0x000024e0
   16d88:	000024e0 	.word	0x000024e0
   16d8c:	000024e0 	.word	0x000024e0
   16d90:	000024e0 	.word	0x000024e0
   16d94:	000024e0 	.word	0x000024e0
   16d98:	000024e0 	.word	0x000024e0
   16d9c:	000024e0 	.word	0x000024e0
   16da0:	000024e0 	.word	0x000024e0
   16da4:	000024e0 	.word	0x000024e0
   16da8:	000024e0 	.word	0x000024e0
   16dac:	000024e0 	.word	0x000024e0
   16db0:	000024e0 	.word	0x000024e0
   16db4:	000024e0 	.word	0x000024e0
   16db8:	000024e0 	.word	0x000024e0
   16dbc:	000024e0 	.word	0x000024e0
   16dc0:	000024d4 	.word	0x000024d4
   16dc4:	000024e0 	.word	0x000024e0
   16dc8:	000024e0 	.word	0x000024e0
   16dcc:	000024e0 	.word	0x000024e0
   16dd0:	000024e0 	.word	0x000024e0
   16dd4:	000024e0 	.word	0x000024e0
   16dd8:	000024e0 	.word	0x000024e0
   16ddc:	000024e0 	.word	0x000024e0
   16de0:	000024e0 	.word	0x000024e0
   16de4:	000024e0 	.word	0x000024e0
   16de8:	000024e0 	.word	0x000024e0
   16dec:	000024e0 	.word	0x000024e0
   16df0:	000024e0 	.word	0x000024e0
   16df4:	000024e0 	.word	0x000024e0
   16df8:	000024e0 	.word	0x000024e0
   16dfc:	000024e0 	.word	0x000024e0
   16e00:	000024ce 	.word	0x000024ce
   16e04:	00002476 	.word	0x00002476
   16e08:	0000248c 	.word	0x0000248c
   16e0c:	000024a2 	.word	0x000024a2
   16e10:	0000245c 	.word	0x0000245c
   16e14:	00002c64 	.word	0x00002c64
   16e18:	00002c64 	.word	0x00002c64
   16e1c:	00002c58 	.word	0x00002c58
   16e20:	00002c64 	.word	0x00002c64
   16e24:	00002c58 	.word	0x00002c58
   16e28:	00002c32 	.word	0x00002c32
   16e2c:	00002c32 	.word	0x00002c32
   16e30:	00002c64 	.word	0x00002c64
   16e34:	00002c64 	.word	0x00002c64
   16e38:	00002c64 	.word	0x00002c64
   16e3c:	00002c64 	.word	0x00002c64
   16e40:	00002c64 	.word	0x00002c64
   16e44:	00002c64 	.word	0x00002c64
   16e48:	00002c64 	.word	0x00002c64
   16e4c:	00002c64 	.word	0x00002c64
   16e50:	00002c64 	.word	0x00002c64
   16e54:	00002c64 	.word	0x00002c64
   16e58:	00002c64 	.word	0x00002c64
   16e5c:	00002c64 	.word	0x00002c64
   16e60:	00002c64 	.word	0x00002c64
   16e64:	00002c64 	.word	0x00002c64
   16e68:	00002c64 	.word	0x00002c64
   16e6c:	00002c64 	.word	0x00002c64
   16e70:	00002c64 	.word	0x00002c64
   16e74:	00002c64 	.word	0x00002c64
   16e78:	00002c64 	.word	0x00002c64
   16e7c:	00002c64 	.word	0x00002c64
   16e80:	00002c64 	.word	0x00002c64
   16e84:	00002c64 	.word	0x00002c64
   16e88:	00002c64 	.word	0x00002c64
   16e8c:	00002c64 	.word	0x00002c64
   16e90:	00002c64 	.word	0x00002c64
   16e94:	00002c64 	.word	0x00002c64
   16e98:	00002c64 	.word	0x00002c64
   16e9c:	00002c64 	.word	0x00002c64
   16ea0:	00002c64 	.word	0x00002c64
   16ea4:	00002c64 	.word	0x00002c64
   16ea8:	00002c64 	.word	0x00002c64
   16eac:	00002c64 	.word	0x00002c64
   16eb0:	00002c64 	.word	0x00002c64
   16eb4:	00002c64 	.word	0x00002c64
   16eb8:	00002c64 	.word	0x00002c64
   16ebc:	00002c64 	.word	0x00002c64
   16ec0:	00002c64 	.word	0x00002c64
   16ec4:	00002c64 	.word	0x00002c64
   16ec8:	00002c64 	.word	0x00002c64
   16ecc:	00002c64 	.word	0x00002c64
   16ed0:	00002c64 	.word	0x00002c64
   16ed4:	00002c64 	.word	0x00002c64
   16ed8:	00002c64 	.word	0x00002c64
   16edc:	00002c64 	.word	0x00002c64
   16ee0:	00002c64 	.word	0x00002c64
   16ee4:	00002c64 	.word	0x00002c64
   16ee8:	00002c64 	.word	0x00002c64
   16eec:	00002c64 	.word	0x00002c64
   16ef0:	00002c64 	.word	0x00002c64
   16ef4:	00002c64 	.word	0x00002c64
   16ef8:	00002c64 	.word	0x00002c64
   16efc:	00002c64 	.word	0x00002c64
   16f00:	00002c64 	.word	0x00002c64
   16f04:	00002c64 	.word	0x00002c64
   16f08:	00002c64 	.word	0x00002c64
   16f0c:	00002c64 	.word	0x00002c64
   16f10:	00002c64 	.word	0x00002c64
   16f14:	00002c58 	.word	0x00002c58
   16f18:	00002c58 	.word	0x00002c58
   16f1c:	00002c6e 	.word	0x00002c6e
   16f20:	00002c6e 	.word	0x00002c6e
   16f24:	00002c6e 	.word	0x00002c6e
   16f28:	00002c6e 	.word	0x00002c6e

00016f2c <_tcc_intflag>:
   16f2c:	00000001 00000002 00000004 00000008     ................
   16f3c:	00001000 00002000 00004000 00008000     ..... ...@......
   16f4c:	00010000 00020000 00040000 00080000     ................

00016f5c <tcc_modules>:
   16f5c:	42002000 42002400 42002800              . .B.$.B.(.B

00016f68 <_tcc_gclk_ids>:
   16f68:	001b1a1a                                ....

00016f6c <_tcc_apbcmasks>:
   16f6c:	00000100 00000200 00000400              ............

00016f78 <_tcc_maxs>:
   16f78:	00ffffff 00ffffff 0000ffff              ............

00016f84 <_tcc_cc_nums>:
   16f84:	00020204                                ....

00016f88 <_tcc_ow_nums>:
   16f88:	00020408 42002c00 42003000 42003400     .....,.B.0.B.4.B
   16f98:	001c1c1b 10000800 00002000 42000800     ......... .....B
   16fa8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   16fb8:	42001c00 0c0b0a09 00000e0d 000073ba     ...B.........s..
   16fc8:	00007432 00007432 000073d8 000073d2     2t..2t...s...s..
   16fd8:	000073de 000073c0 000073e4 00007418     .s...s...s...t..
   16fe8:	000075d8 00007628 00007628 00007624     .u..(v..(v..$v..
   16ff8:	000075ca 000075ea 000075ba 000075fc     .u...u...u...u..
   17008:	0000760e 41744545 50524f4d 456d752e     .v..EEtAMORP.umE

00017018 <crc16_tab>:
   17018:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   17028:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   17038:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   17048:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   17058:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   17068:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   17078:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   17088:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   17098:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   170a8:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   170b8:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   170c8:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   170d8:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   170e8:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   170f8:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   17108:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   17118:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   17128:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   17138:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   17148:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   17158:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   17168:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   17178:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   17188:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   17198:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   171a8:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   171b8:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   171c8:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   171d8:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   171e8:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   171f8:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   17208:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....
   17218:	0000b7b0 0000b826 0000b868 0000b87c     ....&...h...|...
   17228:	0000b8d0 0000d770 0000d770 0000d7e6     ....p...p.......
   17238:	0000d7e6 0000d808 0000d874 0000d820     ........t... ...
   17248:	0000d820 0000d830 0000d83c 0000d848      ...0...<...H...
   17258:	0000d85e 07020100 0a090701 00000001     ^...............
   17268:	000000ff 00000303 00000002 00ff00ff     ................
   17278:	0000ff00 00000003 00000000 3f400000     ..............@?
   17288:	00000000 3f000000 3f000000 00000000     .......?...?....
   17298:	3f000000 3f000000 3f000000 00000000     ...?...?...?....
   172a8:	3e800000 3f000000 3f000000 3f000000     ...>...?...?...?
   172b8:	3f000000 3f000000 3f000000 3f000000     ...?...?...?...?
   172c8:	422b5441 34445541 00000000 00002580     AT+BAUD4.....%..
   172d8:	00004b00 00009600 0000e100 0001c200     .K..............
   172e8:	4e2b5441 54454d41 61546c65 00006c69     AT+NAMETelTail..
   172f8:	502b5441 3345574f 00000000 522b5441     AT+POWE3....AT+R
   17308:	54455345 00000000 00000030 0000fab4     ESET....0.......
   17318:	0000fab4 0000ef6e 0000f0ce 0000f15e     ....n.......^...
   17328:	0000f490 0000fab4 0000fab4 0000fab4     ................
   17338:	0000f5d8 0000f78a 0000fab4 0000f87c     ............|...
   17348:	0000f09e 0000f0b4 0000efcc 0000efb2     ................
   17358:	0000faae 0000faae 0000faae 0000faae     ................
   17368:	0000faae 0000faae 0000faae 0000faae     ................
   17378:	0000faae 0000faae 0000faae 0000faae     ................
   17388:	0000faae 0000faae 0000faae 0000faae     ................
   17398:	0000faae 0000faae 0000faae 0000faae     ................
   173a8:	0000faae 0000faae 0000faae 0000faae     ................
   173b8:	0000faae 0000faae 0000faae 0000faae     ................
   173c8:	0000faae 0000faae 0000faae 0000ef9c     ................
   173d8:	0000faae 0000faae 0000faae 0000faae     ................
   173e8:	0000faae 0000faae 0000faae 0000faae     ................
   173f8:	0000faae 0000faae 0000faae 0000faae     ................
   17408:	0000faae 0000faae 0000faae 0000ef86     ................
   17418:	0000faae 0000faae 0000faae 0000f022     ............"...
   17428:	0000f000 0000efe2 0000faae 0000faae     ................
   17438:	0000faae 0000faae 0000faae 0000faae     ................
   17448:	0000faae 0000faae 0000faae 0000faae     ................
   17458:	0000faae 0000faae 0000faae 0000faae     ................
   17468:	0000faae 0000faae 0000faae 0000faae     ................
   17478:	0000faae 0000faae 0000faae 0000faae     ................
   17488:	0000f088 0000f072 0000f05c 0000faae     ....r...\.......
   17498:	0000f046 0000f426 0000f456 0000fab2     F...&...V.......
   174a8:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   174b8:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   174c8:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   174d8:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   174e8:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   174f8:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   17508:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   17518:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   17528:	0000f388 0000f308 0000fab2 0000f1f6     ................
   17538:	0000fab2 0000f176 0000fab2 0000fab2     ....v...........
   17548:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   17558:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   17568:	0000fab2 0000fab2 0000fab2 0000fab2     ................
   17578:	0000fab2 0000fab2 0000fab2 0000f408     ................
   17588:	00011dc2 00011dd2 00011e0a 00011e42     ............B...
   17598:	00011e68 00011ea0 00011ed8 00011f10     h...............
   175a8:	00011f88 00011f9a 00011fda 0001201a     ............. ..
   175b8:	00012100 0001213c 00012188 000121c8     .!..<!...!...!..
   175c8:	00012208 000122d0 000122fc 00012484     ."..."..."...$..
   175d8:	00012556 000127ac 000129fc 00012bea     V%...'...)...+..
   175e8:	00012d5c 00012e9c 00013022 0001321c     \-......"0...2..
   175f8:	0001463c 0001460c 0001461e 00014560     <F...F...F..`E..
   17608:	0001461e 00014602 0001461e 00014560     .F...F...F..`E..
   17618:	0001460c 0001460c 00014602 00014560     .F...F...F..`E..
   17628:	00014568 00014568 00014568 00014624     hE..hE..hE..$F..
   17638:	0001460c 0001460c 000145e0 000146c4     .F...F...E...F..
   17648:	000145e0 00014602 000145e0 000146c4     .E...F...E...F..
   17658:	0001460c 0001460c 00014602 000146c4     .F...F...F...F..
   17668:	00014568 00014568 00014568 000146ce     hE..hE..hE...F..
   17678:	000149bc 0001490c 0001490c 0001490a     .I...I...I...I..
   17688:	000149ae 000149ae 000149a4 0001490a     .I...I...I...I..
   17698:	000149ae 000149a4 000149ae 0001490a     .I...I...I...I..
   176a8:	000149b4 000149b4 000149b4 00014a44     .I...I...I..DJ..
   176b8:	0001578c 0001576e 00015728 00015646     .W..nW..(W..FV..
   176c8:	00015728 00015760 00015728 00015646     (W..`W..(W..FV..
   176d8:	0001576e 0001576e 00015760 00015646     nW..nW..`W..FV..
   176e8:	0001563e 0001563e 0001563e 000159a4     >V..>V..>V...Y..
   176f8:	00015fec 00015eac 00015eac 00015ea8     ._...^...^...^..
   17708:	00015fc4 00015fc4 00015fb6 00015ea8     ._..._..._...^..
   17718:	00015fc4 00015fb6 00015fc4 00015ea8     ._..._..._...^..
   17728:	00015fcc 00015fcc 00015fcc 000161d0     ._..._..._...a..

00017738 <__sf_fake_stderr>:
	...

00017758 <__sf_fake_stdin>:
	...

00017778 <__sf_fake_stdout>:
	...

00017798 <_init>:
   17798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1779a:	46c0      	nop			; (mov r8, r8)
   1779c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1779e:	bc08      	pop	{r3}
   177a0:	469e      	mov	lr, r3
   177a2:	4770      	bx	lr

000177a4 <__init_array_start>:
   177a4:	000020dd 	.word	0x000020dd

000177a8 <_fini>:
   177a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   177aa:	46c0      	nop			; (mov r8, r8)
   177ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   177ae:	bc08      	pop	{r3}
   177b0:	469e      	mov	lr, r3
   177b2:	4770      	bx	lr

000177b4 <__fini_array_start>:
   177b4:	000020b5 	.word	0x000020b5
